
usb2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f1e8  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000e2c  0800f3cc  0800f3cc  0001f3cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080101f8  080101f8  00030114  2**0
                  CONTENTS
  4 .ARM          00000008  080101f8  080101f8  000201f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010200  08010200  00030114  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010200  08010200  00020200  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08010204  08010204  00020204  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000114  20000000  08010208  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001574  20000114  0801031c  00030114  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001688  0801031c  00031688  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00030114  2**0
                  CONTENTS, READONLY
 12 .debug_info   00025643  00000000  00000000  0003013d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005952  00000000  00000000  00055780  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000018f0  00000000  00000000  0005b0d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000016d8  00000000  00000000  0005c9c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000880d  00000000  00000000  0005e0a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00020e08  00000000  00000000  000668ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cbf41  00000000  00000000  000876b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001535f6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000717c  00000000  00000000  00153648  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000114 	.word	0x20000114
 8000200:	00000000 	.word	0x00000000
 8000204:	0800f3b4 	.word	0x0800f3b4

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000118 	.word	0x20000118
 8000220:	0800f3b4 	.word	0x0800f3b4

08000224 <__aeabi_uldivmod>:
 8000224:	b953      	cbnz	r3, 800023c <__aeabi_uldivmod+0x18>
 8000226:	b94a      	cbnz	r2, 800023c <__aeabi_uldivmod+0x18>
 8000228:	2900      	cmp	r1, #0
 800022a:	bf08      	it	eq
 800022c:	2800      	cmpeq	r0, #0
 800022e:	bf1c      	itt	ne
 8000230:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000234:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000238:	f000 b976 	b.w	8000528 <__aeabi_idiv0>
 800023c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000240:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000244:	f000 f806 	bl	8000254 <__udivmoddi4>
 8000248:	f8dd e004 	ldr.w	lr, [sp, #4]
 800024c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000250:	b004      	add	sp, #16
 8000252:	4770      	bx	lr

08000254 <__udivmoddi4>:
 8000254:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000258:	9e08      	ldr	r6, [sp, #32]
 800025a:	460d      	mov	r5, r1
 800025c:	4604      	mov	r4, r0
 800025e:	4688      	mov	r8, r1
 8000260:	2b00      	cmp	r3, #0
 8000262:	d14d      	bne.n	8000300 <__udivmoddi4+0xac>
 8000264:	428a      	cmp	r2, r1
 8000266:	4694      	mov	ip, r2
 8000268:	d968      	bls.n	800033c <__udivmoddi4+0xe8>
 800026a:	fab2 f282 	clz	r2, r2
 800026e:	b152      	cbz	r2, 8000286 <__udivmoddi4+0x32>
 8000270:	fa01 f302 	lsl.w	r3, r1, r2
 8000274:	f1c2 0120 	rsb	r1, r2, #32
 8000278:	fa20 f101 	lsr.w	r1, r0, r1
 800027c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000280:	ea41 0803 	orr.w	r8, r1, r3
 8000284:	4094      	lsls	r4, r2
 8000286:	ea4f 411c 	mov.w	r1, ip, lsr #16
 800028a:	fbb8 f7f1 	udiv	r7, r8, r1
 800028e:	fa1f fe8c 	uxth.w	lr, ip
 8000292:	fb01 8817 	mls	r8, r1, r7, r8
 8000296:	fb07 f00e 	mul.w	r0, r7, lr
 800029a:	0c23      	lsrs	r3, r4, #16
 800029c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002a0:	4298      	cmp	r0, r3
 80002a2:	d90a      	bls.n	80002ba <__udivmoddi4+0x66>
 80002a4:	eb1c 0303 	adds.w	r3, ip, r3
 80002a8:	f107 35ff 	add.w	r5, r7, #4294967295	; 0xffffffff
 80002ac:	f080 811e 	bcs.w	80004ec <__udivmoddi4+0x298>
 80002b0:	4298      	cmp	r0, r3
 80002b2:	f240 811b 	bls.w	80004ec <__udivmoddi4+0x298>
 80002b6:	3f02      	subs	r7, #2
 80002b8:	4463      	add	r3, ip
 80002ba:	1a1b      	subs	r3, r3, r0
 80002bc:	fbb3 f0f1 	udiv	r0, r3, r1
 80002c0:	fb01 3310 	mls	r3, r1, r0, r3
 80002c4:	fb00 fe0e 	mul.w	lr, r0, lr
 80002c8:	b2a4      	uxth	r4, r4
 80002ca:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002ce:	45a6      	cmp	lr, r4
 80002d0:	d90a      	bls.n	80002e8 <__udivmoddi4+0x94>
 80002d2:	eb1c 0404 	adds.w	r4, ip, r4
 80002d6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002da:	f080 8109 	bcs.w	80004f0 <__udivmoddi4+0x29c>
 80002de:	45a6      	cmp	lr, r4
 80002e0:	f240 8106 	bls.w	80004f0 <__udivmoddi4+0x29c>
 80002e4:	4464      	add	r4, ip
 80002e6:	3802      	subs	r0, #2
 80002e8:	2100      	movs	r1, #0
 80002ea:	eba4 040e 	sub.w	r4, r4, lr
 80002ee:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002f2:	b11e      	cbz	r6, 80002fc <__udivmoddi4+0xa8>
 80002f4:	2300      	movs	r3, #0
 80002f6:	40d4      	lsrs	r4, r2
 80002f8:	e9c6 4300 	strd	r4, r3, [r6]
 80002fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000300:	428b      	cmp	r3, r1
 8000302:	d908      	bls.n	8000316 <__udivmoddi4+0xc2>
 8000304:	2e00      	cmp	r6, #0
 8000306:	f000 80ee 	beq.w	80004e6 <__udivmoddi4+0x292>
 800030a:	2100      	movs	r1, #0
 800030c:	e9c6 0500 	strd	r0, r5, [r6]
 8000310:	4608      	mov	r0, r1
 8000312:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000316:	fab3 f183 	clz	r1, r3
 800031a:	2900      	cmp	r1, #0
 800031c:	d14a      	bne.n	80003b4 <__udivmoddi4+0x160>
 800031e:	42ab      	cmp	r3, r5
 8000320:	d302      	bcc.n	8000328 <__udivmoddi4+0xd4>
 8000322:	4282      	cmp	r2, r0
 8000324:	f200 80fc 	bhi.w	8000520 <__udivmoddi4+0x2cc>
 8000328:	1a84      	subs	r4, r0, r2
 800032a:	eb65 0303 	sbc.w	r3, r5, r3
 800032e:	2001      	movs	r0, #1
 8000330:	4698      	mov	r8, r3
 8000332:	2e00      	cmp	r6, #0
 8000334:	d0e2      	beq.n	80002fc <__udivmoddi4+0xa8>
 8000336:	e9c6 4800 	strd	r4, r8, [r6]
 800033a:	e7df      	b.n	80002fc <__udivmoddi4+0xa8>
 800033c:	b902      	cbnz	r2, 8000340 <__udivmoddi4+0xec>
 800033e:	deff      	udf	#255	; 0xff
 8000340:	fab2 f282 	clz	r2, r2
 8000344:	2a00      	cmp	r2, #0
 8000346:	f040 8091 	bne.w	800046c <__udivmoddi4+0x218>
 800034a:	eba1 000c 	sub.w	r0, r1, ip
 800034e:	2101      	movs	r1, #1
 8000350:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000354:	fa1f fe8c 	uxth.w	lr, ip
 8000358:	fbb0 f3f7 	udiv	r3, r0, r7
 800035c:	fb07 0013 	mls	r0, r7, r3, r0
 8000360:	0c25      	lsrs	r5, r4, #16
 8000362:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8000366:	fb0e f003 	mul.w	r0, lr, r3
 800036a:	42a8      	cmp	r0, r5
 800036c:	d908      	bls.n	8000380 <__udivmoddi4+0x12c>
 800036e:	eb1c 0505 	adds.w	r5, ip, r5
 8000372:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000376:	d202      	bcs.n	800037e <__udivmoddi4+0x12a>
 8000378:	42a8      	cmp	r0, r5
 800037a:	f200 80ce 	bhi.w	800051a <__udivmoddi4+0x2c6>
 800037e:	4643      	mov	r3, r8
 8000380:	1a2d      	subs	r5, r5, r0
 8000382:	fbb5 f0f7 	udiv	r0, r5, r7
 8000386:	fb07 5510 	mls	r5, r7, r0, r5
 800038a:	fb0e fe00 	mul.w	lr, lr, r0
 800038e:	b2a4      	uxth	r4, r4
 8000390:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000394:	45a6      	cmp	lr, r4
 8000396:	d908      	bls.n	80003aa <__udivmoddi4+0x156>
 8000398:	eb1c 0404 	adds.w	r4, ip, r4
 800039c:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 80003a0:	d202      	bcs.n	80003a8 <__udivmoddi4+0x154>
 80003a2:	45a6      	cmp	lr, r4
 80003a4:	f200 80b6 	bhi.w	8000514 <__udivmoddi4+0x2c0>
 80003a8:	4628      	mov	r0, r5
 80003aa:	eba4 040e 	sub.w	r4, r4, lr
 80003ae:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003b2:	e79e      	b.n	80002f2 <__udivmoddi4+0x9e>
 80003b4:	f1c1 0720 	rsb	r7, r1, #32
 80003b8:	408b      	lsls	r3, r1
 80003ba:	fa22 fc07 	lsr.w	ip, r2, r7
 80003be:	ea4c 0c03 	orr.w	ip, ip, r3
 80003c2:	fa25 fa07 	lsr.w	sl, r5, r7
 80003c6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003ca:	fbba f8f9 	udiv	r8, sl, r9
 80003ce:	fa20 f307 	lsr.w	r3, r0, r7
 80003d2:	fb09 aa18 	mls	sl, r9, r8, sl
 80003d6:	408d      	lsls	r5, r1
 80003d8:	fa1f fe8c 	uxth.w	lr, ip
 80003dc:	431d      	orrs	r5, r3
 80003de:	fa00 f301 	lsl.w	r3, r0, r1
 80003e2:	fb08 f00e 	mul.w	r0, r8, lr
 80003e6:	0c2c      	lsrs	r4, r5, #16
 80003e8:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80003ec:	42a0      	cmp	r0, r4
 80003ee:	fa02 f201 	lsl.w	r2, r2, r1
 80003f2:	d90b      	bls.n	800040c <__udivmoddi4+0x1b8>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003fc:	f080 8088 	bcs.w	8000510 <__udivmoddi4+0x2bc>
 8000400:	42a0      	cmp	r0, r4
 8000402:	f240 8085 	bls.w	8000510 <__udivmoddi4+0x2bc>
 8000406:	f1a8 0802 	sub.w	r8, r8, #2
 800040a:	4464      	add	r4, ip
 800040c:	1a24      	subs	r4, r4, r0
 800040e:	fbb4 f0f9 	udiv	r0, r4, r9
 8000412:	fb09 4410 	mls	r4, r9, r0, r4
 8000416:	fb00 fe0e 	mul.w	lr, r0, lr
 800041a:	b2ad      	uxth	r5, r5
 800041c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000420:	45a6      	cmp	lr, r4
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x1e2>
 8000424:	eb1c 0404 	adds.w	r4, ip, r4
 8000428:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 800042c:	d26c      	bcs.n	8000508 <__udivmoddi4+0x2b4>
 800042e:	45a6      	cmp	lr, r4
 8000430:	d96a      	bls.n	8000508 <__udivmoddi4+0x2b4>
 8000432:	3802      	subs	r0, #2
 8000434:	4464      	add	r4, ip
 8000436:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800043a:	fba0 9502 	umull	r9, r5, r0, r2
 800043e:	eba4 040e 	sub.w	r4, r4, lr
 8000442:	42ac      	cmp	r4, r5
 8000444:	46c8      	mov	r8, r9
 8000446:	46ae      	mov	lr, r5
 8000448:	d356      	bcc.n	80004f8 <__udivmoddi4+0x2a4>
 800044a:	d053      	beq.n	80004f4 <__udivmoddi4+0x2a0>
 800044c:	2e00      	cmp	r6, #0
 800044e:	d069      	beq.n	8000524 <__udivmoddi4+0x2d0>
 8000450:	ebb3 0208 	subs.w	r2, r3, r8
 8000454:	eb64 040e 	sbc.w	r4, r4, lr
 8000458:	fa22 f301 	lsr.w	r3, r2, r1
 800045c:	fa04 f707 	lsl.w	r7, r4, r7
 8000460:	431f      	orrs	r7, r3
 8000462:	40cc      	lsrs	r4, r1
 8000464:	e9c6 7400 	strd	r7, r4, [r6]
 8000468:	2100      	movs	r1, #0
 800046a:	e747      	b.n	80002fc <__udivmoddi4+0xa8>
 800046c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000470:	f1c2 0120 	rsb	r1, r2, #32
 8000474:	fa25 f301 	lsr.w	r3, r5, r1
 8000478:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800047c:	fa20 f101 	lsr.w	r1, r0, r1
 8000480:	4095      	lsls	r5, r2
 8000482:	430d      	orrs	r5, r1
 8000484:	fbb3 f1f7 	udiv	r1, r3, r7
 8000488:	fb07 3311 	mls	r3, r7, r1, r3
 800048c:	fa1f fe8c 	uxth.w	lr, ip
 8000490:	0c28      	lsrs	r0, r5, #16
 8000492:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000496:	fb01 f30e 	mul.w	r3, r1, lr
 800049a:	4283      	cmp	r3, r0
 800049c:	fa04 f402 	lsl.w	r4, r4, r2
 80004a0:	d908      	bls.n	80004b4 <__udivmoddi4+0x260>
 80004a2:	eb1c 0000 	adds.w	r0, ip, r0
 80004a6:	f101 38ff 	add.w	r8, r1, #4294967295	; 0xffffffff
 80004aa:	d22f      	bcs.n	800050c <__udivmoddi4+0x2b8>
 80004ac:	4283      	cmp	r3, r0
 80004ae:	d92d      	bls.n	800050c <__udivmoddi4+0x2b8>
 80004b0:	3902      	subs	r1, #2
 80004b2:	4460      	add	r0, ip
 80004b4:	1ac0      	subs	r0, r0, r3
 80004b6:	fbb0 f3f7 	udiv	r3, r0, r7
 80004ba:	fb07 0013 	mls	r0, r7, r3, r0
 80004be:	b2ad      	uxth	r5, r5
 80004c0:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 80004c4:	fb03 f00e 	mul.w	r0, r3, lr
 80004c8:	42a8      	cmp	r0, r5
 80004ca:	d908      	bls.n	80004de <__udivmoddi4+0x28a>
 80004cc:	eb1c 0505 	adds.w	r5, ip, r5
 80004d0:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80004d4:	d216      	bcs.n	8000504 <__udivmoddi4+0x2b0>
 80004d6:	42a8      	cmp	r0, r5
 80004d8:	d914      	bls.n	8000504 <__udivmoddi4+0x2b0>
 80004da:	3b02      	subs	r3, #2
 80004dc:	4465      	add	r5, ip
 80004de:	1a28      	subs	r0, r5, r0
 80004e0:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004e4:	e738      	b.n	8000358 <__udivmoddi4+0x104>
 80004e6:	4631      	mov	r1, r6
 80004e8:	4630      	mov	r0, r6
 80004ea:	e707      	b.n	80002fc <__udivmoddi4+0xa8>
 80004ec:	462f      	mov	r7, r5
 80004ee:	e6e4      	b.n	80002ba <__udivmoddi4+0x66>
 80004f0:	4618      	mov	r0, r3
 80004f2:	e6f9      	b.n	80002e8 <__udivmoddi4+0x94>
 80004f4:	454b      	cmp	r3, r9
 80004f6:	d2a9      	bcs.n	800044c <__udivmoddi4+0x1f8>
 80004f8:	ebb9 0802 	subs.w	r8, r9, r2
 80004fc:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000500:	3801      	subs	r0, #1
 8000502:	e7a3      	b.n	800044c <__udivmoddi4+0x1f8>
 8000504:	4643      	mov	r3, r8
 8000506:	e7ea      	b.n	80004de <__udivmoddi4+0x28a>
 8000508:	4628      	mov	r0, r5
 800050a:	e794      	b.n	8000436 <__udivmoddi4+0x1e2>
 800050c:	4641      	mov	r1, r8
 800050e:	e7d1      	b.n	80004b4 <__udivmoddi4+0x260>
 8000510:	46d0      	mov	r8, sl
 8000512:	e77b      	b.n	800040c <__udivmoddi4+0x1b8>
 8000514:	4464      	add	r4, ip
 8000516:	3802      	subs	r0, #2
 8000518:	e747      	b.n	80003aa <__udivmoddi4+0x156>
 800051a:	3b02      	subs	r3, #2
 800051c:	4465      	add	r5, ip
 800051e:	e72f      	b.n	8000380 <__udivmoddi4+0x12c>
 8000520:	4608      	mov	r0, r1
 8000522:	e706      	b.n	8000332 <__udivmoddi4+0xde>
 8000524:	4631      	mov	r1, r6
 8000526:	e6e9      	b.n	80002fc <__udivmoddi4+0xa8>

08000528 <__aeabi_idiv0>:
 8000528:	4770      	bx	lr
 800052a:	bf00      	nop

0800052c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	b088      	sub	sp, #32
 8000530:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000532:	f107 0310 	add.w	r3, r7, #16
 8000536:	2200      	movs	r2, #0
 8000538:	601a      	str	r2, [r3, #0]
 800053a:	605a      	str	r2, [r3, #4]
 800053c:	609a      	str	r2, [r3, #8]
 800053e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000540:	4b1e      	ldr	r3, [pc, #120]	; (80005bc <MX_GPIO_Init+0x90>)
 8000542:	699b      	ldr	r3, [r3, #24]
 8000544:	4a1d      	ldr	r2, [pc, #116]	; (80005bc <MX_GPIO_Init+0x90>)
 8000546:	f043 0320 	orr.w	r3, r3, #32
 800054a:	6193      	str	r3, [r2, #24]
 800054c:	4b1b      	ldr	r3, [pc, #108]	; (80005bc <MX_GPIO_Init+0x90>)
 800054e:	699b      	ldr	r3, [r3, #24]
 8000550:	f003 0320 	and.w	r3, r3, #32
 8000554:	60fb      	str	r3, [r7, #12]
 8000556:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000558:	4b18      	ldr	r3, [pc, #96]	; (80005bc <MX_GPIO_Init+0x90>)
 800055a:	699b      	ldr	r3, [r3, #24]
 800055c:	4a17      	ldr	r2, [pc, #92]	; (80005bc <MX_GPIO_Init+0x90>)
 800055e:	f043 0304 	orr.w	r3, r3, #4
 8000562:	6193      	str	r3, [r2, #24]
 8000564:	4b15      	ldr	r3, [pc, #84]	; (80005bc <MX_GPIO_Init+0x90>)
 8000566:	699b      	ldr	r3, [r3, #24]
 8000568:	f003 0304 	and.w	r3, r3, #4
 800056c:	60bb      	str	r3, [r7, #8]
 800056e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000570:	4b12      	ldr	r3, [pc, #72]	; (80005bc <MX_GPIO_Init+0x90>)
 8000572:	699b      	ldr	r3, [r3, #24]
 8000574:	4a11      	ldr	r2, [pc, #68]	; (80005bc <MX_GPIO_Init+0x90>)
 8000576:	f043 0310 	orr.w	r3, r3, #16
 800057a:	6193      	str	r3, [r2, #24]
 800057c:	4b0f      	ldr	r3, [pc, #60]	; (80005bc <MX_GPIO_Init+0x90>)
 800057e:	699b      	ldr	r3, [r3, #24]
 8000580:	f003 0310 	and.w	r3, r3, #16
 8000584:	607b      	str	r3, [r7, #4]
 8000586:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8000588:	2200      	movs	r2, #0
 800058a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800058e:	480c      	ldr	r0, [pc, #48]	; (80005c0 <MX_GPIO_Init+0x94>)
 8000590:	f000 ff18 	bl	80013c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000594:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000598:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800059a:	2301      	movs	r3, #1
 800059c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800059e:	2300      	movs	r3, #0
 80005a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005a2:	2302      	movs	r3, #2
 80005a4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005a6:	f107 0310 	add.w	r3, r7, #16
 80005aa:	4619      	mov	r1, r3
 80005ac:	4804      	ldr	r0, [pc, #16]	; (80005c0 <MX_GPIO_Init+0x94>)
 80005ae:	f000 fd85 	bl	80010bc <HAL_GPIO_Init>

}
 80005b2:	bf00      	nop
 80005b4:	3720      	adds	r7, #32
 80005b6:	46bd      	mov	sp, r7
 80005b8:	bd80      	pop	{r7, pc}
 80005ba:	bf00      	nop
 80005bc:	40021000 	.word	0x40021000
 80005c0:	40010800 	.word	0x40010800

080005c4 <UARTPrint>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void UARTPrint(const char *args, ...)
{
 80005c4:	b40f      	push	{r0, r1, r2, r3}
 80005c6:	b580      	push	{r7, lr}
 80005c8:	b0c2      	sub	sp, #264	; 0x108
 80005ca:	af00      	add	r7, sp, #0
	char StrBuff[256];
	va_list ap;
	va_start(ap, args);
 80005cc:	f507 728a 	add.w	r2, r7, #276	; 0x114
 80005d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80005d4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80005d8:	601a      	str	r2, [r3, #0]
	char len = vsnprintf(StrBuff, sizeof(StrBuff), args, ap);
 80005da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80005de:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80005e2:	1d38      	adds	r0, r7, #4
 80005e4:	681b      	ldr	r3, [r3, #0]
 80005e6:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 80005ea:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005ee:	f00e f941 	bl	800e874 <vsniprintf>
 80005f2:	4603      	mov	r3, r0
 80005f4:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107
	va_end(ap);
	HAL_UART_Transmit(&huart5,(uint8_t*)StrBuff,len,100);
 80005f8:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 80005fc:	b29a      	uxth	r2, r3
 80005fe:	1d39      	adds	r1, r7, #4
 8000600:	2364      	movs	r3, #100	; 0x64
 8000602:	4805      	ldr	r0, [pc, #20]	; (8000618 <UARTPrint+0x54>)
 8000604:	f003 fd09 	bl	800401a <HAL_UART_Transmit>
}
 8000608:	bf00      	nop
 800060a:	f507 7784 	add.w	r7, r7, #264	; 0x108
 800060e:	46bd      	mov	sp, r7
 8000610:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000614:	b004      	add	sp, #16
 8000616:	4770      	bx	lr
 8000618:	2000017c 	.word	0x2000017c

0800061c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b082      	sub	sp, #8
 8000620:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000622:	f000 fad3 	bl	8000bcc <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000626:	f000 f81d 	bl	8000664 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800062a:	f7ff ff7f 	bl	800052c <MX_GPIO_Init>
  MX_USB_HOST_Init();
 800062e:	f00d f95d 	bl	800d8ec <MX_USB_HOST_Init>
  MX_UART5_Init();
 8000632:	f000 fa19 	bl	8000a68 <MX_UART5_Init>
//	Ibox_PaymentController_SetStartTransactionAction(&startTransactionAction);
//	Ibox_PaymentController_SetSelectEmvApplicationAction(&selectEmvApplicationAction);
//	Ibox_PaymentController_SetCredentials(EMAIL, SECRET_KEY);
//	Ibox_PaymentController_SetDebugEnabled(DEBUG_ENABLED);
//	Ibox_PaymentController_ReaderSoundEnabled(1);
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 8000636:	2201      	movs	r2, #1
 8000638:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800063c:	4806      	ldr	r0, [pc, #24]	; (8000658 <main+0x3c>)
 800063e:	f000 fec1 	bl	80013c4 <HAL_GPIO_WritePin>
	HAL_UART_Receive_IT(&huart5, "ready", 5);
 8000642:	2205      	movs	r2, #5
 8000644:	4905      	ldr	r1, [pc, #20]	; (800065c <main+0x40>)
 8000646:	4806      	ldr	r0, [pc, #24]	; (8000660 <main+0x44>)
 8000648:	f003 fd79 	bl	800413e <HAL_UART_Receive_IT>
	int i=0;
 800064c:	2300      	movs	r3, #0
 800064e:	607b      	str	r3, [r7, #4]
	//Ibox_Result_ReaderId *readerIdResult;// = Ibox_PaymentController_ReaderId();

	while (1)
	{
		/* USER CODE END WHILE */
		MX_USB_HOST_Process();
 8000650:	f00d f99e 	bl	800d990 <MX_USB_HOST_Process>
 8000654:	e7fc      	b.n	8000650 <main+0x34>
 8000656:	bf00      	nop
 8000658:	40010800 	.word	0x40010800
 800065c:	0800f468 	.word	0x0800f468
 8000660:	2000017c 	.word	0x2000017c

08000664 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b09c      	sub	sp, #112	; 0x70
 8000668:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800066a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800066e:	2238      	movs	r2, #56	; 0x38
 8000670:	2100      	movs	r1, #0
 8000672:	4618      	mov	r0, r3
 8000674:	f00d fcc4 	bl	800e000 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000678:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800067c:	2200      	movs	r2, #0
 800067e:	601a      	str	r2, [r3, #0]
 8000680:	605a      	str	r2, [r3, #4]
 8000682:	609a      	str	r2, [r3, #8]
 8000684:	60da      	str	r2, [r3, #12]
 8000686:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000688:	1d3b      	adds	r3, r7, #4
 800068a:	2220      	movs	r2, #32
 800068c:	2100      	movs	r1, #0
 800068e:	4618      	mov	r0, r3
 8000690:	f00d fcb6 	bl	800e000 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000694:	2301      	movs	r3, #1
 8000696:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000698:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800069c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV5;
 800069e:	2304      	movs	r3, #4
 80006a0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006a2:	2301      	movs	r3, #1
 80006a4:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.Prediv1Source = RCC_PREDIV1_SOURCE_PLL2;
 80006a6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006ac:	2302      	movs	r3, #2
 80006ae:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006b0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006b4:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80006b6:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80006ba:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL2.PLL2State = RCC_PLL2_ON;
 80006bc:	2302      	movs	r3, #2
 80006be:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL2.PLL2MUL = RCC_PLL2_MUL8;
 80006c0:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80006c4:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL2.HSEPrediv2Value = RCC_HSE_PREDIV2_DIV5;
 80006c6:	2340      	movs	r3, #64	; 0x40
 80006c8:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006ca:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80006ce:	4618      	mov	r0, r3
 80006d0:	f002 fb6a 	bl	8002da8 <HAL_RCC_OscConfig>
 80006d4:	4603      	mov	r3, r0
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d001      	beq.n	80006de <SystemClock_Config+0x7a>
  {
    Error_Handler();
 80006da:	f000 f83f 	bl	800075c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006de:	230f      	movs	r3, #15
 80006e0:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006e2:	2302      	movs	r3, #2
 80006e4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006e6:	2300      	movs	r3, #0
 80006e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80006ee:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006f0:	2300      	movs	r3, #0
 80006f2:	637b      	str	r3, [r7, #52]	; 0x34

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006f8:	2102      	movs	r1, #2
 80006fa:	4618      	mov	r0, r3
 80006fc:	f002 fe6a 	bl	80033d4 <HAL_RCC_ClockConfig>
 8000700:	4603      	mov	r3, r0
 8000702:	2b00      	cmp	r3, #0
 8000704:	d001      	beq.n	800070a <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000706:	f000 f829 	bl	800075c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800070a:	2310      	movs	r3, #16
 800070c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV3;
 800070e:	2300      	movs	r3, #0
 8000710:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000712:	1d3b      	adds	r3, r7, #4
 8000714:	4618      	mov	r0, r3
 8000716:	f003 f8a5 	bl	8003864 <HAL_RCCEx_PeriphCLKConfig>
 800071a:	4603      	mov	r3, r0
 800071c:	2b00      	cmp	r3, #0
 800071e:	d001      	beq.n	8000724 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000720:	f000 f81c 	bl	800075c <Error_Handler>
  }

  /** Configure the Systick interrupt time
  */
  __HAL_RCC_PLLI2S_ENABLE();
 8000724:	4b03      	ldr	r3, [pc, #12]	; (8000734 <SystemClock_Config+0xd0>)
 8000726:	2201      	movs	r2, #1
 8000728:	601a      	str	r2, [r3, #0]
}
 800072a:	bf00      	nop
 800072c:	3770      	adds	r7, #112	; 0x70
 800072e:	46bd      	mov	sp, r7
 8000730:	bd80      	pop	{r7, pc}
 8000732:	bf00      	nop
 8000734:	42420070 	.word	0x42420070

08000738 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b082      	sub	sp, #8
 800073c:	af00      	add	r7, sp, #0
 800073e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	4a04      	ldr	r2, [pc, #16]	; (8000758 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000746:	4293      	cmp	r3, r2
 8000748:	d101      	bne.n	800074e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800074a:	f000 fa55 	bl	8000bf8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800074e:	bf00      	nop
 8000750:	3708      	adds	r7, #8
 8000752:	46bd      	mov	sp, r7
 8000754:	bd80      	pop	{r7, pc}
 8000756:	bf00      	nop
 8000758:	40012c00 	.word	0x40012c00

0800075c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800075c:	b480      	push	{r7}
 800075e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000760:	b672      	cpsid	i
}
 8000762:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000764:	e7fe      	b.n	8000764 <Error_Handler+0x8>
	...

08000768 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000768:	b480      	push	{r7}
 800076a:	b083      	sub	sp, #12
 800076c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800076e:	4b0e      	ldr	r3, [pc, #56]	; (80007a8 <HAL_MspInit+0x40>)
 8000770:	699b      	ldr	r3, [r3, #24]
 8000772:	4a0d      	ldr	r2, [pc, #52]	; (80007a8 <HAL_MspInit+0x40>)
 8000774:	f043 0301 	orr.w	r3, r3, #1
 8000778:	6193      	str	r3, [r2, #24]
 800077a:	4b0b      	ldr	r3, [pc, #44]	; (80007a8 <HAL_MspInit+0x40>)
 800077c:	699b      	ldr	r3, [r3, #24]
 800077e:	f003 0301 	and.w	r3, r3, #1
 8000782:	607b      	str	r3, [r7, #4]
 8000784:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000786:	4b08      	ldr	r3, [pc, #32]	; (80007a8 <HAL_MspInit+0x40>)
 8000788:	69db      	ldr	r3, [r3, #28]
 800078a:	4a07      	ldr	r2, [pc, #28]	; (80007a8 <HAL_MspInit+0x40>)
 800078c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000790:	61d3      	str	r3, [r2, #28]
 8000792:	4b05      	ldr	r3, [pc, #20]	; (80007a8 <HAL_MspInit+0x40>)
 8000794:	69db      	ldr	r3, [r3, #28]
 8000796:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800079a:	603b      	str	r3, [r7, #0]
 800079c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800079e:	bf00      	nop
 80007a0:	370c      	adds	r7, #12
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bc80      	pop	{r7}
 80007a6:	4770      	bx	lr
 80007a8:	40021000 	.word	0x40021000

080007ac <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b08c      	sub	sp, #48	; 0x30
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 80007b4:	2300      	movs	r3, #0
 80007b6:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 80007b8:	2300      	movs	r3, #0
 80007ba:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 80007bc:	2300      	movs	r3, #0
 80007be:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80007c2:	4b2e      	ldr	r3, [pc, #184]	; (800087c <HAL_InitTick+0xd0>)
 80007c4:	699b      	ldr	r3, [r3, #24]
 80007c6:	4a2d      	ldr	r2, [pc, #180]	; (800087c <HAL_InitTick+0xd0>)
 80007c8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80007cc:	6193      	str	r3, [r2, #24]
 80007ce:	4b2b      	ldr	r3, [pc, #172]	; (800087c <HAL_InitTick+0xd0>)
 80007d0:	699b      	ldr	r3, [r3, #24]
 80007d2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80007d6:	60bb      	str	r3, [r7, #8]
 80007d8:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80007da:	f107 020c 	add.w	r2, r7, #12
 80007de:	f107 0310 	add.w	r3, r7, #16
 80007e2:	4611      	mov	r1, r2
 80007e4:	4618      	mov	r0, r3
 80007e6:	f002 ffef 	bl	80037c8 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 80007ea:	f002 ffd9 	bl	80037a0 <HAL_RCC_GetPCLK2Freq>
 80007ee:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80007f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80007f2:	4a23      	ldr	r2, [pc, #140]	; (8000880 <HAL_InitTick+0xd4>)
 80007f4:	fba2 2303 	umull	r2, r3, r2, r3
 80007f8:	0c9b      	lsrs	r3, r3, #18
 80007fa:	3b01      	subs	r3, #1
 80007fc:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80007fe:	4b21      	ldr	r3, [pc, #132]	; (8000884 <HAL_InitTick+0xd8>)
 8000800:	4a21      	ldr	r2, [pc, #132]	; (8000888 <HAL_InitTick+0xdc>)
 8000802:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000804:	4b1f      	ldr	r3, [pc, #124]	; (8000884 <HAL_InitTick+0xd8>)
 8000806:	f240 32e7 	movw	r2, #999	; 0x3e7
 800080a:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800080c:	4a1d      	ldr	r2, [pc, #116]	; (8000884 <HAL_InitTick+0xd8>)
 800080e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000810:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000812:	4b1c      	ldr	r3, [pc, #112]	; (8000884 <HAL_InitTick+0xd8>)
 8000814:	2200      	movs	r2, #0
 8000816:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000818:	4b1a      	ldr	r3, [pc, #104]	; (8000884 <HAL_InitTick+0xd8>)
 800081a:	2200      	movs	r2, #0
 800081c:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800081e:	4b19      	ldr	r3, [pc, #100]	; (8000884 <HAL_InitTick+0xd8>)
 8000820:	2200      	movs	r2, #0
 8000822:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000824:	4817      	ldr	r0, [pc, #92]	; (8000884 <HAL_InitTick+0xd8>)
 8000826:	f003 f94f 	bl	8003ac8 <HAL_TIM_Base_Init>
 800082a:	4603      	mov	r3, r0
 800082c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8000830:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000834:	2b00      	cmp	r3, #0
 8000836:	d11b      	bne.n	8000870 <HAL_InitTick+0xc4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000838:	4812      	ldr	r0, [pc, #72]	; (8000884 <HAL_InitTick+0xd8>)
 800083a:	f003 f99d 	bl	8003b78 <HAL_TIM_Base_Start_IT>
 800083e:	4603      	mov	r3, r0
 8000840:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8000844:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000848:	2b00      	cmp	r3, #0
 800084a:	d111      	bne.n	8000870 <HAL_InitTick+0xc4>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 800084c:	2019      	movs	r0, #25
 800084e:	f000 fae4 	bl	8000e1a <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	2b0f      	cmp	r3, #15
 8000856:	d808      	bhi.n	800086a <HAL_InitTick+0xbe>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority, 0U);
 8000858:	2200      	movs	r2, #0
 800085a:	6879      	ldr	r1, [r7, #4]
 800085c:	2019      	movs	r0, #25
 800085e:	f000 fac0 	bl	8000de2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000862:	4a0a      	ldr	r2, [pc, #40]	; (800088c <HAL_InitTick+0xe0>)
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	6013      	str	r3, [r2, #0]
 8000868:	e002      	b.n	8000870 <HAL_InitTick+0xc4>
      }
      else
      {
        status = HAL_ERROR;
 800086a:	2301      	movs	r3, #1
 800086c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000870:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8000874:	4618      	mov	r0, r3
 8000876:	3730      	adds	r7, #48	; 0x30
 8000878:	46bd      	mov	sp, r7
 800087a:	bd80      	pop	{r7, pc}
 800087c:	40021000 	.word	0x40021000
 8000880:	431bde83 	.word	0x431bde83
 8000884:	20000130 	.word	0x20000130
 8000888:	40012c00 	.word	0x40012c00
 800088c:	20000004 	.word	0x20000004

08000890 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000890:	b480      	push	{r7}
 8000892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000894:	e7fe      	b.n	8000894 <NMI_Handler+0x4>

08000896 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000896:	b480      	push	{r7}
 8000898:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800089a:	e7fe      	b.n	800089a <HardFault_Handler+0x4>

0800089c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800089c:	b480      	push	{r7}
 800089e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008a0:	e7fe      	b.n	80008a0 <MemManage_Handler+0x4>

080008a2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008a2:	b480      	push	{r7}
 80008a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008a6:	e7fe      	b.n	80008a6 <BusFault_Handler+0x4>

080008a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008a8:	b480      	push	{r7}
 80008aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008ac:	e7fe      	b.n	80008ac <UsageFault_Handler+0x4>

080008ae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008ae:	b480      	push	{r7}
 80008b0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008b2:	bf00      	nop
 80008b4:	46bd      	mov	sp, r7
 80008b6:	bc80      	pop	{r7}
 80008b8:	4770      	bx	lr

080008ba <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008ba:	b480      	push	{r7}
 80008bc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008be:	bf00      	nop
 80008c0:	46bd      	mov	sp, r7
 80008c2:	bc80      	pop	{r7}
 80008c4:	4770      	bx	lr

080008c6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008c6:	b480      	push	{r7}
 80008c8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008ca:	bf00      	nop
 80008cc:	46bd      	mov	sp, r7
 80008ce:	bc80      	pop	{r7}
 80008d0:	4770      	bx	lr

080008d2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008d2:	b480      	push	{r7}
 80008d4:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008d6:	bf00      	nop
 80008d8:	46bd      	mov	sp, r7
 80008da:	bc80      	pop	{r7}
 80008dc:	4770      	bx	lr
	...

080008e0 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80008e4:	4802      	ldr	r0, [pc, #8]	; (80008f0 <TIM1_UP_IRQHandler+0x10>)
 80008e6:	f003 f9a1 	bl	8003c2c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80008ea:	bf00      	nop
 80008ec:	bd80      	pop	{r7, pc}
 80008ee:	bf00      	nop
 80008f0:	20000130 	.word	0x20000130

080008f4 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 80008f8:	4802      	ldr	r0, [pc, #8]	; (8000904 <UART5_IRQHandler+0x10>)
 80008fa:	f003 fc51 	bl	80041a0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 80008fe:	bf00      	nop
 8000900:	bd80      	pop	{r7, pc}
 8000902:	bf00      	nop
 8000904:	2000017c 	.word	0x2000017c

08000908 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 800090c:	4802      	ldr	r0, [pc, #8]	; (8000918 <OTG_FS_IRQHandler+0x10>)
 800090e:	f000 ffd7 	bl	80018c0 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000912:	bf00      	nop
 8000914:	bd80      	pop	{r7, pc}
 8000916:	bf00      	nop
 8000918:	20001374 	.word	0x20001374

0800091c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b086      	sub	sp, #24
 8000920:	af00      	add	r7, sp, #0
 8000922:	60f8      	str	r0, [r7, #12]
 8000924:	60b9      	str	r1, [r7, #8]
 8000926:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000928:	2300      	movs	r3, #0
 800092a:	617b      	str	r3, [r7, #20]
 800092c:	e00a      	b.n	8000944 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800092e:	f3af 8000 	nop.w
 8000932:	4601      	mov	r1, r0
 8000934:	68bb      	ldr	r3, [r7, #8]
 8000936:	1c5a      	adds	r2, r3, #1
 8000938:	60ba      	str	r2, [r7, #8]
 800093a:	b2ca      	uxtb	r2, r1
 800093c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800093e:	697b      	ldr	r3, [r7, #20]
 8000940:	3301      	adds	r3, #1
 8000942:	617b      	str	r3, [r7, #20]
 8000944:	697a      	ldr	r2, [r7, #20]
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	429a      	cmp	r2, r3
 800094a:	dbf0      	blt.n	800092e <_read+0x12>
  }

  return len;
 800094c:	687b      	ldr	r3, [r7, #4]
}
 800094e:	4618      	mov	r0, r3
 8000950:	3718      	adds	r7, #24
 8000952:	46bd      	mov	sp, r7
 8000954:	bd80      	pop	{r7, pc}

08000956 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000956:	b580      	push	{r7, lr}
 8000958:	b086      	sub	sp, #24
 800095a:	af00      	add	r7, sp, #0
 800095c:	60f8      	str	r0, [r7, #12]
 800095e:	60b9      	str	r1, [r7, #8]
 8000960:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000962:	2300      	movs	r3, #0
 8000964:	617b      	str	r3, [r7, #20]
 8000966:	e009      	b.n	800097c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000968:	68bb      	ldr	r3, [r7, #8]
 800096a:	1c5a      	adds	r2, r3, #1
 800096c:	60ba      	str	r2, [r7, #8]
 800096e:	781b      	ldrb	r3, [r3, #0]
 8000970:	4618      	mov	r0, r3
 8000972:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000976:	697b      	ldr	r3, [r7, #20]
 8000978:	3301      	adds	r3, #1
 800097a:	617b      	str	r3, [r7, #20]
 800097c:	697a      	ldr	r2, [r7, #20]
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	429a      	cmp	r2, r3
 8000982:	dbf1      	blt.n	8000968 <_write+0x12>
  }
  return len;
 8000984:	687b      	ldr	r3, [r7, #4]
}
 8000986:	4618      	mov	r0, r3
 8000988:	3718      	adds	r7, #24
 800098a:	46bd      	mov	sp, r7
 800098c:	bd80      	pop	{r7, pc}

0800098e <_close>:

int _close(int file)
{
 800098e:	b480      	push	{r7}
 8000990:	b083      	sub	sp, #12
 8000992:	af00      	add	r7, sp, #0
 8000994:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000996:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800099a:	4618      	mov	r0, r3
 800099c:	370c      	adds	r7, #12
 800099e:	46bd      	mov	sp, r7
 80009a0:	bc80      	pop	{r7}
 80009a2:	4770      	bx	lr

080009a4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80009a4:	b480      	push	{r7}
 80009a6:	b083      	sub	sp, #12
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]
 80009ac:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80009ae:	683b      	ldr	r3, [r7, #0]
 80009b0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80009b4:	605a      	str	r2, [r3, #4]
  return 0;
 80009b6:	2300      	movs	r3, #0
}
 80009b8:	4618      	mov	r0, r3
 80009ba:	370c      	adds	r7, #12
 80009bc:	46bd      	mov	sp, r7
 80009be:	bc80      	pop	{r7}
 80009c0:	4770      	bx	lr

080009c2 <_isatty>:

int _isatty(int file)
{
 80009c2:	b480      	push	{r7}
 80009c4:	b083      	sub	sp, #12
 80009c6:	af00      	add	r7, sp, #0
 80009c8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80009ca:	2301      	movs	r3, #1
}
 80009cc:	4618      	mov	r0, r3
 80009ce:	370c      	adds	r7, #12
 80009d0:	46bd      	mov	sp, r7
 80009d2:	bc80      	pop	{r7}
 80009d4:	4770      	bx	lr

080009d6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80009d6:	b480      	push	{r7}
 80009d8:	b085      	sub	sp, #20
 80009da:	af00      	add	r7, sp, #0
 80009dc:	60f8      	str	r0, [r7, #12]
 80009de:	60b9      	str	r1, [r7, #8]
 80009e0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80009e2:	2300      	movs	r3, #0
}
 80009e4:	4618      	mov	r0, r3
 80009e6:	3714      	adds	r7, #20
 80009e8:	46bd      	mov	sp, r7
 80009ea:	bc80      	pop	{r7}
 80009ec:	4770      	bx	lr
	...

080009f0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b086      	sub	sp, #24
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80009f8:	4a14      	ldr	r2, [pc, #80]	; (8000a4c <_sbrk+0x5c>)
 80009fa:	4b15      	ldr	r3, [pc, #84]	; (8000a50 <_sbrk+0x60>)
 80009fc:	1ad3      	subs	r3, r2, r3
 80009fe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a00:	697b      	ldr	r3, [r7, #20]
 8000a02:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a04:	4b13      	ldr	r3, [pc, #76]	; (8000a54 <_sbrk+0x64>)
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d102      	bne.n	8000a12 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a0c:	4b11      	ldr	r3, [pc, #68]	; (8000a54 <_sbrk+0x64>)
 8000a0e:	4a12      	ldr	r2, [pc, #72]	; (8000a58 <_sbrk+0x68>)
 8000a10:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a12:	4b10      	ldr	r3, [pc, #64]	; (8000a54 <_sbrk+0x64>)
 8000a14:	681a      	ldr	r2, [r3, #0]
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	4413      	add	r3, r2
 8000a1a:	693a      	ldr	r2, [r7, #16]
 8000a1c:	429a      	cmp	r2, r3
 8000a1e:	d207      	bcs.n	8000a30 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a20:	f00d faa2 	bl	800df68 <__errno>
 8000a24:	4603      	mov	r3, r0
 8000a26:	220c      	movs	r2, #12
 8000a28:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a2a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000a2e:	e009      	b.n	8000a44 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a30:	4b08      	ldr	r3, [pc, #32]	; (8000a54 <_sbrk+0x64>)
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a36:	4b07      	ldr	r3, [pc, #28]	; (8000a54 <_sbrk+0x64>)
 8000a38:	681a      	ldr	r2, [r3, #0]
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	4413      	add	r3, r2
 8000a3e:	4a05      	ldr	r2, [pc, #20]	; (8000a54 <_sbrk+0x64>)
 8000a40:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a42:	68fb      	ldr	r3, [r7, #12]
}
 8000a44:	4618      	mov	r0, r3
 8000a46:	3718      	adds	r7, #24
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	bd80      	pop	{r7, pc}
 8000a4c:	20018000 	.word	0x20018000
 8000a50:	00000400 	.word	0x00000400
 8000a54:	20000178 	.word	0x20000178
 8000a58:	20001688 	.word	0x20001688

08000a5c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a60:	bf00      	nop
 8000a62:	46bd      	mov	sp, r7
 8000a64:	bc80      	pop	{r7}
 8000a66:	4770      	bx	lr

08000a68 <MX_UART5_Init>:

UART_HandleTypeDef huart5;

/* UART5 init function */
void MX_UART5_Init(void)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8000a6c:	4b11      	ldr	r3, [pc, #68]	; (8000ab4 <MX_UART5_Init+0x4c>)
 8000a6e:	4a12      	ldr	r2, [pc, #72]	; (8000ab8 <MX_UART5_Init+0x50>)
 8000a70:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8000a72:	4b10      	ldr	r3, [pc, #64]	; (8000ab4 <MX_UART5_Init+0x4c>)
 8000a74:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a78:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8000a7a:	4b0e      	ldr	r3, [pc, #56]	; (8000ab4 <MX_UART5_Init+0x4c>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8000a80:	4b0c      	ldr	r3, [pc, #48]	; (8000ab4 <MX_UART5_Init+0x4c>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8000a86:	4b0b      	ldr	r3, [pc, #44]	; (8000ab4 <MX_UART5_Init+0x4c>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8000a8c:	4b09      	ldr	r3, [pc, #36]	; (8000ab4 <MX_UART5_Init+0x4c>)
 8000a8e:	220c      	movs	r2, #12
 8000a90:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a92:	4b08      	ldr	r3, [pc, #32]	; (8000ab4 <MX_UART5_Init+0x4c>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a98:	4b06      	ldr	r3, [pc, #24]	; (8000ab4 <MX_UART5_Init+0x4c>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8000a9e:	4805      	ldr	r0, [pc, #20]	; (8000ab4 <MX_UART5_Init+0x4c>)
 8000aa0:	f003 fa6e 	bl	8003f80 <HAL_UART_Init>
 8000aa4:	4603      	mov	r3, r0
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d001      	beq.n	8000aae <MX_UART5_Init+0x46>
  {
    Error_Handler();
 8000aaa:	f7ff fe57 	bl	800075c <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8000aae:	bf00      	nop
 8000ab0:	bd80      	pop	{r7, pc}
 8000ab2:	bf00      	nop
 8000ab4:	2000017c 	.word	0x2000017c
 8000ab8:	40005000 	.word	0x40005000

08000abc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b08a      	sub	sp, #40	; 0x28
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ac4:	f107 0318 	add.w	r3, r7, #24
 8000ac8:	2200      	movs	r2, #0
 8000aca:	601a      	str	r2, [r3, #0]
 8000acc:	605a      	str	r2, [r3, #4]
 8000ace:	609a      	str	r2, [r3, #8]
 8000ad0:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==UART5)
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	4a26      	ldr	r2, [pc, #152]	; (8000b70 <HAL_UART_MspInit+0xb4>)
 8000ad8:	4293      	cmp	r3, r2
 8000ada:	d144      	bne.n	8000b66 <HAL_UART_MspInit+0xaa>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* UART5 clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8000adc:	4b25      	ldr	r3, [pc, #148]	; (8000b74 <HAL_UART_MspInit+0xb8>)
 8000ade:	69db      	ldr	r3, [r3, #28]
 8000ae0:	4a24      	ldr	r2, [pc, #144]	; (8000b74 <HAL_UART_MspInit+0xb8>)
 8000ae2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000ae6:	61d3      	str	r3, [r2, #28]
 8000ae8:	4b22      	ldr	r3, [pc, #136]	; (8000b74 <HAL_UART_MspInit+0xb8>)
 8000aea:	69db      	ldr	r3, [r3, #28]
 8000aec:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000af0:	617b      	str	r3, [r7, #20]
 8000af2:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000af4:	4b1f      	ldr	r3, [pc, #124]	; (8000b74 <HAL_UART_MspInit+0xb8>)
 8000af6:	699b      	ldr	r3, [r3, #24]
 8000af8:	4a1e      	ldr	r2, [pc, #120]	; (8000b74 <HAL_UART_MspInit+0xb8>)
 8000afa:	f043 0310 	orr.w	r3, r3, #16
 8000afe:	6193      	str	r3, [r2, #24]
 8000b00:	4b1c      	ldr	r3, [pc, #112]	; (8000b74 <HAL_UART_MspInit+0xb8>)
 8000b02:	699b      	ldr	r3, [r3, #24]
 8000b04:	f003 0310 	and.w	r3, r3, #16
 8000b08:	613b      	str	r3, [r7, #16]
 8000b0a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b0c:	4b19      	ldr	r3, [pc, #100]	; (8000b74 <HAL_UART_MspInit+0xb8>)
 8000b0e:	699b      	ldr	r3, [r3, #24]
 8000b10:	4a18      	ldr	r2, [pc, #96]	; (8000b74 <HAL_UART_MspInit+0xb8>)
 8000b12:	f043 0320 	orr.w	r3, r3, #32
 8000b16:	6193      	str	r3, [r2, #24]
 8000b18:	4b16      	ldr	r3, [pc, #88]	; (8000b74 <HAL_UART_MspInit+0xb8>)
 8000b1a:	699b      	ldr	r3, [r3, #24]
 8000b1c:	f003 0320 	and.w	r3, r3, #32
 8000b20:	60fb      	str	r3, [r7, #12]
 8000b22:	68fb      	ldr	r3, [r7, #12]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000b24:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b28:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b2a:	2302      	movs	r3, #2
 8000b2c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b2e:	2303      	movs	r3, #3
 8000b30:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b32:	f107 0318 	add.w	r3, r7, #24
 8000b36:	4619      	mov	r1, r3
 8000b38:	480f      	ldr	r0, [pc, #60]	; (8000b78 <HAL_UART_MspInit+0xbc>)
 8000b3a:	f000 fabf 	bl	80010bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000b3e:	2304      	movs	r3, #4
 8000b40:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b42:	2300      	movs	r3, #0
 8000b44:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b46:	2300      	movs	r3, #0
 8000b48:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b4a:	f107 0318 	add.w	r3, r7, #24
 8000b4e:	4619      	mov	r1, r3
 8000b50:	480a      	ldr	r0, [pc, #40]	; (8000b7c <HAL_UART_MspInit+0xc0>)
 8000b52:	f000 fab3 	bl	80010bc <HAL_GPIO_Init>

    /* UART5 interrupt Init */
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 8000b56:	2200      	movs	r2, #0
 8000b58:	2100      	movs	r1, #0
 8000b5a:	2035      	movs	r0, #53	; 0x35
 8000b5c:	f000 f941 	bl	8000de2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8000b60:	2035      	movs	r0, #53	; 0x35
 8000b62:	f000 f95a 	bl	8000e1a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART5_MspInit 1 */

  /* USER CODE END UART5_MspInit 1 */
  }
}
 8000b66:	bf00      	nop
 8000b68:	3728      	adds	r7, #40	; 0x28
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bd80      	pop	{r7, pc}
 8000b6e:	bf00      	nop
 8000b70:	40005000 	.word	0x40005000
 8000b74:	40021000 	.word	0x40021000
 8000b78:	40011000 	.word	0x40011000
 8000b7c:	40011400 	.word	0x40011400

08000b80 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b80:	480c      	ldr	r0, [pc, #48]	; (8000bb4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000b82:	490d      	ldr	r1, [pc, #52]	; (8000bb8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000b84:	4a0d      	ldr	r2, [pc, #52]	; (8000bbc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000b86:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b88:	e002      	b.n	8000b90 <LoopCopyDataInit>

08000b8a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b8a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b8c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b8e:	3304      	adds	r3, #4

08000b90 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b90:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b92:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b94:	d3f9      	bcc.n	8000b8a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b96:	4a0a      	ldr	r2, [pc, #40]	; (8000bc0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000b98:	4c0a      	ldr	r4, [pc, #40]	; (8000bc4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000b9a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b9c:	e001      	b.n	8000ba2 <LoopFillZerobss>

08000b9e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b9e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ba0:	3204      	adds	r2, #4

08000ba2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ba2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ba4:	d3fb      	bcc.n	8000b9e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000ba6:	f7ff ff59 	bl	8000a5c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000baa:	f00d f9e3 	bl	800df74 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000bae:	f7ff fd35 	bl	800061c <main>
  bx lr
 8000bb2:	4770      	bx	lr
  ldr r0, =_sdata
 8000bb4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bb8:	20000114 	.word	0x20000114
  ldr r2, =_sidata
 8000bbc:	08010208 	.word	0x08010208
  ldr r2, =_sbss
 8000bc0:	20000114 	.word	0x20000114
  ldr r4, =_ebss
 8000bc4:	20001688 	.word	0x20001688

08000bc8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000bc8:	e7fe      	b.n	8000bc8 <ADC1_2_IRQHandler>
	...

08000bcc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000bd0:	4b08      	ldr	r3, [pc, #32]	; (8000bf4 <HAL_Init+0x28>)
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	4a07      	ldr	r2, [pc, #28]	; (8000bf4 <HAL_Init+0x28>)
 8000bd6:	f043 0310 	orr.w	r3, r3, #16
 8000bda:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bdc:	2003      	movs	r0, #3
 8000bde:	f000 f8f5 	bl	8000dcc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000be2:	200f      	movs	r0, #15
 8000be4:	f7ff fde2 	bl	80007ac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000be8:	f7ff fdbe 	bl	8000768 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000bec:	2300      	movs	r3, #0
}
 8000bee:	4618      	mov	r0, r3
 8000bf0:	bd80      	pop	{r7, pc}
 8000bf2:	bf00      	nop
 8000bf4:	40022000 	.word	0x40022000

08000bf8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000bfc:	4b05      	ldr	r3, [pc, #20]	; (8000c14 <HAL_IncTick+0x1c>)
 8000bfe:	781b      	ldrb	r3, [r3, #0]
 8000c00:	461a      	mov	r2, r3
 8000c02:	4b05      	ldr	r3, [pc, #20]	; (8000c18 <HAL_IncTick+0x20>)
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	4413      	add	r3, r2
 8000c08:	4a03      	ldr	r2, [pc, #12]	; (8000c18 <HAL_IncTick+0x20>)
 8000c0a:	6013      	str	r3, [r2, #0]
}
 8000c0c:	bf00      	nop
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bc80      	pop	{r7}
 8000c12:	4770      	bx	lr
 8000c14:	20000008 	.word	0x20000008
 8000c18:	200001c0 	.word	0x200001c0

08000c1c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	af00      	add	r7, sp, #0
  return uwTick;
 8000c20:	4b02      	ldr	r3, [pc, #8]	; (8000c2c <HAL_GetTick+0x10>)
 8000c22:	681b      	ldr	r3, [r3, #0]
}
 8000c24:	4618      	mov	r0, r3
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bc80      	pop	{r7}
 8000c2a:	4770      	bx	lr
 8000c2c:	200001c0 	.word	0x200001c0

08000c30 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b084      	sub	sp, #16
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c38:	f7ff fff0 	bl	8000c1c <HAL_GetTick>
 8000c3c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c42:	68fb      	ldr	r3, [r7, #12]
 8000c44:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000c48:	d005      	beq.n	8000c56 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c4a:	4b0a      	ldr	r3, [pc, #40]	; (8000c74 <HAL_Delay+0x44>)
 8000c4c:	781b      	ldrb	r3, [r3, #0]
 8000c4e:	461a      	mov	r2, r3
 8000c50:	68fb      	ldr	r3, [r7, #12]
 8000c52:	4413      	add	r3, r2
 8000c54:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000c56:	bf00      	nop
 8000c58:	f7ff ffe0 	bl	8000c1c <HAL_GetTick>
 8000c5c:	4602      	mov	r2, r0
 8000c5e:	68bb      	ldr	r3, [r7, #8]
 8000c60:	1ad3      	subs	r3, r2, r3
 8000c62:	68fa      	ldr	r2, [r7, #12]
 8000c64:	429a      	cmp	r2, r3
 8000c66:	d8f7      	bhi.n	8000c58 <HAL_Delay+0x28>
  {
  }
}
 8000c68:	bf00      	nop
 8000c6a:	bf00      	nop
 8000c6c:	3710      	adds	r7, #16
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bd80      	pop	{r7, pc}
 8000c72:	bf00      	nop
 8000c74:	20000008 	.word	0x20000008

08000c78 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	b085      	sub	sp, #20
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	f003 0307 	and.w	r3, r3, #7
 8000c86:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c88:	4b0c      	ldr	r3, [pc, #48]	; (8000cbc <__NVIC_SetPriorityGrouping+0x44>)
 8000c8a:	68db      	ldr	r3, [r3, #12]
 8000c8c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c8e:	68ba      	ldr	r2, [r7, #8]
 8000c90:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c94:	4013      	ands	r3, r2
 8000c96:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000c98:	68fb      	ldr	r3, [r7, #12]
 8000c9a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c9c:	68bb      	ldr	r3, [r7, #8]
 8000c9e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ca0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ca4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ca8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000caa:	4a04      	ldr	r2, [pc, #16]	; (8000cbc <__NVIC_SetPriorityGrouping+0x44>)
 8000cac:	68bb      	ldr	r3, [r7, #8]
 8000cae:	60d3      	str	r3, [r2, #12]
}
 8000cb0:	bf00      	nop
 8000cb2:	3714      	adds	r7, #20
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	bc80      	pop	{r7}
 8000cb8:	4770      	bx	lr
 8000cba:	bf00      	nop
 8000cbc:	e000ed00 	.word	0xe000ed00

08000cc0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cc4:	4b04      	ldr	r3, [pc, #16]	; (8000cd8 <__NVIC_GetPriorityGrouping+0x18>)
 8000cc6:	68db      	ldr	r3, [r3, #12]
 8000cc8:	0a1b      	lsrs	r3, r3, #8
 8000cca:	f003 0307 	and.w	r3, r3, #7
}
 8000cce:	4618      	mov	r0, r3
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	bc80      	pop	{r7}
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop
 8000cd8:	e000ed00 	.word	0xe000ed00

08000cdc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	b083      	sub	sp, #12
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ce6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	db0b      	blt.n	8000d06 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000cee:	79fb      	ldrb	r3, [r7, #7]
 8000cf0:	f003 021f 	and.w	r2, r3, #31
 8000cf4:	4906      	ldr	r1, [pc, #24]	; (8000d10 <__NVIC_EnableIRQ+0x34>)
 8000cf6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cfa:	095b      	lsrs	r3, r3, #5
 8000cfc:	2001      	movs	r0, #1
 8000cfe:	fa00 f202 	lsl.w	r2, r0, r2
 8000d02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000d06:	bf00      	nop
 8000d08:	370c      	adds	r7, #12
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bc80      	pop	{r7}
 8000d0e:	4770      	bx	lr
 8000d10:	e000e100 	.word	0xe000e100

08000d14 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d14:	b480      	push	{r7}
 8000d16:	b083      	sub	sp, #12
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	6039      	str	r1, [r7, #0]
 8000d1e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	db0a      	blt.n	8000d3e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d28:	683b      	ldr	r3, [r7, #0]
 8000d2a:	b2da      	uxtb	r2, r3
 8000d2c:	490c      	ldr	r1, [pc, #48]	; (8000d60 <__NVIC_SetPriority+0x4c>)
 8000d2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d32:	0112      	lsls	r2, r2, #4
 8000d34:	b2d2      	uxtb	r2, r2
 8000d36:	440b      	add	r3, r1
 8000d38:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d3c:	e00a      	b.n	8000d54 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d3e:	683b      	ldr	r3, [r7, #0]
 8000d40:	b2da      	uxtb	r2, r3
 8000d42:	4908      	ldr	r1, [pc, #32]	; (8000d64 <__NVIC_SetPriority+0x50>)
 8000d44:	79fb      	ldrb	r3, [r7, #7]
 8000d46:	f003 030f 	and.w	r3, r3, #15
 8000d4a:	3b04      	subs	r3, #4
 8000d4c:	0112      	lsls	r2, r2, #4
 8000d4e:	b2d2      	uxtb	r2, r2
 8000d50:	440b      	add	r3, r1
 8000d52:	761a      	strb	r2, [r3, #24]
}
 8000d54:	bf00      	nop
 8000d56:	370c      	adds	r7, #12
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	bc80      	pop	{r7}
 8000d5c:	4770      	bx	lr
 8000d5e:	bf00      	nop
 8000d60:	e000e100 	.word	0xe000e100
 8000d64:	e000ed00 	.word	0xe000ed00

08000d68 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	b089      	sub	sp, #36	; 0x24
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	60f8      	str	r0, [r7, #12]
 8000d70:	60b9      	str	r1, [r7, #8]
 8000d72:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d74:	68fb      	ldr	r3, [r7, #12]
 8000d76:	f003 0307 	and.w	r3, r3, #7
 8000d7a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d7c:	69fb      	ldr	r3, [r7, #28]
 8000d7e:	f1c3 0307 	rsb	r3, r3, #7
 8000d82:	2b04      	cmp	r3, #4
 8000d84:	bf28      	it	cs
 8000d86:	2304      	movcs	r3, #4
 8000d88:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d8a:	69fb      	ldr	r3, [r7, #28]
 8000d8c:	3304      	adds	r3, #4
 8000d8e:	2b06      	cmp	r3, #6
 8000d90:	d902      	bls.n	8000d98 <NVIC_EncodePriority+0x30>
 8000d92:	69fb      	ldr	r3, [r7, #28]
 8000d94:	3b03      	subs	r3, #3
 8000d96:	e000      	b.n	8000d9a <NVIC_EncodePriority+0x32>
 8000d98:	2300      	movs	r3, #0
 8000d9a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d9c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000da0:	69bb      	ldr	r3, [r7, #24]
 8000da2:	fa02 f303 	lsl.w	r3, r2, r3
 8000da6:	43da      	mvns	r2, r3
 8000da8:	68bb      	ldr	r3, [r7, #8]
 8000daa:	401a      	ands	r2, r3
 8000dac:	697b      	ldr	r3, [r7, #20]
 8000dae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000db0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000db4:	697b      	ldr	r3, [r7, #20]
 8000db6:	fa01 f303 	lsl.w	r3, r1, r3
 8000dba:	43d9      	mvns	r1, r3
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dc0:	4313      	orrs	r3, r2
         );
}
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	3724      	adds	r7, #36	; 0x24
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bc80      	pop	{r7}
 8000dca:	4770      	bx	lr

08000dcc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b082      	sub	sp, #8
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000dd4:	6878      	ldr	r0, [r7, #4]
 8000dd6:	f7ff ff4f 	bl	8000c78 <__NVIC_SetPriorityGrouping>
}
 8000dda:	bf00      	nop
 8000ddc:	3708      	adds	r7, #8
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bd80      	pop	{r7, pc}

08000de2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000de2:	b580      	push	{r7, lr}
 8000de4:	b086      	sub	sp, #24
 8000de6:	af00      	add	r7, sp, #0
 8000de8:	4603      	mov	r3, r0
 8000dea:	60b9      	str	r1, [r7, #8]
 8000dec:	607a      	str	r2, [r7, #4]
 8000dee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000df0:	2300      	movs	r3, #0
 8000df2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000df4:	f7ff ff64 	bl	8000cc0 <__NVIC_GetPriorityGrouping>
 8000df8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000dfa:	687a      	ldr	r2, [r7, #4]
 8000dfc:	68b9      	ldr	r1, [r7, #8]
 8000dfe:	6978      	ldr	r0, [r7, #20]
 8000e00:	f7ff ffb2 	bl	8000d68 <NVIC_EncodePriority>
 8000e04:	4602      	mov	r2, r0
 8000e06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e0a:	4611      	mov	r1, r2
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	f7ff ff81 	bl	8000d14 <__NVIC_SetPriority>
}
 8000e12:	bf00      	nop
 8000e14:	3718      	adds	r7, #24
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}

08000e1a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e1a:	b580      	push	{r7, lr}
 8000e1c:	b082      	sub	sp, #8
 8000e1e:	af00      	add	r7, sp, #0
 8000e20:	4603      	mov	r3, r0
 8000e22:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e28:	4618      	mov	r0, r3
 8000e2a:	f7ff ff57 	bl	8000cdc <__NVIC_EnableIRQ>
}
 8000e2e:	bf00      	nop
 8000e30:	3708      	adds	r7, #8
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bd80      	pop	{r7, pc}

08000e36 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000e36:	b480      	push	{r7}
 8000e38:	b085      	sub	sp, #20
 8000e3a:	af00      	add	r7, sp, #0
 8000e3c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000e48:	2b02      	cmp	r3, #2
 8000e4a:	d008      	beq.n	8000e5e <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	2204      	movs	r2, #4
 8000e50:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	2200      	movs	r2, #0
 8000e56:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000e5a:	2301      	movs	r3, #1
 8000e5c:	e020      	b.n	8000ea0 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	681a      	ldr	r2, [r3, #0]
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	f022 020e 	bic.w	r2, r2, #14
 8000e6c:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	681a      	ldr	r2, [r3, #0]
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	f022 0201 	bic.w	r2, r2, #1
 8000e7c:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000e86:	2101      	movs	r1, #1
 8000e88:	fa01 f202 	lsl.w	r2, r1, r2
 8000e8c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	2201      	movs	r2, #1
 8000e92:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	2200      	movs	r2, #0
 8000e9a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8000e9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	3714      	adds	r7, #20
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	bc80      	pop	{r7}
 8000ea8:	4770      	bx	lr
	...

08000eac <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b084      	sub	sp, #16
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000ebe:	2b02      	cmp	r3, #2
 8000ec0:	d005      	beq.n	8000ece <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	2204      	movs	r2, #4
 8000ec6:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000ec8:	2301      	movs	r3, #1
 8000eca:	73fb      	strb	r3, [r7, #15]
 8000ecc:	e0d6      	b.n	800107c <HAL_DMA_Abort_IT+0x1d0>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	681a      	ldr	r2, [r3, #0]
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	f022 020e 	bic.w	r2, r2, #14
 8000edc:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	681a      	ldr	r2, [r3, #0]
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	f022 0201 	bic.w	r2, r2, #1
 8000eec:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	461a      	mov	r2, r3
 8000ef4:	4b64      	ldr	r3, [pc, #400]	; (8001088 <HAL_DMA_Abort_IT+0x1dc>)
 8000ef6:	429a      	cmp	r2, r3
 8000ef8:	d958      	bls.n	8000fac <HAL_DMA_Abort_IT+0x100>
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	4a63      	ldr	r2, [pc, #396]	; (800108c <HAL_DMA_Abort_IT+0x1e0>)
 8000f00:	4293      	cmp	r3, r2
 8000f02:	d04f      	beq.n	8000fa4 <HAL_DMA_Abort_IT+0xf8>
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	4a61      	ldr	r2, [pc, #388]	; (8001090 <HAL_DMA_Abort_IT+0x1e4>)
 8000f0a:	4293      	cmp	r3, r2
 8000f0c:	d048      	beq.n	8000fa0 <HAL_DMA_Abort_IT+0xf4>
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	4a60      	ldr	r2, [pc, #384]	; (8001094 <HAL_DMA_Abort_IT+0x1e8>)
 8000f14:	4293      	cmp	r3, r2
 8000f16:	d040      	beq.n	8000f9a <HAL_DMA_Abort_IT+0xee>
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	4a5e      	ldr	r2, [pc, #376]	; (8001098 <HAL_DMA_Abort_IT+0x1ec>)
 8000f1e:	4293      	cmp	r3, r2
 8000f20:	d038      	beq.n	8000f94 <HAL_DMA_Abort_IT+0xe8>
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	4a5d      	ldr	r2, [pc, #372]	; (800109c <HAL_DMA_Abort_IT+0x1f0>)
 8000f28:	4293      	cmp	r3, r2
 8000f2a:	d030      	beq.n	8000f8e <HAL_DMA_Abort_IT+0xe2>
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	4a5b      	ldr	r2, [pc, #364]	; (80010a0 <HAL_DMA_Abort_IT+0x1f4>)
 8000f32:	4293      	cmp	r3, r2
 8000f34:	d028      	beq.n	8000f88 <HAL_DMA_Abort_IT+0xdc>
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	4a53      	ldr	r2, [pc, #332]	; (8001088 <HAL_DMA_Abort_IT+0x1dc>)
 8000f3c:	4293      	cmp	r3, r2
 8000f3e:	d020      	beq.n	8000f82 <HAL_DMA_Abort_IT+0xd6>
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	4a57      	ldr	r2, [pc, #348]	; (80010a4 <HAL_DMA_Abort_IT+0x1f8>)
 8000f46:	4293      	cmp	r3, r2
 8000f48:	d019      	beq.n	8000f7e <HAL_DMA_Abort_IT+0xd2>
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	4a56      	ldr	r2, [pc, #344]	; (80010a8 <HAL_DMA_Abort_IT+0x1fc>)
 8000f50:	4293      	cmp	r3, r2
 8000f52:	d012      	beq.n	8000f7a <HAL_DMA_Abort_IT+0xce>
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	4a54      	ldr	r2, [pc, #336]	; (80010ac <HAL_DMA_Abort_IT+0x200>)
 8000f5a:	4293      	cmp	r3, r2
 8000f5c:	d00a      	beq.n	8000f74 <HAL_DMA_Abort_IT+0xc8>
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	4a53      	ldr	r2, [pc, #332]	; (80010b0 <HAL_DMA_Abort_IT+0x204>)
 8000f64:	4293      	cmp	r3, r2
 8000f66:	d102      	bne.n	8000f6e <HAL_DMA_Abort_IT+0xc2>
 8000f68:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f6c:	e01b      	b.n	8000fa6 <HAL_DMA_Abort_IT+0xfa>
 8000f6e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f72:	e018      	b.n	8000fa6 <HAL_DMA_Abort_IT+0xfa>
 8000f74:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f78:	e015      	b.n	8000fa6 <HAL_DMA_Abort_IT+0xfa>
 8000f7a:	2310      	movs	r3, #16
 8000f7c:	e013      	b.n	8000fa6 <HAL_DMA_Abort_IT+0xfa>
 8000f7e:	2301      	movs	r3, #1
 8000f80:	e011      	b.n	8000fa6 <HAL_DMA_Abort_IT+0xfa>
 8000f82:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000f86:	e00e      	b.n	8000fa6 <HAL_DMA_Abort_IT+0xfa>
 8000f88:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000f8c:	e00b      	b.n	8000fa6 <HAL_DMA_Abort_IT+0xfa>
 8000f8e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f92:	e008      	b.n	8000fa6 <HAL_DMA_Abort_IT+0xfa>
 8000f94:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f98:	e005      	b.n	8000fa6 <HAL_DMA_Abort_IT+0xfa>
 8000f9a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f9e:	e002      	b.n	8000fa6 <HAL_DMA_Abort_IT+0xfa>
 8000fa0:	2310      	movs	r3, #16
 8000fa2:	e000      	b.n	8000fa6 <HAL_DMA_Abort_IT+0xfa>
 8000fa4:	2301      	movs	r3, #1
 8000fa6:	4a43      	ldr	r2, [pc, #268]	; (80010b4 <HAL_DMA_Abort_IT+0x208>)
 8000fa8:	6053      	str	r3, [r2, #4]
 8000faa:	e057      	b.n	800105c <HAL_DMA_Abort_IT+0x1b0>
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	4a36      	ldr	r2, [pc, #216]	; (800108c <HAL_DMA_Abort_IT+0x1e0>)
 8000fb2:	4293      	cmp	r3, r2
 8000fb4:	d04f      	beq.n	8001056 <HAL_DMA_Abort_IT+0x1aa>
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	4a35      	ldr	r2, [pc, #212]	; (8001090 <HAL_DMA_Abort_IT+0x1e4>)
 8000fbc:	4293      	cmp	r3, r2
 8000fbe:	d048      	beq.n	8001052 <HAL_DMA_Abort_IT+0x1a6>
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	4a33      	ldr	r2, [pc, #204]	; (8001094 <HAL_DMA_Abort_IT+0x1e8>)
 8000fc6:	4293      	cmp	r3, r2
 8000fc8:	d040      	beq.n	800104c <HAL_DMA_Abort_IT+0x1a0>
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	4a32      	ldr	r2, [pc, #200]	; (8001098 <HAL_DMA_Abort_IT+0x1ec>)
 8000fd0:	4293      	cmp	r3, r2
 8000fd2:	d038      	beq.n	8001046 <HAL_DMA_Abort_IT+0x19a>
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	4a30      	ldr	r2, [pc, #192]	; (800109c <HAL_DMA_Abort_IT+0x1f0>)
 8000fda:	4293      	cmp	r3, r2
 8000fdc:	d030      	beq.n	8001040 <HAL_DMA_Abort_IT+0x194>
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	4a2f      	ldr	r2, [pc, #188]	; (80010a0 <HAL_DMA_Abort_IT+0x1f4>)
 8000fe4:	4293      	cmp	r3, r2
 8000fe6:	d028      	beq.n	800103a <HAL_DMA_Abort_IT+0x18e>
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	4a26      	ldr	r2, [pc, #152]	; (8001088 <HAL_DMA_Abort_IT+0x1dc>)
 8000fee:	4293      	cmp	r3, r2
 8000ff0:	d020      	beq.n	8001034 <HAL_DMA_Abort_IT+0x188>
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	4a2b      	ldr	r2, [pc, #172]	; (80010a4 <HAL_DMA_Abort_IT+0x1f8>)
 8000ff8:	4293      	cmp	r3, r2
 8000ffa:	d019      	beq.n	8001030 <HAL_DMA_Abort_IT+0x184>
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	4a29      	ldr	r2, [pc, #164]	; (80010a8 <HAL_DMA_Abort_IT+0x1fc>)
 8001002:	4293      	cmp	r3, r2
 8001004:	d012      	beq.n	800102c <HAL_DMA_Abort_IT+0x180>
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	4a28      	ldr	r2, [pc, #160]	; (80010ac <HAL_DMA_Abort_IT+0x200>)
 800100c:	4293      	cmp	r3, r2
 800100e:	d00a      	beq.n	8001026 <HAL_DMA_Abort_IT+0x17a>
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	4a26      	ldr	r2, [pc, #152]	; (80010b0 <HAL_DMA_Abort_IT+0x204>)
 8001016:	4293      	cmp	r3, r2
 8001018:	d102      	bne.n	8001020 <HAL_DMA_Abort_IT+0x174>
 800101a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800101e:	e01b      	b.n	8001058 <HAL_DMA_Abort_IT+0x1ac>
 8001020:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001024:	e018      	b.n	8001058 <HAL_DMA_Abort_IT+0x1ac>
 8001026:	f44f 7380 	mov.w	r3, #256	; 0x100
 800102a:	e015      	b.n	8001058 <HAL_DMA_Abort_IT+0x1ac>
 800102c:	2310      	movs	r3, #16
 800102e:	e013      	b.n	8001058 <HAL_DMA_Abort_IT+0x1ac>
 8001030:	2301      	movs	r3, #1
 8001032:	e011      	b.n	8001058 <HAL_DMA_Abort_IT+0x1ac>
 8001034:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001038:	e00e      	b.n	8001058 <HAL_DMA_Abort_IT+0x1ac>
 800103a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800103e:	e00b      	b.n	8001058 <HAL_DMA_Abort_IT+0x1ac>
 8001040:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001044:	e008      	b.n	8001058 <HAL_DMA_Abort_IT+0x1ac>
 8001046:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800104a:	e005      	b.n	8001058 <HAL_DMA_Abort_IT+0x1ac>
 800104c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001050:	e002      	b.n	8001058 <HAL_DMA_Abort_IT+0x1ac>
 8001052:	2310      	movs	r3, #16
 8001054:	e000      	b.n	8001058 <HAL_DMA_Abort_IT+0x1ac>
 8001056:	2301      	movs	r3, #1
 8001058:	4a17      	ldr	r2, [pc, #92]	; (80010b8 <HAL_DMA_Abort_IT+0x20c>)
 800105a:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	2201      	movs	r2, #1
 8001060:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	2200      	movs	r2, #0
 8001068:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001070:	2b00      	cmp	r3, #0
 8001072:	d003      	beq.n	800107c <HAL_DMA_Abort_IT+0x1d0>
    {
      hdma->XferAbortCallback(hdma);
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001078:	6878      	ldr	r0, [r7, #4]
 800107a:	4798      	blx	r3
    } 
  }
  return status;
 800107c:	7bfb      	ldrb	r3, [r7, #15]
}
 800107e:	4618      	mov	r0, r3
 8001080:	3710      	adds	r7, #16
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}
 8001086:	bf00      	nop
 8001088:	40020080 	.word	0x40020080
 800108c:	40020008 	.word	0x40020008
 8001090:	4002001c 	.word	0x4002001c
 8001094:	40020030 	.word	0x40020030
 8001098:	40020044 	.word	0x40020044
 800109c:	40020058 	.word	0x40020058
 80010a0:	4002006c 	.word	0x4002006c
 80010a4:	40020408 	.word	0x40020408
 80010a8:	4002041c 	.word	0x4002041c
 80010ac:	40020430 	.word	0x40020430
 80010b0:	40020444 	.word	0x40020444
 80010b4:	40020400 	.word	0x40020400
 80010b8:	40020000 	.word	0x40020000

080010bc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010bc:	b480      	push	{r7}
 80010be:	b08b      	sub	sp, #44	; 0x2c
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
 80010c4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80010c6:	2300      	movs	r3, #0
 80010c8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80010ca:	2300      	movs	r3, #0
 80010cc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010ce:	e169      	b.n	80013a4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80010d0:	2201      	movs	r2, #1
 80010d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010d4:	fa02 f303 	lsl.w	r3, r2, r3
 80010d8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80010da:	683b      	ldr	r3, [r7, #0]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	69fa      	ldr	r2, [r7, #28]
 80010e0:	4013      	ands	r3, r2
 80010e2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80010e4:	69ba      	ldr	r2, [r7, #24]
 80010e6:	69fb      	ldr	r3, [r7, #28]
 80010e8:	429a      	cmp	r2, r3
 80010ea:	f040 8158 	bne.w	800139e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80010ee:	683b      	ldr	r3, [r7, #0]
 80010f0:	685b      	ldr	r3, [r3, #4]
 80010f2:	4a9a      	ldr	r2, [pc, #616]	; (800135c <HAL_GPIO_Init+0x2a0>)
 80010f4:	4293      	cmp	r3, r2
 80010f6:	d05e      	beq.n	80011b6 <HAL_GPIO_Init+0xfa>
 80010f8:	4a98      	ldr	r2, [pc, #608]	; (800135c <HAL_GPIO_Init+0x2a0>)
 80010fa:	4293      	cmp	r3, r2
 80010fc:	d875      	bhi.n	80011ea <HAL_GPIO_Init+0x12e>
 80010fe:	4a98      	ldr	r2, [pc, #608]	; (8001360 <HAL_GPIO_Init+0x2a4>)
 8001100:	4293      	cmp	r3, r2
 8001102:	d058      	beq.n	80011b6 <HAL_GPIO_Init+0xfa>
 8001104:	4a96      	ldr	r2, [pc, #600]	; (8001360 <HAL_GPIO_Init+0x2a4>)
 8001106:	4293      	cmp	r3, r2
 8001108:	d86f      	bhi.n	80011ea <HAL_GPIO_Init+0x12e>
 800110a:	4a96      	ldr	r2, [pc, #600]	; (8001364 <HAL_GPIO_Init+0x2a8>)
 800110c:	4293      	cmp	r3, r2
 800110e:	d052      	beq.n	80011b6 <HAL_GPIO_Init+0xfa>
 8001110:	4a94      	ldr	r2, [pc, #592]	; (8001364 <HAL_GPIO_Init+0x2a8>)
 8001112:	4293      	cmp	r3, r2
 8001114:	d869      	bhi.n	80011ea <HAL_GPIO_Init+0x12e>
 8001116:	4a94      	ldr	r2, [pc, #592]	; (8001368 <HAL_GPIO_Init+0x2ac>)
 8001118:	4293      	cmp	r3, r2
 800111a:	d04c      	beq.n	80011b6 <HAL_GPIO_Init+0xfa>
 800111c:	4a92      	ldr	r2, [pc, #584]	; (8001368 <HAL_GPIO_Init+0x2ac>)
 800111e:	4293      	cmp	r3, r2
 8001120:	d863      	bhi.n	80011ea <HAL_GPIO_Init+0x12e>
 8001122:	4a92      	ldr	r2, [pc, #584]	; (800136c <HAL_GPIO_Init+0x2b0>)
 8001124:	4293      	cmp	r3, r2
 8001126:	d046      	beq.n	80011b6 <HAL_GPIO_Init+0xfa>
 8001128:	4a90      	ldr	r2, [pc, #576]	; (800136c <HAL_GPIO_Init+0x2b0>)
 800112a:	4293      	cmp	r3, r2
 800112c:	d85d      	bhi.n	80011ea <HAL_GPIO_Init+0x12e>
 800112e:	2b12      	cmp	r3, #18
 8001130:	d82a      	bhi.n	8001188 <HAL_GPIO_Init+0xcc>
 8001132:	2b12      	cmp	r3, #18
 8001134:	d859      	bhi.n	80011ea <HAL_GPIO_Init+0x12e>
 8001136:	a201      	add	r2, pc, #4	; (adr r2, 800113c <HAL_GPIO_Init+0x80>)
 8001138:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800113c:	080011b7 	.word	0x080011b7
 8001140:	08001191 	.word	0x08001191
 8001144:	080011a3 	.word	0x080011a3
 8001148:	080011e5 	.word	0x080011e5
 800114c:	080011eb 	.word	0x080011eb
 8001150:	080011eb 	.word	0x080011eb
 8001154:	080011eb 	.word	0x080011eb
 8001158:	080011eb 	.word	0x080011eb
 800115c:	080011eb 	.word	0x080011eb
 8001160:	080011eb 	.word	0x080011eb
 8001164:	080011eb 	.word	0x080011eb
 8001168:	080011eb 	.word	0x080011eb
 800116c:	080011eb 	.word	0x080011eb
 8001170:	080011eb 	.word	0x080011eb
 8001174:	080011eb 	.word	0x080011eb
 8001178:	080011eb 	.word	0x080011eb
 800117c:	080011eb 	.word	0x080011eb
 8001180:	08001199 	.word	0x08001199
 8001184:	080011ad 	.word	0x080011ad
 8001188:	4a79      	ldr	r2, [pc, #484]	; (8001370 <HAL_GPIO_Init+0x2b4>)
 800118a:	4293      	cmp	r3, r2
 800118c:	d013      	beq.n	80011b6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800118e:	e02c      	b.n	80011ea <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001190:	683b      	ldr	r3, [r7, #0]
 8001192:	68db      	ldr	r3, [r3, #12]
 8001194:	623b      	str	r3, [r7, #32]
          break;
 8001196:	e029      	b.n	80011ec <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001198:	683b      	ldr	r3, [r7, #0]
 800119a:	68db      	ldr	r3, [r3, #12]
 800119c:	3304      	adds	r3, #4
 800119e:	623b      	str	r3, [r7, #32]
          break;
 80011a0:	e024      	b.n	80011ec <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80011a2:	683b      	ldr	r3, [r7, #0]
 80011a4:	68db      	ldr	r3, [r3, #12]
 80011a6:	3308      	adds	r3, #8
 80011a8:	623b      	str	r3, [r7, #32]
          break;
 80011aa:	e01f      	b.n	80011ec <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80011ac:	683b      	ldr	r3, [r7, #0]
 80011ae:	68db      	ldr	r3, [r3, #12]
 80011b0:	330c      	adds	r3, #12
 80011b2:	623b      	str	r3, [r7, #32]
          break;
 80011b4:	e01a      	b.n	80011ec <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80011b6:	683b      	ldr	r3, [r7, #0]
 80011b8:	689b      	ldr	r3, [r3, #8]
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d102      	bne.n	80011c4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80011be:	2304      	movs	r3, #4
 80011c0:	623b      	str	r3, [r7, #32]
          break;
 80011c2:	e013      	b.n	80011ec <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80011c4:	683b      	ldr	r3, [r7, #0]
 80011c6:	689b      	ldr	r3, [r3, #8]
 80011c8:	2b01      	cmp	r3, #1
 80011ca:	d105      	bne.n	80011d8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80011cc:	2308      	movs	r3, #8
 80011ce:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	69fa      	ldr	r2, [r7, #28]
 80011d4:	611a      	str	r2, [r3, #16]
          break;
 80011d6:	e009      	b.n	80011ec <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80011d8:	2308      	movs	r3, #8
 80011da:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	69fa      	ldr	r2, [r7, #28]
 80011e0:	615a      	str	r2, [r3, #20]
          break;
 80011e2:	e003      	b.n	80011ec <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80011e4:	2300      	movs	r3, #0
 80011e6:	623b      	str	r3, [r7, #32]
          break;
 80011e8:	e000      	b.n	80011ec <HAL_GPIO_Init+0x130>
          break;
 80011ea:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80011ec:	69bb      	ldr	r3, [r7, #24]
 80011ee:	2bff      	cmp	r3, #255	; 0xff
 80011f0:	d801      	bhi.n	80011f6 <HAL_GPIO_Init+0x13a>
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	e001      	b.n	80011fa <HAL_GPIO_Init+0x13e>
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	3304      	adds	r3, #4
 80011fa:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80011fc:	69bb      	ldr	r3, [r7, #24]
 80011fe:	2bff      	cmp	r3, #255	; 0xff
 8001200:	d802      	bhi.n	8001208 <HAL_GPIO_Init+0x14c>
 8001202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001204:	009b      	lsls	r3, r3, #2
 8001206:	e002      	b.n	800120e <HAL_GPIO_Init+0x152>
 8001208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800120a:	3b08      	subs	r3, #8
 800120c:	009b      	lsls	r3, r3, #2
 800120e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001210:	697b      	ldr	r3, [r7, #20]
 8001212:	681a      	ldr	r2, [r3, #0]
 8001214:	210f      	movs	r1, #15
 8001216:	693b      	ldr	r3, [r7, #16]
 8001218:	fa01 f303 	lsl.w	r3, r1, r3
 800121c:	43db      	mvns	r3, r3
 800121e:	401a      	ands	r2, r3
 8001220:	6a39      	ldr	r1, [r7, #32]
 8001222:	693b      	ldr	r3, [r7, #16]
 8001224:	fa01 f303 	lsl.w	r3, r1, r3
 8001228:	431a      	orrs	r2, r3
 800122a:	697b      	ldr	r3, [r7, #20]
 800122c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800122e:	683b      	ldr	r3, [r7, #0]
 8001230:	685b      	ldr	r3, [r3, #4]
 8001232:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001236:	2b00      	cmp	r3, #0
 8001238:	f000 80b1 	beq.w	800139e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800123c:	4b4d      	ldr	r3, [pc, #308]	; (8001374 <HAL_GPIO_Init+0x2b8>)
 800123e:	699b      	ldr	r3, [r3, #24]
 8001240:	4a4c      	ldr	r2, [pc, #304]	; (8001374 <HAL_GPIO_Init+0x2b8>)
 8001242:	f043 0301 	orr.w	r3, r3, #1
 8001246:	6193      	str	r3, [r2, #24]
 8001248:	4b4a      	ldr	r3, [pc, #296]	; (8001374 <HAL_GPIO_Init+0x2b8>)
 800124a:	699b      	ldr	r3, [r3, #24]
 800124c:	f003 0301 	and.w	r3, r3, #1
 8001250:	60bb      	str	r3, [r7, #8]
 8001252:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001254:	4a48      	ldr	r2, [pc, #288]	; (8001378 <HAL_GPIO_Init+0x2bc>)
 8001256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001258:	089b      	lsrs	r3, r3, #2
 800125a:	3302      	adds	r3, #2
 800125c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001260:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001264:	f003 0303 	and.w	r3, r3, #3
 8001268:	009b      	lsls	r3, r3, #2
 800126a:	220f      	movs	r2, #15
 800126c:	fa02 f303 	lsl.w	r3, r2, r3
 8001270:	43db      	mvns	r3, r3
 8001272:	68fa      	ldr	r2, [r7, #12]
 8001274:	4013      	ands	r3, r2
 8001276:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	4a40      	ldr	r2, [pc, #256]	; (800137c <HAL_GPIO_Init+0x2c0>)
 800127c:	4293      	cmp	r3, r2
 800127e:	d013      	beq.n	80012a8 <HAL_GPIO_Init+0x1ec>
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	4a3f      	ldr	r2, [pc, #252]	; (8001380 <HAL_GPIO_Init+0x2c4>)
 8001284:	4293      	cmp	r3, r2
 8001286:	d00d      	beq.n	80012a4 <HAL_GPIO_Init+0x1e8>
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	4a3e      	ldr	r2, [pc, #248]	; (8001384 <HAL_GPIO_Init+0x2c8>)
 800128c:	4293      	cmp	r3, r2
 800128e:	d007      	beq.n	80012a0 <HAL_GPIO_Init+0x1e4>
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	4a3d      	ldr	r2, [pc, #244]	; (8001388 <HAL_GPIO_Init+0x2cc>)
 8001294:	4293      	cmp	r3, r2
 8001296:	d101      	bne.n	800129c <HAL_GPIO_Init+0x1e0>
 8001298:	2303      	movs	r3, #3
 800129a:	e006      	b.n	80012aa <HAL_GPIO_Init+0x1ee>
 800129c:	2304      	movs	r3, #4
 800129e:	e004      	b.n	80012aa <HAL_GPIO_Init+0x1ee>
 80012a0:	2302      	movs	r3, #2
 80012a2:	e002      	b.n	80012aa <HAL_GPIO_Init+0x1ee>
 80012a4:	2301      	movs	r3, #1
 80012a6:	e000      	b.n	80012aa <HAL_GPIO_Init+0x1ee>
 80012a8:	2300      	movs	r3, #0
 80012aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80012ac:	f002 0203 	and.w	r2, r2, #3
 80012b0:	0092      	lsls	r2, r2, #2
 80012b2:	4093      	lsls	r3, r2
 80012b4:	68fa      	ldr	r2, [r7, #12]
 80012b6:	4313      	orrs	r3, r2
 80012b8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80012ba:	492f      	ldr	r1, [pc, #188]	; (8001378 <HAL_GPIO_Init+0x2bc>)
 80012bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012be:	089b      	lsrs	r3, r3, #2
 80012c0:	3302      	adds	r3, #2
 80012c2:	68fa      	ldr	r2, [r7, #12]
 80012c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80012c8:	683b      	ldr	r3, [r7, #0]
 80012ca:	685b      	ldr	r3, [r3, #4]
 80012cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d006      	beq.n	80012e2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80012d4:	4b2d      	ldr	r3, [pc, #180]	; (800138c <HAL_GPIO_Init+0x2d0>)
 80012d6:	681a      	ldr	r2, [r3, #0]
 80012d8:	492c      	ldr	r1, [pc, #176]	; (800138c <HAL_GPIO_Init+0x2d0>)
 80012da:	69bb      	ldr	r3, [r7, #24]
 80012dc:	4313      	orrs	r3, r2
 80012de:	600b      	str	r3, [r1, #0]
 80012e0:	e006      	b.n	80012f0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80012e2:	4b2a      	ldr	r3, [pc, #168]	; (800138c <HAL_GPIO_Init+0x2d0>)
 80012e4:	681a      	ldr	r2, [r3, #0]
 80012e6:	69bb      	ldr	r3, [r7, #24]
 80012e8:	43db      	mvns	r3, r3
 80012ea:	4928      	ldr	r1, [pc, #160]	; (800138c <HAL_GPIO_Init+0x2d0>)
 80012ec:	4013      	ands	r3, r2
 80012ee:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	685b      	ldr	r3, [r3, #4]
 80012f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d006      	beq.n	800130a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80012fc:	4b23      	ldr	r3, [pc, #140]	; (800138c <HAL_GPIO_Init+0x2d0>)
 80012fe:	685a      	ldr	r2, [r3, #4]
 8001300:	4922      	ldr	r1, [pc, #136]	; (800138c <HAL_GPIO_Init+0x2d0>)
 8001302:	69bb      	ldr	r3, [r7, #24]
 8001304:	4313      	orrs	r3, r2
 8001306:	604b      	str	r3, [r1, #4]
 8001308:	e006      	b.n	8001318 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800130a:	4b20      	ldr	r3, [pc, #128]	; (800138c <HAL_GPIO_Init+0x2d0>)
 800130c:	685a      	ldr	r2, [r3, #4]
 800130e:	69bb      	ldr	r3, [r7, #24]
 8001310:	43db      	mvns	r3, r3
 8001312:	491e      	ldr	r1, [pc, #120]	; (800138c <HAL_GPIO_Init+0x2d0>)
 8001314:	4013      	ands	r3, r2
 8001316:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001318:	683b      	ldr	r3, [r7, #0]
 800131a:	685b      	ldr	r3, [r3, #4]
 800131c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001320:	2b00      	cmp	r3, #0
 8001322:	d006      	beq.n	8001332 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001324:	4b19      	ldr	r3, [pc, #100]	; (800138c <HAL_GPIO_Init+0x2d0>)
 8001326:	689a      	ldr	r2, [r3, #8]
 8001328:	4918      	ldr	r1, [pc, #96]	; (800138c <HAL_GPIO_Init+0x2d0>)
 800132a:	69bb      	ldr	r3, [r7, #24]
 800132c:	4313      	orrs	r3, r2
 800132e:	608b      	str	r3, [r1, #8]
 8001330:	e006      	b.n	8001340 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001332:	4b16      	ldr	r3, [pc, #88]	; (800138c <HAL_GPIO_Init+0x2d0>)
 8001334:	689a      	ldr	r2, [r3, #8]
 8001336:	69bb      	ldr	r3, [r7, #24]
 8001338:	43db      	mvns	r3, r3
 800133a:	4914      	ldr	r1, [pc, #80]	; (800138c <HAL_GPIO_Init+0x2d0>)
 800133c:	4013      	ands	r3, r2
 800133e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001340:	683b      	ldr	r3, [r7, #0]
 8001342:	685b      	ldr	r3, [r3, #4]
 8001344:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001348:	2b00      	cmp	r3, #0
 800134a:	d021      	beq.n	8001390 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800134c:	4b0f      	ldr	r3, [pc, #60]	; (800138c <HAL_GPIO_Init+0x2d0>)
 800134e:	68da      	ldr	r2, [r3, #12]
 8001350:	490e      	ldr	r1, [pc, #56]	; (800138c <HAL_GPIO_Init+0x2d0>)
 8001352:	69bb      	ldr	r3, [r7, #24]
 8001354:	4313      	orrs	r3, r2
 8001356:	60cb      	str	r3, [r1, #12]
 8001358:	e021      	b.n	800139e <HAL_GPIO_Init+0x2e2>
 800135a:	bf00      	nop
 800135c:	10320000 	.word	0x10320000
 8001360:	10310000 	.word	0x10310000
 8001364:	10220000 	.word	0x10220000
 8001368:	10210000 	.word	0x10210000
 800136c:	10120000 	.word	0x10120000
 8001370:	10110000 	.word	0x10110000
 8001374:	40021000 	.word	0x40021000
 8001378:	40010000 	.word	0x40010000
 800137c:	40010800 	.word	0x40010800
 8001380:	40010c00 	.word	0x40010c00
 8001384:	40011000 	.word	0x40011000
 8001388:	40011400 	.word	0x40011400
 800138c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001390:	4b0b      	ldr	r3, [pc, #44]	; (80013c0 <HAL_GPIO_Init+0x304>)
 8001392:	68da      	ldr	r2, [r3, #12]
 8001394:	69bb      	ldr	r3, [r7, #24]
 8001396:	43db      	mvns	r3, r3
 8001398:	4909      	ldr	r1, [pc, #36]	; (80013c0 <HAL_GPIO_Init+0x304>)
 800139a:	4013      	ands	r3, r2
 800139c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800139e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013a0:	3301      	adds	r3, #1
 80013a2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	681a      	ldr	r2, [r3, #0]
 80013a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013aa:	fa22 f303 	lsr.w	r3, r2, r3
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	f47f ae8e 	bne.w	80010d0 <HAL_GPIO_Init+0x14>
  }
}
 80013b4:	bf00      	nop
 80013b6:	bf00      	nop
 80013b8:	372c      	adds	r7, #44	; 0x2c
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bc80      	pop	{r7}
 80013be:	4770      	bx	lr
 80013c0:	40010400 	.word	0x40010400

080013c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013c4:	b480      	push	{r7}
 80013c6:	b083      	sub	sp, #12
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
 80013cc:	460b      	mov	r3, r1
 80013ce:	807b      	strh	r3, [r7, #2]
 80013d0:	4613      	mov	r3, r2
 80013d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80013d4:	787b      	ldrb	r3, [r7, #1]
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d003      	beq.n	80013e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80013da:	887a      	ldrh	r2, [r7, #2]
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80013e0:	e003      	b.n	80013ea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80013e2:	887b      	ldrh	r3, [r7, #2]
 80013e4:	041a      	lsls	r2, r3, #16
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	611a      	str	r2, [r3, #16]
}
 80013ea:	bf00      	nop
 80013ec:	370c      	adds	r7, #12
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bc80      	pop	{r7}
 80013f2:	4770      	bx	lr

080013f4 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80013f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013f6:	b08f      	sub	sp, #60	; 0x3c
 80013f8:	af0a      	add	r7, sp, #40	; 0x28
 80013fa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d101      	bne.n	8001406 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8001402:	2301      	movs	r3, #1
 8001404:	e054      	b.n	80014b0 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8001412:	b2db      	uxtb	r3, r3
 8001414:	2b00      	cmp	r3, #0
 8001416:	d106      	bne.n	8001426 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	2200      	movs	r2, #0
 800141c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8001420:	6878      	ldr	r0, [r7, #4]
 8001422:	f00c fb15 	bl	800da50 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	2203      	movs	r2, #3
 800142a:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001432:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001436:	2b00      	cmp	r3, #0
 8001438:	d102      	bne.n	8001440 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	2200      	movs	r2, #0
 800143e:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	4618      	mov	r0, r3
 8001446:	f003 fb0f 	bl	8004a68 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	603b      	str	r3, [r7, #0]
 8001450:	687e      	ldr	r6, [r7, #4]
 8001452:	466d      	mov	r5, sp
 8001454:	f106 0410 	add.w	r4, r6, #16
 8001458:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800145a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800145c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800145e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001460:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001464:	e885 0003 	stmia.w	r5, {r0, r1}
 8001468:	1d33      	adds	r3, r6, #4
 800146a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800146c:	6838      	ldr	r0, [r7, #0]
 800146e:	f003 fac9 	bl	8004a04 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	2101      	movs	r1, #1
 8001478:	4618      	mov	r0, r3
 800147a:	f003 fb05 	bl	8004a88 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	603b      	str	r3, [r7, #0]
 8001484:	687e      	ldr	r6, [r7, #4]
 8001486:	466d      	mov	r5, sp
 8001488:	f106 0410 	add.w	r4, r6, #16
 800148c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800148e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001490:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001492:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001494:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001498:	e885 0003 	stmia.w	r5, {r0, r1}
 800149c:	1d33      	adds	r3, r6, #4
 800149e:	cb0e      	ldmia	r3, {r1, r2, r3}
 80014a0:	6838      	ldr	r0, [r7, #0]
 80014a2:	f003 fc63 	bl	8004d6c <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	2201      	movs	r2, #1
 80014aa:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 80014ae:	2300      	movs	r3, #0
}
 80014b0:	4618      	mov	r0, r3
 80014b2:	3714      	adds	r7, #20
 80014b4:	46bd      	mov	sp, r7
 80014b6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080014b8 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 80014b8:	b590      	push	{r4, r7, lr}
 80014ba:	b089      	sub	sp, #36	; 0x24
 80014bc:	af04      	add	r7, sp, #16
 80014be:	6078      	str	r0, [r7, #4]
 80014c0:	4608      	mov	r0, r1
 80014c2:	4611      	mov	r1, r2
 80014c4:	461a      	mov	r2, r3
 80014c6:	4603      	mov	r3, r0
 80014c8:	70fb      	strb	r3, [r7, #3]
 80014ca:	460b      	mov	r3, r1
 80014cc:	70bb      	strb	r3, [r7, #2]
 80014ce:	4613      	mov	r3, r2
 80014d0:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80014d8:	2b01      	cmp	r3, #1
 80014da:	d101      	bne.n	80014e0 <HAL_HCD_HC_Init+0x28>
 80014dc:	2302      	movs	r3, #2
 80014de:	e076      	b.n	80015ce <HAL_HCD_HC_Init+0x116>
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	2201      	movs	r2, #1
 80014e4:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 80014e8:	78fb      	ldrb	r3, [r7, #3]
 80014ea:	687a      	ldr	r2, [r7, #4]
 80014ec:	212c      	movs	r1, #44	; 0x2c
 80014ee:	fb01 f303 	mul.w	r3, r1, r3
 80014f2:	4413      	add	r3, r2
 80014f4:	333d      	adds	r3, #61	; 0x3d
 80014f6:	2200      	movs	r2, #0
 80014f8:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80014fa:	78fb      	ldrb	r3, [r7, #3]
 80014fc:	687a      	ldr	r2, [r7, #4]
 80014fe:	212c      	movs	r1, #44	; 0x2c
 8001500:	fb01 f303 	mul.w	r3, r1, r3
 8001504:	4413      	add	r3, r2
 8001506:	3338      	adds	r3, #56	; 0x38
 8001508:	787a      	ldrb	r2, [r7, #1]
 800150a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 800150c:	78fb      	ldrb	r3, [r7, #3]
 800150e:	687a      	ldr	r2, [r7, #4]
 8001510:	212c      	movs	r1, #44	; 0x2c
 8001512:	fb01 f303 	mul.w	r3, r1, r3
 8001516:	4413      	add	r3, r2
 8001518:	3340      	adds	r3, #64	; 0x40
 800151a:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800151c:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800151e:	78fb      	ldrb	r3, [r7, #3]
 8001520:	687a      	ldr	r2, [r7, #4]
 8001522:	212c      	movs	r1, #44	; 0x2c
 8001524:	fb01 f303 	mul.w	r3, r1, r3
 8001528:	4413      	add	r3, r2
 800152a:	3339      	adds	r3, #57	; 0x39
 800152c:	78fa      	ldrb	r2, [r7, #3]
 800152e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8001530:	78fb      	ldrb	r3, [r7, #3]
 8001532:	687a      	ldr	r2, [r7, #4]
 8001534:	212c      	movs	r1, #44	; 0x2c
 8001536:	fb01 f303 	mul.w	r3, r1, r3
 800153a:	4413      	add	r3, r2
 800153c:	333f      	adds	r3, #63	; 0x3f
 800153e:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001542:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8001544:	78fb      	ldrb	r3, [r7, #3]
 8001546:	78ba      	ldrb	r2, [r7, #2]
 8001548:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800154c:	b2d0      	uxtb	r0, r2
 800154e:	687a      	ldr	r2, [r7, #4]
 8001550:	212c      	movs	r1, #44	; 0x2c
 8001552:	fb01 f303 	mul.w	r3, r1, r3
 8001556:	4413      	add	r3, r2
 8001558:	333a      	adds	r3, #58	; 0x3a
 800155a:	4602      	mov	r2, r0
 800155c:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 800155e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001562:	2b00      	cmp	r3, #0
 8001564:	da09      	bge.n	800157a <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8001566:	78fb      	ldrb	r3, [r7, #3]
 8001568:	687a      	ldr	r2, [r7, #4]
 800156a:	212c      	movs	r1, #44	; 0x2c
 800156c:	fb01 f303 	mul.w	r3, r1, r3
 8001570:	4413      	add	r3, r2
 8001572:	333b      	adds	r3, #59	; 0x3b
 8001574:	2201      	movs	r2, #1
 8001576:	701a      	strb	r2, [r3, #0]
 8001578:	e008      	b.n	800158c <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 800157a:	78fb      	ldrb	r3, [r7, #3]
 800157c:	687a      	ldr	r2, [r7, #4]
 800157e:	212c      	movs	r1, #44	; 0x2c
 8001580:	fb01 f303 	mul.w	r3, r1, r3
 8001584:	4413      	add	r3, r2
 8001586:	333b      	adds	r3, #59	; 0x3b
 8001588:	2200      	movs	r2, #0
 800158a:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 800158c:	78fb      	ldrb	r3, [r7, #3]
 800158e:	687a      	ldr	r2, [r7, #4]
 8001590:	212c      	movs	r1, #44	; 0x2c
 8001592:	fb01 f303 	mul.w	r3, r1, r3
 8001596:	4413      	add	r3, r2
 8001598:	333c      	adds	r3, #60	; 0x3c
 800159a:	f897 2020 	ldrb.w	r2, [r7, #32]
 800159e:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	6818      	ldr	r0, [r3, #0]
 80015a4:	787c      	ldrb	r4, [r7, #1]
 80015a6:	78ba      	ldrb	r2, [r7, #2]
 80015a8:	78f9      	ldrb	r1, [r7, #3]
 80015aa:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80015ac:	9302      	str	r3, [sp, #8]
 80015ae:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80015b2:	9301      	str	r3, [sp, #4]
 80015b4:	f897 3020 	ldrb.w	r3, [r7, #32]
 80015b8:	9300      	str	r3, [sp, #0]
 80015ba:	4623      	mov	r3, r4
 80015bc:	f003 fd0e 	bl	8004fdc <USB_HC_Init>
 80015c0:	4603      	mov	r3, r0
 80015c2:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	2200      	movs	r2, #0
 80015c8:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80015cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80015ce:	4618      	mov	r0, r3
 80015d0:	3714      	adds	r7, #20
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bd90      	pop	{r4, r7, pc}

080015d6 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80015d6:	b580      	push	{r7, lr}
 80015d8:	b084      	sub	sp, #16
 80015da:	af00      	add	r7, sp, #0
 80015dc:	6078      	str	r0, [r7, #4]
 80015de:	460b      	mov	r3, r1
 80015e0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80015e2:	2300      	movs	r3, #0
 80015e4:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80015ec:	2b01      	cmp	r3, #1
 80015ee:	d101      	bne.n	80015f4 <HAL_HCD_HC_Halt+0x1e>
 80015f0:	2302      	movs	r3, #2
 80015f2:	e00f      	b.n	8001614 <HAL_HCD_HC_Halt+0x3e>
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	2201      	movs	r2, #1
 80015f8:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	78fa      	ldrb	r2, [r7, #3]
 8001602:	4611      	mov	r1, r2
 8001604:	4618      	mov	r0, r3
 8001606:	f003 fee9 	bl	80053dc <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	2200      	movs	r2, #0
 800160e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8001612:	7bfb      	ldrb	r3, [r7, #15]
}
 8001614:	4618      	mov	r0, r3
 8001616:	3710      	adds	r7, #16
 8001618:	46bd      	mov	sp, r7
 800161a:	bd80      	pop	{r7, pc}

0800161c <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b082      	sub	sp, #8
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
 8001624:	4608      	mov	r0, r1
 8001626:	4611      	mov	r1, r2
 8001628:	461a      	mov	r2, r3
 800162a:	4603      	mov	r3, r0
 800162c:	70fb      	strb	r3, [r7, #3]
 800162e:	460b      	mov	r3, r1
 8001630:	70bb      	strb	r3, [r7, #2]
 8001632:	4613      	mov	r3, r2
 8001634:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8001636:	78fb      	ldrb	r3, [r7, #3]
 8001638:	687a      	ldr	r2, [r7, #4]
 800163a:	212c      	movs	r1, #44	; 0x2c
 800163c:	fb01 f303 	mul.w	r3, r1, r3
 8001640:	4413      	add	r3, r2
 8001642:	333b      	adds	r3, #59	; 0x3b
 8001644:	78ba      	ldrb	r2, [r7, #2]
 8001646:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8001648:	78fb      	ldrb	r3, [r7, #3]
 800164a:	687a      	ldr	r2, [r7, #4]
 800164c:	212c      	movs	r1, #44	; 0x2c
 800164e:	fb01 f303 	mul.w	r3, r1, r3
 8001652:	4413      	add	r3, r2
 8001654:	333f      	adds	r3, #63	; 0x3f
 8001656:	787a      	ldrb	r2, [r7, #1]
 8001658:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 800165a:	7c3b      	ldrb	r3, [r7, #16]
 800165c:	2b00      	cmp	r3, #0
 800165e:	d112      	bne.n	8001686 <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8001660:	78fb      	ldrb	r3, [r7, #3]
 8001662:	687a      	ldr	r2, [r7, #4]
 8001664:	212c      	movs	r1, #44	; 0x2c
 8001666:	fb01 f303 	mul.w	r3, r1, r3
 800166a:	4413      	add	r3, r2
 800166c:	3342      	adds	r3, #66	; 0x42
 800166e:	2203      	movs	r2, #3
 8001670:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8001672:	78fb      	ldrb	r3, [r7, #3]
 8001674:	687a      	ldr	r2, [r7, #4]
 8001676:	212c      	movs	r1, #44	; 0x2c
 8001678:	fb01 f303 	mul.w	r3, r1, r3
 800167c:	4413      	add	r3, r2
 800167e:	333d      	adds	r3, #61	; 0x3d
 8001680:	7f3a      	ldrb	r2, [r7, #28]
 8001682:	701a      	strb	r2, [r3, #0]
 8001684:	e008      	b.n	8001698 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001686:	78fb      	ldrb	r3, [r7, #3]
 8001688:	687a      	ldr	r2, [r7, #4]
 800168a:	212c      	movs	r1, #44	; 0x2c
 800168c:	fb01 f303 	mul.w	r3, r1, r3
 8001690:	4413      	add	r3, r2
 8001692:	3342      	adds	r3, #66	; 0x42
 8001694:	2202      	movs	r2, #2
 8001696:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8001698:	787b      	ldrb	r3, [r7, #1]
 800169a:	2b03      	cmp	r3, #3
 800169c:	f200 80c6 	bhi.w	800182c <HAL_HCD_HC_SubmitRequest+0x210>
 80016a0:	a201      	add	r2, pc, #4	; (adr r2, 80016a8 <HAL_HCD_HC_SubmitRequest+0x8c>)
 80016a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016a6:	bf00      	nop
 80016a8:	080016b9 	.word	0x080016b9
 80016ac:	08001819 	.word	0x08001819
 80016b0:	0800171d 	.word	0x0800171d
 80016b4:	0800179b 	.word	0x0800179b
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 80016b8:	7c3b      	ldrb	r3, [r7, #16]
 80016ba:	2b01      	cmp	r3, #1
 80016bc:	f040 80b8 	bne.w	8001830 <HAL_HCD_HC_SubmitRequest+0x214>
 80016c0:	78bb      	ldrb	r3, [r7, #2]
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	f040 80b4 	bne.w	8001830 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 80016c8:	8b3b      	ldrh	r3, [r7, #24]
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d108      	bne.n	80016e0 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 80016ce:	78fb      	ldrb	r3, [r7, #3]
 80016d0:	687a      	ldr	r2, [r7, #4]
 80016d2:	212c      	movs	r1, #44	; 0x2c
 80016d4:	fb01 f303 	mul.w	r3, r1, r3
 80016d8:	4413      	add	r3, r2
 80016da:	3355      	adds	r3, #85	; 0x55
 80016dc:	2201      	movs	r2, #1
 80016de:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80016e0:	78fb      	ldrb	r3, [r7, #3]
 80016e2:	687a      	ldr	r2, [r7, #4]
 80016e4:	212c      	movs	r1, #44	; 0x2c
 80016e6:	fb01 f303 	mul.w	r3, r1, r3
 80016ea:	4413      	add	r3, r2
 80016ec:	3355      	adds	r3, #85	; 0x55
 80016ee:	781b      	ldrb	r3, [r3, #0]
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d109      	bne.n	8001708 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80016f4:	78fb      	ldrb	r3, [r7, #3]
 80016f6:	687a      	ldr	r2, [r7, #4]
 80016f8:	212c      	movs	r1, #44	; 0x2c
 80016fa:	fb01 f303 	mul.w	r3, r1, r3
 80016fe:	4413      	add	r3, r2
 8001700:	3342      	adds	r3, #66	; 0x42
 8001702:	2200      	movs	r2, #0
 8001704:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001706:	e093      	b.n	8001830 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001708:	78fb      	ldrb	r3, [r7, #3]
 800170a:	687a      	ldr	r2, [r7, #4]
 800170c:	212c      	movs	r1, #44	; 0x2c
 800170e:	fb01 f303 	mul.w	r3, r1, r3
 8001712:	4413      	add	r3, r2
 8001714:	3342      	adds	r3, #66	; 0x42
 8001716:	2202      	movs	r2, #2
 8001718:	701a      	strb	r2, [r3, #0]
      break;
 800171a:	e089      	b.n	8001830 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 800171c:	78bb      	ldrb	r3, [r7, #2]
 800171e:	2b00      	cmp	r3, #0
 8001720:	d11d      	bne.n	800175e <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001722:	78fb      	ldrb	r3, [r7, #3]
 8001724:	687a      	ldr	r2, [r7, #4]
 8001726:	212c      	movs	r1, #44	; 0x2c
 8001728:	fb01 f303 	mul.w	r3, r1, r3
 800172c:	4413      	add	r3, r2
 800172e:	3355      	adds	r3, #85	; 0x55
 8001730:	781b      	ldrb	r3, [r3, #0]
 8001732:	2b00      	cmp	r3, #0
 8001734:	d109      	bne.n	800174a <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001736:	78fb      	ldrb	r3, [r7, #3]
 8001738:	687a      	ldr	r2, [r7, #4]
 800173a:	212c      	movs	r1, #44	; 0x2c
 800173c:	fb01 f303 	mul.w	r3, r1, r3
 8001740:	4413      	add	r3, r2
 8001742:	3342      	adds	r3, #66	; 0x42
 8001744:	2200      	movs	r2, #0
 8001746:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8001748:	e073      	b.n	8001832 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800174a:	78fb      	ldrb	r3, [r7, #3]
 800174c:	687a      	ldr	r2, [r7, #4]
 800174e:	212c      	movs	r1, #44	; 0x2c
 8001750:	fb01 f303 	mul.w	r3, r1, r3
 8001754:	4413      	add	r3, r2
 8001756:	3342      	adds	r3, #66	; 0x42
 8001758:	2202      	movs	r2, #2
 800175a:	701a      	strb	r2, [r3, #0]
      break;
 800175c:	e069      	b.n	8001832 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800175e:	78fb      	ldrb	r3, [r7, #3]
 8001760:	687a      	ldr	r2, [r7, #4]
 8001762:	212c      	movs	r1, #44	; 0x2c
 8001764:	fb01 f303 	mul.w	r3, r1, r3
 8001768:	4413      	add	r3, r2
 800176a:	3354      	adds	r3, #84	; 0x54
 800176c:	781b      	ldrb	r3, [r3, #0]
 800176e:	2b00      	cmp	r3, #0
 8001770:	d109      	bne.n	8001786 <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001772:	78fb      	ldrb	r3, [r7, #3]
 8001774:	687a      	ldr	r2, [r7, #4]
 8001776:	212c      	movs	r1, #44	; 0x2c
 8001778:	fb01 f303 	mul.w	r3, r1, r3
 800177c:	4413      	add	r3, r2
 800177e:	3342      	adds	r3, #66	; 0x42
 8001780:	2200      	movs	r2, #0
 8001782:	701a      	strb	r2, [r3, #0]
      break;
 8001784:	e055      	b.n	8001832 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001786:	78fb      	ldrb	r3, [r7, #3]
 8001788:	687a      	ldr	r2, [r7, #4]
 800178a:	212c      	movs	r1, #44	; 0x2c
 800178c:	fb01 f303 	mul.w	r3, r1, r3
 8001790:	4413      	add	r3, r2
 8001792:	3342      	adds	r3, #66	; 0x42
 8001794:	2202      	movs	r2, #2
 8001796:	701a      	strb	r2, [r3, #0]
      break;
 8001798:	e04b      	b.n	8001832 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 800179a:	78bb      	ldrb	r3, [r7, #2]
 800179c:	2b00      	cmp	r3, #0
 800179e:	d11d      	bne.n	80017dc <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80017a0:	78fb      	ldrb	r3, [r7, #3]
 80017a2:	687a      	ldr	r2, [r7, #4]
 80017a4:	212c      	movs	r1, #44	; 0x2c
 80017a6:	fb01 f303 	mul.w	r3, r1, r3
 80017aa:	4413      	add	r3, r2
 80017ac:	3355      	adds	r3, #85	; 0x55
 80017ae:	781b      	ldrb	r3, [r3, #0]
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d109      	bne.n	80017c8 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80017b4:	78fb      	ldrb	r3, [r7, #3]
 80017b6:	687a      	ldr	r2, [r7, #4]
 80017b8:	212c      	movs	r1, #44	; 0x2c
 80017ba:	fb01 f303 	mul.w	r3, r1, r3
 80017be:	4413      	add	r3, r2
 80017c0:	3342      	adds	r3, #66	; 0x42
 80017c2:	2200      	movs	r2, #0
 80017c4:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80017c6:	e034      	b.n	8001832 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80017c8:	78fb      	ldrb	r3, [r7, #3]
 80017ca:	687a      	ldr	r2, [r7, #4]
 80017cc:	212c      	movs	r1, #44	; 0x2c
 80017ce:	fb01 f303 	mul.w	r3, r1, r3
 80017d2:	4413      	add	r3, r2
 80017d4:	3342      	adds	r3, #66	; 0x42
 80017d6:	2202      	movs	r2, #2
 80017d8:	701a      	strb	r2, [r3, #0]
      break;
 80017da:	e02a      	b.n	8001832 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80017dc:	78fb      	ldrb	r3, [r7, #3]
 80017de:	687a      	ldr	r2, [r7, #4]
 80017e0:	212c      	movs	r1, #44	; 0x2c
 80017e2:	fb01 f303 	mul.w	r3, r1, r3
 80017e6:	4413      	add	r3, r2
 80017e8:	3354      	adds	r3, #84	; 0x54
 80017ea:	781b      	ldrb	r3, [r3, #0]
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d109      	bne.n	8001804 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80017f0:	78fb      	ldrb	r3, [r7, #3]
 80017f2:	687a      	ldr	r2, [r7, #4]
 80017f4:	212c      	movs	r1, #44	; 0x2c
 80017f6:	fb01 f303 	mul.w	r3, r1, r3
 80017fa:	4413      	add	r3, r2
 80017fc:	3342      	adds	r3, #66	; 0x42
 80017fe:	2200      	movs	r2, #0
 8001800:	701a      	strb	r2, [r3, #0]
      break;
 8001802:	e016      	b.n	8001832 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001804:	78fb      	ldrb	r3, [r7, #3]
 8001806:	687a      	ldr	r2, [r7, #4]
 8001808:	212c      	movs	r1, #44	; 0x2c
 800180a:	fb01 f303 	mul.w	r3, r1, r3
 800180e:	4413      	add	r3, r2
 8001810:	3342      	adds	r3, #66	; 0x42
 8001812:	2202      	movs	r2, #2
 8001814:	701a      	strb	r2, [r3, #0]
      break;
 8001816:	e00c      	b.n	8001832 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001818:	78fb      	ldrb	r3, [r7, #3]
 800181a:	687a      	ldr	r2, [r7, #4]
 800181c:	212c      	movs	r1, #44	; 0x2c
 800181e:	fb01 f303 	mul.w	r3, r1, r3
 8001822:	4413      	add	r3, r2
 8001824:	3342      	adds	r3, #66	; 0x42
 8001826:	2200      	movs	r2, #0
 8001828:	701a      	strb	r2, [r3, #0]
      break;
 800182a:	e002      	b.n	8001832 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 800182c:	bf00      	nop
 800182e:	e000      	b.n	8001832 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8001830:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8001832:	78fb      	ldrb	r3, [r7, #3]
 8001834:	687a      	ldr	r2, [r7, #4]
 8001836:	212c      	movs	r1, #44	; 0x2c
 8001838:	fb01 f303 	mul.w	r3, r1, r3
 800183c:	4413      	add	r3, r2
 800183e:	3344      	adds	r3, #68	; 0x44
 8001840:	697a      	ldr	r2, [r7, #20]
 8001842:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8001844:	78fb      	ldrb	r3, [r7, #3]
 8001846:	8b3a      	ldrh	r2, [r7, #24]
 8001848:	6879      	ldr	r1, [r7, #4]
 800184a:	202c      	movs	r0, #44	; 0x2c
 800184c:	fb00 f303 	mul.w	r3, r0, r3
 8001850:	440b      	add	r3, r1
 8001852:	334c      	adds	r3, #76	; 0x4c
 8001854:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8001856:	78fb      	ldrb	r3, [r7, #3]
 8001858:	687a      	ldr	r2, [r7, #4]
 800185a:	212c      	movs	r1, #44	; 0x2c
 800185c:	fb01 f303 	mul.w	r3, r1, r3
 8001860:	4413      	add	r3, r2
 8001862:	3360      	adds	r3, #96	; 0x60
 8001864:	2200      	movs	r2, #0
 8001866:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8001868:	78fb      	ldrb	r3, [r7, #3]
 800186a:	687a      	ldr	r2, [r7, #4]
 800186c:	212c      	movs	r1, #44	; 0x2c
 800186e:	fb01 f303 	mul.w	r3, r1, r3
 8001872:	4413      	add	r3, r2
 8001874:	3350      	adds	r3, #80	; 0x50
 8001876:	2200      	movs	r2, #0
 8001878:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800187a:	78fb      	ldrb	r3, [r7, #3]
 800187c:	687a      	ldr	r2, [r7, #4]
 800187e:	212c      	movs	r1, #44	; 0x2c
 8001880:	fb01 f303 	mul.w	r3, r1, r3
 8001884:	4413      	add	r3, r2
 8001886:	3339      	adds	r3, #57	; 0x39
 8001888:	78fa      	ldrb	r2, [r7, #3]
 800188a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 800188c:	78fb      	ldrb	r3, [r7, #3]
 800188e:	687a      	ldr	r2, [r7, #4]
 8001890:	212c      	movs	r1, #44	; 0x2c
 8001892:	fb01 f303 	mul.w	r3, r1, r3
 8001896:	4413      	add	r3, r2
 8001898:	3361      	adds	r3, #97	; 0x61
 800189a:	2200      	movs	r2, #0
 800189c:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num]);
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	6818      	ldr	r0, [r3, #0]
 80018a2:	78fb      	ldrb	r3, [r7, #3]
 80018a4:	222c      	movs	r2, #44	; 0x2c
 80018a6:	fb02 f303 	mul.w	r3, r2, r3
 80018aa:	3338      	adds	r3, #56	; 0x38
 80018ac:	687a      	ldr	r2, [r7, #4]
 80018ae:	4413      	add	r3, r2
 80018b0:	4619      	mov	r1, r3
 80018b2:	f003 fc8b 	bl	80051cc <USB_HC_StartXfer>
 80018b6:	4603      	mov	r3, r0
}
 80018b8:	4618      	mov	r0, r3
 80018ba:	3708      	adds	r7, #8
 80018bc:	46bd      	mov	sp, r7
 80018be:	bd80      	pop	{r7, pc}

080018c0 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b086      	sub	sp, #24
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80018ce:	693b      	ldr	r3, [r7, #16]
 80018d0:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	4618      	mov	r0, r3
 80018d8:	f003 fa08 	bl	8004cec <USB_GetMode>
 80018dc:	4603      	mov	r3, r0
 80018de:	2b01      	cmp	r3, #1
 80018e0:	f040 80ef 	bne.w	8001ac2 <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	4618      	mov	r0, r3
 80018ea:	f003 f9ed 	bl	8004cc8 <USB_ReadInterrupts>
 80018ee:	4603      	mov	r3, r0
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	f000 80e5 	beq.w	8001ac0 <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	4618      	mov	r0, r3
 80018fc:	f003 f9e4 	bl	8004cc8 <USB_ReadInterrupts>
 8001900:	4603      	mov	r3, r0
 8001902:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001906:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800190a:	d104      	bne.n	8001916 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001914:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	4618      	mov	r0, r3
 800191c:	f003 f9d4 	bl	8004cc8 <USB_ReadInterrupts>
 8001920:	4603      	mov	r3, r0
 8001922:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001926:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800192a:	d104      	bne.n	8001936 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001934:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	4618      	mov	r0, r3
 800193c:	f003 f9c4 	bl	8004cc8 <USB_ReadInterrupts>
 8001940:	4603      	mov	r3, r0
 8001942:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001946:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800194a:	d104      	bne.n	8001956 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001954:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	4618      	mov	r0, r3
 800195c:	f003 f9b4 	bl	8004cc8 <USB_ReadInterrupts>
 8001960:	4603      	mov	r3, r0
 8001962:	f003 0302 	and.w	r3, r3, #2
 8001966:	2b02      	cmp	r3, #2
 8001968:	d103      	bne.n	8001972 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	2202      	movs	r2, #2
 8001970:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	4618      	mov	r0, r3
 8001978:	f003 f9a6 	bl	8004cc8 <USB_ReadInterrupts>
 800197c:	4603      	mov	r3, r0
 800197e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001982:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001986:	d115      	bne.n	80019b4 <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001990:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f003 0301 	and.w	r3, r3, #1
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d108      	bne.n	80019b4 <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 80019a2:	6878      	ldr	r0, [r7, #4]
 80019a4:	f00c f894 	bl	800dad0 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	2101      	movs	r1, #1
 80019ae:	4618      	mov	r0, r3
 80019b0:	f003 fa52 	bl	8004e58 <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	4618      	mov	r0, r3
 80019ba:	f003 f985 	bl	8004cc8 <USB_ReadInterrupts>
 80019be:	4603      	mov	r3, r0
 80019c0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80019c4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80019c8:	d102      	bne.n	80019d0 <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 80019ca:	6878      	ldr	r0, [r7, #4]
 80019cc:	f001 f978 	bl	8002cc0 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	4618      	mov	r0, r3
 80019d6:	f003 f977 	bl	8004cc8 <USB_ReadInterrupts>
 80019da:	4603      	mov	r3, r0
 80019dc:	f003 0308 	and.w	r3, r3, #8
 80019e0:	2b08      	cmp	r3, #8
 80019e2:	d106      	bne.n	80019f2 <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 80019e4:	6878      	ldr	r0, [r7, #4]
 80019e6:	f00c f857 	bl	800da98 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	2208      	movs	r2, #8
 80019f0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	4618      	mov	r0, r3
 80019f8:	f003 f966 	bl	8004cc8 <USB_ReadInterrupts>
 80019fc:	4603      	mov	r3, r0
 80019fe:	f003 0310 	and.w	r3, r3, #16
 8001a02:	2b10      	cmp	r3, #16
 8001a04:	d101      	bne.n	8001a0a <HAL_HCD_IRQHandler+0x14a>
 8001a06:	2301      	movs	r3, #1
 8001a08:	e000      	b.n	8001a0c <HAL_HCD_IRQHandler+0x14c>
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d012      	beq.n	8001a36 <HAL_HCD_IRQHandler+0x176>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	699a      	ldr	r2, [r3, #24]
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f022 0210 	bic.w	r2, r2, #16
 8001a1e:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001a20:	6878      	ldr	r0, [r7, #4]
 8001a22:	f001 f87b 	bl	8002b1c <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	699a      	ldr	r2, [r3, #24]
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f042 0210 	orr.w	r2, r2, #16
 8001a34:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	f003 f944 	bl	8004cc8 <USB_ReadInterrupts>
 8001a40:	4603      	mov	r3, r0
 8001a42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a46:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001a4a:	d13a      	bne.n	8001ac2 <HAL_HCD_IRQHandler+0x202>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	4618      	mov	r0, r3
 8001a52:	f003 fcb3 	bl	80053bc <USB_HC_ReadInterrupt>
 8001a56:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001a58:	2300      	movs	r3, #0
 8001a5a:	617b      	str	r3, [r7, #20]
 8001a5c:	e025      	b.n	8001aaa <HAL_HCD_IRQHandler+0x1ea>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001a5e:	697b      	ldr	r3, [r7, #20]
 8001a60:	f003 030f 	and.w	r3, r3, #15
 8001a64:	68ba      	ldr	r2, [r7, #8]
 8001a66:	fa22 f303 	lsr.w	r3, r2, r3
 8001a6a:	f003 0301 	and.w	r3, r3, #1
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d018      	beq.n	8001aa4 <HAL_HCD_IRQHandler+0x1e4>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001a72:	697b      	ldr	r3, [r7, #20]
 8001a74:	015a      	lsls	r2, r3, #5
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	4413      	add	r3, r2
 8001a7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001a84:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001a88:	d106      	bne.n	8001a98 <HAL_HCD_IRQHandler+0x1d8>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001a8a:	697b      	ldr	r3, [r7, #20]
 8001a8c:	b2db      	uxtb	r3, r3
 8001a8e:	4619      	mov	r1, r3
 8001a90:	6878      	ldr	r0, [r7, #4]
 8001a92:	f000 f8a9 	bl	8001be8 <HCD_HC_IN_IRQHandler>
 8001a96:	e005      	b.n	8001aa4 <HAL_HCD_IRQHandler+0x1e4>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001a98:	697b      	ldr	r3, [r7, #20]
 8001a9a:	b2db      	uxtb	r3, r3
 8001a9c:	4619      	mov	r1, r3
 8001a9e:	6878      	ldr	r0, [r7, #4]
 8001aa0:	f000 fca2 	bl	80023e8 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001aa4:	697b      	ldr	r3, [r7, #20]
 8001aa6:	3301      	adds	r3, #1
 8001aa8:	617b      	str	r3, [r7, #20]
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	689b      	ldr	r3, [r3, #8]
 8001aae:	697a      	ldr	r2, [r7, #20]
 8001ab0:	429a      	cmp	r2, r3
 8001ab2:	d3d4      	bcc.n	8001a5e <HAL_HCD_IRQHandler+0x19e>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001abc:	615a      	str	r2, [r3, #20]
 8001abe:	e000      	b.n	8001ac2 <HAL_HCD_IRQHandler+0x202>
      return;
 8001ac0:	bf00      	nop
    }
  }
}
 8001ac2:	3718      	adds	r7, #24
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	bd80      	pop	{r7, pc}

08001ac8 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b082      	sub	sp, #8
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001ad6:	2b01      	cmp	r3, #1
 8001ad8:	d101      	bne.n	8001ade <HAL_HCD_Start+0x16>
 8001ada:	2302      	movs	r3, #2
 8001adc:	e013      	b.n	8001b06 <HAL_HCD_Start+0x3e>
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	2201      	movs	r2, #1
 8001ae2:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	2101      	movs	r1, #1
 8001aec:	4618      	mov	r0, r3
 8001aee:	f003 fa16 	bl	8004f1e <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	4618      	mov	r0, r3
 8001af8:	f002 ffa6 	bl	8004a48 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	2200      	movs	r2, #0
 8001b00:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8001b04:	2300      	movs	r3, #0
}
 8001b06:	4618      	mov	r0, r3
 8001b08:	3708      	adds	r7, #8
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	bd80      	pop	{r7, pc}

08001b0e <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001b0e:	b580      	push	{r7, lr}
 8001b10:	b082      	sub	sp, #8
 8001b12:	af00      	add	r7, sp, #0
 8001b14:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001b1c:	2b01      	cmp	r3, #1
 8001b1e:	d101      	bne.n	8001b24 <HAL_HCD_Stop+0x16>
 8001b20:	2302      	movs	r3, #2
 8001b22:	e00d      	b.n	8001b40 <HAL_HCD_Stop+0x32>
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	2201      	movs	r2, #1
 8001b28:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	4618      	mov	r0, r3
 8001b32:	f003 fd6e 	bl	8005612 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	2200      	movs	r2, #0
 8001b3a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8001b3e:	2300      	movs	r3, #0
}
 8001b40:	4618      	mov	r0, r3
 8001b42:	3708      	adds	r7, #8
 8001b44:	46bd      	mov	sp, r7
 8001b46:	bd80      	pop	{r7, pc}

08001b48 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b082      	sub	sp, #8
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	4618      	mov	r0, r3
 8001b56:	f003 f9b8 	bl	8004eca <USB_ResetPort>
 8001b5a:	4603      	mov	r3, r0
}
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	3708      	adds	r7, #8
 8001b60:	46bd      	mov	sp, r7
 8001b62:	bd80      	pop	{r7, pc}

08001b64 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001b64:	b480      	push	{r7}
 8001b66:	b083      	sub	sp, #12
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
 8001b6c:	460b      	mov	r3, r1
 8001b6e:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8001b70:	78fb      	ldrb	r3, [r7, #3]
 8001b72:	687a      	ldr	r2, [r7, #4]
 8001b74:	212c      	movs	r1, #44	; 0x2c
 8001b76:	fb01 f303 	mul.w	r3, r1, r3
 8001b7a:	4413      	add	r3, r2
 8001b7c:	3360      	adds	r3, #96	; 0x60
 8001b7e:	781b      	ldrb	r3, [r3, #0]
}
 8001b80:	4618      	mov	r0, r3
 8001b82:	370c      	adds	r7, #12
 8001b84:	46bd      	mov	sp, r7
 8001b86:	bc80      	pop	{r7}
 8001b88:	4770      	bx	lr

08001b8a <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001b8a:	b480      	push	{r7}
 8001b8c:	b083      	sub	sp, #12
 8001b8e:	af00      	add	r7, sp, #0
 8001b90:	6078      	str	r0, [r7, #4]
 8001b92:	460b      	mov	r3, r1
 8001b94:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8001b96:	78fb      	ldrb	r3, [r7, #3]
 8001b98:	687a      	ldr	r2, [r7, #4]
 8001b9a:	212c      	movs	r1, #44	; 0x2c
 8001b9c:	fb01 f303 	mul.w	r3, r1, r3
 8001ba0:	4413      	add	r3, r2
 8001ba2:	3350      	adds	r3, #80	; 0x50
 8001ba4:	681b      	ldr	r3, [r3, #0]
}
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	370c      	adds	r7, #12
 8001baa:	46bd      	mov	sp, r7
 8001bac:	bc80      	pop	{r7}
 8001bae:	4770      	bx	lr

08001bb0 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b082      	sub	sp, #8
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	f003 f9fc 	bl	8004fba <USB_GetCurrentFrame>
 8001bc2:	4603      	mov	r3, r0
}
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	3708      	adds	r7, #8
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	bd80      	pop	{r7, pc}

08001bcc <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b082      	sub	sp, #8
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	4618      	mov	r0, r3
 8001bda:	f003 f9d8 	bl	8004f8e <USB_GetHostSpeed>
 8001bde:	4603      	mov	r3, r0
}
 8001be0:	4618      	mov	r0, r3
 8001be2:	3708      	adds	r7, #8
 8001be4:	46bd      	mov	sp, r7
 8001be6:	bd80      	pop	{r7, pc}

08001be8 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b086      	sub	sp, #24
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
 8001bf0:	460b      	mov	r3, r1
 8001bf2:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001bfa:	697b      	ldr	r3, [r7, #20]
 8001bfc:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8001bfe:	78fb      	ldrb	r3, [r7, #3]
 8001c00:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	015a      	lsls	r2, r3, #5
 8001c06:	693b      	ldr	r3, [r7, #16]
 8001c08:	4413      	add	r3, r2
 8001c0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c0e:	689b      	ldr	r3, [r3, #8]
 8001c10:	f003 0304 	and.w	r3, r3, #4
 8001c14:	2b04      	cmp	r3, #4
 8001c16:	d119      	bne.n	8001c4c <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	015a      	lsls	r2, r3, #5
 8001c1c:	693b      	ldr	r3, [r7, #16]
 8001c1e:	4413      	add	r3, r2
 8001c20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c24:	461a      	mov	r2, r3
 8001c26:	2304      	movs	r3, #4
 8001c28:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	015a      	lsls	r2, r3, #5
 8001c2e:	693b      	ldr	r3, [r7, #16]
 8001c30:	4413      	add	r3, r2
 8001c32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c36:	68db      	ldr	r3, [r3, #12]
 8001c38:	68fa      	ldr	r2, [r7, #12]
 8001c3a:	0151      	lsls	r1, r2, #5
 8001c3c:	693a      	ldr	r2, [r7, #16]
 8001c3e:	440a      	add	r2, r1
 8001c40:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001c44:	f043 0302 	orr.w	r3, r3, #2
 8001c48:	60d3      	str	r3, [r2, #12]
 8001c4a:	e101      	b.n	8001e50 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	015a      	lsls	r2, r3, #5
 8001c50:	693b      	ldr	r3, [r7, #16]
 8001c52:	4413      	add	r3, r2
 8001c54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c58:	689b      	ldr	r3, [r3, #8]
 8001c5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c5e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001c62:	d12b      	bne.n	8001cbc <HCD_HC_IN_IRQHandler+0xd4>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	015a      	lsls	r2, r3, #5
 8001c68:	693b      	ldr	r3, [r7, #16]
 8001c6a:	4413      	add	r3, r2
 8001c6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c70:	461a      	mov	r2, r3
 8001c72:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001c76:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8001c78:	687a      	ldr	r2, [r7, #4]
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	212c      	movs	r1, #44	; 0x2c
 8001c7e:	fb01 f303 	mul.w	r3, r1, r3
 8001c82:	4413      	add	r3, r2
 8001c84:	3361      	adds	r3, #97	; 0x61
 8001c86:	2207      	movs	r2, #7
 8001c88:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	015a      	lsls	r2, r3, #5
 8001c8e:	693b      	ldr	r3, [r7, #16]
 8001c90:	4413      	add	r3, r2
 8001c92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c96:	68db      	ldr	r3, [r3, #12]
 8001c98:	68fa      	ldr	r2, [r7, #12]
 8001c9a:	0151      	lsls	r1, r2, #5
 8001c9c:	693a      	ldr	r2, [r7, #16]
 8001c9e:	440a      	add	r2, r1
 8001ca0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001ca4:	f043 0302 	orr.w	r3, r3, #2
 8001ca8:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	68fa      	ldr	r2, [r7, #12]
 8001cb0:	b2d2      	uxtb	r2, r2
 8001cb2:	4611      	mov	r1, r2
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	f003 fb91 	bl	80053dc <USB_HC_Halt>
 8001cba:	e0c9      	b.n	8001e50 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	015a      	lsls	r2, r3, #5
 8001cc0:	693b      	ldr	r3, [r7, #16]
 8001cc2:	4413      	add	r3, r2
 8001cc4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001cc8:	689b      	ldr	r3, [r3, #8]
 8001cca:	f003 0320 	and.w	r3, r3, #32
 8001cce:	2b20      	cmp	r3, #32
 8001cd0:	d109      	bne.n	8001ce6 <HCD_HC_IN_IRQHandler+0xfe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	015a      	lsls	r2, r3, #5
 8001cd6:	693b      	ldr	r3, [r7, #16]
 8001cd8:	4413      	add	r3, r2
 8001cda:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001cde:	461a      	mov	r2, r3
 8001ce0:	2320      	movs	r3, #32
 8001ce2:	6093      	str	r3, [r2, #8]
 8001ce4:	e0b4      	b.n	8001e50 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	015a      	lsls	r2, r3, #5
 8001cea:	693b      	ldr	r3, [r7, #16]
 8001cec:	4413      	add	r3, r2
 8001cee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001cf2:	689b      	ldr	r3, [r3, #8]
 8001cf4:	f003 0308 	and.w	r3, r3, #8
 8001cf8:	2b08      	cmp	r3, #8
 8001cfa:	d133      	bne.n	8001d64 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	015a      	lsls	r2, r3, #5
 8001d00:	693b      	ldr	r3, [r7, #16]
 8001d02:	4413      	add	r3, r2
 8001d04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d08:	68db      	ldr	r3, [r3, #12]
 8001d0a:	68fa      	ldr	r2, [r7, #12]
 8001d0c:	0151      	lsls	r1, r2, #5
 8001d0e:	693a      	ldr	r2, [r7, #16]
 8001d10:	440a      	add	r2, r1
 8001d12:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001d16:	f043 0302 	orr.w	r3, r3, #2
 8001d1a:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8001d1c:	687a      	ldr	r2, [r7, #4]
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	212c      	movs	r1, #44	; 0x2c
 8001d22:	fb01 f303 	mul.w	r3, r1, r3
 8001d26:	4413      	add	r3, r2
 8001d28:	3361      	adds	r3, #97	; 0x61
 8001d2a:	2205      	movs	r2, #5
 8001d2c:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	015a      	lsls	r2, r3, #5
 8001d32:	693b      	ldr	r3, [r7, #16]
 8001d34:	4413      	add	r3, r2
 8001d36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d3a:	461a      	mov	r2, r3
 8001d3c:	2310      	movs	r3, #16
 8001d3e:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	015a      	lsls	r2, r3, #5
 8001d44:	693b      	ldr	r3, [r7, #16]
 8001d46:	4413      	add	r3, r2
 8001d48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d4c:	461a      	mov	r2, r3
 8001d4e:	2308      	movs	r3, #8
 8001d50:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	68fa      	ldr	r2, [r7, #12]
 8001d58:	b2d2      	uxtb	r2, r2
 8001d5a:	4611      	mov	r1, r2
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	f003 fb3d 	bl	80053dc <USB_HC_Halt>
 8001d62:	e075      	b.n	8001e50 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	015a      	lsls	r2, r3, #5
 8001d68:	693b      	ldr	r3, [r7, #16]
 8001d6a:	4413      	add	r3, r2
 8001d6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d70:	689b      	ldr	r3, [r3, #8]
 8001d72:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d76:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d7a:	d134      	bne.n	8001de6 <HCD_HC_IN_IRQHandler+0x1fe>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	015a      	lsls	r2, r3, #5
 8001d80:	693b      	ldr	r3, [r7, #16]
 8001d82:	4413      	add	r3, r2
 8001d84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d88:	68db      	ldr	r3, [r3, #12]
 8001d8a:	68fa      	ldr	r2, [r7, #12]
 8001d8c:	0151      	lsls	r1, r2, #5
 8001d8e:	693a      	ldr	r2, [r7, #16]
 8001d90:	440a      	add	r2, r1
 8001d92:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001d96:	f043 0302 	orr.w	r3, r3, #2
 8001d9a:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8001d9c:	687a      	ldr	r2, [r7, #4]
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	212c      	movs	r1, #44	; 0x2c
 8001da2:	fb01 f303 	mul.w	r3, r1, r3
 8001da6:	4413      	add	r3, r2
 8001da8:	3361      	adds	r3, #97	; 0x61
 8001daa:	2208      	movs	r2, #8
 8001dac:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	015a      	lsls	r2, r3, #5
 8001db2:	693b      	ldr	r3, [r7, #16]
 8001db4:	4413      	add	r3, r2
 8001db6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001dba:	461a      	mov	r2, r3
 8001dbc:	2310      	movs	r3, #16
 8001dbe:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	015a      	lsls	r2, r3, #5
 8001dc4:	693b      	ldr	r3, [r7, #16]
 8001dc6:	4413      	add	r3, r2
 8001dc8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001dcc:	461a      	mov	r2, r3
 8001dce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001dd2:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	68fa      	ldr	r2, [r7, #12]
 8001dda:	b2d2      	uxtb	r2, r2
 8001ddc:	4611      	mov	r1, r2
 8001dde:	4618      	mov	r0, r3
 8001de0:	f003 fafc 	bl	80053dc <USB_HC_Halt>
 8001de4:	e034      	b.n	8001e50 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	015a      	lsls	r2, r3, #5
 8001dea:	693b      	ldr	r3, [r7, #16]
 8001dec:	4413      	add	r3, r2
 8001dee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001df2:	689b      	ldr	r3, [r3, #8]
 8001df4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001df8:	2b80      	cmp	r3, #128	; 0x80
 8001dfa:	d129      	bne.n	8001e50 <HCD_HC_IN_IRQHandler+0x268>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	015a      	lsls	r2, r3, #5
 8001e00:	693b      	ldr	r3, [r7, #16]
 8001e02:	4413      	add	r3, r2
 8001e04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e08:	68db      	ldr	r3, [r3, #12]
 8001e0a:	68fa      	ldr	r2, [r7, #12]
 8001e0c:	0151      	lsls	r1, r2, #5
 8001e0e:	693a      	ldr	r2, [r7, #16]
 8001e10:	440a      	add	r2, r1
 8001e12:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001e16:	f043 0302 	orr.w	r3, r3, #2
 8001e1a:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8001e1c:	687a      	ldr	r2, [r7, #4]
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	212c      	movs	r1, #44	; 0x2c
 8001e22:	fb01 f303 	mul.w	r3, r1, r3
 8001e26:	4413      	add	r3, r2
 8001e28:	3361      	adds	r3, #97	; 0x61
 8001e2a:	2206      	movs	r2, #6
 8001e2c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	68fa      	ldr	r2, [r7, #12]
 8001e34:	b2d2      	uxtb	r2, r2
 8001e36:	4611      	mov	r1, r2
 8001e38:	4618      	mov	r0, r3
 8001e3a:	f003 facf 	bl	80053dc <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	015a      	lsls	r2, r3, #5
 8001e42:	693b      	ldr	r3, [r7, #16]
 8001e44:	4413      	add	r3, r2
 8001e46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e4a:	461a      	mov	r2, r3
 8001e4c:	2380      	movs	r3, #128	; 0x80
 8001e4e:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	015a      	lsls	r2, r3, #5
 8001e54:	693b      	ldr	r3, [r7, #16]
 8001e56:	4413      	add	r3, r2
 8001e58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e5c:	689b      	ldr	r3, [r3, #8]
 8001e5e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001e62:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001e66:	d122      	bne.n	8001eae <HCD_HC_IN_IRQHandler+0x2c6>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	015a      	lsls	r2, r3, #5
 8001e6c:	693b      	ldr	r3, [r7, #16]
 8001e6e:	4413      	add	r3, r2
 8001e70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e74:	68db      	ldr	r3, [r3, #12]
 8001e76:	68fa      	ldr	r2, [r7, #12]
 8001e78:	0151      	lsls	r1, r2, #5
 8001e7a:	693a      	ldr	r2, [r7, #16]
 8001e7c:	440a      	add	r2, r1
 8001e7e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001e82:	f043 0302 	orr.w	r3, r3, #2
 8001e86:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	68fa      	ldr	r2, [r7, #12]
 8001e8e:	b2d2      	uxtb	r2, r2
 8001e90:	4611      	mov	r1, r2
 8001e92:	4618      	mov	r0, r3
 8001e94:	f003 faa2 	bl	80053dc <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	015a      	lsls	r2, r3, #5
 8001e9c:	693b      	ldr	r3, [r7, #16]
 8001e9e:	4413      	add	r3, r2
 8001ea0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ea4:	461a      	mov	r2, r3
 8001ea6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001eaa:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8001eac:	e298      	b.n	80023e0 <HCD_HC_IN_IRQHandler+0x7f8>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	015a      	lsls	r2, r3, #5
 8001eb2:	693b      	ldr	r3, [r7, #16]
 8001eb4:	4413      	add	r3, r2
 8001eb6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001eba:	689b      	ldr	r3, [r3, #8]
 8001ebc:	f003 0301 	and.w	r3, r3, #1
 8001ec0:	2b01      	cmp	r3, #1
 8001ec2:	f040 80fd 	bne.w	80020c0 <HCD_HC_IN_IRQHandler+0x4d8>
    hhcd->hc[ch_num].state = HC_XFRC;
 8001ec6:	687a      	ldr	r2, [r7, #4]
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	212c      	movs	r1, #44	; 0x2c
 8001ecc:	fb01 f303 	mul.w	r3, r1, r3
 8001ed0:	4413      	add	r3, r2
 8001ed2:	3361      	adds	r3, #97	; 0x61
 8001ed4:	2201      	movs	r2, #1
 8001ed6:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8001ed8:	687a      	ldr	r2, [r7, #4]
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	212c      	movs	r1, #44	; 0x2c
 8001ede:	fb01 f303 	mul.w	r3, r1, r3
 8001ee2:	4413      	add	r3, r2
 8001ee4:	335c      	adds	r3, #92	; 0x5c
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	015a      	lsls	r2, r3, #5
 8001eee:	693b      	ldr	r3, [r7, #16]
 8001ef0:	4413      	add	r3, r2
 8001ef2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ef6:	461a      	mov	r2, r3
 8001ef8:	2301      	movs	r3, #1
 8001efa:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001efc:	687a      	ldr	r2, [r7, #4]
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	212c      	movs	r1, #44	; 0x2c
 8001f02:	fb01 f303 	mul.w	r3, r1, r3
 8001f06:	4413      	add	r3, r2
 8001f08:	333f      	adds	r3, #63	; 0x3f
 8001f0a:	781b      	ldrb	r3, [r3, #0]
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d009      	beq.n	8001f24 <HCD_HC_IN_IRQHandler+0x33c>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8001f10:	687a      	ldr	r2, [r7, #4]
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	212c      	movs	r1, #44	; 0x2c
 8001f16:	fb01 f303 	mul.w	r3, r1, r3
 8001f1a:	4413      	add	r3, r2
 8001f1c:	333f      	adds	r3, #63	; 0x3f
 8001f1e:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001f20:	2b02      	cmp	r3, #2
 8001f22:	d121      	bne.n	8001f68 <HCD_HC_IN_IRQHandler+0x380>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	015a      	lsls	r2, r3, #5
 8001f28:	693b      	ldr	r3, [r7, #16]
 8001f2a:	4413      	add	r3, r2
 8001f2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f30:	68db      	ldr	r3, [r3, #12]
 8001f32:	68fa      	ldr	r2, [r7, #12]
 8001f34:	0151      	lsls	r1, r2, #5
 8001f36:	693a      	ldr	r2, [r7, #16]
 8001f38:	440a      	add	r2, r1
 8001f3a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001f3e:	f043 0302 	orr.w	r3, r3, #2
 8001f42:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	68fa      	ldr	r2, [r7, #12]
 8001f4a:	b2d2      	uxtb	r2, r2
 8001f4c:	4611      	mov	r1, r2
 8001f4e:	4618      	mov	r0, r3
 8001f50:	f003 fa44 	bl	80053dc <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	015a      	lsls	r2, r3, #5
 8001f58:	693b      	ldr	r3, [r7, #16]
 8001f5a:	4413      	add	r3, r2
 8001f5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f60:	461a      	mov	r2, r3
 8001f62:	2310      	movs	r3, #16
 8001f64:	6093      	str	r3, [r2, #8]
 8001f66:	e066      	b.n	8002036 <HCD_HC_IN_IRQHandler+0x44e>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8001f68:	687a      	ldr	r2, [r7, #4]
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	212c      	movs	r1, #44	; 0x2c
 8001f6e:	fb01 f303 	mul.w	r3, r1, r3
 8001f72:	4413      	add	r3, r2
 8001f74:	333f      	adds	r3, #63	; 0x3f
 8001f76:	781b      	ldrb	r3, [r3, #0]
 8001f78:	2b03      	cmp	r3, #3
 8001f7a:	d127      	bne.n	8001fcc <HCD_HC_IN_IRQHandler+0x3e4>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	015a      	lsls	r2, r3, #5
 8001f80:	693b      	ldr	r3, [r7, #16]
 8001f82:	4413      	add	r3, r2
 8001f84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	68fa      	ldr	r2, [r7, #12]
 8001f8c:	0151      	lsls	r1, r2, #5
 8001f8e:	693a      	ldr	r2, [r7, #16]
 8001f90:	440a      	add	r2, r1
 8001f92:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001f96:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001f9a:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8001f9c:	687a      	ldr	r2, [r7, #4]
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	212c      	movs	r1, #44	; 0x2c
 8001fa2:	fb01 f303 	mul.w	r3, r1, r3
 8001fa6:	4413      	add	r3, r2
 8001fa8:	3360      	adds	r3, #96	; 0x60
 8001faa:	2201      	movs	r2, #1
 8001fac:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	b2d9      	uxtb	r1, r3
 8001fb2:	687a      	ldr	r2, [r7, #4]
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	202c      	movs	r0, #44	; 0x2c
 8001fb8:	fb00 f303 	mul.w	r3, r0, r3
 8001fbc:	4413      	add	r3, r2
 8001fbe:	3360      	adds	r3, #96	; 0x60
 8001fc0:	781b      	ldrb	r3, [r3, #0]
 8001fc2:	461a      	mov	r2, r3
 8001fc4:	6878      	ldr	r0, [r7, #4]
 8001fc6:	f00b fd91 	bl	800daec <HAL_HCD_HC_NotifyURBChange_Callback>
 8001fca:	e034      	b.n	8002036 <HCD_HC_IN_IRQHandler+0x44e>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 8001fcc:	687a      	ldr	r2, [r7, #4]
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	212c      	movs	r1, #44	; 0x2c
 8001fd2:	fb01 f303 	mul.w	r3, r1, r3
 8001fd6:	4413      	add	r3, r2
 8001fd8:	333f      	adds	r3, #63	; 0x3f
 8001fda:	781b      	ldrb	r3, [r3, #0]
 8001fdc:	2b01      	cmp	r3, #1
 8001fde:	d12a      	bne.n	8002036 <HCD_HC_IN_IRQHandler+0x44e>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8001fe0:	687a      	ldr	r2, [r7, #4]
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	212c      	movs	r1, #44	; 0x2c
 8001fe6:	fb01 f303 	mul.w	r3, r1, r3
 8001fea:	4413      	add	r3, r2
 8001fec:	3360      	adds	r3, #96	; 0x60
 8001fee:	2201      	movs	r2, #1
 8001ff0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8001ff2:	687a      	ldr	r2, [r7, #4]
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	212c      	movs	r1, #44	; 0x2c
 8001ff8:	fb01 f303 	mul.w	r3, r1, r3
 8001ffc:	4413      	add	r3, r2
 8001ffe:	3354      	adds	r3, #84	; 0x54
 8002000:	781b      	ldrb	r3, [r3, #0]
 8002002:	f083 0301 	eor.w	r3, r3, #1
 8002006:	b2d8      	uxtb	r0, r3
 8002008:	687a      	ldr	r2, [r7, #4]
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	212c      	movs	r1, #44	; 0x2c
 800200e:	fb01 f303 	mul.w	r3, r1, r3
 8002012:	4413      	add	r3, r2
 8002014:	3354      	adds	r3, #84	; 0x54
 8002016:	4602      	mov	r2, r0
 8002018:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	b2d9      	uxtb	r1, r3
 800201e:	687a      	ldr	r2, [r7, #4]
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	202c      	movs	r0, #44	; 0x2c
 8002024:	fb00 f303 	mul.w	r3, r0, r3
 8002028:	4413      	add	r3, r2
 800202a:	3360      	adds	r3, #96	; 0x60
 800202c:	781b      	ldrb	r3, [r3, #0]
 800202e:	461a      	mov	r2, r3
 8002030:	6878      	ldr	r0, [r7, #4]
 8002032:	f00b fd5b 	bl	800daec <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	691b      	ldr	r3, [r3, #16]
 800203a:	2b01      	cmp	r3, #1
 800203c:	d12b      	bne.n	8002096 <HCD_HC_IN_IRQHandler+0x4ae>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 800203e:	687a      	ldr	r2, [r7, #4]
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	212c      	movs	r1, #44	; 0x2c
 8002044:	fb01 f303 	mul.w	r3, r1, r3
 8002048:	4413      	add	r3, r2
 800204a:	3348      	adds	r3, #72	; 0x48
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	6879      	ldr	r1, [r7, #4]
 8002050:	68fa      	ldr	r2, [r7, #12]
 8002052:	202c      	movs	r0, #44	; 0x2c
 8002054:	fb00 f202 	mul.w	r2, r0, r2
 8002058:	440a      	add	r2, r1
 800205a:	3240      	adds	r2, #64	; 0x40
 800205c:	8812      	ldrh	r2, [r2, #0]
 800205e:	fbb3 f3f2 	udiv	r3, r3, r2
 8002062:	f003 0301 	and.w	r3, r3, #1
 8002066:	2b00      	cmp	r3, #0
 8002068:	f000 81ba 	beq.w	80023e0 <HCD_HC_IN_IRQHandler+0x7f8>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 800206c:	687a      	ldr	r2, [r7, #4]
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	212c      	movs	r1, #44	; 0x2c
 8002072:	fb01 f303 	mul.w	r3, r1, r3
 8002076:	4413      	add	r3, r2
 8002078:	3354      	adds	r3, #84	; 0x54
 800207a:	781b      	ldrb	r3, [r3, #0]
 800207c:	f083 0301 	eor.w	r3, r3, #1
 8002080:	b2d8      	uxtb	r0, r3
 8002082:	687a      	ldr	r2, [r7, #4]
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	212c      	movs	r1, #44	; 0x2c
 8002088:	fb01 f303 	mul.w	r3, r1, r3
 800208c:	4413      	add	r3, r2
 800208e:	3354      	adds	r3, #84	; 0x54
 8002090:	4602      	mov	r2, r0
 8002092:	701a      	strb	r2, [r3, #0]
}
 8002094:	e1a4      	b.n	80023e0 <HCD_HC_IN_IRQHandler+0x7f8>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8002096:	687a      	ldr	r2, [r7, #4]
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	212c      	movs	r1, #44	; 0x2c
 800209c:	fb01 f303 	mul.w	r3, r1, r3
 80020a0:	4413      	add	r3, r2
 80020a2:	3354      	adds	r3, #84	; 0x54
 80020a4:	781b      	ldrb	r3, [r3, #0]
 80020a6:	f083 0301 	eor.w	r3, r3, #1
 80020aa:	b2d8      	uxtb	r0, r3
 80020ac:	687a      	ldr	r2, [r7, #4]
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	212c      	movs	r1, #44	; 0x2c
 80020b2:	fb01 f303 	mul.w	r3, r1, r3
 80020b6:	4413      	add	r3, r2
 80020b8:	3354      	adds	r3, #84	; 0x54
 80020ba:	4602      	mov	r2, r0
 80020bc:	701a      	strb	r2, [r3, #0]
}
 80020be:	e18f      	b.n	80023e0 <HCD_HC_IN_IRQHandler+0x7f8>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	015a      	lsls	r2, r3, #5
 80020c4:	693b      	ldr	r3, [r7, #16]
 80020c6:	4413      	add	r3, r2
 80020c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020cc:	689b      	ldr	r3, [r3, #8]
 80020ce:	f003 0302 	and.w	r3, r3, #2
 80020d2:	2b02      	cmp	r3, #2
 80020d4:	f040 8106 	bne.w	80022e4 <HCD_HC_IN_IRQHandler+0x6fc>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	015a      	lsls	r2, r3, #5
 80020dc:	693b      	ldr	r3, [r7, #16]
 80020de:	4413      	add	r3, r2
 80020e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020e4:	68db      	ldr	r3, [r3, #12]
 80020e6:	68fa      	ldr	r2, [r7, #12]
 80020e8:	0151      	lsls	r1, r2, #5
 80020ea:	693a      	ldr	r2, [r7, #16]
 80020ec:	440a      	add	r2, r1
 80020ee:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80020f2:	f023 0302 	bic.w	r3, r3, #2
 80020f6:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80020f8:	687a      	ldr	r2, [r7, #4]
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	212c      	movs	r1, #44	; 0x2c
 80020fe:	fb01 f303 	mul.w	r3, r1, r3
 8002102:	4413      	add	r3, r2
 8002104:	3361      	adds	r3, #97	; 0x61
 8002106:	781b      	ldrb	r3, [r3, #0]
 8002108:	2b01      	cmp	r3, #1
 800210a:	d109      	bne.n	8002120 <HCD_HC_IN_IRQHandler+0x538>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 800210c:	687a      	ldr	r2, [r7, #4]
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	212c      	movs	r1, #44	; 0x2c
 8002112:	fb01 f303 	mul.w	r3, r1, r3
 8002116:	4413      	add	r3, r2
 8002118:	3360      	adds	r3, #96	; 0x60
 800211a:	2201      	movs	r2, #1
 800211c:	701a      	strb	r2, [r3, #0]
 800211e:	e0c9      	b.n	80022b4 <HCD_HC_IN_IRQHandler+0x6cc>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002120:	687a      	ldr	r2, [r7, #4]
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	212c      	movs	r1, #44	; 0x2c
 8002126:	fb01 f303 	mul.w	r3, r1, r3
 800212a:	4413      	add	r3, r2
 800212c:	3361      	adds	r3, #97	; 0x61
 800212e:	781b      	ldrb	r3, [r3, #0]
 8002130:	2b05      	cmp	r3, #5
 8002132:	d109      	bne.n	8002148 <HCD_HC_IN_IRQHandler+0x560>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8002134:	687a      	ldr	r2, [r7, #4]
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	212c      	movs	r1, #44	; 0x2c
 800213a:	fb01 f303 	mul.w	r3, r1, r3
 800213e:	4413      	add	r3, r2
 8002140:	3360      	adds	r3, #96	; 0x60
 8002142:	2205      	movs	r2, #5
 8002144:	701a      	strb	r2, [r3, #0]
 8002146:	e0b5      	b.n	80022b4 <HCD_HC_IN_IRQHandler+0x6cc>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002148:	687a      	ldr	r2, [r7, #4]
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	212c      	movs	r1, #44	; 0x2c
 800214e:	fb01 f303 	mul.w	r3, r1, r3
 8002152:	4413      	add	r3, r2
 8002154:	3361      	adds	r3, #97	; 0x61
 8002156:	781b      	ldrb	r3, [r3, #0]
 8002158:	2b06      	cmp	r3, #6
 800215a:	d009      	beq.n	8002170 <HCD_HC_IN_IRQHandler+0x588>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 800215c:	687a      	ldr	r2, [r7, #4]
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	212c      	movs	r1, #44	; 0x2c
 8002162:	fb01 f303 	mul.w	r3, r1, r3
 8002166:	4413      	add	r3, r2
 8002168:	3361      	adds	r3, #97	; 0x61
 800216a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800216c:	2b08      	cmp	r3, #8
 800216e:	d150      	bne.n	8002212 <HCD_HC_IN_IRQHandler+0x62a>
      hhcd->hc[ch_num].ErrCnt++;
 8002170:	687a      	ldr	r2, [r7, #4]
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	212c      	movs	r1, #44	; 0x2c
 8002176:	fb01 f303 	mul.w	r3, r1, r3
 800217a:	4413      	add	r3, r2
 800217c:	335c      	adds	r3, #92	; 0x5c
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	1c5a      	adds	r2, r3, #1
 8002182:	6879      	ldr	r1, [r7, #4]
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	202c      	movs	r0, #44	; 0x2c
 8002188:	fb00 f303 	mul.w	r3, r0, r3
 800218c:	440b      	add	r3, r1
 800218e:	335c      	adds	r3, #92	; 0x5c
 8002190:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002192:	687a      	ldr	r2, [r7, #4]
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	212c      	movs	r1, #44	; 0x2c
 8002198:	fb01 f303 	mul.w	r3, r1, r3
 800219c:	4413      	add	r3, r2
 800219e:	335c      	adds	r3, #92	; 0x5c
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	2b02      	cmp	r3, #2
 80021a4:	d912      	bls.n	80021cc <HCD_HC_IN_IRQHandler+0x5e4>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80021a6:	687a      	ldr	r2, [r7, #4]
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	212c      	movs	r1, #44	; 0x2c
 80021ac:	fb01 f303 	mul.w	r3, r1, r3
 80021b0:	4413      	add	r3, r2
 80021b2:	335c      	adds	r3, #92	; 0x5c
 80021b4:	2200      	movs	r2, #0
 80021b6:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80021b8:	687a      	ldr	r2, [r7, #4]
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	212c      	movs	r1, #44	; 0x2c
 80021be:	fb01 f303 	mul.w	r3, r1, r3
 80021c2:	4413      	add	r3, r2
 80021c4:	3360      	adds	r3, #96	; 0x60
 80021c6:	2204      	movs	r2, #4
 80021c8:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80021ca:	e073      	b.n	80022b4 <HCD_HC_IN_IRQHandler+0x6cc>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80021cc:	687a      	ldr	r2, [r7, #4]
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	212c      	movs	r1, #44	; 0x2c
 80021d2:	fb01 f303 	mul.w	r3, r1, r3
 80021d6:	4413      	add	r3, r2
 80021d8:	3360      	adds	r3, #96	; 0x60
 80021da:	2202      	movs	r2, #2
 80021dc:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	015a      	lsls	r2, r3, #5
 80021e2:	693b      	ldr	r3, [r7, #16]
 80021e4:	4413      	add	r3, r2
 80021e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80021ee:	68bb      	ldr	r3, [r7, #8]
 80021f0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80021f4:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80021f6:	68bb      	ldr	r3, [r7, #8]
 80021f8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80021fc:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	015a      	lsls	r2, r3, #5
 8002202:	693b      	ldr	r3, [r7, #16]
 8002204:	4413      	add	r3, r2
 8002206:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800220a:	461a      	mov	r2, r3
 800220c:	68bb      	ldr	r3, [r7, #8]
 800220e:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002210:	e050      	b.n	80022b4 <HCD_HC_IN_IRQHandler+0x6cc>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002212:	687a      	ldr	r2, [r7, #4]
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	212c      	movs	r1, #44	; 0x2c
 8002218:	fb01 f303 	mul.w	r3, r1, r3
 800221c:	4413      	add	r3, r2
 800221e:	3361      	adds	r3, #97	; 0x61
 8002220:	781b      	ldrb	r3, [r3, #0]
 8002222:	2b03      	cmp	r3, #3
 8002224:	d122      	bne.n	800226c <HCD_HC_IN_IRQHandler+0x684>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002226:	687a      	ldr	r2, [r7, #4]
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	212c      	movs	r1, #44	; 0x2c
 800222c:	fb01 f303 	mul.w	r3, r1, r3
 8002230:	4413      	add	r3, r2
 8002232:	3360      	adds	r3, #96	; 0x60
 8002234:	2202      	movs	r2, #2
 8002236:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	015a      	lsls	r2, r3, #5
 800223c:	693b      	ldr	r3, [r7, #16]
 800223e:	4413      	add	r3, r2
 8002240:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002248:	68bb      	ldr	r3, [r7, #8]
 800224a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800224e:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002250:	68bb      	ldr	r3, [r7, #8]
 8002252:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002256:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	015a      	lsls	r2, r3, #5
 800225c:	693b      	ldr	r3, [r7, #16]
 800225e:	4413      	add	r3, r2
 8002260:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002264:	461a      	mov	r2, r3
 8002266:	68bb      	ldr	r3, [r7, #8]
 8002268:	6013      	str	r3, [r2, #0]
 800226a:	e023      	b.n	80022b4 <HCD_HC_IN_IRQHandler+0x6cc>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 800226c:	687a      	ldr	r2, [r7, #4]
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	212c      	movs	r1, #44	; 0x2c
 8002272:	fb01 f303 	mul.w	r3, r1, r3
 8002276:	4413      	add	r3, r2
 8002278:	3361      	adds	r3, #97	; 0x61
 800227a:	781b      	ldrb	r3, [r3, #0]
 800227c:	2b07      	cmp	r3, #7
 800227e:	d119      	bne.n	80022b4 <HCD_HC_IN_IRQHandler+0x6cc>
      hhcd->hc[ch_num].ErrCnt++;
 8002280:	687a      	ldr	r2, [r7, #4]
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	212c      	movs	r1, #44	; 0x2c
 8002286:	fb01 f303 	mul.w	r3, r1, r3
 800228a:	4413      	add	r3, r2
 800228c:	335c      	adds	r3, #92	; 0x5c
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	1c5a      	adds	r2, r3, #1
 8002292:	6879      	ldr	r1, [r7, #4]
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	202c      	movs	r0, #44	; 0x2c
 8002298:	fb00 f303 	mul.w	r3, r0, r3
 800229c:	440b      	add	r3, r1
 800229e:	335c      	adds	r3, #92	; 0x5c
 80022a0:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 80022a2:	687a      	ldr	r2, [r7, #4]
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	212c      	movs	r1, #44	; 0x2c
 80022a8:	fb01 f303 	mul.w	r3, r1, r3
 80022ac:	4413      	add	r3, r2
 80022ae:	3360      	adds	r3, #96	; 0x60
 80022b0:	2204      	movs	r2, #4
 80022b2:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	015a      	lsls	r2, r3, #5
 80022b8:	693b      	ldr	r3, [r7, #16]
 80022ba:	4413      	add	r3, r2
 80022bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022c0:	461a      	mov	r2, r3
 80022c2:	2302      	movs	r3, #2
 80022c4:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	b2d9      	uxtb	r1, r3
 80022ca:	687a      	ldr	r2, [r7, #4]
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	202c      	movs	r0, #44	; 0x2c
 80022d0:	fb00 f303 	mul.w	r3, r0, r3
 80022d4:	4413      	add	r3, r2
 80022d6:	3360      	adds	r3, #96	; 0x60
 80022d8:	781b      	ldrb	r3, [r3, #0]
 80022da:	461a      	mov	r2, r3
 80022dc:	6878      	ldr	r0, [r7, #4]
 80022de:	f00b fc05 	bl	800daec <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80022e2:	e07d      	b.n	80023e0 <HCD_HC_IN_IRQHandler+0x7f8>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	015a      	lsls	r2, r3, #5
 80022e8:	693b      	ldr	r3, [r7, #16]
 80022ea:	4413      	add	r3, r2
 80022ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022f0:	689b      	ldr	r3, [r3, #8]
 80022f2:	f003 0310 	and.w	r3, r3, #16
 80022f6:	2b10      	cmp	r3, #16
 80022f8:	d172      	bne.n	80023e0 <HCD_HC_IN_IRQHandler+0x7f8>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80022fa:	687a      	ldr	r2, [r7, #4]
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	212c      	movs	r1, #44	; 0x2c
 8002300:	fb01 f303 	mul.w	r3, r1, r3
 8002304:	4413      	add	r3, r2
 8002306:	333f      	adds	r3, #63	; 0x3f
 8002308:	781b      	ldrb	r3, [r3, #0]
 800230a:	2b03      	cmp	r3, #3
 800230c:	d121      	bne.n	8002352 <HCD_HC_IN_IRQHandler+0x76a>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800230e:	687a      	ldr	r2, [r7, #4]
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	212c      	movs	r1, #44	; 0x2c
 8002314:	fb01 f303 	mul.w	r3, r1, r3
 8002318:	4413      	add	r3, r2
 800231a:	335c      	adds	r3, #92	; 0x5c
 800231c:	2200      	movs	r2, #0
 800231e:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	015a      	lsls	r2, r3, #5
 8002324:	693b      	ldr	r3, [r7, #16]
 8002326:	4413      	add	r3, r2
 8002328:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800232c:	68db      	ldr	r3, [r3, #12]
 800232e:	68fa      	ldr	r2, [r7, #12]
 8002330:	0151      	lsls	r1, r2, #5
 8002332:	693a      	ldr	r2, [r7, #16]
 8002334:	440a      	add	r2, r1
 8002336:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800233a:	f043 0302 	orr.w	r3, r3, #2
 800233e:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	68fa      	ldr	r2, [r7, #12]
 8002346:	b2d2      	uxtb	r2, r2
 8002348:	4611      	mov	r1, r2
 800234a:	4618      	mov	r0, r3
 800234c:	f003 f846 	bl	80053dc <USB_HC_Halt>
 8002350:	e03d      	b.n	80023ce <HCD_HC_IN_IRQHandler+0x7e6>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002352:	687a      	ldr	r2, [r7, #4]
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	212c      	movs	r1, #44	; 0x2c
 8002358:	fb01 f303 	mul.w	r3, r1, r3
 800235c:	4413      	add	r3, r2
 800235e:	333f      	adds	r3, #63	; 0x3f
 8002360:	781b      	ldrb	r3, [r3, #0]
 8002362:	2b00      	cmp	r3, #0
 8002364:	d009      	beq.n	800237a <HCD_HC_IN_IRQHandler+0x792>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002366:	687a      	ldr	r2, [r7, #4]
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	212c      	movs	r1, #44	; 0x2c
 800236c:	fb01 f303 	mul.w	r3, r1, r3
 8002370:	4413      	add	r3, r2
 8002372:	333f      	adds	r3, #63	; 0x3f
 8002374:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002376:	2b02      	cmp	r3, #2
 8002378:	d129      	bne.n	80023ce <HCD_HC_IN_IRQHandler+0x7e6>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800237a:	687a      	ldr	r2, [r7, #4]
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	212c      	movs	r1, #44	; 0x2c
 8002380:	fb01 f303 	mul.w	r3, r1, r3
 8002384:	4413      	add	r3, r2
 8002386:	335c      	adds	r3, #92	; 0x5c
 8002388:	2200      	movs	r2, #0
 800238a:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].state = HC_NAK;
 800238c:	687a      	ldr	r2, [r7, #4]
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	212c      	movs	r1, #44	; 0x2c
 8002392:	fb01 f303 	mul.w	r3, r1, r3
 8002396:	4413      	add	r3, r2
 8002398:	3361      	adds	r3, #97	; 0x61
 800239a:	2203      	movs	r2, #3
 800239c:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	015a      	lsls	r2, r3, #5
 80023a2:	693b      	ldr	r3, [r7, #16]
 80023a4:	4413      	add	r3, r2
 80023a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023aa:	68db      	ldr	r3, [r3, #12]
 80023ac:	68fa      	ldr	r2, [r7, #12]
 80023ae:	0151      	lsls	r1, r2, #5
 80023b0:	693a      	ldr	r2, [r7, #16]
 80023b2:	440a      	add	r2, r1
 80023b4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80023b8:	f043 0302 	orr.w	r3, r3, #2
 80023bc:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	68fa      	ldr	r2, [r7, #12]
 80023c4:	b2d2      	uxtb	r2, r2
 80023c6:	4611      	mov	r1, r2
 80023c8:	4618      	mov	r0, r3
 80023ca:	f003 f807 	bl	80053dc <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	015a      	lsls	r2, r3, #5
 80023d2:	693b      	ldr	r3, [r7, #16]
 80023d4:	4413      	add	r3, r2
 80023d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023da:	461a      	mov	r2, r3
 80023dc:	2310      	movs	r3, #16
 80023de:	6093      	str	r3, [r2, #8]
}
 80023e0:	bf00      	nop
 80023e2:	3718      	adds	r7, #24
 80023e4:	46bd      	mov	sp, r7
 80023e6:	bd80      	pop	{r7, pc}

080023e8 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b088      	sub	sp, #32
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
 80023f0:	460b      	mov	r3, r1
 80023f2:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80023fa:	69fb      	ldr	r3, [r7, #28]
 80023fc:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 80023fe:	78fb      	ldrb	r3, [r7, #3]
 8002400:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002402:	697b      	ldr	r3, [r7, #20]
 8002404:	015a      	lsls	r2, r3, #5
 8002406:	69bb      	ldr	r3, [r7, #24]
 8002408:	4413      	add	r3, r2
 800240a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800240e:	689b      	ldr	r3, [r3, #8]
 8002410:	f003 0304 	and.w	r3, r3, #4
 8002414:	2b04      	cmp	r3, #4
 8002416:	d119      	bne.n	800244c <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002418:	697b      	ldr	r3, [r7, #20]
 800241a:	015a      	lsls	r2, r3, #5
 800241c:	69bb      	ldr	r3, [r7, #24]
 800241e:	4413      	add	r3, r2
 8002420:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002424:	461a      	mov	r2, r3
 8002426:	2304      	movs	r3, #4
 8002428:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800242a:	697b      	ldr	r3, [r7, #20]
 800242c:	015a      	lsls	r2, r3, #5
 800242e:	69bb      	ldr	r3, [r7, #24]
 8002430:	4413      	add	r3, r2
 8002432:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002436:	68db      	ldr	r3, [r3, #12]
 8002438:	697a      	ldr	r2, [r7, #20]
 800243a:	0151      	lsls	r1, r2, #5
 800243c:	69ba      	ldr	r2, [r7, #24]
 800243e:	440a      	add	r2, r1
 8002440:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002444:	f043 0302 	orr.w	r3, r3, #2
 8002448:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 800244a:	e363      	b.n	8002b14 <HCD_HC_OUT_IRQHandler+0x72c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800244c:	697b      	ldr	r3, [r7, #20]
 800244e:	015a      	lsls	r2, r3, #5
 8002450:	69bb      	ldr	r3, [r7, #24]
 8002452:	4413      	add	r3, r2
 8002454:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002458:	689b      	ldr	r3, [r3, #8]
 800245a:	f003 0320 	and.w	r3, r3, #32
 800245e:	2b20      	cmp	r3, #32
 8002460:	d13e      	bne.n	80024e0 <HCD_HC_OUT_IRQHandler+0xf8>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002462:	697b      	ldr	r3, [r7, #20]
 8002464:	015a      	lsls	r2, r3, #5
 8002466:	69bb      	ldr	r3, [r7, #24]
 8002468:	4413      	add	r3, r2
 800246a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800246e:	461a      	mov	r2, r3
 8002470:	2320      	movs	r3, #32
 8002472:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8002474:	687a      	ldr	r2, [r7, #4]
 8002476:	697b      	ldr	r3, [r7, #20]
 8002478:	212c      	movs	r1, #44	; 0x2c
 800247a:	fb01 f303 	mul.w	r3, r1, r3
 800247e:	4413      	add	r3, r2
 8002480:	333d      	adds	r3, #61	; 0x3d
 8002482:	781b      	ldrb	r3, [r3, #0]
 8002484:	2b01      	cmp	r3, #1
 8002486:	f040 8345 	bne.w	8002b14 <HCD_HC_OUT_IRQHandler+0x72c>
      hhcd->hc[ch_num].do_ping = 0U;
 800248a:	687a      	ldr	r2, [r7, #4]
 800248c:	697b      	ldr	r3, [r7, #20]
 800248e:	212c      	movs	r1, #44	; 0x2c
 8002490:	fb01 f303 	mul.w	r3, r1, r3
 8002494:	4413      	add	r3, r2
 8002496:	333d      	adds	r3, #61	; 0x3d
 8002498:	2200      	movs	r2, #0
 800249a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800249c:	687a      	ldr	r2, [r7, #4]
 800249e:	697b      	ldr	r3, [r7, #20]
 80024a0:	212c      	movs	r1, #44	; 0x2c
 80024a2:	fb01 f303 	mul.w	r3, r1, r3
 80024a6:	4413      	add	r3, r2
 80024a8:	3360      	adds	r3, #96	; 0x60
 80024aa:	2202      	movs	r2, #2
 80024ac:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80024ae:	697b      	ldr	r3, [r7, #20]
 80024b0:	015a      	lsls	r2, r3, #5
 80024b2:	69bb      	ldr	r3, [r7, #24]
 80024b4:	4413      	add	r3, r2
 80024b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024ba:	68db      	ldr	r3, [r3, #12]
 80024bc:	697a      	ldr	r2, [r7, #20]
 80024be:	0151      	lsls	r1, r2, #5
 80024c0:	69ba      	ldr	r2, [r7, #24]
 80024c2:	440a      	add	r2, r1
 80024c4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80024c8:	f043 0302 	orr.w	r3, r3, #2
 80024cc:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	697a      	ldr	r2, [r7, #20]
 80024d4:	b2d2      	uxtb	r2, r2
 80024d6:	4611      	mov	r1, r2
 80024d8:	4618      	mov	r0, r3
 80024da:	f002 ff7f 	bl	80053dc <USB_HC_Halt>
}
 80024de:	e319      	b.n	8002b14 <HCD_HC_OUT_IRQHandler+0x72c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80024e0:	697b      	ldr	r3, [r7, #20]
 80024e2:	015a      	lsls	r2, r3, #5
 80024e4:	69bb      	ldr	r3, [r7, #24]
 80024e6:	4413      	add	r3, r2
 80024e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024ec:	689b      	ldr	r3, [r3, #8]
 80024ee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80024f2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80024f6:	d122      	bne.n	800253e <HCD_HC_OUT_IRQHandler+0x156>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80024f8:	697b      	ldr	r3, [r7, #20]
 80024fa:	015a      	lsls	r2, r3, #5
 80024fc:	69bb      	ldr	r3, [r7, #24]
 80024fe:	4413      	add	r3, r2
 8002500:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002504:	68db      	ldr	r3, [r3, #12]
 8002506:	697a      	ldr	r2, [r7, #20]
 8002508:	0151      	lsls	r1, r2, #5
 800250a:	69ba      	ldr	r2, [r7, #24]
 800250c:	440a      	add	r2, r1
 800250e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002512:	f043 0302 	orr.w	r3, r3, #2
 8002516:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	697a      	ldr	r2, [r7, #20]
 800251e:	b2d2      	uxtb	r2, r2
 8002520:	4611      	mov	r1, r2
 8002522:	4618      	mov	r0, r3
 8002524:	f002 ff5a 	bl	80053dc <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002528:	697b      	ldr	r3, [r7, #20]
 800252a:	015a      	lsls	r2, r3, #5
 800252c:	69bb      	ldr	r3, [r7, #24]
 800252e:	4413      	add	r3, r2
 8002530:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002534:	461a      	mov	r2, r3
 8002536:	f44f 7300 	mov.w	r3, #512	; 0x200
 800253a:	6093      	str	r3, [r2, #8]
}
 800253c:	e2ea      	b.n	8002b14 <HCD_HC_OUT_IRQHandler+0x72c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800253e:	697b      	ldr	r3, [r7, #20]
 8002540:	015a      	lsls	r2, r3, #5
 8002542:	69bb      	ldr	r3, [r7, #24]
 8002544:	4413      	add	r3, r2
 8002546:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800254a:	689b      	ldr	r3, [r3, #8]
 800254c:	f003 0301 	and.w	r3, r3, #1
 8002550:	2b01      	cmp	r3, #1
 8002552:	d150      	bne.n	80025f6 <HCD_HC_OUT_IRQHandler+0x20e>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002554:	687a      	ldr	r2, [r7, #4]
 8002556:	697b      	ldr	r3, [r7, #20]
 8002558:	212c      	movs	r1, #44	; 0x2c
 800255a:	fb01 f303 	mul.w	r3, r1, r3
 800255e:	4413      	add	r3, r2
 8002560:	335c      	adds	r3, #92	; 0x5c
 8002562:	2200      	movs	r2, #0
 8002564:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002566:	697b      	ldr	r3, [r7, #20]
 8002568:	015a      	lsls	r2, r3, #5
 800256a:	69bb      	ldr	r3, [r7, #24]
 800256c:	4413      	add	r3, r2
 800256e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002572:	689b      	ldr	r3, [r3, #8]
 8002574:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002578:	2b40      	cmp	r3, #64	; 0x40
 800257a:	d111      	bne.n	80025a0 <HCD_HC_OUT_IRQHandler+0x1b8>
      hhcd->hc[ch_num].do_ping = 1U;
 800257c:	687a      	ldr	r2, [r7, #4]
 800257e:	697b      	ldr	r3, [r7, #20]
 8002580:	212c      	movs	r1, #44	; 0x2c
 8002582:	fb01 f303 	mul.w	r3, r1, r3
 8002586:	4413      	add	r3, r2
 8002588:	333d      	adds	r3, #61	; 0x3d
 800258a:	2201      	movs	r2, #1
 800258c:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 800258e:	697b      	ldr	r3, [r7, #20]
 8002590:	015a      	lsls	r2, r3, #5
 8002592:	69bb      	ldr	r3, [r7, #24]
 8002594:	4413      	add	r3, r2
 8002596:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800259a:	461a      	mov	r2, r3
 800259c:	2340      	movs	r3, #64	; 0x40
 800259e:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80025a0:	697b      	ldr	r3, [r7, #20]
 80025a2:	015a      	lsls	r2, r3, #5
 80025a4:	69bb      	ldr	r3, [r7, #24]
 80025a6:	4413      	add	r3, r2
 80025a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025ac:	68db      	ldr	r3, [r3, #12]
 80025ae:	697a      	ldr	r2, [r7, #20]
 80025b0:	0151      	lsls	r1, r2, #5
 80025b2:	69ba      	ldr	r2, [r7, #24]
 80025b4:	440a      	add	r2, r1
 80025b6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80025ba:	f043 0302 	orr.w	r3, r3, #2
 80025be:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	697a      	ldr	r2, [r7, #20]
 80025c6:	b2d2      	uxtb	r2, r2
 80025c8:	4611      	mov	r1, r2
 80025ca:	4618      	mov	r0, r3
 80025cc:	f002 ff06 	bl	80053dc <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80025d0:	697b      	ldr	r3, [r7, #20]
 80025d2:	015a      	lsls	r2, r3, #5
 80025d4:	69bb      	ldr	r3, [r7, #24]
 80025d6:	4413      	add	r3, r2
 80025d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025dc:	461a      	mov	r2, r3
 80025de:	2301      	movs	r3, #1
 80025e0:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 80025e2:	687a      	ldr	r2, [r7, #4]
 80025e4:	697b      	ldr	r3, [r7, #20]
 80025e6:	212c      	movs	r1, #44	; 0x2c
 80025e8:	fb01 f303 	mul.w	r3, r1, r3
 80025ec:	4413      	add	r3, r2
 80025ee:	3361      	adds	r3, #97	; 0x61
 80025f0:	2201      	movs	r2, #1
 80025f2:	701a      	strb	r2, [r3, #0]
}
 80025f4:	e28e      	b.n	8002b14 <HCD_HC_OUT_IRQHandler+0x72c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80025f6:	697b      	ldr	r3, [r7, #20]
 80025f8:	015a      	lsls	r2, r3, #5
 80025fa:	69bb      	ldr	r3, [r7, #24]
 80025fc:	4413      	add	r3, r2
 80025fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002602:	689b      	ldr	r3, [r3, #8]
 8002604:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002608:	2b40      	cmp	r3, #64	; 0x40
 800260a:	d13c      	bne.n	8002686 <HCD_HC_OUT_IRQHandler+0x29e>
    hhcd->hc[ch_num].state = HC_NYET;
 800260c:	687a      	ldr	r2, [r7, #4]
 800260e:	697b      	ldr	r3, [r7, #20]
 8002610:	212c      	movs	r1, #44	; 0x2c
 8002612:	fb01 f303 	mul.w	r3, r1, r3
 8002616:	4413      	add	r3, r2
 8002618:	3361      	adds	r3, #97	; 0x61
 800261a:	2204      	movs	r2, #4
 800261c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 800261e:	687a      	ldr	r2, [r7, #4]
 8002620:	697b      	ldr	r3, [r7, #20]
 8002622:	212c      	movs	r1, #44	; 0x2c
 8002624:	fb01 f303 	mul.w	r3, r1, r3
 8002628:	4413      	add	r3, r2
 800262a:	333d      	adds	r3, #61	; 0x3d
 800262c:	2201      	movs	r2, #1
 800262e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002630:	687a      	ldr	r2, [r7, #4]
 8002632:	697b      	ldr	r3, [r7, #20]
 8002634:	212c      	movs	r1, #44	; 0x2c
 8002636:	fb01 f303 	mul.w	r3, r1, r3
 800263a:	4413      	add	r3, r2
 800263c:	335c      	adds	r3, #92	; 0x5c
 800263e:	2200      	movs	r2, #0
 8002640:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002642:	697b      	ldr	r3, [r7, #20]
 8002644:	015a      	lsls	r2, r3, #5
 8002646:	69bb      	ldr	r3, [r7, #24]
 8002648:	4413      	add	r3, r2
 800264a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800264e:	68db      	ldr	r3, [r3, #12]
 8002650:	697a      	ldr	r2, [r7, #20]
 8002652:	0151      	lsls	r1, r2, #5
 8002654:	69ba      	ldr	r2, [r7, #24]
 8002656:	440a      	add	r2, r1
 8002658:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800265c:	f043 0302 	orr.w	r3, r3, #2
 8002660:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	697a      	ldr	r2, [r7, #20]
 8002668:	b2d2      	uxtb	r2, r2
 800266a:	4611      	mov	r1, r2
 800266c:	4618      	mov	r0, r3
 800266e:	f002 feb5 	bl	80053dc <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002672:	697b      	ldr	r3, [r7, #20]
 8002674:	015a      	lsls	r2, r3, #5
 8002676:	69bb      	ldr	r3, [r7, #24]
 8002678:	4413      	add	r3, r2
 800267a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800267e:	461a      	mov	r2, r3
 8002680:	2340      	movs	r3, #64	; 0x40
 8002682:	6093      	str	r3, [r2, #8]
}
 8002684:	e246      	b.n	8002b14 <HCD_HC_OUT_IRQHandler+0x72c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002686:	697b      	ldr	r3, [r7, #20]
 8002688:	015a      	lsls	r2, r3, #5
 800268a:	69bb      	ldr	r3, [r7, #24]
 800268c:	4413      	add	r3, r2
 800268e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002692:	689b      	ldr	r3, [r3, #8]
 8002694:	f003 0308 	and.w	r3, r3, #8
 8002698:	2b08      	cmp	r3, #8
 800269a:	d12a      	bne.n	80026f2 <HCD_HC_OUT_IRQHandler+0x30a>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800269c:	697b      	ldr	r3, [r7, #20]
 800269e:	015a      	lsls	r2, r3, #5
 80026a0:	69bb      	ldr	r3, [r7, #24]
 80026a2:	4413      	add	r3, r2
 80026a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026a8:	461a      	mov	r2, r3
 80026aa:	2308      	movs	r3, #8
 80026ac:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80026ae:	697b      	ldr	r3, [r7, #20]
 80026b0:	015a      	lsls	r2, r3, #5
 80026b2:	69bb      	ldr	r3, [r7, #24]
 80026b4:	4413      	add	r3, r2
 80026b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026ba:	68db      	ldr	r3, [r3, #12]
 80026bc:	697a      	ldr	r2, [r7, #20]
 80026be:	0151      	lsls	r1, r2, #5
 80026c0:	69ba      	ldr	r2, [r7, #24]
 80026c2:	440a      	add	r2, r1
 80026c4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80026c8:	f043 0302 	orr.w	r3, r3, #2
 80026cc:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	697a      	ldr	r2, [r7, #20]
 80026d4:	b2d2      	uxtb	r2, r2
 80026d6:	4611      	mov	r1, r2
 80026d8:	4618      	mov	r0, r3
 80026da:	f002 fe7f 	bl	80053dc <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 80026de:	687a      	ldr	r2, [r7, #4]
 80026e0:	697b      	ldr	r3, [r7, #20]
 80026e2:	212c      	movs	r1, #44	; 0x2c
 80026e4:	fb01 f303 	mul.w	r3, r1, r3
 80026e8:	4413      	add	r3, r2
 80026ea:	3361      	adds	r3, #97	; 0x61
 80026ec:	2205      	movs	r2, #5
 80026ee:	701a      	strb	r2, [r3, #0]
}
 80026f0:	e210      	b.n	8002b14 <HCD_HC_OUT_IRQHandler+0x72c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80026f2:	697b      	ldr	r3, [r7, #20]
 80026f4:	015a      	lsls	r2, r3, #5
 80026f6:	69bb      	ldr	r3, [r7, #24]
 80026f8:	4413      	add	r3, r2
 80026fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026fe:	689b      	ldr	r3, [r3, #8]
 8002700:	f003 0310 	and.w	r3, r3, #16
 8002704:	2b10      	cmp	r3, #16
 8002706:	d133      	bne.n	8002770 <HCD_HC_OUT_IRQHandler+0x388>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002708:	687a      	ldr	r2, [r7, #4]
 800270a:	697b      	ldr	r3, [r7, #20]
 800270c:	212c      	movs	r1, #44	; 0x2c
 800270e:	fb01 f303 	mul.w	r3, r1, r3
 8002712:	4413      	add	r3, r2
 8002714:	335c      	adds	r3, #92	; 0x5c
 8002716:	2200      	movs	r2, #0
 8002718:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 800271a:	687a      	ldr	r2, [r7, #4]
 800271c:	697b      	ldr	r3, [r7, #20]
 800271e:	212c      	movs	r1, #44	; 0x2c
 8002720:	fb01 f303 	mul.w	r3, r1, r3
 8002724:	4413      	add	r3, r2
 8002726:	3361      	adds	r3, #97	; 0x61
 8002728:	2203      	movs	r2, #3
 800272a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800272c:	697b      	ldr	r3, [r7, #20]
 800272e:	015a      	lsls	r2, r3, #5
 8002730:	69bb      	ldr	r3, [r7, #24]
 8002732:	4413      	add	r3, r2
 8002734:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002738:	68db      	ldr	r3, [r3, #12]
 800273a:	697a      	ldr	r2, [r7, #20]
 800273c:	0151      	lsls	r1, r2, #5
 800273e:	69ba      	ldr	r2, [r7, #24]
 8002740:	440a      	add	r2, r1
 8002742:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002746:	f043 0302 	orr.w	r3, r3, #2
 800274a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	697a      	ldr	r2, [r7, #20]
 8002752:	b2d2      	uxtb	r2, r2
 8002754:	4611      	mov	r1, r2
 8002756:	4618      	mov	r0, r3
 8002758:	f002 fe40 	bl	80053dc <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800275c:	697b      	ldr	r3, [r7, #20]
 800275e:	015a      	lsls	r2, r3, #5
 8002760:	69bb      	ldr	r3, [r7, #24]
 8002762:	4413      	add	r3, r2
 8002764:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002768:	461a      	mov	r2, r3
 800276a:	2310      	movs	r3, #16
 800276c:	6093      	str	r3, [r2, #8]
}
 800276e:	e1d1      	b.n	8002b14 <HCD_HC_OUT_IRQHandler+0x72c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002770:	697b      	ldr	r3, [r7, #20]
 8002772:	015a      	lsls	r2, r3, #5
 8002774:	69bb      	ldr	r3, [r7, #24]
 8002776:	4413      	add	r3, r2
 8002778:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800277c:	689b      	ldr	r3, [r3, #8]
 800277e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002782:	2b80      	cmp	r3, #128	; 0x80
 8002784:	d12a      	bne.n	80027dc <HCD_HC_OUT_IRQHandler+0x3f4>
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002786:	687a      	ldr	r2, [r7, #4]
 8002788:	697b      	ldr	r3, [r7, #20]
 800278a:	212c      	movs	r1, #44	; 0x2c
 800278c:	fb01 f303 	mul.w	r3, r1, r3
 8002790:	4413      	add	r3, r2
 8002792:	3361      	adds	r3, #97	; 0x61
 8002794:	2206      	movs	r2, #6
 8002796:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002798:	697b      	ldr	r3, [r7, #20]
 800279a:	015a      	lsls	r2, r3, #5
 800279c:	69bb      	ldr	r3, [r7, #24]
 800279e:	4413      	add	r3, r2
 80027a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027a4:	68db      	ldr	r3, [r3, #12]
 80027a6:	697a      	ldr	r2, [r7, #20]
 80027a8:	0151      	lsls	r1, r2, #5
 80027aa:	69ba      	ldr	r2, [r7, #24]
 80027ac:	440a      	add	r2, r1
 80027ae:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80027b2:	f043 0302 	orr.w	r3, r3, #2
 80027b6:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	697a      	ldr	r2, [r7, #20]
 80027be:	b2d2      	uxtb	r2, r2
 80027c0:	4611      	mov	r1, r2
 80027c2:	4618      	mov	r0, r3
 80027c4:	f002 fe0a 	bl	80053dc <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80027c8:	697b      	ldr	r3, [r7, #20]
 80027ca:	015a      	lsls	r2, r3, #5
 80027cc:	69bb      	ldr	r3, [r7, #24]
 80027ce:	4413      	add	r3, r2
 80027d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027d4:	461a      	mov	r2, r3
 80027d6:	2380      	movs	r3, #128	; 0x80
 80027d8:	6093      	str	r3, [r2, #8]
}
 80027da:	e19b      	b.n	8002b14 <HCD_HC_OUT_IRQHandler+0x72c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80027dc:	697b      	ldr	r3, [r7, #20]
 80027de:	015a      	lsls	r2, r3, #5
 80027e0:	69bb      	ldr	r3, [r7, #24]
 80027e2:	4413      	add	r3, r2
 80027e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027e8:	689b      	ldr	r3, [r3, #8]
 80027ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80027f2:	d134      	bne.n	800285e <HCD_HC_OUT_IRQHandler+0x476>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80027f4:	697b      	ldr	r3, [r7, #20]
 80027f6:	015a      	lsls	r2, r3, #5
 80027f8:	69bb      	ldr	r3, [r7, #24]
 80027fa:	4413      	add	r3, r2
 80027fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002800:	68db      	ldr	r3, [r3, #12]
 8002802:	697a      	ldr	r2, [r7, #20]
 8002804:	0151      	lsls	r1, r2, #5
 8002806:	69ba      	ldr	r2, [r7, #24]
 8002808:	440a      	add	r2, r1
 800280a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800280e:	f043 0302 	orr.w	r3, r3, #2
 8002812:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	697a      	ldr	r2, [r7, #20]
 800281a:	b2d2      	uxtb	r2, r2
 800281c:	4611      	mov	r1, r2
 800281e:	4618      	mov	r0, r3
 8002820:	f002 fddc 	bl	80053dc <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002824:	697b      	ldr	r3, [r7, #20]
 8002826:	015a      	lsls	r2, r3, #5
 8002828:	69bb      	ldr	r3, [r7, #24]
 800282a:	4413      	add	r3, r2
 800282c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002830:	461a      	mov	r2, r3
 8002832:	2310      	movs	r3, #16
 8002834:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002836:	697b      	ldr	r3, [r7, #20]
 8002838:	015a      	lsls	r2, r3, #5
 800283a:	69bb      	ldr	r3, [r7, #24]
 800283c:	4413      	add	r3, r2
 800283e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002842:	461a      	mov	r2, r3
 8002844:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002848:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800284a:	687a      	ldr	r2, [r7, #4]
 800284c:	697b      	ldr	r3, [r7, #20]
 800284e:	212c      	movs	r1, #44	; 0x2c
 8002850:	fb01 f303 	mul.w	r3, r1, r3
 8002854:	4413      	add	r3, r2
 8002856:	3361      	adds	r3, #97	; 0x61
 8002858:	2208      	movs	r2, #8
 800285a:	701a      	strb	r2, [r3, #0]
}
 800285c:	e15a      	b.n	8002b14 <HCD_HC_OUT_IRQHandler+0x72c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 800285e:	697b      	ldr	r3, [r7, #20]
 8002860:	015a      	lsls	r2, r3, #5
 8002862:	69bb      	ldr	r3, [r7, #24]
 8002864:	4413      	add	r3, r2
 8002866:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800286a:	689b      	ldr	r3, [r3, #8]
 800286c:	f003 0302 	and.w	r3, r3, #2
 8002870:	2b02      	cmp	r3, #2
 8002872:	f040 814f 	bne.w	8002b14 <HCD_HC_OUT_IRQHandler+0x72c>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8002876:	697b      	ldr	r3, [r7, #20]
 8002878:	015a      	lsls	r2, r3, #5
 800287a:	69bb      	ldr	r3, [r7, #24]
 800287c:	4413      	add	r3, r2
 800287e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002882:	68db      	ldr	r3, [r3, #12]
 8002884:	697a      	ldr	r2, [r7, #20]
 8002886:	0151      	lsls	r1, r2, #5
 8002888:	69ba      	ldr	r2, [r7, #24]
 800288a:	440a      	add	r2, r1
 800288c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002890:	f023 0302 	bic.w	r3, r3, #2
 8002894:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002896:	687a      	ldr	r2, [r7, #4]
 8002898:	697b      	ldr	r3, [r7, #20]
 800289a:	212c      	movs	r1, #44	; 0x2c
 800289c:	fb01 f303 	mul.w	r3, r1, r3
 80028a0:	4413      	add	r3, r2
 80028a2:	3361      	adds	r3, #97	; 0x61
 80028a4:	781b      	ldrb	r3, [r3, #0]
 80028a6:	2b01      	cmp	r3, #1
 80028a8:	d17d      	bne.n	80029a6 <HCD_HC_OUT_IRQHandler+0x5be>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80028aa:	687a      	ldr	r2, [r7, #4]
 80028ac:	697b      	ldr	r3, [r7, #20]
 80028ae:	212c      	movs	r1, #44	; 0x2c
 80028b0:	fb01 f303 	mul.w	r3, r1, r3
 80028b4:	4413      	add	r3, r2
 80028b6:	3360      	adds	r3, #96	; 0x60
 80028b8:	2201      	movs	r2, #1
 80028ba:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80028bc:	687a      	ldr	r2, [r7, #4]
 80028be:	697b      	ldr	r3, [r7, #20]
 80028c0:	212c      	movs	r1, #44	; 0x2c
 80028c2:	fb01 f303 	mul.w	r3, r1, r3
 80028c6:	4413      	add	r3, r2
 80028c8:	333f      	adds	r3, #63	; 0x3f
 80028ca:	781b      	ldrb	r3, [r3, #0]
 80028cc:	2b02      	cmp	r3, #2
 80028ce:	d00a      	beq.n	80028e6 <HCD_HC_OUT_IRQHandler+0x4fe>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 80028d0:	687a      	ldr	r2, [r7, #4]
 80028d2:	697b      	ldr	r3, [r7, #20]
 80028d4:	212c      	movs	r1, #44	; 0x2c
 80028d6:	fb01 f303 	mul.w	r3, r1, r3
 80028da:	4413      	add	r3, r2
 80028dc:	333f      	adds	r3, #63	; 0x3f
 80028de:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80028e0:	2b03      	cmp	r3, #3
 80028e2:	f040 8100 	bne.w	8002ae6 <HCD_HC_OUT_IRQHandler+0x6fe>
        if (hhcd->Init.dma_enable == 0U)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	691b      	ldr	r3, [r3, #16]
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d113      	bne.n	8002916 <HCD_HC_OUT_IRQHandler+0x52e>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 80028ee:	687a      	ldr	r2, [r7, #4]
 80028f0:	697b      	ldr	r3, [r7, #20]
 80028f2:	212c      	movs	r1, #44	; 0x2c
 80028f4:	fb01 f303 	mul.w	r3, r1, r3
 80028f8:	4413      	add	r3, r2
 80028fa:	3355      	adds	r3, #85	; 0x55
 80028fc:	781b      	ldrb	r3, [r3, #0]
 80028fe:	f083 0301 	eor.w	r3, r3, #1
 8002902:	b2d8      	uxtb	r0, r3
 8002904:	687a      	ldr	r2, [r7, #4]
 8002906:	697b      	ldr	r3, [r7, #20]
 8002908:	212c      	movs	r1, #44	; 0x2c
 800290a:	fb01 f303 	mul.w	r3, r1, r3
 800290e:	4413      	add	r3, r2
 8002910:	3355      	adds	r3, #85	; 0x55
 8002912:	4602      	mov	r2, r0
 8002914:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	691b      	ldr	r3, [r3, #16]
 800291a:	2b01      	cmp	r3, #1
 800291c:	f040 80e3 	bne.w	8002ae6 <HCD_HC_OUT_IRQHandler+0x6fe>
 8002920:	687a      	ldr	r2, [r7, #4]
 8002922:	697b      	ldr	r3, [r7, #20]
 8002924:	212c      	movs	r1, #44	; 0x2c
 8002926:	fb01 f303 	mul.w	r3, r1, r3
 800292a:	4413      	add	r3, r2
 800292c:	334c      	adds	r3, #76	; 0x4c
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	2b00      	cmp	r3, #0
 8002932:	f000 80d8 	beq.w	8002ae6 <HCD_HC_OUT_IRQHandler+0x6fe>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8002936:	687a      	ldr	r2, [r7, #4]
 8002938:	697b      	ldr	r3, [r7, #20]
 800293a:	212c      	movs	r1, #44	; 0x2c
 800293c:	fb01 f303 	mul.w	r3, r1, r3
 8002940:	4413      	add	r3, r2
 8002942:	334c      	adds	r3, #76	; 0x4c
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	6879      	ldr	r1, [r7, #4]
 8002948:	697a      	ldr	r2, [r7, #20]
 800294a:	202c      	movs	r0, #44	; 0x2c
 800294c:	fb00 f202 	mul.w	r2, r0, r2
 8002950:	440a      	add	r2, r1
 8002952:	3240      	adds	r2, #64	; 0x40
 8002954:	8812      	ldrh	r2, [r2, #0]
 8002956:	4413      	add	r3, r2
 8002958:	3b01      	subs	r3, #1
 800295a:	6879      	ldr	r1, [r7, #4]
 800295c:	697a      	ldr	r2, [r7, #20]
 800295e:	202c      	movs	r0, #44	; 0x2c
 8002960:	fb00 f202 	mul.w	r2, r0, r2
 8002964:	440a      	add	r2, r1
 8002966:	3240      	adds	r2, #64	; 0x40
 8002968:	8812      	ldrh	r2, [r2, #0]
 800296a:	fbb3 f3f2 	udiv	r3, r3, r2
 800296e:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	f003 0301 	and.w	r3, r3, #1
 8002976:	2b00      	cmp	r3, #0
 8002978:	f000 80b5 	beq.w	8002ae6 <HCD_HC_OUT_IRQHandler+0x6fe>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 800297c:	687a      	ldr	r2, [r7, #4]
 800297e:	697b      	ldr	r3, [r7, #20]
 8002980:	212c      	movs	r1, #44	; 0x2c
 8002982:	fb01 f303 	mul.w	r3, r1, r3
 8002986:	4413      	add	r3, r2
 8002988:	3355      	adds	r3, #85	; 0x55
 800298a:	781b      	ldrb	r3, [r3, #0]
 800298c:	f083 0301 	eor.w	r3, r3, #1
 8002990:	b2d8      	uxtb	r0, r3
 8002992:	687a      	ldr	r2, [r7, #4]
 8002994:	697b      	ldr	r3, [r7, #20]
 8002996:	212c      	movs	r1, #44	; 0x2c
 8002998:	fb01 f303 	mul.w	r3, r1, r3
 800299c:	4413      	add	r3, r2
 800299e:	3355      	adds	r3, #85	; 0x55
 80029a0:	4602      	mov	r2, r0
 80029a2:	701a      	strb	r2, [r3, #0]
 80029a4:	e09f      	b.n	8002ae6 <HCD_HC_OUT_IRQHandler+0x6fe>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80029a6:	687a      	ldr	r2, [r7, #4]
 80029a8:	697b      	ldr	r3, [r7, #20]
 80029aa:	212c      	movs	r1, #44	; 0x2c
 80029ac:	fb01 f303 	mul.w	r3, r1, r3
 80029b0:	4413      	add	r3, r2
 80029b2:	3361      	adds	r3, #97	; 0x61
 80029b4:	781b      	ldrb	r3, [r3, #0]
 80029b6:	2b03      	cmp	r3, #3
 80029b8:	d109      	bne.n	80029ce <HCD_HC_OUT_IRQHandler+0x5e6>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80029ba:	687a      	ldr	r2, [r7, #4]
 80029bc:	697b      	ldr	r3, [r7, #20]
 80029be:	212c      	movs	r1, #44	; 0x2c
 80029c0:	fb01 f303 	mul.w	r3, r1, r3
 80029c4:	4413      	add	r3, r2
 80029c6:	3360      	adds	r3, #96	; 0x60
 80029c8:	2202      	movs	r2, #2
 80029ca:	701a      	strb	r2, [r3, #0]
 80029cc:	e08b      	b.n	8002ae6 <HCD_HC_OUT_IRQHandler+0x6fe>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 80029ce:	687a      	ldr	r2, [r7, #4]
 80029d0:	697b      	ldr	r3, [r7, #20]
 80029d2:	212c      	movs	r1, #44	; 0x2c
 80029d4:	fb01 f303 	mul.w	r3, r1, r3
 80029d8:	4413      	add	r3, r2
 80029da:	3361      	adds	r3, #97	; 0x61
 80029dc:	781b      	ldrb	r3, [r3, #0]
 80029de:	2b04      	cmp	r3, #4
 80029e0:	d109      	bne.n	80029f6 <HCD_HC_OUT_IRQHandler+0x60e>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80029e2:	687a      	ldr	r2, [r7, #4]
 80029e4:	697b      	ldr	r3, [r7, #20]
 80029e6:	212c      	movs	r1, #44	; 0x2c
 80029e8:	fb01 f303 	mul.w	r3, r1, r3
 80029ec:	4413      	add	r3, r2
 80029ee:	3360      	adds	r3, #96	; 0x60
 80029f0:	2202      	movs	r2, #2
 80029f2:	701a      	strb	r2, [r3, #0]
 80029f4:	e077      	b.n	8002ae6 <HCD_HC_OUT_IRQHandler+0x6fe>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80029f6:	687a      	ldr	r2, [r7, #4]
 80029f8:	697b      	ldr	r3, [r7, #20]
 80029fa:	212c      	movs	r1, #44	; 0x2c
 80029fc:	fb01 f303 	mul.w	r3, r1, r3
 8002a00:	4413      	add	r3, r2
 8002a02:	3361      	adds	r3, #97	; 0x61
 8002a04:	781b      	ldrb	r3, [r3, #0]
 8002a06:	2b05      	cmp	r3, #5
 8002a08:	d109      	bne.n	8002a1e <HCD_HC_OUT_IRQHandler+0x636>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002a0a:	687a      	ldr	r2, [r7, #4]
 8002a0c:	697b      	ldr	r3, [r7, #20]
 8002a0e:	212c      	movs	r1, #44	; 0x2c
 8002a10:	fb01 f303 	mul.w	r3, r1, r3
 8002a14:	4413      	add	r3, r2
 8002a16:	3360      	adds	r3, #96	; 0x60
 8002a18:	2205      	movs	r2, #5
 8002a1a:	701a      	strb	r2, [r3, #0]
 8002a1c:	e063      	b.n	8002ae6 <HCD_HC_OUT_IRQHandler+0x6fe>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002a1e:	687a      	ldr	r2, [r7, #4]
 8002a20:	697b      	ldr	r3, [r7, #20]
 8002a22:	212c      	movs	r1, #44	; 0x2c
 8002a24:	fb01 f303 	mul.w	r3, r1, r3
 8002a28:	4413      	add	r3, r2
 8002a2a:	3361      	adds	r3, #97	; 0x61
 8002a2c:	781b      	ldrb	r3, [r3, #0]
 8002a2e:	2b06      	cmp	r3, #6
 8002a30:	d009      	beq.n	8002a46 <HCD_HC_OUT_IRQHandler+0x65e>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002a32:	687a      	ldr	r2, [r7, #4]
 8002a34:	697b      	ldr	r3, [r7, #20]
 8002a36:	212c      	movs	r1, #44	; 0x2c
 8002a38:	fb01 f303 	mul.w	r3, r1, r3
 8002a3c:	4413      	add	r3, r2
 8002a3e:	3361      	adds	r3, #97	; 0x61
 8002a40:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002a42:	2b08      	cmp	r3, #8
 8002a44:	d14f      	bne.n	8002ae6 <HCD_HC_OUT_IRQHandler+0x6fe>
      hhcd->hc[ch_num].ErrCnt++;
 8002a46:	687a      	ldr	r2, [r7, #4]
 8002a48:	697b      	ldr	r3, [r7, #20]
 8002a4a:	212c      	movs	r1, #44	; 0x2c
 8002a4c:	fb01 f303 	mul.w	r3, r1, r3
 8002a50:	4413      	add	r3, r2
 8002a52:	335c      	adds	r3, #92	; 0x5c
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	1c5a      	adds	r2, r3, #1
 8002a58:	6879      	ldr	r1, [r7, #4]
 8002a5a:	697b      	ldr	r3, [r7, #20]
 8002a5c:	202c      	movs	r0, #44	; 0x2c
 8002a5e:	fb00 f303 	mul.w	r3, r0, r3
 8002a62:	440b      	add	r3, r1
 8002a64:	335c      	adds	r3, #92	; 0x5c
 8002a66:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002a68:	687a      	ldr	r2, [r7, #4]
 8002a6a:	697b      	ldr	r3, [r7, #20]
 8002a6c:	212c      	movs	r1, #44	; 0x2c
 8002a6e:	fb01 f303 	mul.w	r3, r1, r3
 8002a72:	4413      	add	r3, r2
 8002a74:	335c      	adds	r3, #92	; 0x5c
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	2b02      	cmp	r3, #2
 8002a7a:	d912      	bls.n	8002aa2 <HCD_HC_OUT_IRQHandler+0x6ba>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002a7c:	687a      	ldr	r2, [r7, #4]
 8002a7e:	697b      	ldr	r3, [r7, #20]
 8002a80:	212c      	movs	r1, #44	; 0x2c
 8002a82:	fb01 f303 	mul.w	r3, r1, r3
 8002a86:	4413      	add	r3, r2
 8002a88:	335c      	adds	r3, #92	; 0x5c
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002a8e:	687a      	ldr	r2, [r7, #4]
 8002a90:	697b      	ldr	r3, [r7, #20]
 8002a92:	212c      	movs	r1, #44	; 0x2c
 8002a94:	fb01 f303 	mul.w	r3, r1, r3
 8002a98:	4413      	add	r3, r2
 8002a9a:	3360      	adds	r3, #96	; 0x60
 8002a9c:	2204      	movs	r2, #4
 8002a9e:	701a      	strb	r2, [r3, #0]
 8002aa0:	e021      	b.n	8002ae6 <HCD_HC_OUT_IRQHandler+0x6fe>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002aa2:	687a      	ldr	r2, [r7, #4]
 8002aa4:	697b      	ldr	r3, [r7, #20]
 8002aa6:	212c      	movs	r1, #44	; 0x2c
 8002aa8:	fb01 f303 	mul.w	r3, r1, r3
 8002aac:	4413      	add	r3, r2
 8002aae:	3360      	adds	r3, #96	; 0x60
 8002ab0:	2202      	movs	r2, #2
 8002ab2:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002ab4:	697b      	ldr	r3, [r7, #20]
 8002ab6:	015a      	lsls	r2, r3, #5
 8002ab8:	69bb      	ldr	r3, [r7, #24]
 8002aba:	4413      	add	r3, r2
 8002abc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002ac4:	693b      	ldr	r3, [r7, #16]
 8002ac6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002aca:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002acc:	693b      	ldr	r3, [r7, #16]
 8002ace:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002ad2:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002ad4:	697b      	ldr	r3, [r7, #20]
 8002ad6:	015a      	lsls	r2, r3, #5
 8002ad8:	69bb      	ldr	r3, [r7, #24]
 8002ada:	4413      	add	r3, r2
 8002adc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ae0:	461a      	mov	r2, r3
 8002ae2:	693b      	ldr	r3, [r7, #16]
 8002ae4:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002ae6:	697b      	ldr	r3, [r7, #20]
 8002ae8:	015a      	lsls	r2, r3, #5
 8002aea:	69bb      	ldr	r3, [r7, #24]
 8002aec:	4413      	add	r3, r2
 8002aee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002af2:	461a      	mov	r2, r3
 8002af4:	2302      	movs	r3, #2
 8002af6:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002af8:	697b      	ldr	r3, [r7, #20]
 8002afa:	b2d9      	uxtb	r1, r3
 8002afc:	687a      	ldr	r2, [r7, #4]
 8002afe:	697b      	ldr	r3, [r7, #20]
 8002b00:	202c      	movs	r0, #44	; 0x2c
 8002b02:	fb00 f303 	mul.w	r3, r0, r3
 8002b06:	4413      	add	r3, r2
 8002b08:	3360      	adds	r3, #96	; 0x60
 8002b0a:	781b      	ldrb	r3, [r3, #0]
 8002b0c:	461a      	mov	r2, r3
 8002b0e:	6878      	ldr	r0, [r7, #4]
 8002b10:	f00a ffec 	bl	800daec <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002b14:	bf00      	nop
 8002b16:	3720      	adds	r7, #32
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	bd80      	pop	{r7, pc}

08002b1c <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b08a      	sub	sp, #40	; 0x28
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b2c:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	6a1b      	ldr	r3, [r3, #32]
 8002b34:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8002b36:	69fb      	ldr	r3, [r7, #28]
 8002b38:	f003 030f 	and.w	r3, r3, #15
 8002b3c:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8002b3e:	69fb      	ldr	r3, [r7, #28]
 8002b40:	0c5b      	lsrs	r3, r3, #17
 8002b42:	f003 030f 	and.w	r3, r3, #15
 8002b46:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002b48:	69fb      	ldr	r3, [r7, #28]
 8002b4a:	091b      	lsrs	r3, r3, #4
 8002b4c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002b50:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8002b52:	697b      	ldr	r3, [r7, #20]
 8002b54:	2b02      	cmp	r3, #2
 8002b56:	d004      	beq.n	8002b62 <HCD_RXQLVL_IRQHandler+0x46>
 8002b58:	697b      	ldr	r3, [r7, #20]
 8002b5a:	2b05      	cmp	r3, #5
 8002b5c:	f000 80a9 	beq.w	8002cb2 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8002b60:	e0aa      	b.n	8002cb8 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8002b62:	693b      	ldr	r3, [r7, #16]
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	f000 80a6 	beq.w	8002cb6 <HCD_RXQLVL_IRQHandler+0x19a>
 8002b6a:	687a      	ldr	r2, [r7, #4]
 8002b6c:	69bb      	ldr	r3, [r7, #24]
 8002b6e:	212c      	movs	r1, #44	; 0x2c
 8002b70:	fb01 f303 	mul.w	r3, r1, r3
 8002b74:	4413      	add	r3, r2
 8002b76:	3344      	adds	r3, #68	; 0x44
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	f000 809b 	beq.w	8002cb6 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8002b80:	687a      	ldr	r2, [r7, #4]
 8002b82:	69bb      	ldr	r3, [r7, #24]
 8002b84:	212c      	movs	r1, #44	; 0x2c
 8002b86:	fb01 f303 	mul.w	r3, r1, r3
 8002b8a:	4413      	add	r3, r2
 8002b8c:	3350      	adds	r3, #80	; 0x50
 8002b8e:	681a      	ldr	r2, [r3, #0]
 8002b90:	693b      	ldr	r3, [r7, #16]
 8002b92:	441a      	add	r2, r3
 8002b94:	6879      	ldr	r1, [r7, #4]
 8002b96:	69bb      	ldr	r3, [r7, #24]
 8002b98:	202c      	movs	r0, #44	; 0x2c
 8002b9a:	fb00 f303 	mul.w	r3, r0, r3
 8002b9e:	440b      	add	r3, r1
 8002ba0:	334c      	adds	r3, #76	; 0x4c
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	429a      	cmp	r2, r3
 8002ba6:	d87a      	bhi.n	8002c9e <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6818      	ldr	r0, [r3, #0]
 8002bac:	687a      	ldr	r2, [r7, #4]
 8002bae:	69bb      	ldr	r3, [r7, #24]
 8002bb0:	212c      	movs	r1, #44	; 0x2c
 8002bb2:	fb01 f303 	mul.w	r3, r1, r3
 8002bb6:	4413      	add	r3, r2
 8002bb8:	3344      	adds	r3, #68	; 0x44
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	693a      	ldr	r2, [r7, #16]
 8002bbe:	b292      	uxth	r2, r2
 8002bc0:	4619      	mov	r1, r3
 8002bc2:	f002 f82a 	bl	8004c1a <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8002bc6:	687a      	ldr	r2, [r7, #4]
 8002bc8:	69bb      	ldr	r3, [r7, #24]
 8002bca:	212c      	movs	r1, #44	; 0x2c
 8002bcc:	fb01 f303 	mul.w	r3, r1, r3
 8002bd0:	4413      	add	r3, r2
 8002bd2:	3344      	adds	r3, #68	; 0x44
 8002bd4:	681a      	ldr	r2, [r3, #0]
 8002bd6:	693b      	ldr	r3, [r7, #16]
 8002bd8:	441a      	add	r2, r3
 8002bda:	6879      	ldr	r1, [r7, #4]
 8002bdc:	69bb      	ldr	r3, [r7, #24]
 8002bde:	202c      	movs	r0, #44	; 0x2c
 8002be0:	fb00 f303 	mul.w	r3, r0, r3
 8002be4:	440b      	add	r3, r1
 8002be6:	3344      	adds	r3, #68	; 0x44
 8002be8:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8002bea:	687a      	ldr	r2, [r7, #4]
 8002bec:	69bb      	ldr	r3, [r7, #24]
 8002bee:	212c      	movs	r1, #44	; 0x2c
 8002bf0:	fb01 f303 	mul.w	r3, r1, r3
 8002bf4:	4413      	add	r3, r2
 8002bf6:	3350      	adds	r3, #80	; 0x50
 8002bf8:	681a      	ldr	r2, [r3, #0]
 8002bfa:	693b      	ldr	r3, [r7, #16]
 8002bfc:	441a      	add	r2, r3
 8002bfe:	6879      	ldr	r1, [r7, #4]
 8002c00:	69bb      	ldr	r3, [r7, #24]
 8002c02:	202c      	movs	r0, #44	; 0x2c
 8002c04:	fb00 f303 	mul.w	r3, r0, r3
 8002c08:	440b      	add	r3, r1
 8002c0a:	3350      	adds	r3, #80	; 0x50
 8002c0c:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8002c0e:	69bb      	ldr	r3, [r7, #24]
 8002c10:	015a      	lsls	r2, r3, #5
 8002c12:	6a3b      	ldr	r3, [r7, #32]
 8002c14:	4413      	add	r3, r2
 8002c16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c1a:	691b      	ldr	r3, [r3, #16]
 8002c1c:	0cdb      	lsrs	r3, r3, #19
 8002c1e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002c22:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8002c24:	687a      	ldr	r2, [r7, #4]
 8002c26:	69bb      	ldr	r3, [r7, #24]
 8002c28:	212c      	movs	r1, #44	; 0x2c
 8002c2a:	fb01 f303 	mul.w	r3, r1, r3
 8002c2e:	4413      	add	r3, r2
 8002c30:	3340      	adds	r3, #64	; 0x40
 8002c32:	881b      	ldrh	r3, [r3, #0]
 8002c34:	461a      	mov	r2, r3
 8002c36:	693b      	ldr	r3, [r7, #16]
 8002c38:	4293      	cmp	r3, r2
 8002c3a:	d13c      	bne.n	8002cb6 <HCD_RXQLVL_IRQHandler+0x19a>
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d039      	beq.n	8002cb6 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002c42:	69bb      	ldr	r3, [r7, #24]
 8002c44:	015a      	lsls	r2, r3, #5
 8002c46:	6a3b      	ldr	r3, [r7, #32]
 8002c48:	4413      	add	r3, r2
 8002c4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002c52:	68bb      	ldr	r3, [r7, #8]
 8002c54:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002c58:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002c5a:	68bb      	ldr	r3, [r7, #8]
 8002c5c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002c60:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002c62:	69bb      	ldr	r3, [r7, #24]
 8002c64:	015a      	lsls	r2, r3, #5
 8002c66:	6a3b      	ldr	r3, [r7, #32]
 8002c68:	4413      	add	r3, r2
 8002c6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c6e:	461a      	mov	r2, r3
 8002c70:	68bb      	ldr	r3, [r7, #8]
 8002c72:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8002c74:	687a      	ldr	r2, [r7, #4]
 8002c76:	69bb      	ldr	r3, [r7, #24]
 8002c78:	212c      	movs	r1, #44	; 0x2c
 8002c7a:	fb01 f303 	mul.w	r3, r1, r3
 8002c7e:	4413      	add	r3, r2
 8002c80:	3354      	adds	r3, #84	; 0x54
 8002c82:	781b      	ldrb	r3, [r3, #0]
 8002c84:	f083 0301 	eor.w	r3, r3, #1
 8002c88:	b2d8      	uxtb	r0, r3
 8002c8a:	687a      	ldr	r2, [r7, #4]
 8002c8c:	69bb      	ldr	r3, [r7, #24]
 8002c8e:	212c      	movs	r1, #44	; 0x2c
 8002c90:	fb01 f303 	mul.w	r3, r1, r3
 8002c94:	4413      	add	r3, r2
 8002c96:	3354      	adds	r3, #84	; 0x54
 8002c98:	4602      	mov	r2, r0
 8002c9a:	701a      	strb	r2, [r3, #0]
      break;
 8002c9c:	e00b      	b.n	8002cb6 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002c9e:	687a      	ldr	r2, [r7, #4]
 8002ca0:	69bb      	ldr	r3, [r7, #24]
 8002ca2:	212c      	movs	r1, #44	; 0x2c
 8002ca4:	fb01 f303 	mul.w	r3, r1, r3
 8002ca8:	4413      	add	r3, r2
 8002caa:	3360      	adds	r3, #96	; 0x60
 8002cac:	2204      	movs	r2, #4
 8002cae:	701a      	strb	r2, [r3, #0]
      break;
 8002cb0:	e001      	b.n	8002cb6 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8002cb2:	bf00      	nop
 8002cb4:	e000      	b.n	8002cb8 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8002cb6:	bf00      	nop
  }
}
 8002cb8:	bf00      	nop
 8002cba:	3728      	adds	r7, #40	; 0x28
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	bd80      	pop	{r7, pc}

08002cc0 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b086      	sub	sp, #24
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002cce:	697b      	ldr	r3, [r7, #20]
 8002cd0:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8002cd2:	693b      	ldr	r3, [r7, #16]
 8002cd4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8002cdc:	693b      	ldr	r3, [r7, #16]
 8002cde:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8002ce6:	68bb      	ldr	r3, [r7, #8]
 8002ce8:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002cec:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	f003 0302 	and.w	r3, r3, #2
 8002cf4:	2b02      	cmp	r3, #2
 8002cf6:	d10b      	bne.n	8002d10 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	f003 0301 	and.w	r3, r3, #1
 8002cfe:	2b01      	cmp	r3, #1
 8002d00:	d102      	bne.n	8002d08 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8002d02:	6878      	ldr	r0, [r7, #4]
 8002d04:	f00a fed6 	bl	800dab4 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8002d08:	68bb      	ldr	r3, [r7, #8]
 8002d0a:	f043 0302 	orr.w	r3, r3, #2
 8002d0e:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	f003 0308 	and.w	r3, r3, #8
 8002d16:	2b08      	cmp	r3, #8
 8002d18:	d132      	bne.n	8002d80 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8002d1a:	68bb      	ldr	r3, [r7, #8]
 8002d1c:	f043 0308 	orr.w	r3, r3, #8
 8002d20:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	f003 0304 	and.w	r3, r3, #4
 8002d28:	2b04      	cmp	r3, #4
 8002d2a:	d126      	bne.n	8002d7a <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	699b      	ldr	r3, [r3, #24]
 8002d30:	2b02      	cmp	r3, #2
 8002d32:	d113      	bne.n	8002d5c <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8002d3a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002d3e:	d106      	bne.n	8002d4e <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	2102      	movs	r1, #2
 8002d46:	4618      	mov	r0, r3
 8002d48:	f002 f886 	bl	8004e58 <USB_InitFSLSPClkSel>
 8002d4c:	e011      	b.n	8002d72 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	2101      	movs	r1, #1
 8002d54:	4618      	mov	r0, r3
 8002d56:	f002 f87f 	bl	8004e58 <USB_InitFSLSPClkSel>
 8002d5a:	e00a      	b.n	8002d72 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	68db      	ldr	r3, [r3, #12]
 8002d60:	2b01      	cmp	r3, #1
 8002d62:	d106      	bne.n	8002d72 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8002d64:	693b      	ldr	r3, [r7, #16]
 8002d66:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002d6a:	461a      	mov	r2, r3
 8002d6c:	f64e 2360 	movw	r3, #60000	; 0xea60
 8002d70:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8002d72:	6878      	ldr	r0, [r7, #4]
 8002d74:	f00a fec7 	bl	800db06 <HAL_HCD_PortEnabled_Callback>
 8002d78:	e002      	b.n	8002d80 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8002d7a:	6878      	ldr	r0, [r7, #4]
 8002d7c:	f00a fed1 	bl	800db22 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	f003 0320 	and.w	r3, r3, #32
 8002d86:	2b20      	cmp	r3, #32
 8002d88:	d103      	bne.n	8002d92 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8002d8a:	68bb      	ldr	r3, [r7, #8]
 8002d8c:	f043 0320 	orr.w	r3, r3, #32
 8002d90:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8002d92:	693b      	ldr	r3, [r7, #16]
 8002d94:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002d98:	461a      	mov	r2, r3
 8002d9a:	68bb      	ldr	r3, [r7, #8]
 8002d9c:	6013      	str	r3, [r2, #0]
}
 8002d9e:	bf00      	nop
 8002da0:	3718      	adds	r7, #24
 8002da2:	46bd      	mov	sp, r7
 8002da4:	bd80      	pop	{r7, pc}
	...

08002da8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b086      	sub	sp, #24
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d101      	bne.n	8002dba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002db6:	2301      	movs	r3, #1
 8002db8:	e304      	b.n	80033c4 <HAL_RCC_OscConfig+0x61c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f003 0301 	and.w	r3, r3, #1
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	f000 8087 	beq.w	8002ed6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002dc8:	4b92      	ldr	r3, [pc, #584]	; (8003014 <HAL_RCC_OscConfig+0x26c>)
 8002dca:	685b      	ldr	r3, [r3, #4]
 8002dcc:	f003 030c 	and.w	r3, r3, #12
 8002dd0:	2b04      	cmp	r3, #4
 8002dd2:	d00c      	beq.n	8002dee <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002dd4:	4b8f      	ldr	r3, [pc, #572]	; (8003014 <HAL_RCC_OscConfig+0x26c>)
 8002dd6:	685b      	ldr	r3, [r3, #4]
 8002dd8:	f003 030c 	and.w	r3, r3, #12
 8002ddc:	2b08      	cmp	r3, #8
 8002dde:	d112      	bne.n	8002e06 <HAL_RCC_OscConfig+0x5e>
 8002de0:	4b8c      	ldr	r3, [pc, #560]	; (8003014 <HAL_RCC_OscConfig+0x26c>)
 8002de2:	685b      	ldr	r3, [r3, #4]
 8002de4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002de8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002dec:	d10b      	bne.n	8002e06 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002dee:	4b89      	ldr	r3, [pc, #548]	; (8003014 <HAL_RCC_OscConfig+0x26c>)
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d06c      	beq.n	8002ed4 <HAL_RCC_OscConfig+0x12c>
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	689b      	ldr	r3, [r3, #8]
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d168      	bne.n	8002ed4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002e02:	2301      	movs	r3, #1
 8002e04:	e2de      	b.n	80033c4 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	689b      	ldr	r3, [r3, #8]
 8002e0a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e0e:	d106      	bne.n	8002e1e <HAL_RCC_OscConfig+0x76>
 8002e10:	4b80      	ldr	r3, [pc, #512]	; (8003014 <HAL_RCC_OscConfig+0x26c>)
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	4a7f      	ldr	r2, [pc, #508]	; (8003014 <HAL_RCC_OscConfig+0x26c>)
 8002e16:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e1a:	6013      	str	r3, [r2, #0]
 8002e1c:	e02e      	b.n	8002e7c <HAL_RCC_OscConfig+0xd4>
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	689b      	ldr	r3, [r3, #8]
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d10c      	bne.n	8002e40 <HAL_RCC_OscConfig+0x98>
 8002e26:	4b7b      	ldr	r3, [pc, #492]	; (8003014 <HAL_RCC_OscConfig+0x26c>)
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	4a7a      	ldr	r2, [pc, #488]	; (8003014 <HAL_RCC_OscConfig+0x26c>)
 8002e2c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e30:	6013      	str	r3, [r2, #0]
 8002e32:	4b78      	ldr	r3, [pc, #480]	; (8003014 <HAL_RCC_OscConfig+0x26c>)
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	4a77      	ldr	r2, [pc, #476]	; (8003014 <HAL_RCC_OscConfig+0x26c>)
 8002e38:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e3c:	6013      	str	r3, [r2, #0]
 8002e3e:	e01d      	b.n	8002e7c <HAL_RCC_OscConfig+0xd4>
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	689b      	ldr	r3, [r3, #8]
 8002e44:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002e48:	d10c      	bne.n	8002e64 <HAL_RCC_OscConfig+0xbc>
 8002e4a:	4b72      	ldr	r3, [pc, #456]	; (8003014 <HAL_RCC_OscConfig+0x26c>)
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	4a71      	ldr	r2, [pc, #452]	; (8003014 <HAL_RCC_OscConfig+0x26c>)
 8002e50:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002e54:	6013      	str	r3, [r2, #0]
 8002e56:	4b6f      	ldr	r3, [pc, #444]	; (8003014 <HAL_RCC_OscConfig+0x26c>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	4a6e      	ldr	r2, [pc, #440]	; (8003014 <HAL_RCC_OscConfig+0x26c>)
 8002e5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e60:	6013      	str	r3, [r2, #0]
 8002e62:	e00b      	b.n	8002e7c <HAL_RCC_OscConfig+0xd4>
 8002e64:	4b6b      	ldr	r3, [pc, #428]	; (8003014 <HAL_RCC_OscConfig+0x26c>)
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	4a6a      	ldr	r2, [pc, #424]	; (8003014 <HAL_RCC_OscConfig+0x26c>)
 8002e6a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e6e:	6013      	str	r3, [r2, #0]
 8002e70:	4b68      	ldr	r3, [pc, #416]	; (8003014 <HAL_RCC_OscConfig+0x26c>)
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	4a67      	ldr	r2, [pc, #412]	; (8003014 <HAL_RCC_OscConfig+0x26c>)
 8002e76:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e7a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	689b      	ldr	r3, [r3, #8]
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d013      	beq.n	8002eac <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e84:	f7fd feca 	bl	8000c1c <HAL_GetTick>
 8002e88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e8a:	e008      	b.n	8002e9e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e8c:	f7fd fec6 	bl	8000c1c <HAL_GetTick>
 8002e90:	4602      	mov	r2, r0
 8002e92:	693b      	ldr	r3, [r7, #16]
 8002e94:	1ad3      	subs	r3, r2, r3
 8002e96:	2b64      	cmp	r3, #100	; 0x64
 8002e98:	d901      	bls.n	8002e9e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002e9a:	2303      	movs	r3, #3
 8002e9c:	e292      	b.n	80033c4 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e9e:	4b5d      	ldr	r3, [pc, #372]	; (8003014 <HAL_RCC_OscConfig+0x26c>)
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d0f0      	beq.n	8002e8c <HAL_RCC_OscConfig+0xe4>
 8002eaa:	e014      	b.n	8002ed6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002eac:	f7fd feb6 	bl	8000c1c <HAL_GetTick>
 8002eb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002eb2:	e008      	b.n	8002ec6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002eb4:	f7fd feb2 	bl	8000c1c <HAL_GetTick>
 8002eb8:	4602      	mov	r2, r0
 8002eba:	693b      	ldr	r3, [r7, #16]
 8002ebc:	1ad3      	subs	r3, r2, r3
 8002ebe:	2b64      	cmp	r3, #100	; 0x64
 8002ec0:	d901      	bls.n	8002ec6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002ec2:	2303      	movs	r3, #3
 8002ec4:	e27e      	b.n	80033c4 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ec6:	4b53      	ldr	r3, [pc, #332]	; (8003014 <HAL_RCC_OscConfig+0x26c>)
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d1f0      	bne.n	8002eb4 <HAL_RCC_OscConfig+0x10c>
 8002ed2:	e000      	b.n	8002ed6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ed4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f003 0302 	and.w	r3, r3, #2
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d063      	beq.n	8002faa <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002ee2:	4b4c      	ldr	r3, [pc, #304]	; (8003014 <HAL_RCC_OscConfig+0x26c>)
 8002ee4:	685b      	ldr	r3, [r3, #4]
 8002ee6:	f003 030c 	and.w	r3, r3, #12
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d00b      	beq.n	8002f06 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002eee:	4b49      	ldr	r3, [pc, #292]	; (8003014 <HAL_RCC_OscConfig+0x26c>)
 8002ef0:	685b      	ldr	r3, [r3, #4]
 8002ef2:	f003 030c 	and.w	r3, r3, #12
 8002ef6:	2b08      	cmp	r3, #8
 8002ef8:	d11c      	bne.n	8002f34 <HAL_RCC_OscConfig+0x18c>
 8002efa:	4b46      	ldr	r3, [pc, #280]	; (8003014 <HAL_RCC_OscConfig+0x26c>)
 8002efc:	685b      	ldr	r3, [r3, #4]
 8002efe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d116      	bne.n	8002f34 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f06:	4b43      	ldr	r3, [pc, #268]	; (8003014 <HAL_RCC_OscConfig+0x26c>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f003 0302 	and.w	r3, r3, #2
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d005      	beq.n	8002f1e <HAL_RCC_OscConfig+0x176>
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	695b      	ldr	r3, [r3, #20]
 8002f16:	2b01      	cmp	r3, #1
 8002f18:	d001      	beq.n	8002f1e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002f1a:	2301      	movs	r3, #1
 8002f1c:	e252      	b.n	80033c4 <HAL_RCC_OscConfig+0x61c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f1e:	4b3d      	ldr	r3, [pc, #244]	; (8003014 <HAL_RCC_OscConfig+0x26c>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	699b      	ldr	r3, [r3, #24]
 8002f2a:	00db      	lsls	r3, r3, #3
 8002f2c:	4939      	ldr	r1, [pc, #228]	; (8003014 <HAL_RCC_OscConfig+0x26c>)
 8002f2e:	4313      	orrs	r3, r2
 8002f30:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f32:	e03a      	b.n	8002faa <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	695b      	ldr	r3, [r3, #20]
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d020      	beq.n	8002f7e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002f3c:	4b36      	ldr	r3, [pc, #216]	; (8003018 <HAL_RCC_OscConfig+0x270>)
 8002f3e:	2201      	movs	r2, #1
 8002f40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f42:	f7fd fe6b 	bl	8000c1c <HAL_GetTick>
 8002f46:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f48:	e008      	b.n	8002f5c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f4a:	f7fd fe67 	bl	8000c1c <HAL_GetTick>
 8002f4e:	4602      	mov	r2, r0
 8002f50:	693b      	ldr	r3, [r7, #16]
 8002f52:	1ad3      	subs	r3, r2, r3
 8002f54:	2b02      	cmp	r3, #2
 8002f56:	d901      	bls.n	8002f5c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002f58:	2303      	movs	r3, #3
 8002f5a:	e233      	b.n	80033c4 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f5c:	4b2d      	ldr	r3, [pc, #180]	; (8003014 <HAL_RCC_OscConfig+0x26c>)
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f003 0302 	and.w	r3, r3, #2
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d0f0      	beq.n	8002f4a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f68:	4b2a      	ldr	r3, [pc, #168]	; (8003014 <HAL_RCC_OscConfig+0x26c>)
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	699b      	ldr	r3, [r3, #24]
 8002f74:	00db      	lsls	r3, r3, #3
 8002f76:	4927      	ldr	r1, [pc, #156]	; (8003014 <HAL_RCC_OscConfig+0x26c>)
 8002f78:	4313      	orrs	r3, r2
 8002f7a:	600b      	str	r3, [r1, #0]
 8002f7c:	e015      	b.n	8002faa <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f7e:	4b26      	ldr	r3, [pc, #152]	; (8003018 <HAL_RCC_OscConfig+0x270>)
 8002f80:	2200      	movs	r2, #0
 8002f82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f84:	f7fd fe4a 	bl	8000c1c <HAL_GetTick>
 8002f88:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f8a:	e008      	b.n	8002f9e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f8c:	f7fd fe46 	bl	8000c1c <HAL_GetTick>
 8002f90:	4602      	mov	r2, r0
 8002f92:	693b      	ldr	r3, [r7, #16]
 8002f94:	1ad3      	subs	r3, r2, r3
 8002f96:	2b02      	cmp	r3, #2
 8002f98:	d901      	bls.n	8002f9e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002f9a:	2303      	movs	r3, #3
 8002f9c:	e212      	b.n	80033c4 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f9e:	4b1d      	ldr	r3, [pc, #116]	; (8003014 <HAL_RCC_OscConfig+0x26c>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f003 0302 	and.w	r3, r3, #2
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d1f0      	bne.n	8002f8c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f003 0308 	and.w	r3, r3, #8
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d03a      	beq.n	800302c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	69db      	ldr	r3, [r3, #28]
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d019      	beq.n	8002ff2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002fbe:	4b17      	ldr	r3, [pc, #92]	; (800301c <HAL_RCC_OscConfig+0x274>)
 8002fc0:	2201      	movs	r2, #1
 8002fc2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002fc4:	f7fd fe2a 	bl	8000c1c <HAL_GetTick>
 8002fc8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002fca:	e008      	b.n	8002fde <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002fcc:	f7fd fe26 	bl	8000c1c <HAL_GetTick>
 8002fd0:	4602      	mov	r2, r0
 8002fd2:	693b      	ldr	r3, [r7, #16]
 8002fd4:	1ad3      	subs	r3, r2, r3
 8002fd6:	2b02      	cmp	r3, #2
 8002fd8:	d901      	bls.n	8002fde <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002fda:	2303      	movs	r3, #3
 8002fdc:	e1f2      	b.n	80033c4 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002fde:	4b0d      	ldr	r3, [pc, #52]	; (8003014 <HAL_RCC_OscConfig+0x26c>)
 8002fe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fe2:	f003 0302 	and.w	r3, r3, #2
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d0f0      	beq.n	8002fcc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002fea:	2001      	movs	r0, #1
 8002fec:	f000 fc1c 	bl	8003828 <RCC_Delay>
 8002ff0:	e01c      	b.n	800302c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ff2:	4b0a      	ldr	r3, [pc, #40]	; (800301c <HAL_RCC_OscConfig+0x274>)
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ff8:	f7fd fe10 	bl	8000c1c <HAL_GetTick>
 8002ffc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ffe:	e00f      	b.n	8003020 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003000:	f7fd fe0c 	bl	8000c1c <HAL_GetTick>
 8003004:	4602      	mov	r2, r0
 8003006:	693b      	ldr	r3, [r7, #16]
 8003008:	1ad3      	subs	r3, r2, r3
 800300a:	2b02      	cmp	r3, #2
 800300c:	d908      	bls.n	8003020 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800300e:	2303      	movs	r3, #3
 8003010:	e1d8      	b.n	80033c4 <HAL_RCC_OscConfig+0x61c>
 8003012:	bf00      	nop
 8003014:	40021000 	.word	0x40021000
 8003018:	42420000 	.word	0x42420000
 800301c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003020:	4b9b      	ldr	r3, [pc, #620]	; (8003290 <HAL_RCC_OscConfig+0x4e8>)
 8003022:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003024:	f003 0302 	and.w	r3, r3, #2
 8003028:	2b00      	cmp	r3, #0
 800302a:	d1e9      	bne.n	8003000 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f003 0304 	and.w	r3, r3, #4
 8003034:	2b00      	cmp	r3, #0
 8003036:	f000 80a6 	beq.w	8003186 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800303a:	2300      	movs	r3, #0
 800303c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800303e:	4b94      	ldr	r3, [pc, #592]	; (8003290 <HAL_RCC_OscConfig+0x4e8>)
 8003040:	69db      	ldr	r3, [r3, #28]
 8003042:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003046:	2b00      	cmp	r3, #0
 8003048:	d10d      	bne.n	8003066 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800304a:	4b91      	ldr	r3, [pc, #580]	; (8003290 <HAL_RCC_OscConfig+0x4e8>)
 800304c:	69db      	ldr	r3, [r3, #28]
 800304e:	4a90      	ldr	r2, [pc, #576]	; (8003290 <HAL_RCC_OscConfig+0x4e8>)
 8003050:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003054:	61d3      	str	r3, [r2, #28]
 8003056:	4b8e      	ldr	r3, [pc, #568]	; (8003290 <HAL_RCC_OscConfig+0x4e8>)
 8003058:	69db      	ldr	r3, [r3, #28]
 800305a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800305e:	60bb      	str	r3, [r7, #8]
 8003060:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003062:	2301      	movs	r3, #1
 8003064:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003066:	4b8b      	ldr	r3, [pc, #556]	; (8003294 <HAL_RCC_OscConfig+0x4ec>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800306e:	2b00      	cmp	r3, #0
 8003070:	d118      	bne.n	80030a4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003072:	4b88      	ldr	r3, [pc, #544]	; (8003294 <HAL_RCC_OscConfig+0x4ec>)
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	4a87      	ldr	r2, [pc, #540]	; (8003294 <HAL_RCC_OscConfig+0x4ec>)
 8003078:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800307c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800307e:	f7fd fdcd 	bl	8000c1c <HAL_GetTick>
 8003082:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003084:	e008      	b.n	8003098 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003086:	f7fd fdc9 	bl	8000c1c <HAL_GetTick>
 800308a:	4602      	mov	r2, r0
 800308c:	693b      	ldr	r3, [r7, #16]
 800308e:	1ad3      	subs	r3, r2, r3
 8003090:	2b64      	cmp	r3, #100	; 0x64
 8003092:	d901      	bls.n	8003098 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003094:	2303      	movs	r3, #3
 8003096:	e195      	b.n	80033c4 <HAL_RCC_OscConfig+0x61c>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003098:	4b7e      	ldr	r3, [pc, #504]	; (8003294 <HAL_RCC_OscConfig+0x4ec>)
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d0f0      	beq.n	8003086 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	691b      	ldr	r3, [r3, #16]
 80030a8:	2b01      	cmp	r3, #1
 80030aa:	d106      	bne.n	80030ba <HAL_RCC_OscConfig+0x312>
 80030ac:	4b78      	ldr	r3, [pc, #480]	; (8003290 <HAL_RCC_OscConfig+0x4e8>)
 80030ae:	6a1b      	ldr	r3, [r3, #32]
 80030b0:	4a77      	ldr	r2, [pc, #476]	; (8003290 <HAL_RCC_OscConfig+0x4e8>)
 80030b2:	f043 0301 	orr.w	r3, r3, #1
 80030b6:	6213      	str	r3, [r2, #32]
 80030b8:	e02d      	b.n	8003116 <HAL_RCC_OscConfig+0x36e>
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	691b      	ldr	r3, [r3, #16]
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d10c      	bne.n	80030dc <HAL_RCC_OscConfig+0x334>
 80030c2:	4b73      	ldr	r3, [pc, #460]	; (8003290 <HAL_RCC_OscConfig+0x4e8>)
 80030c4:	6a1b      	ldr	r3, [r3, #32]
 80030c6:	4a72      	ldr	r2, [pc, #456]	; (8003290 <HAL_RCC_OscConfig+0x4e8>)
 80030c8:	f023 0301 	bic.w	r3, r3, #1
 80030cc:	6213      	str	r3, [r2, #32]
 80030ce:	4b70      	ldr	r3, [pc, #448]	; (8003290 <HAL_RCC_OscConfig+0x4e8>)
 80030d0:	6a1b      	ldr	r3, [r3, #32]
 80030d2:	4a6f      	ldr	r2, [pc, #444]	; (8003290 <HAL_RCC_OscConfig+0x4e8>)
 80030d4:	f023 0304 	bic.w	r3, r3, #4
 80030d8:	6213      	str	r3, [r2, #32]
 80030da:	e01c      	b.n	8003116 <HAL_RCC_OscConfig+0x36e>
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	691b      	ldr	r3, [r3, #16]
 80030e0:	2b05      	cmp	r3, #5
 80030e2:	d10c      	bne.n	80030fe <HAL_RCC_OscConfig+0x356>
 80030e4:	4b6a      	ldr	r3, [pc, #424]	; (8003290 <HAL_RCC_OscConfig+0x4e8>)
 80030e6:	6a1b      	ldr	r3, [r3, #32]
 80030e8:	4a69      	ldr	r2, [pc, #420]	; (8003290 <HAL_RCC_OscConfig+0x4e8>)
 80030ea:	f043 0304 	orr.w	r3, r3, #4
 80030ee:	6213      	str	r3, [r2, #32]
 80030f0:	4b67      	ldr	r3, [pc, #412]	; (8003290 <HAL_RCC_OscConfig+0x4e8>)
 80030f2:	6a1b      	ldr	r3, [r3, #32]
 80030f4:	4a66      	ldr	r2, [pc, #408]	; (8003290 <HAL_RCC_OscConfig+0x4e8>)
 80030f6:	f043 0301 	orr.w	r3, r3, #1
 80030fa:	6213      	str	r3, [r2, #32]
 80030fc:	e00b      	b.n	8003116 <HAL_RCC_OscConfig+0x36e>
 80030fe:	4b64      	ldr	r3, [pc, #400]	; (8003290 <HAL_RCC_OscConfig+0x4e8>)
 8003100:	6a1b      	ldr	r3, [r3, #32]
 8003102:	4a63      	ldr	r2, [pc, #396]	; (8003290 <HAL_RCC_OscConfig+0x4e8>)
 8003104:	f023 0301 	bic.w	r3, r3, #1
 8003108:	6213      	str	r3, [r2, #32]
 800310a:	4b61      	ldr	r3, [pc, #388]	; (8003290 <HAL_RCC_OscConfig+0x4e8>)
 800310c:	6a1b      	ldr	r3, [r3, #32]
 800310e:	4a60      	ldr	r2, [pc, #384]	; (8003290 <HAL_RCC_OscConfig+0x4e8>)
 8003110:	f023 0304 	bic.w	r3, r3, #4
 8003114:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	691b      	ldr	r3, [r3, #16]
 800311a:	2b00      	cmp	r3, #0
 800311c:	d015      	beq.n	800314a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800311e:	f7fd fd7d 	bl	8000c1c <HAL_GetTick>
 8003122:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003124:	e00a      	b.n	800313c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003126:	f7fd fd79 	bl	8000c1c <HAL_GetTick>
 800312a:	4602      	mov	r2, r0
 800312c:	693b      	ldr	r3, [r7, #16]
 800312e:	1ad3      	subs	r3, r2, r3
 8003130:	f241 3288 	movw	r2, #5000	; 0x1388
 8003134:	4293      	cmp	r3, r2
 8003136:	d901      	bls.n	800313c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003138:	2303      	movs	r3, #3
 800313a:	e143      	b.n	80033c4 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800313c:	4b54      	ldr	r3, [pc, #336]	; (8003290 <HAL_RCC_OscConfig+0x4e8>)
 800313e:	6a1b      	ldr	r3, [r3, #32]
 8003140:	f003 0302 	and.w	r3, r3, #2
 8003144:	2b00      	cmp	r3, #0
 8003146:	d0ee      	beq.n	8003126 <HAL_RCC_OscConfig+0x37e>
 8003148:	e014      	b.n	8003174 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800314a:	f7fd fd67 	bl	8000c1c <HAL_GetTick>
 800314e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003150:	e00a      	b.n	8003168 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003152:	f7fd fd63 	bl	8000c1c <HAL_GetTick>
 8003156:	4602      	mov	r2, r0
 8003158:	693b      	ldr	r3, [r7, #16]
 800315a:	1ad3      	subs	r3, r2, r3
 800315c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003160:	4293      	cmp	r3, r2
 8003162:	d901      	bls.n	8003168 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003164:	2303      	movs	r3, #3
 8003166:	e12d      	b.n	80033c4 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003168:	4b49      	ldr	r3, [pc, #292]	; (8003290 <HAL_RCC_OscConfig+0x4e8>)
 800316a:	6a1b      	ldr	r3, [r3, #32]
 800316c:	f003 0302 	and.w	r3, r3, #2
 8003170:	2b00      	cmp	r3, #0
 8003172:	d1ee      	bne.n	8003152 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003174:	7dfb      	ldrb	r3, [r7, #23]
 8003176:	2b01      	cmp	r3, #1
 8003178:	d105      	bne.n	8003186 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800317a:	4b45      	ldr	r3, [pc, #276]	; (8003290 <HAL_RCC_OscConfig+0x4e8>)
 800317c:	69db      	ldr	r3, [r3, #28]
 800317e:	4a44      	ldr	r2, [pc, #272]	; (8003290 <HAL_RCC_OscConfig+0x4e8>)
 8003180:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003184:	61d3      	str	r3, [r2, #28]

#if defined(RCC_CR_PLL2ON)
  /*-------------------------------- PLL2 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL2(RCC_OscInitStruct->PLL2.PLL2State));
  if ((RCC_OscInitStruct->PLL2.PLL2State) != RCC_PLL2_NONE)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800318a:	2b00      	cmp	r3, #0
 800318c:	f000 808c 	beq.w	80032a8 <HAL_RCC_OscConfig+0x500>
  {
    /* This bit can not be cleared if the PLL2 clock is used indirectly as system
      clock (i.e. it is used as PLL clock entry that is used as system clock). */
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 8003190:	4b3f      	ldr	r3, [pc, #252]	; (8003290 <HAL_RCC_OscConfig+0x4e8>)
 8003192:	685b      	ldr	r3, [r3, #4]
 8003194:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003198:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800319c:	d10e      	bne.n	80031bc <HAL_RCC_OscConfig+0x414>
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 800319e:	4b3c      	ldr	r3, [pc, #240]	; (8003290 <HAL_RCC_OscConfig+0x4e8>)
 80031a0:	685b      	ldr	r3, [r3, #4]
 80031a2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 80031a6:	2b08      	cmp	r3, #8
 80031a8:	d108      	bne.n	80031bc <HAL_RCC_OscConfig+0x414>
        ((READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC)) == RCC_CFGR2_PREDIV1SRC_PLL2))
 80031aa:	4b39      	ldr	r3, [pc, #228]	; (8003290 <HAL_RCC_OscConfig+0x4e8>)
 80031ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 80031b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031b6:	d101      	bne.n	80031bc <HAL_RCC_OscConfig+0x414>
    {
      return HAL_ERROR;
 80031b8:	2301      	movs	r3, #1
 80031ba:	e103      	b.n	80033c4 <HAL_RCC_OscConfig+0x61c>
    }
    else
    {
      if ((RCC_OscInitStruct->PLL2.PLL2State) == RCC_PLL2_ON)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031c0:	2b02      	cmp	r3, #2
 80031c2:	d14e      	bne.n	8003262 <HAL_RCC_OscConfig+0x4ba>
        assert_param(IS_RCC_PLL2_MUL(RCC_OscInitStruct->PLL2.PLL2MUL));
        assert_param(IS_RCC_HSE_PREDIV2(RCC_OscInitStruct->PLL2.HSEPrediv2Value));

        /* Prediv2 can be written only when the PLLI2S is disabled. */
        /* Return an error only if new value is different from the programmed value */
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 80031c4:	4b32      	ldr	r3, [pc, #200]	; (8003290 <HAL_RCC_OscConfig+0x4e8>)
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d009      	beq.n	80031e4 <HAL_RCC_OscConfig+0x43c>
            (__HAL_RCC_HSE_GET_PREDIV2() != RCC_OscInitStruct->PLL2.HSEPrediv2Value))
 80031d0:	4b2f      	ldr	r3, [pc, #188]	; (8003290 <HAL_RCC_OscConfig+0x4e8>)
 80031d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031d4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 80031dc:	429a      	cmp	r2, r3
 80031de:	d001      	beq.n	80031e4 <HAL_RCC_OscConfig+0x43c>
        {
          return HAL_ERROR;
 80031e0:	2301      	movs	r3, #1
 80031e2:	e0ef      	b.n	80033c4 <HAL_RCC_OscConfig+0x61c>
        }

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 80031e4:	4b2c      	ldr	r3, [pc, #176]	; (8003298 <HAL_RCC_OscConfig+0x4f0>)
 80031e6:	2200      	movs	r2, #0
 80031e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031ea:	f7fd fd17 	bl	8000c1c <HAL_GetTick>
 80031ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 80031f0:	e008      	b.n	8003204 <HAL_RCC_OscConfig+0x45c>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80031f2:	f7fd fd13 	bl	8000c1c <HAL_GetTick>
 80031f6:	4602      	mov	r2, r0
 80031f8:	693b      	ldr	r3, [r7, #16]
 80031fa:	1ad3      	subs	r3, r2, r3
 80031fc:	2b64      	cmp	r3, #100	; 0x64
 80031fe:	d901      	bls.n	8003204 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003200:	2303      	movs	r3, #3
 8003202:	e0df      	b.n	80033c4 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 8003204:	4b22      	ldr	r3, [pc, #136]	; (8003290 <HAL_RCC_OscConfig+0x4e8>)
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800320c:	2b00      	cmp	r3, #0
 800320e:	d1f0      	bne.n	80031f2 <HAL_RCC_OscConfig+0x44a>
          }
        }

        /* Configure the HSE prediv2 factor --------------------------------*/
        __HAL_RCC_HSE_PREDIV2_CONFIG(RCC_OscInitStruct->PLL2.HSEPrediv2Value);
 8003210:	4b1f      	ldr	r3, [pc, #124]	; (8003290 <HAL_RCC_OscConfig+0x4e8>)
 8003212:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003214:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800321c:	491c      	ldr	r1, [pc, #112]	; (8003290 <HAL_RCC_OscConfig+0x4e8>)
 800321e:	4313      	orrs	r3, r2
 8003220:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Configure the main PLL2 multiplication factors. */
        __HAL_RCC_PLL2_CONFIG(RCC_OscInitStruct->PLL2.PLL2MUL);
 8003222:	4b1b      	ldr	r3, [pc, #108]	; (8003290 <HAL_RCC_OscConfig+0x4e8>)
 8003224:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003226:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800322e:	4918      	ldr	r1, [pc, #96]	; (8003290 <HAL_RCC_OscConfig+0x4e8>)
 8003230:	4313      	orrs	r3, r2
 8003232:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable the main PLL2. */
        __HAL_RCC_PLL2_ENABLE();
 8003234:	4b18      	ldr	r3, [pc, #96]	; (8003298 <HAL_RCC_OscConfig+0x4f0>)
 8003236:	2201      	movs	r2, #1
 8003238:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800323a:	f7fd fcef 	bl	8000c1c <HAL_GetTick>
 800323e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 8003240:	e008      	b.n	8003254 <HAL_RCC_OscConfig+0x4ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8003242:	f7fd fceb 	bl	8000c1c <HAL_GetTick>
 8003246:	4602      	mov	r2, r0
 8003248:	693b      	ldr	r3, [r7, #16]
 800324a:	1ad3      	subs	r3, r2, r3
 800324c:	2b64      	cmp	r3, #100	; 0x64
 800324e:	d901      	bls.n	8003254 <HAL_RCC_OscConfig+0x4ac>
          {
            return HAL_TIMEOUT;
 8003250:	2303      	movs	r3, #3
 8003252:	e0b7      	b.n	80033c4 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 8003254:	4b0e      	ldr	r3, [pc, #56]	; (8003290 <HAL_RCC_OscConfig+0x4e8>)
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800325c:	2b00      	cmp	r3, #0
 800325e:	d0f0      	beq.n	8003242 <HAL_RCC_OscConfig+0x49a>
 8003260:	e022      	b.n	80032a8 <HAL_RCC_OscConfig+0x500>
        }
      }
      else
      {
        /* Set PREDIV1 source to HSE */
        CLEAR_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC);
 8003262:	4b0b      	ldr	r3, [pc, #44]	; (8003290 <HAL_RCC_OscConfig+0x4e8>)
 8003264:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003266:	4a0a      	ldr	r2, [pc, #40]	; (8003290 <HAL_RCC_OscConfig+0x4e8>)
 8003268:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800326c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 800326e:	4b0a      	ldr	r3, [pc, #40]	; (8003298 <HAL_RCC_OscConfig+0x4f0>)
 8003270:	2200      	movs	r2, #0
 8003272:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003274:	f7fd fcd2 	bl	8000c1c <HAL_GetTick>
 8003278:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 800327a:	e00f      	b.n	800329c <HAL_RCC_OscConfig+0x4f4>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800327c:	f7fd fcce 	bl	8000c1c <HAL_GetTick>
 8003280:	4602      	mov	r2, r0
 8003282:	693b      	ldr	r3, [r7, #16]
 8003284:	1ad3      	subs	r3, r2, r3
 8003286:	2b64      	cmp	r3, #100	; 0x64
 8003288:	d908      	bls.n	800329c <HAL_RCC_OscConfig+0x4f4>
          {
            return HAL_TIMEOUT;
 800328a:	2303      	movs	r3, #3
 800328c:	e09a      	b.n	80033c4 <HAL_RCC_OscConfig+0x61c>
 800328e:	bf00      	nop
 8003290:	40021000 	.word	0x40021000
 8003294:	40007000 	.word	0x40007000
 8003298:	42420068 	.word	0x42420068
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 800329c:	4b4b      	ldr	r3, [pc, #300]	; (80033cc <HAL_RCC_OscConfig+0x624>)
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d1e9      	bne.n	800327c <HAL_RCC_OscConfig+0x4d4>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6a1b      	ldr	r3, [r3, #32]
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	f000 8088 	beq.w	80033c2 <HAL_RCC_OscConfig+0x61a>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80032b2:	4b46      	ldr	r3, [pc, #280]	; (80033cc <HAL_RCC_OscConfig+0x624>)
 80032b4:	685b      	ldr	r3, [r3, #4]
 80032b6:	f003 030c 	and.w	r3, r3, #12
 80032ba:	2b08      	cmp	r3, #8
 80032bc:	d068      	beq.n	8003390 <HAL_RCC_OscConfig+0x5e8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6a1b      	ldr	r3, [r3, #32]
 80032c2:	2b02      	cmp	r3, #2
 80032c4:	d14d      	bne.n	8003362 <HAL_RCC_OscConfig+0x5ba>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032c6:	4b42      	ldr	r3, [pc, #264]	; (80033d0 <HAL_RCC_OscConfig+0x628>)
 80032c8:	2200      	movs	r2, #0
 80032ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032cc:	f7fd fca6 	bl	8000c1c <HAL_GetTick>
 80032d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80032d2:	e008      	b.n	80032e6 <HAL_RCC_OscConfig+0x53e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032d4:	f7fd fca2 	bl	8000c1c <HAL_GetTick>
 80032d8:	4602      	mov	r2, r0
 80032da:	693b      	ldr	r3, [r7, #16]
 80032dc:	1ad3      	subs	r3, r2, r3
 80032de:	2b02      	cmp	r3, #2
 80032e0:	d901      	bls.n	80032e6 <HAL_RCC_OscConfig+0x53e>
          {
            return HAL_TIMEOUT;
 80032e2:	2303      	movs	r3, #3
 80032e4:	e06e      	b.n	80033c4 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80032e6:	4b39      	ldr	r3, [pc, #228]	; (80033cc <HAL_RCC_OscConfig+0x624>)
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d1f0      	bne.n	80032d4 <HAL_RCC_OscConfig+0x52c>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032fa:	d10f      	bne.n	800331c <HAL_RCC_OscConfig+0x574>
          assert_param(IS_RCC_HSE_PREDIV(RCC_OscInitStruct->HSEPredivValue));
#if defined(RCC_CFGR2_PREDIV1SRC)
          assert_param(IS_RCC_PREDIV1_SOURCE(RCC_OscInitStruct->Prediv1Source));

          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
 80032fc:	4b33      	ldr	r3, [pc, #204]	; (80033cc <HAL_RCC_OscConfig+0x624>)
 80032fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	685b      	ldr	r3, [r3, #4]
 8003304:	4931      	ldr	r1, [pc, #196]	; (80033cc <HAL_RCC_OscConfig+0x624>)
 8003306:	4313      	orrs	r3, r2
 8003308:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800330a:	4b30      	ldr	r3, [pc, #192]	; (80033cc <HAL_RCC_OscConfig+0x624>)
 800330c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800330e:	f023 020f 	bic.w	r2, r3, #15
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	68db      	ldr	r3, [r3, #12]
 8003316:	492d      	ldr	r1, [pc, #180]	; (80033cc <HAL_RCC_OscConfig+0x624>)
 8003318:	4313      	orrs	r3, r2
 800331a:	62cb      	str	r3, [r1, #44]	; 0x2c
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800331c:	4b2b      	ldr	r3, [pc, #172]	; (80033cc <HAL_RCC_OscConfig+0x624>)
 800331e:	685b      	ldr	r3, [r3, #4]
 8003320:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800332c:	430b      	orrs	r3, r1
 800332e:	4927      	ldr	r1, [pc, #156]	; (80033cc <HAL_RCC_OscConfig+0x624>)
 8003330:	4313      	orrs	r3, r2
 8003332:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003334:	4b26      	ldr	r3, [pc, #152]	; (80033d0 <HAL_RCC_OscConfig+0x628>)
 8003336:	2201      	movs	r2, #1
 8003338:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800333a:	f7fd fc6f 	bl	8000c1c <HAL_GetTick>
 800333e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003340:	e008      	b.n	8003354 <HAL_RCC_OscConfig+0x5ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003342:	f7fd fc6b 	bl	8000c1c <HAL_GetTick>
 8003346:	4602      	mov	r2, r0
 8003348:	693b      	ldr	r3, [r7, #16]
 800334a:	1ad3      	subs	r3, r2, r3
 800334c:	2b02      	cmp	r3, #2
 800334e:	d901      	bls.n	8003354 <HAL_RCC_OscConfig+0x5ac>
          {
            return HAL_TIMEOUT;
 8003350:	2303      	movs	r3, #3
 8003352:	e037      	b.n	80033c4 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003354:	4b1d      	ldr	r3, [pc, #116]	; (80033cc <HAL_RCC_OscConfig+0x624>)
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800335c:	2b00      	cmp	r3, #0
 800335e:	d0f0      	beq.n	8003342 <HAL_RCC_OscConfig+0x59a>
 8003360:	e02f      	b.n	80033c2 <HAL_RCC_OscConfig+0x61a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003362:	4b1b      	ldr	r3, [pc, #108]	; (80033d0 <HAL_RCC_OscConfig+0x628>)
 8003364:	2200      	movs	r2, #0
 8003366:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003368:	f7fd fc58 	bl	8000c1c <HAL_GetTick>
 800336c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800336e:	e008      	b.n	8003382 <HAL_RCC_OscConfig+0x5da>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003370:	f7fd fc54 	bl	8000c1c <HAL_GetTick>
 8003374:	4602      	mov	r2, r0
 8003376:	693b      	ldr	r3, [r7, #16]
 8003378:	1ad3      	subs	r3, r2, r3
 800337a:	2b02      	cmp	r3, #2
 800337c:	d901      	bls.n	8003382 <HAL_RCC_OscConfig+0x5da>
          {
            return HAL_TIMEOUT;
 800337e:	2303      	movs	r3, #3
 8003380:	e020      	b.n	80033c4 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003382:	4b12      	ldr	r3, [pc, #72]	; (80033cc <HAL_RCC_OscConfig+0x624>)
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800338a:	2b00      	cmp	r3, #0
 800338c:	d1f0      	bne.n	8003370 <HAL_RCC_OscConfig+0x5c8>
 800338e:	e018      	b.n	80033c2 <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6a1b      	ldr	r3, [r3, #32]
 8003394:	2b01      	cmp	r3, #1
 8003396:	d101      	bne.n	800339c <HAL_RCC_OscConfig+0x5f4>
      {
        return HAL_ERROR;
 8003398:	2301      	movs	r3, #1
 800339a:	e013      	b.n	80033c4 <HAL_RCC_OscConfig+0x61c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800339c:	4b0b      	ldr	r3, [pc, #44]	; (80033cc <HAL_RCC_OscConfig+0x624>)
 800339e:	685b      	ldr	r3, [r3, #4]
 80033a0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033ac:	429a      	cmp	r2, r3
 80033ae:	d106      	bne.n	80033be <HAL_RCC_OscConfig+0x616>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033ba:	429a      	cmp	r2, r3
 80033bc:	d001      	beq.n	80033c2 <HAL_RCC_OscConfig+0x61a>
        {
          return HAL_ERROR;
 80033be:	2301      	movs	r3, #1
 80033c0:	e000      	b.n	80033c4 <HAL_RCC_OscConfig+0x61c>
        }
      }
    }
  }

  return HAL_OK;
 80033c2:	2300      	movs	r3, #0
}
 80033c4:	4618      	mov	r0, r3
 80033c6:	3718      	adds	r7, #24
 80033c8:	46bd      	mov	sp, r7
 80033ca:	bd80      	pop	{r7, pc}
 80033cc:	40021000 	.word	0x40021000
 80033d0:	42420060 	.word	0x42420060

080033d4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b084      	sub	sp, #16
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
 80033dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d101      	bne.n	80033e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80033e4:	2301      	movs	r3, #1
 80033e6:	e0d0      	b.n	800358a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80033e8:	4b6a      	ldr	r3, [pc, #424]	; (8003594 <HAL_RCC_ClockConfig+0x1c0>)
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f003 0307 	and.w	r3, r3, #7
 80033f0:	683a      	ldr	r2, [r7, #0]
 80033f2:	429a      	cmp	r2, r3
 80033f4:	d910      	bls.n	8003418 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033f6:	4b67      	ldr	r3, [pc, #412]	; (8003594 <HAL_RCC_ClockConfig+0x1c0>)
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f023 0207 	bic.w	r2, r3, #7
 80033fe:	4965      	ldr	r1, [pc, #404]	; (8003594 <HAL_RCC_ClockConfig+0x1c0>)
 8003400:	683b      	ldr	r3, [r7, #0]
 8003402:	4313      	orrs	r3, r2
 8003404:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003406:	4b63      	ldr	r3, [pc, #396]	; (8003594 <HAL_RCC_ClockConfig+0x1c0>)
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f003 0307 	and.w	r3, r3, #7
 800340e:	683a      	ldr	r2, [r7, #0]
 8003410:	429a      	cmp	r2, r3
 8003412:	d001      	beq.n	8003418 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003414:	2301      	movs	r3, #1
 8003416:	e0b8      	b.n	800358a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f003 0302 	and.w	r3, r3, #2
 8003420:	2b00      	cmp	r3, #0
 8003422:	d020      	beq.n	8003466 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f003 0304 	and.w	r3, r3, #4
 800342c:	2b00      	cmp	r3, #0
 800342e:	d005      	beq.n	800343c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003430:	4b59      	ldr	r3, [pc, #356]	; (8003598 <HAL_RCC_ClockConfig+0x1c4>)
 8003432:	685b      	ldr	r3, [r3, #4]
 8003434:	4a58      	ldr	r2, [pc, #352]	; (8003598 <HAL_RCC_ClockConfig+0x1c4>)
 8003436:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800343a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f003 0308 	and.w	r3, r3, #8
 8003444:	2b00      	cmp	r3, #0
 8003446:	d005      	beq.n	8003454 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003448:	4b53      	ldr	r3, [pc, #332]	; (8003598 <HAL_RCC_ClockConfig+0x1c4>)
 800344a:	685b      	ldr	r3, [r3, #4]
 800344c:	4a52      	ldr	r2, [pc, #328]	; (8003598 <HAL_RCC_ClockConfig+0x1c4>)
 800344e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003452:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003454:	4b50      	ldr	r3, [pc, #320]	; (8003598 <HAL_RCC_ClockConfig+0x1c4>)
 8003456:	685b      	ldr	r3, [r3, #4]
 8003458:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	689b      	ldr	r3, [r3, #8]
 8003460:	494d      	ldr	r1, [pc, #308]	; (8003598 <HAL_RCC_ClockConfig+0x1c4>)
 8003462:	4313      	orrs	r3, r2
 8003464:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f003 0301 	and.w	r3, r3, #1
 800346e:	2b00      	cmp	r3, #0
 8003470:	d040      	beq.n	80034f4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	685b      	ldr	r3, [r3, #4]
 8003476:	2b01      	cmp	r3, #1
 8003478:	d107      	bne.n	800348a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800347a:	4b47      	ldr	r3, [pc, #284]	; (8003598 <HAL_RCC_ClockConfig+0x1c4>)
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003482:	2b00      	cmp	r3, #0
 8003484:	d115      	bne.n	80034b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003486:	2301      	movs	r3, #1
 8003488:	e07f      	b.n	800358a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	685b      	ldr	r3, [r3, #4]
 800348e:	2b02      	cmp	r3, #2
 8003490:	d107      	bne.n	80034a2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003492:	4b41      	ldr	r3, [pc, #260]	; (8003598 <HAL_RCC_ClockConfig+0x1c4>)
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800349a:	2b00      	cmp	r3, #0
 800349c:	d109      	bne.n	80034b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800349e:	2301      	movs	r3, #1
 80034a0:	e073      	b.n	800358a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034a2:	4b3d      	ldr	r3, [pc, #244]	; (8003598 <HAL_RCC_ClockConfig+0x1c4>)
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f003 0302 	and.w	r3, r3, #2
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d101      	bne.n	80034b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80034ae:	2301      	movs	r3, #1
 80034b0:	e06b      	b.n	800358a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80034b2:	4b39      	ldr	r3, [pc, #228]	; (8003598 <HAL_RCC_ClockConfig+0x1c4>)
 80034b4:	685b      	ldr	r3, [r3, #4]
 80034b6:	f023 0203 	bic.w	r2, r3, #3
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	685b      	ldr	r3, [r3, #4]
 80034be:	4936      	ldr	r1, [pc, #216]	; (8003598 <HAL_RCC_ClockConfig+0x1c4>)
 80034c0:	4313      	orrs	r3, r2
 80034c2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80034c4:	f7fd fbaa 	bl	8000c1c <HAL_GetTick>
 80034c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034ca:	e00a      	b.n	80034e2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80034cc:	f7fd fba6 	bl	8000c1c <HAL_GetTick>
 80034d0:	4602      	mov	r2, r0
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	1ad3      	subs	r3, r2, r3
 80034d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80034da:	4293      	cmp	r3, r2
 80034dc:	d901      	bls.n	80034e2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80034de:	2303      	movs	r3, #3
 80034e0:	e053      	b.n	800358a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034e2:	4b2d      	ldr	r3, [pc, #180]	; (8003598 <HAL_RCC_ClockConfig+0x1c4>)
 80034e4:	685b      	ldr	r3, [r3, #4]
 80034e6:	f003 020c 	and.w	r2, r3, #12
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	685b      	ldr	r3, [r3, #4]
 80034ee:	009b      	lsls	r3, r3, #2
 80034f0:	429a      	cmp	r2, r3
 80034f2:	d1eb      	bne.n	80034cc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80034f4:	4b27      	ldr	r3, [pc, #156]	; (8003594 <HAL_RCC_ClockConfig+0x1c0>)
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f003 0307 	and.w	r3, r3, #7
 80034fc:	683a      	ldr	r2, [r7, #0]
 80034fe:	429a      	cmp	r2, r3
 8003500:	d210      	bcs.n	8003524 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003502:	4b24      	ldr	r3, [pc, #144]	; (8003594 <HAL_RCC_ClockConfig+0x1c0>)
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f023 0207 	bic.w	r2, r3, #7
 800350a:	4922      	ldr	r1, [pc, #136]	; (8003594 <HAL_RCC_ClockConfig+0x1c0>)
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	4313      	orrs	r3, r2
 8003510:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003512:	4b20      	ldr	r3, [pc, #128]	; (8003594 <HAL_RCC_ClockConfig+0x1c0>)
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f003 0307 	and.w	r3, r3, #7
 800351a:	683a      	ldr	r2, [r7, #0]
 800351c:	429a      	cmp	r2, r3
 800351e:	d001      	beq.n	8003524 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003520:	2301      	movs	r3, #1
 8003522:	e032      	b.n	800358a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f003 0304 	and.w	r3, r3, #4
 800352c:	2b00      	cmp	r3, #0
 800352e:	d008      	beq.n	8003542 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003530:	4b19      	ldr	r3, [pc, #100]	; (8003598 <HAL_RCC_ClockConfig+0x1c4>)
 8003532:	685b      	ldr	r3, [r3, #4]
 8003534:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	68db      	ldr	r3, [r3, #12]
 800353c:	4916      	ldr	r1, [pc, #88]	; (8003598 <HAL_RCC_ClockConfig+0x1c4>)
 800353e:	4313      	orrs	r3, r2
 8003540:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f003 0308 	and.w	r3, r3, #8
 800354a:	2b00      	cmp	r3, #0
 800354c:	d009      	beq.n	8003562 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800354e:	4b12      	ldr	r3, [pc, #72]	; (8003598 <HAL_RCC_ClockConfig+0x1c4>)
 8003550:	685b      	ldr	r3, [r3, #4]
 8003552:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	691b      	ldr	r3, [r3, #16]
 800355a:	00db      	lsls	r3, r3, #3
 800355c:	490e      	ldr	r1, [pc, #56]	; (8003598 <HAL_RCC_ClockConfig+0x1c4>)
 800355e:	4313      	orrs	r3, r2
 8003560:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003562:	f000 f821 	bl	80035a8 <HAL_RCC_GetSysClockFreq>
 8003566:	4602      	mov	r2, r0
 8003568:	4b0b      	ldr	r3, [pc, #44]	; (8003598 <HAL_RCC_ClockConfig+0x1c4>)
 800356a:	685b      	ldr	r3, [r3, #4]
 800356c:	091b      	lsrs	r3, r3, #4
 800356e:	f003 030f 	and.w	r3, r3, #15
 8003572:	490a      	ldr	r1, [pc, #40]	; (800359c <HAL_RCC_ClockConfig+0x1c8>)
 8003574:	5ccb      	ldrb	r3, [r1, r3]
 8003576:	fa22 f303 	lsr.w	r3, r2, r3
 800357a:	4a09      	ldr	r2, [pc, #36]	; (80035a0 <HAL_RCC_ClockConfig+0x1cc>)
 800357c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800357e:	4b09      	ldr	r3, [pc, #36]	; (80035a4 <HAL_RCC_ClockConfig+0x1d0>)
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	4618      	mov	r0, r3
 8003584:	f7fd f912 	bl	80007ac <HAL_InitTick>

  return HAL_OK;
 8003588:	2300      	movs	r3, #0
}
 800358a:	4618      	mov	r0, r3
 800358c:	3710      	adds	r7, #16
 800358e:	46bd      	mov	sp, r7
 8003590:	bd80      	pop	{r7, pc}
 8003592:	bf00      	nop
 8003594:	40022000 	.word	0x40022000
 8003598:	40021000 	.word	0x40021000
 800359c:	08010148 	.word	0x08010148
 80035a0:	20000000 	.word	0x20000000
 80035a4:	20000004 	.word	0x20000004

080035a8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80035a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80035ac:	b099      	sub	sp, #100	; 0x64
 80035ae:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
 80035b0:	4b66      	ldr	r3, [pc, #408]	; (800374c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80035b2:	f107 0434 	add.w	r4, r7, #52	; 0x34
 80035b6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80035b8:	c407      	stmia	r4!, {r0, r1, r2}
 80035ba:	8023      	strh	r3, [r4, #0]
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
 80035bc:	4b64      	ldr	r3, [pc, #400]	; (8003750 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80035be:	f107 0424 	add.w	r4, r7, #36	; 0x24
 80035c2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80035c4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80035c8:	2300      	movs	r3, #0
 80035ca:	657b      	str	r3, [r7, #84]	; 0x54
 80035cc:	2300      	movs	r3, #0
 80035ce:	653b      	str	r3, [r7, #80]	; 0x50
 80035d0:	2300      	movs	r3, #0
 80035d2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80035d4:	2300      	movs	r3, #0
 80035d6:	64fb      	str	r3, [r7, #76]	; 0x4c
  uint32_t sysclockfreq = 0U;
 80035d8:	2300      	movs	r3, #0
 80035da:	65bb      	str	r3, [r7, #88]	; 0x58
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
 80035dc:	2300      	movs	r3, #0
 80035de:	64bb      	str	r3, [r7, #72]	; 0x48
 80035e0:	2300      	movs	r3, #0
 80035e2:	647b      	str	r3, [r7, #68]	; 0x44
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80035e4:	4b5b      	ldr	r3, [pc, #364]	; (8003754 <HAL_RCC_GetSysClockFreq+0x1ac>)
 80035e6:	685b      	ldr	r3, [r3, #4]
 80035e8:	657b      	str	r3, [r7, #84]	; 0x54

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80035ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80035ec:	f003 030c 	and.w	r3, r3, #12
 80035f0:	2b04      	cmp	r3, #4
 80035f2:	d002      	beq.n	80035fa <HAL_RCC_GetSysClockFreq+0x52>
 80035f4:	2b08      	cmp	r3, #8
 80035f6:	d003      	beq.n	8003600 <HAL_RCC_GetSysClockFreq+0x58>
 80035f8:	e09f      	b.n	800373a <HAL_RCC_GetSysClockFreq+0x192>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80035fa:	4b57      	ldr	r3, [pc, #348]	; (8003758 <HAL_RCC_GetSysClockFreq+0x1b0>)
 80035fc:	65bb      	str	r3, [r7, #88]	; 0x58
      break;
 80035fe:	e09f      	b.n	8003740 <HAL_RCC_GetSysClockFreq+0x198>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003600:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003602:	0c9b      	lsrs	r3, r3, #18
 8003604:	f003 030f 	and.w	r3, r3, #15
 8003608:	3340      	adds	r3, #64	; 0x40
 800360a:	f107 0220 	add.w	r2, r7, #32
 800360e:	4413      	add	r3, r2
 8003610:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 8003614:	64fb      	str	r3, [r7, #76]	; 0x4c
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003616:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003618:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800361c:	2b00      	cmp	r3, #0
 800361e:	f000 8084 	beq.w	800372a <HAL_RCC_GetSysClockFreq+0x182>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
 8003622:	4b4c      	ldr	r3, [pc, #304]	; (8003754 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8003624:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003626:	f003 030f 	and.w	r3, r3, #15
 800362a:	3340      	adds	r3, #64	; 0x40
 800362c:	f107 0220 	add.w	r2, r7, #32
 8003630:	4413      	add	r3, r2
 8003632:	f813 3c3c 	ldrb.w	r3, [r3, #-60]
 8003636:	653b      	str	r3, [r7, #80]	; 0x50
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
#endif /*RCC_CFGR2_PREDIV1*/
#if defined(RCC_CFGR2_PREDIV1SRC)

        if (HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC))
 8003638:	4b46      	ldr	r3, [pc, #280]	; (8003754 <HAL_RCC_GetSysClockFreq+0x1ac>)
 800363a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800363c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003640:	2b00      	cmp	r3, #0
 8003642:	d060      	beq.n	8003706 <HAL_RCC_GetSysClockFreq+0x15e>
        {
          /* PLL2 selected as Prediv1 source */
          /* PLLCLK = PLL2CLK / PREDIV1 * PLLMUL with PLL2CLK = HSE/PREDIV2 * PLL2MUL */
          prediv2 = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> RCC_CFGR2_PREDIV2_Pos) + 1;
 8003644:	4b43      	ldr	r3, [pc, #268]	; (8003754 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8003646:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003648:	091b      	lsrs	r3, r3, #4
 800364a:	f003 030f 	and.w	r3, r3, #15
 800364e:	3301      	adds	r3, #1
 8003650:	64bb      	str	r3, [r7, #72]	; 0x48
          pll2mul = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> RCC_CFGR2_PLL2MUL_Pos) + 2;
 8003652:	4b40      	ldr	r3, [pc, #256]	; (8003754 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8003654:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003656:	0a1b      	lsrs	r3, r3, #8
 8003658:	f003 030f 	and.w	r3, r3, #15
 800365c:	3302      	adds	r3, #2
 800365e:	647b      	str	r3, [r7, #68]	; 0x44
          pllclk = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pll2mul * (uint64_t)pllmul) / ((uint64_t)prediv2 * (uint64_t)prediv));
 8003660:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003662:	2200      	movs	r2, #0
 8003664:	613b      	str	r3, [r7, #16]
 8003666:	617a      	str	r2, [r7, #20]
 8003668:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800366a:	2200      	movs	r2, #0
 800366c:	61bb      	str	r3, [r7, #24]
 800366e:	61fa      	str	r2, [r7, #28]
 8003670:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8003674:	4622      	mov	r2, r4
 8003676:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800367a:	4684      	mov	ip, r0
 800367c:	fb0c f202 	mul.w	r2, ip, r2
 8003680:	e9c7 0106 	strd	r0, r1, [r7, #24]
 8003684:	468c      	mov	ip, r1
 8003686:	4618      	mov	r0, r3
 8003688:	4621      	mov	r1, r4
 800368a:	4603      	mov	r3, r0
 800368c:	fb03 f30c 	mul.w	r3, r3, ip
 8003690:	4413      	add	r3, r2
 8003692:	4602      	mov	r2, r0
 8003694:	69b9      	ldr	r1, [r7, #24]
 8003696:	fba2 8901 	umull	r8, r9, r2, r1
 800369a:	444b      	add	r3, r9
 800369c:	4699      	mov	r9, r3
 800369e:	4b2e      	ldr	r3, [pc, #184]	; (8003758 <HAL_RCC_GetSysClockFreq+0x1b0>)
 80036a0:	fb03 f209 	mul.w	r2, r3, r9
 80036a4:	2300      	movs	r3, #0
 80036a6:	fb03 f308 	mul.w	r3, r3, r8
 80036aa:	4413      	add	r3, r2
 80036ac:	4a2a      	ldr	r2, [pc, #168]	; (8003758 <HAL_RCC_GetSysClockFreq+0x1b0>)
 80036ae:	fba8 ab02 	umull	sl, fp, r8, r2
 80036b2:	445b      	add	r3, fp
 80036b4:	469b      	mov	fp, r3
 80036b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80036b8:	2200      	movs	r2, #0
 80036ba:	60bb      	str	r3, [r7, #8]
 80036bc:	60fa      	str	r2, [r7, #12]
 80036be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80036c0:	2200      	movs	r2, #0
 80036c2:	603b      	str	r3, [r7, #0]
 80036c4:	607a      	str	r2, [r7, #4]
 80036c6:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80036ca:	4622      	mov	r2, r4
 80036cc:	e9d7 8900 	ldrd	r8, r9, [r7]
 80036d0:	4641      	mov	r1, r8
 80036d2:	fb01 f202 	mul.w	r2, r1, r2
 80036d6:	46cc      	mov	ip, r9
 80036d8:	4618      	mov	r0, r3
 80036da:	4621      	mov	r1, r4
 80036dc:	4603      	mov	r3, r0
 80036de:	fb03 f30c 	mul.w	r3, r3, ip
 80036e2:	4413      	add	r3, r2
 80036e4:	4602      	mov	r2, r0
 80036e6:	4641      	mov	r1, r8
 80036e8:	fba2 5601 	umull	r5, r6, r2, r1
 80036ec:	4433      	add	r3, r6
 80036ee:	461e      	mov	r6, r3
 80036f0:	462a      	mov	r2, r5
 80036f2:	4633      	mov	r3, r6
 80036f4:	4650      	mov	r0, sl
 80036f6:	4659      	mov	r1, fp
 80036f8:	f7fc fd94 	bl	8000224 <__aeabi_uldivmod>
 80036fc:	4602      	mov	r2, r0
 80036fe:	460b      	mov	r3, r1
 8003700:	4613      	mov	r3, r2
 8003702:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003704:	e007      	b.n	8003716 <HAL_RCC_GetSysClockFreq+0x16e>
        }
        else
        {
          /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
          pllclk = (uint32_t)((HSE_VALUE * pllmul) / prediv);
 8003706:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003708:	4a13      	ldr	r2, [pc, #76]	; (8003758 <HAL_RCC_GetSysClockFreq+0x1b0>)
 800370a:	fb03 f202 	mul.w	r2, r3, r2
 800370e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003710:	fbb2 f3f3 	udiv	r3, r2, r3
 8003714:	65fb      	str	r3, [r7, #92]	; 0x5c
        }

        /* If PLLMUL was set to 13 means that it was to cover the case PLLMUL 6.5 (avoid using float) */
        /* In this case need to divide pllclk by 2 */
        if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
 8003716:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 800371a:	461a      	mov	r2, r3
 800371c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800371e:	4293      	cmp	r3, r2
 8003720:	d108      	bne.n	8003734 <HAL_RCC_GetSysClockFreq+0x18c>
        {
          pllclk = pllclk / 2;
 8003722:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003724:	085b      	lsrs	r3, r3, #1
 8003726:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003728:	e004      	b.n	8003734 <HAL_RCC_GetSysClockFreq+0x18c>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800372a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800372c:	4a0b      	ldr	r2, [pc, #44]	; (800375c <HAL_RCC_GetSysClockFreq+0x1b4>)
 800372e:	fb02 f303 	mul.w	r3, r2, r3
 8003732:	65fb      	str	r3, [r7, #92]	; 0x5c
      }
      sysclockfreq = pllclk;
 8003734:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003736:	65bb      	str	r3, [r7, #88]	; 0x58
      break;
 8003738:	e002      	b.n	8003740 <HAL_RCC_GetSysClockFreq+0x198>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800373a:	4b09      	ldr	r3, [pc, #36]	; (8003760 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800373c:	65bb      	str	r3, [r7, #88]	; 0x58
      break;
 800373e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003740:	6dbb      	ldr	r3, [r7, #88]	; 0x58
}
 8003742:	4618      	mov	r0, r3
 8003744:	3764      	adds	r7, #100	; 0x64
 8003746:	46bd      	mov	sp, r7
 8003748:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800374c:	0800f470 	.word	0x0800f470
 8003750:	0800f480 	.word	0x0800f480
 8003754:	40021000 	.word	0x40021000
 8003758:	017d7840 	.word	0x017d7840
 800375c:	003d0900 	.word	0x003d0900
 8003760:	007a1200 	.word	0x007a1200

08003764 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003764:	b480      	push	{r7}
 8003766:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003768:	4b02      	ldr	r3, [pc, #8]	; (8003774 <HAL_RCC_GetHCLKFreq+0x10>)
 800376a:	681b      	ldr	r3, [r3, #0]
}
 800376c:	4618      	mov	r0, r3
 800376e:	46bd      	mov	sp, r7
 8003770:	bc80      	pop	{r7}
 8003772:	4770      	bx	lr
 8003774:	20000000 	.word	0x20000000

08003778 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003778:	b580      	push	{r7, lr}
 800377a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800377c:	f7ff fff2 	bl	8003764 <HAL_RCC_GetHCLKFreq>
 8003780:	4602      	mov	r2, r0
 8003782:	4b05      	ldr	r3, [pc, #20]	; (8003798 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003784:	685b      	ldr	r3, [r3, #4]
 8003786:	0a1b      	lsrs	r3, r3, #8
 8003788:	f003 0307 	and.w	r3, r3, #7
 800378c:	4903      	ldr	r1, [pc, #12]	; (800379c <HAL_RCC_GetPCLK1Freq+0x24>)
 800378e:	5ccb      	ldrb	r3, [r1, r3]
 8003790:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003794:	4618      	mov	r0, r3
 8003796:	bd80      	pop	{r7, pc}
 8003798:	40021000 	.word	0x40021000
 800379c:	08010158 	.word	0x08010158

080037a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80037a4:	f7ff ffde 	bl	8003764 <HAL_RCC_GetHCLKFreq>
 80037a8:	4602      	mov	r2, r0
 80037aa:	4b05      	ldr	r3, [pc, #20]	; (80037c0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80037ac:	685b      	ldr	r3, [r3, #4]
 80037ae:	0adb      	lsrs	r3, r3, #11
 80037b0:	f003 0307 	and.w	r3, r3, #7
 80037b4:	4903      	ldr	r1, [pc, #12]	; (80037c4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80037b6:	5ccb      	ldrb	r3, [r1, r3]
 80037b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80037bc:	4618      	mov	r0, r3
 80037be:	bd80      	pop	{r7, pc}
 80037c0:	40021000 	.word	0x40021000
 80037c4:	08010158 	.word	0x08010158

080037c8 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80037c8:	b480      	push	{r7}
 80037ca:	b083      	sub	sp, #12
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]
 80037d0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	220f      	movs	r2, #15
 80037d6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80037d8:	4b11      	ldr	r3, [pc, #68]	; (8003820 <HAL_RCC_GetClockConfig+0x58>)
 80037da:	685b      	ldr	r3, [r3, #4]
 80037dc:	f003 0203 	and.w	r2, r3, #3
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80037e4:	4b0e      	ldr	r3, [pc, #56]	; (8003820 <HAL_RCC_GetClockConfig+0x58>)
 80037e6:	685b      	ldr	r3, [r3, #4]
 80037e8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80037f0:	4b0b      	ldr	r3, [pc, #44]	; (8003820 <HAL_RCC_GetClockConfig+0x58>)
 80037f2:	685b      	ldr	r3, [r3, #4]
 80037f4:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80037fc:	4b08      	ldr	r3, [pc, #32]	; (8003820 <HAL_RCC_GetClockConfig+0x58>)
 80037fe:	685b      	ldr	r3, [r3, #4]
 8003800:	08db      	lsrs	r3, r3, #3
 8003802:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800380a:	4b06      	ldr	r3, [pc, #24]	; (8003824 <HAL_RCC_GetClockConfig+0x5c>)
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f003 0207 	and.w	r2, r3, #7
 8003812:	683b      	ldr	r3, [r7, #0]
 8003814:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8003816:	bf00      	nop
 8003818:	370c      	adds	r7, #12
 800381a:	46bd      	mov	sp, r7
 800381c:	bc80      	pop	{r7}
 800381e:	4770      	bx	lr
 8003820:	40021000 	.word	0x40021000
 8003824:	40022000 	.word	0x40022000

08003828 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003828:	b480      	push	{r7}
 800382a:	b085      	sub	sp, #20
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003830:	4b0a      	ldr	r3, [pc, #40]	; (800385c <RCC_Delay+0x34>)
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	4a0a      	ldr	r2, [pc, #40]	; (8003860 <RCC_Delay+0x38>)
 8003836:	fba2 2303 	umull	r2, r3, r2, r3
 800383a:	0a5b      	lsrs	r3, r3, #9
 800383c:	687a      	ldr	r2, [r7, #4]
 800383e:	fb02 f303 	mul.w	r3, r2, r3
 8003842:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003844:	bf00      	nop
  }
  while (Delay --);
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	1e5a      	subs	r2, r3, #1
 800384a:	60fa      	str	r2, [r7, #12]
 800384c:	2b00      	cmp	r3, #0
 800384e:	d1f9      	bne.n	8003844 <RCC_Delay+0x1c>
}
 8003850:	bf00      	nop
 8003852:	bf00      	nop
 8003854:	3714      	adds	r7, #20
 8003856:	46bd      	mov	sp, r7
 8003858:	bc80      	pop	{r7}
 800385a:	4770      	bx	lr
 800385c:	20000000 	.word	0x20000000
 8003860:	10624dd3 	.word	0x10624dd3

08003864 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003864:	b580      	push	{r7, lr}
 8003866:	b088      	sub	sp, #32
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 800386c:	2300      	movs	r3, #0
 800386e:	617b      	str	r3, [r7, #20]
 8003870:	2300      	movs	r3, #0
 8003872:	613b      	str	r3, [r7, #16]
#if defined(STM32F105xC) || defined(STM32F107xC)
  uint32_t  pllactive = 0U;
 8003874:	2300      	movs	r3, #0
 8003876:	61fb      	str	r3, [r7, #28]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f003 0301 	and.w	r3, r3, #1
 8003880:	2b00      	cmp	r3, #0
 8003882:	d07d      	beq.n	8003980 <HAL_RCCEx_PeriphCLKConfig+0x11c>
  {
    FlagStatus pwrclkchanged = RESET;
 8003884:	2300      	movs	r3, #0
 8003886:	76fb      	strb	r3, [r7, #27]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003888:	4b8b      	ldr	r3, [pc, #556]	; (8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800388a:	69db      	ldr	r3, [r3, #28]
 800388c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003890:	2b00      	cmp	r3, #0
 8003892:	d10d      	bne.n	80038b0 <HAL_RCCEx_PeriphCLKConfig+0x4c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003894:	4b88      	ldr	r3, [pc, #544]	; (8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003896:	69db      	ldr	r3, [r3, #28]
 8003898:	4a87      	ldr	r2, [pc, #540]	; (8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800389a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800389e:	61d3      	str	r3, [r2, #28]
 80038a0:	4b85      	ldr	r3, [pc, #532]	; (8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80038a2:	69db      	ldr	r3, [r3, #28]
 80038a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038a8:	60fb      	str	r3, [r7, #12]
 80038aa:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80038ac:	2301      	movs	r3, #1
 80038ae:	76fb      	strb	r3, [r7, #27]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038b0:	4b82      	ldr	r3, [pc, #520]	; (8003abc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d118      	bne.n	80038ee <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80038bc:	4b7f      	ldr	r3, [pc, #508]	; (8003abc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	4a7e      	ldr	r2, [pc, #504]	; (8003abc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80038c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038c6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80038c8:	f7fd f9a8 	bl	8000c1c <HAL_GetTick>
 80038cc:	6178      	str	r0, [r7, #20]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038ce:	e008      	b.n	80038e2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80038d0:	f7fd f9a4 	bl	8000c1c <HAL_GetTick>
 80038d4:	4602      	mov	r2, r0
 80038d6:	697b      	ldr	r3, [r7, #20]
 80038d8:	1ad3      	subs	r3, r2, r3
 80038da:	2b64      	cmp	r3, #100	; 0x64
 80038dc:	d901      	bls.n	80038e2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
        {
          return HAL_TIMEOUT;
 80038de:	2303      	movs	r3, #3
 80038e0:	e0e5      	b.n	8003aae <HAL_RCCEx_PeriphCLKConfig+0x24a>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038e2:	4b76      	ldr	r3, [pc, #472]	; (8003abc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d0f0      	beq.n	80038d0 <HAL_RCCEx_PeriphCLKConfig+0x6c>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80038ee:	4b72      	ldr	r3, [pc, #456]	; (8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80038f0:	6a1b      	ldr	r3, [r3, #32]
 80038f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80038f6:	613b      	str	r3, [r7, #16]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80038f8:	693b      	ldr	r3, [r7, #16]
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d02e      	beq.n	800395c <HAL_RCCEx_PeriphCLKConfig+0xf8>
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	685b      	ldr	r3, [r3, #4]
 8003902:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003906:	693a      	ldr	r2, [r7, #16]
 8003908:	429a      	cmp	r2, r3
 800390a:	d027      	beq.n	800395c <HAL_RCCEx_PeriphCLKConfig+0xf8>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800390c:	4b6a      	ldr	r3, [pc, #424]	; (8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800390e:	6a1b      	ldr	r3, [r3, #32]
 8003910:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003914:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003916:	4b6a      	ldr	r3, [pc, #424]	; (8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003918:	2201      	movs	r2, #1
 800391a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800391c:	4b68      	ldr	r3, [pc, #416]	; (8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800391e:	2200      	movs	r2, #0
 8003920:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003922:	4a65      	ldr	r2, [pc, #404]	; (8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003924:	693b      	ldr	r3, [r7, #16]
 8003926:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003928:	693b      	ldr	r3, [r7, #16]
 800392a:	f003 0301 	and.w	r3, r3, #1
 800392e:	2b00      	cmp	r3, #0
 8003930:	d014      	beq.n	800395c <HAL_RCCEx_PeriphCLKConfig+0xf8>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003932:	f7fd f973 	bl	8000c1c <HAL_GetTick>
 8003936:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003938:	e00a      	b.n	8003950 <HAL_RCCEx_PeriphCLKConfig+0xec>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800393a:	f7fd f96f 	bl	8000c1c <HAL_GetTick>
 800393e:	4602      	mov	r2, r0
 8003940:	697b      	ldr	r3, [r7, #20]
 8003942:	1ad3      	subs	r3, r2, r3
 8003944:	f241 3288 	movw	r2, #5000	; 0x1388
 8003948:	4293      	cmp	r3, r2
 800394a:	d901      	bls.n	8003950 <HAL_RCCEx_PeriphCLKConfig+0xec>
          {
            return HAL_TIMEOUT;
 800394c:	2303      	movs	r3, #3
 800394e:	e0ae      	b.n	8003aae <HAL_RCCEx_PeriphCLKConfig+0x24a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003950:	4b59      	ldr	r3, [pc, #356]	; (8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003952:	6a1b      	ldr	r3, [r3, #32]
 8003954:	f003 0302 	and.w	r3, r3, #2
 8003958:	2b00      	cmp	r3, #0
 800395a:	d0ee      	beq.n	800393a <HAL_RCCEx_PeriphCLKConfig+0xd6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800395c:	4b56      	ldr	r3, [pc, #344]	; (8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800395e:	6a1b      	ldr	r3, [r3, #32]
 8003960:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	685b      	ldr	r3, [r3, #4]
 8003968:	4953      	ldr	r1, [pc, #332]	; (8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800396a:	4313      	orrs	r3, r2
 800396c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800396e:	7efb      	ldrb	r3, [r7, #27]
 8003970:	2b01      	cmp	r3, #1
 8003972:	d105      	bne.n	8003980 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003974:	4b50      	ldr	r3, [pc, #320]	; (8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003976:	69db      	ldr	r3, [r3, #28]
 8003978:	4a4f      	ldr	r2, [pc, #316]	; (8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800397a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800397e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f003 0302 	and.w	r3, r3, #2
 8003988:	2b00      	cmp	r3, #0
 800398a:	d008      	beq.n	800399e <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800398c:	4b4a      	ldr	r3, [pc, #296]	; (8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800398e:	685b      	ldr	r3, [r3, #4]
 8003990:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	689b      	ldr	r3, [r3, #8]
 8003998:	4947      	ldr	r1, [pc, #284]	; (8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800399a:	4313      	orrs	r3, r2
 800399c:	604b      	str	r3, [r1, #4]
  }

#if defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ I2S2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f003 0304 	and.w	r3, r3, #4
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d008      	beq.n	80039bc <HAL_RCCEx_PeriphCLKConfig+0x158>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 80039aa:	4b43      	ldr	r3, [pc, #268]	; (8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80039ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039ae:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	68db      	ldr	r3, [r3, #12]
 80039b6:	4940      	ldr	r1, [pc, #256]	; (8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80039b8:	4313      	orrs	r3, r2
 80039ba:	62cb      	str	r3, [r1, #44]	; 0x2c
  }

  /*------------------------------ I2S3 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S3) == RCC_PERIPHCLK_I2S3)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f003 0308 	and.w	r3, r3, #8
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d008      	beq.n	80039da <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S3CLKSOURCE(PeriphClkInit->I2s3ClockSelection));

    /* Configure the I2S3 clock source */
    __HAL_RCC_I2S3_CONFIG(PeriphClkInit->I2s3ClockSelection);
 80039c8:	4b3b      	ldr	r3, [pc, #236]	; (8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80039ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039cc:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	691b      	ldr	r3, [r3, #16]
 80039d4:	4938      	ldr	r1, [pc, #224]	; (8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80039d6:	4313      	orrs	r3, r2
 80039d8:	62cb      	str	r3, [r1, #44]	; 0x2c
  }

  /*------------------------------ PLL I2S Configuration ----------------------*/
  /* Check that PLLI2S need to be enabled */
  if (HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_I2S2SRC) || HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_I2S3SRC))
 80039da:	4b37      	ldr	r3, [pc, #220]	; (8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80039dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d105      	bne.n	80039f2 <HAL_RCCEx_PeriphCLKConfig+0x18e>
 80039e6:	4b34      	ldr	r3, [pc, #208]	; (8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80039e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039ea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d001      	beq.n	80039f6 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Update flag to indicate that PLL I2S should be active */
    pllactive = 1;
 80039f2:	2301      	movs	r3, #1
 80039f4:	61fb      	str	r3, [r7, #28]
  }

  /* Check if PLL I2S need to be enabled */
  if (pllactive == 1)
 80039f6:	69fb      	ldr	r3, [r7, #28]
 80039f8:	2b01      	cmp	r3, #1
 80039fa:	d148      	bne.n	8003a8e <HAL_RCCEx_PeriphCLKConfig+0x22a>
  {
    /* Enable PLL I2S only if not active */
    if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_PLL3ON))
 80039fc:	4b2e      	ldr	r3, [pc, #184]	; (8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d138      	bne.n	8003a7a <HAL_RCCEx_PeriphCLKConfig+0x216>
      assert_param(IS_RCC_PLLI2S_MUL(PeriphClkInit->PLLI2S.PLLI2SMUL));
      assert_param(IS_RCC_HSE_PREDIV2(PeriphClkInit->PLLI2S.HSEPrediv2Value));

      /* Prediv2 can be written only when the PLL2 is disabled. */
      /* Return an error only if new value is different from the programmed value */
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2ON) && \
 8003a08:	4b2b      	ldr	r3, [pc, #172]	; (8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d009      	beq.n	8003a28 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
          (__HAL_RCC_HSE_GET_PREDIV2() != PeriphClkInit->PLLI2S.HSEPrediv2Value))
 8003a14:	4b28      	ldr	r3, [pc, #160]	; (8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003a16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a18:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	699b      	ldr	r3, [r3, #24]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2ON) && \
 8003a20:	429a      	cmp	r2, r3
 8003a22:	d001      	beq.n	8003a28 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
      {
        return HAL_ERROR;
 8003a24:	2301      	movs	r3, #1
 8003a26:	e042      	b.n	8003aae <HAL_RCCEx_PeriphCLKConfig+0x24a>
      }

      /* Configure the HSE prediv2 factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV2_CONFIG(PeriphClkInit->PLLI2S.HSEPrediv2Value);
 8003a28:	4b23      	ldr	r3, [pc, #140]	; (8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003a2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a2c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	699b      	ldr	r3, [r3, #24]
 8003a34:	4920      	ldr	r1, [pc, #128]	; (8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003a36:	4313      	orrs	r3, r2
 8003a38:	62cb      	str	r3, [r1, #44]	; 0x2c

      /* Configure the main PLLI2S multiplication factors. */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SMUL);
 8003a3a:	4b1f      	ldr	r3, [pc, #124]	; (8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003a3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a3e:	f423 4270 	bic.w	r2, r3, #61440	; 0xf000
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	695b      	ldr	r3, [r3, #20]
 8003a46:	491c      	ldr	r1, [pc, #112]	; (8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003a48:	4313      	orrs	r3, r2
 8003a4a:	62cb      	str	r3, [r1, #44]	; 0x2c

      /* Enable the main PLLI2S. */
      __HAL_RCC_PLLI2S_ENABLE();
 8003a4c:	4b1d      	ldr	r3, [pc, #116]	; (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a4e:	2201      	movs	r2, #1
 8003a50:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a52:	f7fd f8e3 	bl	8000c1c <HAL_GetTick>
 8003a56:	6178      	str	r0, [r7, #20]

      /* Wait till PLLI2S is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003a58:	e008      	b.n	8003a6c <HAL_RCCEx_PeriphCLKConfig+0x208>
      {
        if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003a5a:	f7fd f8df 	bl	8000c1c <HAL_GetTick>
 8003a5e:	4602      	mov	r2, r0
 8003a60:	697b      	ldr	r3, [r7, #20]
 8003a62:	1ad3      	subs	r3, r2, r3
 8003a64:	2b64      	cmp	r3, #100	; 0x64
 8003a66:	d901      	bls.n	8003a6c <HAL_RCCEx_PeriphCLKConfig+0x208>
        {
          return HAL_TIMEOUT;
 8003a68:	2303      	movs	r3, #3
 8003a6a:	e020      	b.n	8003aae <HAL_RCCEx_PeriphCLKConfig+0x24a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003a6c:	4b12      	ldr	r3, [pc, #72]	; (8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d0f0      	beq.n	8003a5a <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 8003a78:	e009      	b.n	8003a8e <HAL_RCCEx_PeriphCLKConfig+0x22a>
      }
    }
    else
    {
      /* Return an error only if user wants to change the PLLI2SMUL whereas PLLI2S is active */
      if (READ_BIT(RCC->CFGR2, RCC_CFGR2_PLL3MUL) != PeriphClkInit->PLLI2S.PLLI2SMUL)
 8003a7a:	4b0f      	ldr	r3, [pc, #60]	; (8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003a7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a7e:	f403 4270 	and.w	r2, r3, #61440	; 0xf000
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	695b      	ldr	r3, [r3, #20]
 8003a86:	429a      	cmp	r2, r3
 8003a88:	d001      	beq.n	8003a8e <HAL_RCCEx_PeriphCLKConfig+0x22a>
      {
        return HAL_ERROR;
 8003a8a:	2301      	movs	r3, #1
 8003a8c:	e00f      	b.n	8003aae <HAL_RCCEx_PeriphCLKConfig+0x24a>

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f003 0310 	and.w	r3, r3, #16
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d008      	beq.n	8003aac <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003a9a:	4b07      	ldr	r3, [pc, #28]	; (8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003a9c:	685b      	ldr	r3, [r3, #4]
 8003a9e:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	69db      	ldr	r3, [r3, #28]
 8003aa6:	4904      	ldr	r1, [pc, #16]	; (8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003aa8:	4313      	orrs	r3, r2
 8003aaa:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003aac:	2300      	movs	r3, #0
}
 8003aae:	4618      	mov	r0, r3
 8003ab0:	3720      	adds	r7, #32
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	bd80      	pop	{r7, pc}
 8003ab6:	bf00      	nop
 8003ab8:	40021000 	.word	0x40021000
 8003abc:	40007000 	.word	0x40007000
 8003ac0:	42420440 	.word	0x42420440
 8003ac4:	42420070 	.word	0x42420070

08003ac8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	b082      	sub	sp, #8
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d101      	bne.n	8003ada <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003ad6:	2301      	movs	r3, #1
 8003ad8:	e041      	b.n	8003b5e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ae0:	b2db      	uxtb	r3, r3
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d106      	bne.n	8003af4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	2200      	movs	r2, #0
 8003aea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003aee:	6878      	ldr	r0, [r7, #4]
 8003af0:	f000 f839 	bl	8003b66 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2202      	movs	r2, #2
 8003af8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681a      	ldr	r2, [r3, #0]
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	3304      	adds	r3, #4
 8003b04:	4619      	mov	r1, r3
 8003b06:	4610      	mov	r0, r2
 8003b08:	f000 f9bc 	bl	8003e84 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2201      	movs	r2, #1
 8003b10:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	2201      	movs	r2, #1
 8003b18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	2201      	movs	r2, #1
 8003b20:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2201      	movs	r2, #1
 8003b28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	2201      	movs	r2, #1
 8003b30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	2201      	movs	r2, #1
 8003b38:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	2201      	movs	r2, #1
 8003b40:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2201      	movs	r2, #1
 8003b48:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2201      	movs	r2, #1
 8003b50:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2201      	movs	r2, #1
 8003b58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003b5c:	2300      	movs	r3, #0
}
 8003b5e:	4618      	mov	r0, r3
 8003b60:	3708      	adds	r7, #8
 8003b62:	46bd      	mov	sp, r7
 8003b64:	bd80      	pop	{r7, pc}

08003b66 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003b66:	b480      	push	{r7}
 8003b68:	b083      	sub	sp, #12
 8003b6a:	af00      	add	r7, sp, #0
 8003b6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003b6e:	bf00      	nop
 8003b70:	370c      	adds	r7, #12
 8003b72:	46bd      	mov	sp, r7
 8003b74:	bc80      	pop	{r7}
 8003b76:	4770      	bx	lr

08003b78 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003b78:	b480      	push	{r7}
 8003b7a:	b085      	sub	sp, #20
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b86:	b2db      	uxtb	r3, r3
 8003b88:	2b01      	cmp	r3, #1
 8003b8a:	d001      	beq.n	8003b90 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003b8c:	2301      	movs	r3, #1
 8003b8e:	e03f      	b.n	8003c10 <HAL_TIM_Base_Start_IT+0x98>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2202      	movs	r2, #2
 8003b94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	68da      	ldr	r2, [r3, #12]
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f042 0201 	orr.w	r2, r2, #1
 8003ba6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	4a1b      	ldr	r2, [pc, #108]	; (8003c1c <HAL_TIM_Base_Start_IT+0xa4>)
 8003bae:	4293      	cmp	r3, r2
 8003bb0:	d013      	beq.n	8003bda <HAL_TIM_Base_Start_IT+0x62>
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003bba:	d00e      	beq.n	8003bda <HAL_TIM_Base_Start_IT+0x62>
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	4a17      	ldr	r2, [pc, #92]	; (8003c20 <HAL_TIM_Base_Start_IT+0xa8>)
 8003bc2:	4293      	cmp	r3, r2
 8003bc4:	d009      	beq.n	8003bda <HAL_TIM_Base_Start_IT+0x62>
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	4a16      	ldr	r2, [pc, #88]	; (8003c24 <HAL_TIM_Base_Start_IT+0xac>)
 8003bcc:	4293      	cmp	r3, r2
 8003bce:	d004      	beq.n	8003bda <HAL_TIM_Base_Start_IT+0x62>
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	4a14      	ldr	r2, [pc, #80]	; (8003c28 <HAL_TIM_Base_Start_IT+0xb0>)
 8003bd6:	4293      	cmp	r3, r2
 8003bd8:	d111      	bne.n	8003bfe <HAL_TIM_Base_Start_IT+0x86>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	689b      	ldr	r3, [r3, #8]
 8003be0:	f003 0307 	and.w	r3, r3, #7
 8003be4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	2b06      	cmp	r3, #6
 8003bea:	d010      	beq.n	8003c0e <HAL_TIM_Base_Start_IT+0x96>
    {
      __HAL_TIM_ENABLE(htim);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	681a      	ldr	r2, [r3, #0]
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f042 0201 	orr.w	r2, r2, #1
 8003bfa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003bfc:	e007      	b.n	8003c0e <HAL_TIM_Base_Start_IT+0x96>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	681a      	ldr	r2, [r3, #0]
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f042 0201 	orr.w	r2, r2, #1
 8003c0c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003c0e:	2300      	movs	r3, #0
}
 8003c10:	4618      	mov	r0, r3
 8003c12:	3714      	adds	r7, #20
 8003c14:	46bd      	mov	sp, r7
 8003c16:	bc80      	pop	{r7}
 8003c18:	4770      	bx	lr
 8003c1a:	bf00      	nop
 8003c1c:	40012c00 	.word	0x40012c00
 8003c20:	40000400 	.word	0x40000400
 8003c24:	40000800 	.word	0x40000800
 8003c28:	40000c00 	.word	0x40000c00

08003c2c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	b082      	sub	sp, #8
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	691b      	ldr	r3, [r3, #16]
 8003c3a:	f003 0302 	and.w	r3, r3, #2
 8003c3e:	2b02      	cmp	r3, #2
 8003c40:	d122      	bne.n	8003c88 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	68db      	ldr	r3, [r3, #12]
 8003c48:	f003 0302 	and.w	r3, r3, #2
 8003c4c:	2b02      	cmp	r3, #2
 8003c4e:	d11b      	bne.n	8003c88 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f06f 0202 	mvn.w	r2, #2
 8003c58:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	2201      	movs	r2, #1
 8003c5e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	699b      	ldr	r3, [r3, #24]
 8003c66:	f003 0303 	and.w	r3, r3, #3
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d003      	beq.n	8003c76 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003c6e:	6878      	ldr	r0, [r7, #4]
 8003c70:	f000 f8ed 	bl	8003e4e <HAL_TIM_IC_CaptureCallback>
 8003c74:	e005      	b.n	8003c82 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c76:	6878      	ldr	r0, [r7, #4]
 8003c78:	f000 f8e0 	bl	8003e3c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c7c:	6878      	ldr	r0, [r7, #4]
 8003c7e:	f000 f8ef 	bl	8003e60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	2200      	movs	r2, #0
 8003c86:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	691b      	ldr	r3, [r3, #16]
 8003c8e:	f003 0304 	and.w	r3, r3, #4
 8003c92:	2b04      	cmp	r3, #4
 8003c94:	d122      	bne.n	8003cdc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	68db      	ldr	r3, [r3, #12]
 8003c9c:	f003 0304 	and.w	r3, r3, #4
 8003ca0:	2b04      	cmp	r3, #4
 8003ca2:	d11b      	bne.n	8003cdc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f06f 0204 	mvn.w	r2, #4
 8003cac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	2202      	movs	r2, #2
 8003cb2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	699b      	ldr	r3, [r3, #24]
 8003cba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d003      	beq.n	8003cca <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003cc2:	6878      	ldr	r0, [r7, #4]
 8003cc4:	f000 f8c3 	bl	8003e4e <HAL_TIM_IC_CaptureCallback>
 8003cc8:	e005      	b.n	8003cd6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003cca:	6878      	ldr	r0, [r7, #4]
 8003ccc:	f000 f8b6 	bl	8003e3c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003cd0:	6878      	ldr	r0, [r7, #4]
 8003cd2:	f000 f8c5 	bl	8003e60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	2200      	movs	r2, #0
 8003cda:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	691b      	ldr	r3, [r3, #16]
 8003ce2:	f003 0308 	and.w	r3, r3, #8
 8003ce6:	2b08      	cmp	r3, #8
 8003ce8:	d122      	bne.n	8003d30 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	68db      	ldr	r3, [r3, #12]
 8003cf0:	f003 0308 	and.w	r3, r3, #8
 8003cf4:	2b08      	cmp	r3, #8
 8003cf6:	d11b      	bne.n	8003d30 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f06f 0208 	mvn.w	r2, #8
 8003d00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	2204      	movs	r2, #4
 8003d06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	69db      	ldr	r3, [r3, #28]
 8003d0e:	f003 0303 	and.w	r3, r3, #3
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d003      	beq.n	8003d1e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003d16:	6878      	ldr	r0, [r7, #4]
 8003d18:	f000 f899 	bl	8003e4e <HAL_TIM_IC_CaptureCallback>
 8003d1c:	e005      	b.n	8003d2a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d1e:	6878      	ldr	r0, [r7, #4]
 8003d20:	f000 f88c 	bl	8003e3c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d24:	6878      	ldr	r0, [r7, #4]
 8003d26:	f000 f89b 	bl	8003e60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	691b      	ldr	r3, [r3, #16]
 8003d36:	f003 0310 	and.w	r3, r3, #16
 8003d3a:	2b10      	cmp	r3, #16
 8003d3c:	d122      	bne.n	8003d84 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	68db      	ldr	r3, [r3, #12]
 8003d44:	f003 0310 	and.w	r3, r3, #16
 8003d48:	2b10      	cmp	r3, #16
 8003d4a:	d11b      	bne.n	8003d84 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f06f 0210 	mvn.w	r2, #16
 8003d54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	2208      	movs	r2, #8
 8003d5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	69db      	ldr	r3, [r3, #28]
 8003d62:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d003      	beq.n	8003d72 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003d6a:	6878      	ldr	r0, [r7, #4]
 8003d6c:	f000 f86f 	bl	8003e4e <HAL_TIM_IC_CaptureCallback>
 8003d70:	e005      	b.n	8003d7e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d72:	6878      	ldr	r0, [r7, #4]
 8003d74:	f000 f862 	bl	8003e3c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d78:	6878      	ldr	r0, [r7, #4]
 8003d7a:	f000 f871 	bl	8003e60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	2200      	movs	r2, #0
 8003d82:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	691b      	ldr	r3, [r3, #16]
 8003d8a:	f003 0301 	and.w	r3, r3, #1
 8003d8e:	2b01      	cmp	r3, #1
 8003d90:	d10e      	bne.n	8003db0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	68db      	ldr	r3, [r3, #12]
 8003d98:	f003 0301 	and.w	r3, r3, #1
 8003d9c:	2b01      	cmp	r3, #1
 8003d9e:	d107      	bne.n	8003db0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f06f 0201 	mvn.w	r2, #1
 8003da8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003daa:	6878      	ldr	r0, [r7, #4]
 8003dac:	f7fc fcc4 	bl	8000738 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	691b      	ldr	r3, [r3, #16]
 8003db6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003dba:	2b80      	cmp	r3, #128	; 0x80
 8003dbc:	d10e      	bne.n	8003ddc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	68db      	ldr	r3, [r3, #12]
 8003dc4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003dc8:	2b80      	cmp	r3, #128	; 0x80
 8003dca:	d107      	bne.n	8003ddc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003dd4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003dd6:	6878      	ldr	r0, [r7, #4]
 8003dd8:	f000 f8c9 	bl	8003f6e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	691b      	ldr	r3, [r3, #16]
 8003de2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003de6:	2b40      	cmp	r3, #64	; 0x40
 8003de8:	d10e      	bne.n	8003e08 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	68db      	ldr	r3, [r3, #12]
 8003df0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003df4:	2b40      	cmp	r3, #64	; 0x40
 8003df6:	d107      	bne.n	8003e08 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003e00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003e02:	6878      	ldr	r0, [r7, #4]
 8003e04:	f000 f835 	bl	8003e72 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	691b      	ldr	r3, [r3, #16]
 8003e0e:	f003 0320 	and.w	r3, r3, #32
 8003e12:	2b20      	cmp	r3, #32
 8003e14:	d10e      	bne.n	8003e34 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	68db      	ldr	r3, [r3, #12]
 8003e1c:	f003 0320 	and.w	r3, r3, #32
 8003e20:	2b20      	cmp	r3, #32
 8003e22:	d107      	bne.n	8003e34 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f06f 0220 	mvn.w	r2, #32
 8003e2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003e2e:	6878      	ldr	r0, [r7, #4]
 8003e30:	f000 f894 	bl	8003f5c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003e34:	bf00      	nop
 8003e36:	3708      	adds	r7, #8
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	bd80      	pop	{r7, pc}

08003e3c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003e3c:	b480      	push	{r7}
 8003e3e:	b083      	sub	sp, #12
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003e44:	bf00      	nop
 8003e46:	370c      	adds	r7, #12
 8003e48:	46bd      	mov	sp, r7
 8003e4a:	bc80      	pop	{r7}
 8003e4c:	4770      	bx	lr

08003e4e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003e4e:	b480      	push	{r7}
 8003e50:	b083      	sub	sp, #12
 8003e52:	af00      	add	r7, sp, #0
 8003e54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003e56:	bf00      	nop
 8003e58:	370c      	adds	r7, #12
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	bc80      	pop	{r7}
 8003e5e:	4770      	bx	lr

08003e60 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003e60:	b480      	push	{r7}
 8003e62:	b083      	sub	sp, #12
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003e68:	bf00      	nop
 8003e6a:	370c      	adds	r7, #12
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	bc80      	pop	{r7}
 8003e70:	4770      	bx	lr

08003e72 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003e72:	b480      	push	{r7}
 8003e74:	b083      	sub	sp, #12
 8003e76:	af00      	add	r7, sp, #0
 8003e78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003e7a:	bf00      	nop
 8003e7c:	370c      	adds	r7, #12
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	bc80      	pop	{r7}
 8003e82:	4770      	bx	lr

08003e84 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003e84:	b480      	push	{r7}
 8003e86:	b085      	sub	sp, #20
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
 8003e8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	4a2d      	ldr	r2, [pc, #180]	; (8003f4c <TIM_Base_SetConfig+0xc8>)
 8003e98:	4293      	cmp	r3, r2
 8003e9a:	d00f      	beq.n	8003ebc <TIM_Base_SetConfig+0x38>
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ea2:	d00b      	beq.n	8003ebc <TIM_Base_SetConfig+0x38>
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	4a2a      	ldr	r2, [pc, #168]	; (8003f50 <TIM_Base_SetConfig+0xcc>)
 8003ea8:	4293      	cmp	r3, r2
 8003eaa:	d007      	beq.n	8003ebc <TIM_Base_SetConfig+0x38>
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	4a29      	ldr	r2, [pc, #164]	; (8003f54 <TIM_Base_SetConfig+0xd0>)
 8003eb0:	4293      	cmp	r3, r2
 8003eb2:	d003      	beq.n	8003ebc <TIM_Base_SetConfig+0x38>
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	4a28      	ldr	r2, [pc, #160]	; (8003f58 <TIM_Base_SetConfig+0xd4>)
 8003eb8:	4293      	cmp	r3, r2
 8003eba:	d108      	bne.n	8003ece <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ec2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003ec4:	683b      	ldr	r3, [r7, #0]
 8003ec6:	685b      	ldr	r3, [r3, #4]
 8003ec8:	68fa      	ldr	r2, [r7, #12]
 8003eca:	4313      	orrs	r3, r2
 8003ecc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	4a1e      	ldr	r2, [pc, #120]	; (8003f4c <TIM_Base_SetConfig+0xc8>)
 8003ed2:	4293      	cmp	r3, r2
 8003ed4:	d00f      	beq.n	8003ef6 <TIM_Base_SetConfig+0x72>
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003edc:	d00b      	beq.n	8003ef6 <TIM_Base_SetConfig+0x72>
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	4a1b      	ldr	r2, [pc, #108]	; (8003f50 <TIM_Base_SetConfig+0xcc>)
 8003ee2:	4293      	cmp	r3, r2
 8003ee4:	d007      	beq.n	8003ef6 <TIM_Base_SetConfig+0x72>
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	4a1a      	ldr	r2, [pc, #104]	; (8003f54 <TIM_Base_SetConfig+0xd0>)
 8003eea:	4293      	cmp	r3, r2
 8003eec:	d003      	beq.n	8003ef6 <TIM_Base_SetConfig+0x72>
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	4a19      	ldr	r2, [pc, #100]	; (8003f58 <TIM_Base_SetConfig+0xd4>)
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	d108      	bne.n	8003f08 <TIM_Base_SetConfig+0x84>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003efc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003efe:	683b      	ldr	r3, [r7, #0]
 8003f00:	68db      	ldr	r3, [r3, #12]
 8003f02:	68fa      	ldr	r2, [r7, #12]
 8003f04:	4313      	orrs	r3, r2
 8003f06:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003f0e:	683b      	ldr	r3, [r7, #0]
 8003f10:	695b      	ldr	r3, [r3, #20]
 8003f12:	4313      	orrs	r3, r2
 8003f14:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	68fa      	ldr	r2, [r7, #12]
 8003f1a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003f1c:	683b      	ldr	r3, [r7, #0]
 8003f1e:	689a      	ldr	r2, [r3, #8]
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003f24:	683b      	ldr	r3, [r7, #0]
 8003f26:	681a      	ldr	r2, [r3, #0]
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	4a07      	ldr	r2, [pc, #28]	; (8003f4c <TIM_Base_SetConfig+0xc8>)
 8003f30:	4293      	cmp	r3, r2
 8003f32:	d103      	bne.n	8003f3c <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003f34:	683b      	ldr	r3, [r7, #0]
 8003f36:	691a      	ldr	r2, [r3, #16]
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2201      	movs	r2, #1
 8003f40:	615a      	str	r2, [r3, #20]
}
 8003f42:	bf00      	nop
 8003f44:	3714      	adds	r7, #20
 8003f46:	46bd      	mov	sp, r7
 8003f48:	bc80      	pop	{r7}
 8003f4a:	4770      	bx	lr
 8003f4c:	40012c00 	.word	0x40012c00
 8003f50:	40000400 	.word	0x40000400
 8003f54:	40000800 	.word	0x40000800
 8003f58:	40000c00 	.word	0x40000c00

08003f5c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003f5c:	b480      	push	{r7}
 8003f5e:	b083      	sub	sp, #12
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003f64:	bf00      	nop
 8003f66:	370c      	adds	r7, #12
 8003f68:	46bd      	mov	sp, r7
 8003f6a:	bc80      	pop	{r7}
 8003f6c:	4770      	bx	lr

08003f6e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003f6e:	b480      	push	{r7}
 8003f70:	b083      	sub	sp, #12
 8003f72:	af00      	add	r7, sp, #0
 8003f74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003f76:	bf00      	nop
 8003f78:	370c      	adds	r7, #12
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	bc80      	pop	{r7}
 8003f7e:	4770      	bx	lr

08003f80 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003f80:	b580      	push	{r7, lr}
 8003f82:	b082      	sub	sp, #8
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d101      	bne.n	8003f92 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003f8e:	2301      	movs	r3, #1
 8003f90:	e03f      	b.n	8004012 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f98:	b2db      	uxtb	r3, r3
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d106      	bne.n	8003fac <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	2200      	movs	r2, #0
 8003fa2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003fa6:	6878      	ldr	r0, [r7, #4]
 8003fa8:	f7fc fd88 	bl	8000abc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	2224      	movs	r2, #36	; 0x24
 8003fb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	68da      	ldr	r2, [r3, #12]
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003fc2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003fc4:	6878      	ldr	r0, [r7, #4]
 8003fc6:	f000 fc8f 	bl	80048e8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	691a      	ldr	r2, [r3, #16]
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003fd8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	695a      	ldr	r2, [r3, #20]
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003fe8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	68da      	ldr	r2, [r3, #12]
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003ff8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2220      	movs	r2, #32
 8004004:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2220      	movs	r2, #32
 800400c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004010:	2300      	movs	r3, #0
}
 8004012:	4618      	mov	r0, r3
 8004014:	3708      	adds	r7, #8
 8004016:	46bd      	mov	sp, r7
 8004018:	bd80      	pop	{r7, pc}

0800401a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800401a:	b580      	push	{r7, lr}
 800401c:	b08a      	sub	sp, #40	; 0x28
 800401e:	af02      	add	r7, sp, #8
 8004020:	60f8      	str	r0, [r7, #12]
 8004022:	60b9      	str	r1, [r7, #8]
 8004024:	603b      	str	r3, [r7, #0]
 8004026:	4613      	mov	r3, r2
 8004028:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800402a:	2300      	movs	r3, #0
 800402c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004034:	b2db      	uxtb	r3, r3
 8004036:	2b20      	cmp	r3, #32
 8004038:	d17c      	bne.n	8004134 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800403a:	68bb      	ldr	r3, [r7, #8]
 800403c:	2b00      	cmp	r3, #0
 800403e:	d002      	beq.n	8004046 <HAL_UART_Transmit+0x2c>
 8004040:	88fb      	ldrh	r3, [r7, #6]
 8004042:	2b00      	cmp	r3, #0
 8004044:	d101      	bne.n	800404a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004046:	2301      	movs	r3, #1
 8004048:	e075      	b.n	8004136 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004050:	2b01      	cmp	r3, #1
 8004052:	d101      	bne.n	8004058 <HAL_UART_Transmit+0x3e>
 8004054:	2302      	movs	r3, #2
 8004056:	e06e      	b.n	8004136 <HAL_UART_Transmit+0x11c>
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	2201      	movs	r2, #1
 800405c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	2200      	movs	r2, #0
 8004064:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	2221      	movs	r2, #33	; 0x21
 800406a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800406e:	f7fc fdd5 	bl	8000c1c <HAL_GetTick>
 8004072:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	88fa      	ldrh	r2, [r7, #6]
 8004078:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	88fa      	ldrh	r2, [r7, #6]
 800407e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	689b      	ldr	r3, [r3, #8]
 8004084:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004088:	d108      	bne.n	800409c <HAL_UART_Transmit+0x82>
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	691b      	ldr	r3, [r3, #16]
 800408e:	2b00      	cmp	r3, #0
 8004090:	d104      	bne.n	800409c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004092:	2300      	movs	r3, #0
 8004094:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004096:	68bb      	ldr	r3, [r7, #8]
 8004098:	61bb      	str	r3, [r7, #24]
 800409a:	e003      	b.n	80040a4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800409c:	68bb      	ldr	r3, [r7, #8]
 800409e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80040a0:	2300      	movs	r3, #0
 80040a2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	2200      	movs	r2, #0
 80040a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80040ac:	e02a      	b.n	8004104 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80040ae:	683b      	ldr	r3, [r7, #0]
 80040b0:	9300      	str	r3, [sp, #0]
 80040b2:	697b      	ldr	r3, [r7, #20]
 80040b4:	2200      	movs	r2, #0
 80040b6:	2180      	movs	r1, #128	; 0x80
 80040b8:	68f8      	ldr	r0, [r7, #12]
 80040ba:	f000 fa41 	bl	8004540 <UART_WaitOnFlagUntilTimeout>
 80040be:	4603      	mov	r3, r0
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d001      	beq.n	80040c8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80040c4:	2303      	movs	r3, #3
 80040c6:	e036      	b.n	8004136 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80040c8:	69fb      	ldr	r3, [r7, #28]
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d10b      	bne.n	80040e6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80040ce:	69bb      	ldr	r3, [r7, #24]
 80040d0:	881b      	ldrh	r3, [r3, #0]
 80040d2:	461a      	mov	r2, r3
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80040dc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80040de:	69bb      	ldr	r3, [r7, #24]
 80040e0:	3302      	adds	r3, #2
 80040e2:	61bb      	str	r3, [r7, #24]
 80040e4:	e007      	b.n	80040f6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80040e6:	69fb      	ldr	r3, [r7, #28]
 80040e8:	781a      	ldrb	r2, [r3, #0]
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80040f0:	69fb      	ldr	r3, [r7, #28]
 80040f2:	3301      	adds	r3, #1
 80040f4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80040fa:	b29b      	uxth	r3, r3
 80040fc:	3b01      	subs	r3, #1
 80040fe:	b29a      	uxth	r2, r3
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004108:	b29b      	uxth	r3, r3
 800410a:	2b00      	cmp	r3, #0
 800410c:	d1cf      	bne.n	80040ae <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800410e:	683b      	ldr	r3, [r7, #0]
 8004110:	9300      	str	r3, [sp, #0]
 8004112:	697b      	ldr	r3, [r7, #20]
 8004114:	2200      	movs	r2, #0
 8004116:	2140      	movs	r1, #64	; 0x40
 8004118:	68f8      	ldr	r0, [r7, #12]
 800411a:	f000 fa11 	bl	8004540 <UART_WaitOnFlagUntilTimeout>
 800411e:	4603      	mov	r3, r0
 8004120:	2b00      	cmp	r3, #0
 8004122:	d001      	beq.n	8004128 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004124:	2303      	movs	r3, #3
 8004126:	e006      	b.n	8004136 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	2220      	movs	r2, #32
 800412c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004130:	2300      	movs	r3, #0
 8004132:	e000      	b.n	8004136 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004134:	2302      	movs	r3, #2
  }
}
 8004136:	4618      	mov	r0, r3
 8004138:	3720      	adds	r7, #32
 800413a:	46bd      	mov	sp, r7
 800413c:	bd80      	pop	{r7, pc}

0800413e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800413e:	b580      	push	{r7, lr}
 8004140:	b084      	sub	sp, #16
 8004142:	af00      	add	r7, sp, #0
 8004144:	60f8      	str	r0, [r7, #12]
 8004146:	60b9      	str	r1, [r7, #8]
 8004148:	4613      	mov	r3, r2
 800414a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004152:	b2db      	uxtb	r3, r3
 8004154:	2b20      	cmp	r3, #32
 8004156:	d11d      	bne.n	8004194 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8004158:	68bb      	ldr	r3, [r7, #8]
 800415a:	2b00      	cmp	r3, #0
 800415c:	d002      	beq.n	8004164 <HAL_UART_Receive_IT+0x26>
 800415e:	88fb      	ldrh	r3, [r7, #6]
 8004160:	2b00      	cmp	r3, #0
 8004162:	d101      	bne.n	8004168 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004164:	2301      	movs	r3, #1
 8004166:	e016      	b.n	8004196 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800416e:	2b01      	cmp	r3, #1
 8004170:	d101      	bne.n	8004176 <HAL_UART_Receive_IT+0x38>
 8004172:	2302      	movs	r3, #2
 8004174:	e00f      	b.n	8004196 <HAL_UART_Receive_IT+0x58>
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	2201      	movs	r2, #1
 800417a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	2200      	movs	r2, #0
 8004182:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8004184:	88fb      	ldrh	r3, [r7, #6]
 8004186:	461a      	mov	r2, r3
 8004188:	68b9      	ldr	r1, [r7, #8]
 800418a:	68f8      	ldr	r0, [r7, #12]
 800418c:	f000 fa22 	bl	80045d4 <UART_Start_Receive_IT>
 8004190:	4603      	mov	r3, r0
 8004192:	e000      	b.n	8004196 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8004194:	2302      	movs	r3, #2
  }
}
 8004196:	4618      	mov	r0, r3
 8004198:	3710      	adds	r7, #16
 800419a:	46bd      	mov	sp, r7
 800419c:	bd80      	pop	{r7, pc}
	...

080041a0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80041a0:	b580      	push	{r7, lr}
 80041a2:	b08a      	sub	sp, #40	; 0x28
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	68db      	ldr	r3, [r3, #12]
 80041b6:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	695b      	ldr	r3, [r3, #20]
 80041be:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 80041c0:	2300      	movs	r3, #0
 80041c2:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 80041c4:	2300      	movs	r3, #0
 80041c6:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80041c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041ca:	f003 030f 	and.w	r3, r3, #15
 80041ce:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 80041d0:	69bb      	ldr	r3, [r7, #24]
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d10d      	bne.n	80041f2 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80041d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041d8:	f003 0320 	and.w	r3, r3, #32
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d008      	beq.n	80041f2 <HAL_UART_IRQHandler+0x52>
 80041e0:	6a3b      	ldr	r3, [r7, #32]
 80041e2:	f003 0320 	and.w	r3, r3, #32
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d003      	beq.n	80041f2 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80041ea:	6878      	ldr	r0, [r7, #4]
 80041ec:	f000 fad2 	bl	8004794 <UART_Receive_IT>
      return;
 80041f0:	e17b      	b.n	80044ea <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80041f2:	69bb      	ldr	r3, [r7, #24]
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	f000 80b1 	beq.w	800435c <HAL_UART_IRQHandler+0x1bc>
 80041fa:	69fb      	ldr	r3, [r7, #28]
 80041fc:	f003 0301 	and.w	r3, r3, #1
 8004200:	2b00      	cmp	r3, #0
 8004202:	d105      	bne.n	8004210 <HAL_UART_IRQHandler+0x70>
 8004204:	6a3b      	ldr	r3, [r7, #32]
 8004206:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800420a:	2b00      	cmp	r3, #0
 800420c:	f000 80a6 	beq.w	800435c <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004212:	f003 0301 	and.w	r3, r3, #1
 8004216:	2b00      	cmp	r3, #0
 8004218:	d00a      	beq.n	8004230 <HAL_UART_IRQHandler+0x90>
 800421a:	6a3b      	ldr	r3, [r7, #32]
 800421c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004220:	2b00      	cmp	r3, #0
 8004222:	d005      	beq.n	8004230 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004228:	f043 0201 	orr.w	r2, r3, #1
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004232:	f003 0304 	and.w	r3, r3, #4
 8004236:	2b00      	cmp	r3, #0
 8004238:	d00a      	beq.n	8004250 <HAL_UART_IRQHandler+0xb0>
 800423a:	69fb      	ldr	r3, [r7, #28]
 800423c:	f003 0301 	and.w	r3, r3, #1
 8004240:	2b00      	cmp	r3, #0
 8004242:	d005      	beq.n	8004250 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004248:	f043 0202 	orr.w	r2, r3, #2
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004252:	f003 0302 	and.w	r3, r3, #2
 8004256:	2b00      	cmp	r3, #0
 8004258:	d00a      	beq.n	8004270 <HAL_UART_IRQHandler+0xd0>
 800425a:	69fb      	ldr	r3, [r7, #28]
 800425c:	f003 0301 	and.w	r3, r3, #1
 8004260:	2b00      	cmp	r3, #0
 8004262:	d005      	beq.n	8004270 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004268:	f043 0204 	orr.w	r2, r3, #4
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8004270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004272:	f003 0308 	and.w	r3, r3, #8
 8004276:	2b00      	cmp	r3, #0
 8004278:	d00f      	beq.n	800429a <HAL_UART_IRQHandler+0xfa>
 800427a:	6a3b      	ldr	r3, [r7, #32]
 800427c:	f003 0320 	and.w	r3, r3, #32
 8004280:	2b00      	cmp	r3, #0
 8004282:	d104      	bne.n	800428e <HAL_UART_IRQHandler+0xee>
 8004284:	69fb      	ldr	r3, [r7, #28]
 8004286:	f003 0301 	and.w	r3, r3, #1
 800428a:	2b00      	cmp	r3, #0
 800428c:	d005      	beq.n	800429a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004292:	f043 0208 	orr.w	r2, r3, #8
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800429e:	2b00      	cmp	r3, #0
 80042a0:	f000 811e 	beq.w	80044e0 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80042a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042a6:	f003 0320 	and.w	r3, r3, #32
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d007      	beq.n	80042be <HAL_UART_IRQHandler+0x11e>
 80042ae:	6a3b      	ldr	r3, [r7, #32]
 80042b0:	f003 0320 	and.w	r3, r3, #32
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d002      	beq.n	80042be <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 80042b8:	6878      	ldr	r0, [r7, #4]
 80042ba:	f000 fa6b 	bl	8004794 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	695b      	ldr	r3, [r3, #20]
 80042c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	bf14      	ite	ne
 80042cc:	2301      	movne	r3, #1
 80042ce:	2300      	moveq	r3, #0
 80042d0:	b2db      	uxtb	r3, r3
 80042d2:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042d8:	f003 0308 	and.w	r3, r3, #8
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d102      	bne.n	80042e6 <HAL_UART_IRQHandler+0x146>
 80042e0:	697b      	ldr	r3, [r7, #20]
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d031      	beq.n	800434a <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80042e6:	6878      	ldr	r0, [r7, #4]
 80042e8:	f000 f9ad 	bl	8004646 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	695b      	ldr	r3, [r3, #20]
 80042f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d023      	beq.n	8004342 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	695a      	ldr	r2, [r3, #20]
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004308:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800430e:	2b00      	cmp	r3, #0
 8004310:	d013      	beq.n	800433a <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004316:	4a76      	ldr	r2, [pc, #472]	; (80044f0 <HAL_UART_IRQHandler+0x350>)
 8004318:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800431e:	4618      	mov	r0, r3
 8004320:	f7fc fdc4 	bl	8000eac <HAL_DMA_Abort_IT>
 8004324:	4603      	mov	r3, r0
 8004326:	2b00      	cmp	r3, #0
 8004328:	d016      	beq.n	8004358 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800432e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004330:	687a      	ldr	r2, [r7, #4]
 8004332:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004334:	4610      	mov	r0, r2
 8004336:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004338:	e00e      	b.n	8004358 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800433a:	6878      	ldr	r0, [r7, #4]
 800433c:	f000 f8ec 	bl	8004518 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004340:	e00a      	b.n	8004358 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004342:	6878      	ldr	r0, [r7, #4]
 8004344:	f000 f8e8 	bl	8004518 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004348:	e006      	b.n	8004358 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800434a:	6878      	ldr	r0, [r7, #4]
 800434c:	f000 f8e4 	bl	8004518 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2200      	movs	r2, #0
 8004354:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8004356:	e0c3      	b.n	80044e0 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004358:	bf00      	nop
    return;
 800435a:	e0c1      	b.n	80044e0 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004360:	2b01      	cmp	r3, #1
 8004362:	f040 80a1 	bne.w	80044a8 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8004366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004368:	f003 0310 	and.w	r3, r3, #16
 800436c:	2b00      	cmp	r3, #0
 800436e:	f000 809b 	beq.w	80044a8 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8004372:	6a3b      	ldr	r3, [r7, #32]
 8004374:	f003 0310 	and.w	r3, r3, #16
 8004378:	2b00      	cmp	r3, #0
 800437a:	f000 8095 	beq.w	80044a8 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800437e:	2300      	movs	r3, #0
 8004380:	60fb      	str	r3, [r7, #12]
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	60fb      	str	r3, [r7, #12]
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	685b      	ldr	r3, [r3, #4]
 8004390:	60fb      	str	r3, [r7, #12]
 8004392:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	695b      	ldr	r3, [r3, #20]
 800439a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d04e      	beq.n	8004440 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	685b      	ldr	r3, [r3, #4]
 80043aa:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 80043ac:	8a3b      	ldrh	r3, [r7, #16]
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	f000 8098 	beq.w	80044e4 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80043b8:	8a3a      	ldrh	r2, [r7, #16]
 80043ba:	429a      	cmp	r2, r3
 80043bc:	f080 8092 	bcs.w	80044e4 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	8a3a      	ldrh	r2, [r7, #16]
 80043c4:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043ca:	699b      	ldr	r3, [r3, #24]
 80043cc:	2b20      	cmp	r3, #32
 80043ce:	d02b      	beq.n	8004428 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	68da      	ldr	r2, [r3, #12]
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80043de:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	695a      	ldr	r2, [r3, #20]
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f022 0201 	bic.w	r2, r2, #1
 80043ee:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	695a      	ldr	r2, [r3, #20]
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80043fe:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2220      	movs	r2, #32
 8004404:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	2200      	movs	r2, #0
 800440c:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	68da      	ldr	r2, [r3, #12]
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f022 0210 	bic.w	r2, r2, #16
 800441c:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004422:	4618      	mov	r0, r3
 8004424:	f7fc fd07 	bl	8000e36 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004430:	b29b      	uxth	r3, r3
 8004432:	1ad3      	subs	r3, r2, r3
 8004434:	b29b      	uxth	r3, r3
 8004436:	4619      	mov	r1, r3
 8004438:	6878      	ldr	r0, [r7, #4]
 800443a:	f000 f876 	bl	800452a <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800443e:	e051      	b.n	80044e4 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004448:	b29b      	uxth	r3, r3
 800444a:	1ad3      	subs	r3, r2, r3
 800444c:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004452:	b29b      	uxth	r3, r3
 8004454:	2b00      	cmp	r3, #0
 8004456:	d047      	beq.n	80044e8 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8004458:	8a7b      	ldrh	r3, [r7, #18]
 800445a:	2b00      	cmp	r3, #0
 800445c:	d044      	beq.n	80044e8 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	68da      	ldr	r2, [r3, #12]
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800446c:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	695a      	ldr	r2, [r3, #20]
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f022 0201 	bic.w	r2, r2, #1
 800447c:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	2220      	movs	r2, #32
 8004482:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	2200      	movs	r2, #0
 800448a:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	68da      	ldr	r2, [r3, #12]
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f022 0210 	bic.w	r2, r2, #16
 800449a:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800449c:	8a7b      	ldrh	r3, [r7, #18]
 800449e:	4619      	mov	r1, r3
 80044a0:	6878      	ldr	r0, [r7, #4]
 80044a2:	f000 f842 	bl	800452a <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80044a6:	e01f      	b.n	80044e8 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80044a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d008      	beq.n	80044c4 <HAL_UART_IRQHandler+0x324>
 80044b2:	6a3b      	ldr	r3, [r7, #32]
 80044b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d003      	beq.n	80044c4 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 80044bc:	6878      	ldr	r0, [r7, #4]
 80044be:	f000 f902 	bl	80046c6 <UART_Transmit_IT>
    return;
 80044c2:	e012      	b.n	80044ea <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80044c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d00d      	beq.n	80044ea <HAL_UART_IRQHandler+0x34a>
 80044ce:	6a3b      	ldr	r3, [r7, #32]
 80044d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d008      	beq.n	80044ea <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 80044d8:	6878      	ldr	r0, [r7, #4]
 80044da:	f000 f943 	bl	8004764 <UART_EndTransmit_IT>
    return;
 80044de:	e004      	b.n	80044ea <HAL_UART_IRQHandler+0x34a>
    return;
 80044e0:	bf00      	nop
 80044e2:	e002      	b.n	80044ea <HAL_UART_IRQHandler+0x34a>
      return;
 80044e4:	bf00      	nop
 80044e6:	e000      	b.n	80044ea <HAL_UART_IRQHandler+0x34a>
      return;
 80044e8:	bf00      	nop
  }
}
 80044ea:	3728      	adds	r7, #40	; 0x28
 80044ec:	46bd      	mov	sp, r7
 80044ee:	bd80      	pop	{r7, pc}
 80044f0:	0800469f 	.word	0x0800469f

080044f4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80044f4:	b480      	push	{r7}
 80044f6:	b083      	sub	sp, #12
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80044fc:	bf00      	nop
 80044fe:	370c      	adds	r7, #12
 8004500:	46bd      	mov	sp, r7
 8004502:	bc80      	pop	{r7}
 8004504:	4770      	bx	lr

08004506 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004506:	b480      	push	{r7}
 8004508:	b083      	sub	sp, #12
 800450a:	af00      	add	r7, sp, #0
 800450c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800450e:	bf00      	nop
 8004510:	370c      	adds	r7, #12
 8004512:	46bd      	mov	sp, r7
 8004514:	bc80      	pop	{r7}
 8004516:	4770      	bx	lr

08004518 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004518:	b480      	push	{r7}
 800451a:	b083      	sub	sp, #12
 800451c:	af00      	add	r7, sp, #0
 800451e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004520:	bf00      	nop
 8004522:	370c      	adds	r7, #12
 8004524:	46bd      	mov	sp, r7
 8004526:	bc80      	pop	{r7}
 8004528:	4770      	bx	lr

0800452a <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800452a:	b480      	push	{r7}
 800452c:	b083      	sub	sp, #12
 800452e:	af00      	add	r7, sp, #0
 8004530:	6078      	str	r0, [r7, #4]
 8004532:	460b      	mov	r3, r1
 8004534:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004536:	bf00      	nop
 8004538:	370c      	adds	r7, #12
 800453a:	46bd      	mov	sp, r7
 800453c:	bc80      	pop	{r7}
 800453e:	4770      	bx	lr

08004540 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8004540:	b580      	push	{r7, lr}
 8004542:	b084      	sub	sp, #16
 8004544:	af00      	add	r7, sp, #0
 8004546:	60f8      	str	r0, [r7, #12]
 8004548:	60b9      	str	r1, [r7, #8]
 800454a:	603b      	str	r3, [r7, #0]
 800454c:	4613      	mov	r3, r2
 800454e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004550:	e02c      	b.n	80045ac <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004552:	69bb      	ldr	r3, [r7, #24]
 8004554:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004558:	d028      	beq.n	80045ac <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800455a:	69bb      	ldr	r3, [r7, #24]
 800455c:	2b00      	cmp	r3, #0
 800455e:	d007      	beq.n	8004570 <UART_WaitOnFlagUntilTimeout+0x30>
 8004560:	f7fc fb5c 	bl	8000c1c <HAL_GetTick>
 8004564:	4602      	mov	r2, r0
 8004566:	683b      	ldr	r3, [r7, #0]
 8004568:	1ad3      	subs	r3, r2, r3
 800456a:	69ba      	ldr	r2, [r7, #24]
 800456c:	429a      	cmp	r2, r3
 800456e:	d21d      	bcs.n	80045ac <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	68da      	ldr	r2, [r3, #12]
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800457e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	695a      	ldr	r2, [r3, #20]
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f022 0201 	bic.w	r2, r2, #1
 800458e:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	2220      	movs	r2, #32
 8004594:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	2220      	movs	r2, #32
 800459c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	2200      	movs	r2, #0
 80045a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80045a8:	2303      	movs	r3, #3
 80045aa:	e00f      	b.n	80045cc <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	681a      	ldr	r2, [r3, #0]
 80045b2:	68bb      	ldr	r3, [r7, #8]
 80045b4:	4013      	ands	r3, r2
 80045b6:	68ba      	ldr	r2, [r7, #8]
 80045b8:	429a      	cmp	r2, r3
 80045ba:	bf0c      	ite	eq
 80045bc:	2301      	moveq	r3, #1
 80045be:	2300      	movne	r3, #0
 80045c0:	b2db      	uxtb	r3, r3
 80045c2:	461a      	mov	r2, r3
 80045c4:	79fb      	ldrb	r3, [r7, #7]
 80045c6:	429a      	cmp	r2, r3
 80045c8:	d0c3      	beq.n	8004552 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80045ca:	2300      	movs	r3, #0
}
 80045cc:	4618      	mov	r0, r3
 80045ce:	3710      	adds	r7, #16
 80045d0:	46bd      	mov	sp, r7
 80045d2:	bd80      	pop	{r7, pc}

080045d4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80045d4:	b480      	push	{r7}
 80045d6:	b085      	sub	sp, #20
 80045d8:	af00      	add	r7, sp, #0
 80045da:	60f8      	str	r0, [r7, #12]
 80045dc:	60b9      	str	r1, [r7, #8]
 80045de:	4613      	mov	r3, r2
 80045e0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	68ba      	ldr	r2, [r7, #8]
 80045e6:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	88fa      	ldrh	r2, [r7, #6]
 80045ec:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	88fa      	ldrh	r2, [r7, #6]
 80045f2:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	2200      	movs	r2, #0
 80045f8:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	2222      	movs	r2, #34	; 0x22
 80045fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	2200      	movs	r2, #0
 8004606:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	68da      	ldr	r2, [r3, #12]
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004618:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	695a      	ldr	r2, [r3, #20]
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f042 0201 	orr.w	r2, r2, #1
 8004628:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	68da      	ldr	r2, [r3, #12]
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f042 0220 	orr.w	r2, r2, #32
 8004638:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800463a:	2300      	movs	r3, #0
}
 800463c:	4618      	mov	r0, r3
 800463e:	3714      	adds	r7, #20
 8004640:	46bd      	mov	sp, r7
 8004642:	bc80      	pop	{r7}
 8004644:	4770      	bx	lr

08004646 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004646:	b480      	push	{r7}
 8004648:	b083      	sub	sp, #12
 800464a:	af00      	add	r7, sp, #0
 800464c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	68da      	ldr	r2, [r3, #12]
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800465c:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	695a      	ldr	r2, [r3, #20]
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f022 0201 	bic.w	r2, r2, #1
 800466c:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004672:	2b01      	cmp	r3, #1
 8004674:	d107      	bne.n	8004686 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	68da      	ldr	r2, [r3, #12]
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f022 0210 	bic.w	r2, r2, #16
 8004684:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	2220      	movs	r2, #32
 800468a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	2200      	movs	r2, #0
 8004692:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004694:	bf00      	nop
 8004696:	370c      	adds	r7, #12
 8004698:	46bd      	mov	sp, r7
 800469a:	bc80      	pop	{r7}
 800469c:	4770      	bx	lr

0800469e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800469e:	b580      	push	{r7, lr}
 80046a0:	b084      	sub	sp, #16
 80046a2:	af00      	add	r7, sp, #0
 80046a4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046aa:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	2200      	movs	r2, #0
 80046b0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	2200      	movs	r2, #0
 80046b6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80046b8:	68f8      	ldr	r0, [r7, #12]
 80046ba:	f7ff ff2d 	bl	8004518 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80046be:	bf00      	nop
 80046c0:	3710      	adds	r7, #16
 80046c2:	46bd      	mov	sp, r7
 80046c4:	bd80      	pop	{r7, pc}

080046c6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80046c6:	b480      	push	{r7}
 80046c8:	b085      	sub	sp, #20
 80046ca:	af00      	add	r7, sp, #0
 80046cc:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046d4:	b2db      	uxtb	r3, r3
 80046d6:	2b21      	cmp	r3, #33	; 0x21
 80046d8:	d13e      	bne.n	8004758 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	689b      	ldr	r3, [r3, #8]
 80046de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046e2:	d114      	bne.n	800470e <UART_Transmit_IT+0x48>
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	691b      	ldr	r3, [r3, #16]
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d110      	bne.n	800470e <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	6a1b      	ldr	r3, [r3, #32]
 80046f0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	881b      	ldrh	r3, [r3, #0]
 80046f6:	461a      	mov	r2, r3
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004700:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	6a1b      	ldr	r3, [r3, #32]
 8004706:	1c9a      	adds	r2, r3, #2
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	621a      	str	r2, [r3, #32]
 800470c:	e008      	b.n	8004720 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	6a1b      	ldr	r3, [r3, #32]
 8004712:	1c59      	adds	r1, r3, #1
 8004714:	687a      	ldr	r2, [r7, #4]
 8004716:	6211      	str	r1, [r2, #32]
 8004718:	781a      	ldrb	r2, [r3, #0]
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004724:	b29b      	uxth	r3, r3
 8004726:	3b01      	subs	r3, #1
 8004728:	b29b      	uxth	r3, r3
 800472a:	687a      	ldr	r2, [r7, #4]
 800472c:	4619      	mov	r1, r3
 800472e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004730:	2b00      	cmp	r3, #0
 8004732:	d10f      	bne.n	8004754 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	68da      	ldr	r2, [r3, #12]
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004742:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	68da      	ldr	r2, [r3, #12]
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004752:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004754:	2300      	movs	r3, #0
 8004756:	e000      	b.n	800475a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004758:	2302      	movs	r3, #2
  }
}
 800475a:	4618      	mov	r0, r3
 800475c:	3714      	adds	r7, #20
 800475e:	46bd      	mov	sp, r7
 8004760:	bc80      	pop	{r7}
 8004762:	4770      	bx	lr

08004764 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004764:	b580      	push	{r7, lr}
 8004766:	b082      	sub	sp, #8
 8004768:	af00      	add	r7, sp, #0
 800476a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	68da      	ldr	r2, [r3, #12]
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800477a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2220      	movs	r2, #32
 8004780:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004784:	6878      	ldr	r0, [r7, #4]
 8004786:	f7ff feb5 	bl	80044f4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800478a:	2300      	movs	r3, #0
}
 800478c:	4618      	mov	r0, r3
 800478e:	3708      	adds	r7, #8
 8004790:	46bd      	mov	sp, r7
 8004792:	bd80      	pop	{r7, pc}

08004794 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004794:	b580      	push	{r7, lr}
 8004796:	b086      	sub	sp, #24
 8004798:	af00      	add	r7, sp, #0
 800479a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80047a2:	b2db      	uxtb	r3, r3
 80047a4:	2b22      	cmp	r3, #34	; 0x22
 80047a6:	f040 8099 	bne.w	80048dc <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	689b      	ldr	r3, [r3, #8]
 80047ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047b2:	d117      	bne.n	80047e4 <UART_Receive_IT+0x50>
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	691b      	ldr	r3, [r3, #16]
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d113      	bne.n	80047e4 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80047bc:	2300      	movs	r3, #0
 80047be:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047c4:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	685b      	ldr	r3, [r3, #4]
 80047cc:	b29b      	uxth	r3, r3
 80047ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047d2:	b29a      	uxth	r2, r3
 80047d4:	693b      	ldr	r3, [r7, #16]
 80047d6:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047dc:	1c9a      	adds	r2, r3, #2
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	629a      	str	r2, [r3, #40]	; 0x28
 80047e2:	e026      	b.n	8004832 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047e8:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 80047ea:	2300      	movs	r3, #0
 80047ec:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	689b      	ldr	r3, [r3, #8]
 80047f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047f6:	d007      	beq.n	8004808 <UART_Receive_IT+0x74>
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	689b      	ldr	r3, [r3, #8]
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d10a      	bne.n	8004816 <UART_Receive_IT+0x82>
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	691b      	ldr	r3, [r3, #16]
 8004804:	2b00      	cmp	r3, #0
 8004806:	d106      	bne.n	8004816 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	685b      	ldr	r3, [r3, #4]
 800480e:	b2da      	uxtb	r2, r3
 8004810:	697b      	ldr	r3, [r7, #20]
 8004812:	701a      	strb	r2, [r3, #0]
 8004814:	e008      	b.n	8004828 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	685b      	ldr	r3, [r3, #4]
 800481c:	b2db      	uxtb	r3, r3
 800481e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004822:	b2da      	uxtb	r2, r3
 8004824:	697b      	ldr	r3, [r7, #20]
 8004826:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800482c:	1c5a      	adds	r2, r3, #1
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004836:	b29b      	uxth	r3, r3
 8004838:	3b01      	subs	r3, #1
 800483a:	b29b      	uxth	r3, r3
 800483c:	687a      	ldr	r2, [r7, #4]
 800483e:	4619      	mov	r1, r3
 8004840:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004842:	2b00      	cmp	r3, #0
 8004844:	d148      	bne.n	80048d8 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	68da      	ldr	r2, [r3, #12]
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f022 0220 	bic.w	r2, r2, #32
 8004854:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	68da      	ldr	r2, [r3, #12]
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004864:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	695a      	ldr	r2, [r3, #20]
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f022 0201 	bic.w	r2, r2, #1
 8004874:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	2220      	movs	r2, #32
 800487a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004882:	2b01      	cmp	r3, #1
 8004884:	d123      	bne.n	80048ce <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	2200      	movs	r2, #0
 800488a:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	68da      	ldr	r2, [r3, #12]
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f022 0210 	bic.w	r2, r2, #16
 800489a:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f003 0310 	and.w	r3, r3, #16
 80048a6:	2b10      	cmp	r3, #16
 80048a8:	d10a      	bne.n	80048c0 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80048aa:	2300      	movs	r3, #0
 80048ac:	60fb      	str	r3, [r7, #12]
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	60fb      	str	r3, [r7, #12]
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	685b      	ldr	r3, [r3, #4]
 80048bc:	60fb      	str	r3, [r7, #12]
 80048be:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80048c4:	4619      	mov	r1, r3
 80048c6:	6878      	ldr	r0, [r7, #4]
 80048c8:	f7ff fe2f 	bl	800452a <HAL_UARTEx_RxEventCallback>
 80048cc:	e002      	b.n	80048d4 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 80048ce:	6878      	ldr	r0, [r7, #4]
 80048d0:	f7ff fe19 	bl	8004506 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80048d4:	2300      	movs	r3, #0
 80048d6:	e002      	b.n	80048de <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 80048d8:	2300      	movs	r3, #0
 80048da:	e000      	b.n	80048de <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 80048dc:	2302      	movs	r3, #2
  }
}
 80048de:	4618      	mov	r0, r3
 80048e0:	3718      	adds	r7, #24
 80048e2:	46bd      	mov	sp, r7
 80048e4:	bd80      	pop	{r7, pc}
	...

080048e8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80048e8:	b580      	push	{r7, lr}
 80048ea:	b084      	sub	sp, #16
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	691b      	ldr	r3, [r3, #16]
 80048f6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	68da      	ldr	r2, [r3, #12]
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	430a      	orrs	r2, r1
 8004904:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	689a      	ldr	r2, [r3, #8]
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	691b      	ldr	r3, [r3, #16]
 800490e:	431a      	orrs	r2, r3
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	695b      	ldr	r3, [r3, #20]
 8004914:	4313      	orrs	r3, r2
 8004916:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	68db      	ldr	r3, [r3, #12]
 800491e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004922:	f023 030c 	bic.w	r3, r3, #12
 8004926:	687a      	ldr	r2, [r7, #4]
 8004928:	6812      	ldr	r2, [r2, #0]
 800492a:	68b9      	ldr	r1, [r7, #8]
 800492c:	430b      	orrs	r3, r1
 800492e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	695b      	ldr	r3, [r3, #20]
 8004936:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	699a      	ldr	r2, [r3, #24]
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	430a      	orrs	r2, r1
 8004944:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	4a2c      	ldr	r2, [pc, #176]	; (80049fc <UART_SetConfig+0x114>)
 800494c:	4293      	cmp	r3, r2
 800494e:	d103      	bne.n	8004958 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004950:	f7fe ff26 	bl	80037a0 <HAL_RCC_GetPCLK2Freq>
 8004954:	60f8      	str	r0, [r7, #12]
 8004956:	e002      	b.n	800495e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004958:	f7fe ff0e 	bl	8003778 <HAL_RCC_GetPCLK1Freq>
 800495c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800495e:	68fa      	ldr	r2, [r7, #12]
 8004960:	4613      	mov	r3, r2
 8004962:	009b      	lsls	r3, r3, #2
 8004964:	4413      	add	r3, r2
 8004966:	009a      	lsls	r2, r3, #2
 8004968:	441a      	add	r2, r3
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	685b      	ldr	r3, [r3, #4]
 800496e:	009b      	lsls	r3, r3, #2
 8004970:	fbb2 f3f3 	udiv	r3, r2, r3
 8004974:	4a22      	ldr	r2, [pc, #136]	; (8004a00 <UART_SetConfig+0x118>)
 8004976:	fba2 2303 	umull	r2, r3, r2, r3
 800497a:	095b      	lsrs	r3, r3, #5
 800497c:	0119      	lsls	r1, r3, #4
 800497e:	68fa      	ldr	r2, [r7, #12]
 8004980:	4613      	mov	r3, r2
 8004982:	009b      	lsls	r3, r3, #2
 8004984:	4413      	add	r3, r2
 8004986:	009a      	lsls	r2, r3, #2
 8004988:	441a      	add	r2, r3
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	685b      	ldr	r3, [r3, #4]
 800498e:	009b      	lsls	r3, r3, #2
 8004990:	fbb2 f2f3 	udiv	r2, r2, r3
 8004994:	4b1a      	ldr	r3, [pc, #104]	; (8004a00 <UART_SetConfig+0x118>)
 8004996:	fba3 0302 	umull	r0, r3, r3, r2
 800499a:	095b      	lsrs	r3, r3, #5
 800499c:	2064      	movs	r0, #100	; 0x64
 800499e:	fb00 f303 	mul.w	r3, r0, r3
 80049a2:	1ad3      	subs	r3, r2, r3
 80049a4:	011b      	lsls	r3, r3, #4
 80049a6:	3332      	adds	r3, #50	; 0x32
 80049a8:	4a15      	ldr	r2, [pc, #84]	; (8004a00 <UART_SetConfig+0x118>)
 80049aa:	fba2 2303 	umull	r2, r3, r2, r3
 80049ae:	095b      	lsrs	r3, r3, #5
 80049b0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80049b4:	4419      	add	r1, r3
 80049b6:	68fa      	ldr	r2, [r7, #12]
 80049b8:	4613      	mov	r3, r2
 80049ba:	009b      	lsls	r3, r3, #2
 80049bc:	4413      	add	r3, r2
 80049be:	009a      	lsls	r2, r3, #2
 80049c0:	441a      	add	r2, r3
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	685b      	ldr	r3, [r3, #4]
 80049c6:	009b      	lsls	r3, r3, #2
 80049c8:	fbb2 f2f3 	udiv	r2, r2, r3
 80049cc:	4b0c      	ldr	r3, [pc, #48]	; (8004a00 <UART_SetConfig+0x118>)
 80049ce:	fba3 0302 	umull	r0, r3, r3, r2
 80049d2:	095b      	lsrs	r3, r3, #5
 80049d4:	2064      	movs	r0, #100	; 0x64
 80049d6:	fb00 f303 	mul.w	r3, r0, r3
 80049da:	1ad3      	subs	r3, r2, r3
 80049dc:	011b      	lsls	r3, r3, #4
 80049de:	3332      	adds	r3, #50	; 0x32
 80049e0:	4a07      	ldr	r2, [pc, #28]	; (8004a00 <UART_SetConfig+0x118>)
 80049e2:	fba2 2303 	umull	r2, r3, r2, r3
 80049e6:	095b      	lsrs	r3, r3, #5
 80049e8:	f003 020f 	and.w	r2, r3, #15
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	440a      	add	r2, r1
 80049f2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80049f4:	bf00      	nop
 80049f6:	3710      	adds	r7, #16
 80049f8:	46bd      	mov	sp, r7
 80049fa:	bd80      	pop	{r7, pc}
 80049fc:	40013800 	.word	0x40013800
 8004a00:	51eb851f 	.word	0x51eb851f

08004a04 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004a04:	b084      	sub	sp, #16
 8004a06:	b580      	push	{r7, lr}
 8004a08:	b084      	sub	sp, #16
 8004a0a:	af00      	add	r7, sp, #0
 8004a0c:	6078      	str	r0, [r7, #4]
 8004a0e:	f107 001c 	add.w	r0, r7, #28
 8004a12:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;


  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	68db      	ldr	r3, [r3, #12]
 8004a1a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8004a22:	6878      	ldr	r0, [r7, #4]
 8004a24:	f000 f970 	bl	8004d08 <USB_CoreReset>
 8004a28:	4603      	mov	r3, r0
 8004a2a:	73fb      	strb	r3, [r7, #15]

  /* Activate the USB Transceiver */
  USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a30:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	639a      	str	r2, [r3, #56]	; 0x38

  return ret;
 8004a38:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a3a:	4618      	mov	r0, r3
 8004a3c:	3710      	adds	r7, #16
 8004a3e:	46bd      	mov	sp, r7
 8004a40:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004a44:	b004      	add	sp, #16
 8004a46:	4770      	bx	lr

08004a48 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004a48:	b480      	push	{r7}
 8004a4a:	b083      	sub	sp, #12
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	689b      	ldr	r3, [r3, #8]
 8004a54:	f043 0201 	orr.w	r2, r3, #1
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004a5c:	2300      	movs	r3, #0
}
 8004a5e:	4618      	mov	r0, r3
 8004a60:	370c      	adds	r7, #12
 8004a62:	46bd      	mov	sp, r7
 8004a64:	bc80      	pop	{r7}
 8004a66:	4770      	bx	lr

08004a68 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004a68:	b480      	push	{r7}
 8004a6a:	b083      	sub	sp, #12
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	689b      	ldr	r3, [r3, #8]
 8004a74:	f023 0201 	bic.w	r2, r3, #1
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004a7c:	2300      	movs	r3, #0
}
 8004a7e:	4618      	mov	r0, r3
 8004a80:	370c      	adds	r7, #12
 8004a82:	46bd      	mov	sp, r7
 8004a84:	bc80      	pop	{r7}
 8004a86:	4770      	bx	lr

08004a88 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8004a88:	b580      	push	{r7, lr}
 8004a8a:	b084      	sub	sp, #16
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	6078      	str	r0, [r7, #4]
 8004a90:	460b      	mov	r3, r1
 8004a92:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004a94:	2300      	movs	r3, #0
 8004a96:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	68db      	ldr	r3, [r3, #12]
 8004a9c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004aa4:	78fb      	ldrb	r3, [r7, #3]
 8004aa6:	2b01      	cmp	r3, #1
 8004aa8:	d115      	bne.n	8004ad6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	68db      	ldr	r3, [r3, #12]
 8004aae:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004ab6:	2001      	movs	r0, #1
 8004ab8:	f7fc f8ba 	bl	8000c30 <HAL_Delay>
      ms++;
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	3301      	adds	r3, #1
 8004ac0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004ac2:	6878      	ldr	r0, [r7, #4]
 8004ac4:	f000 f912 	bl	8004cec <USB_GetMode>
 8004ac8:	4603      	mov	r3, r0
 8004aca:	2b01      	cmp	r3, #1
 8004acc:	d01e      	beq.n	8004b0c <USB_SetCurrentMode+0x84>
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	2b31      	cmp	r3, #49	; 0x31
 8004ad2:	d9f0      	bls.n	8004ab6 <USB_SetCurrentMode+0x2e>
 8004ad4:	e01a      	b.n	8004b0c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004ad6:	78fb      	ldrb	r3, [r7, #3]
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d115      	bne.n	8004b08 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	68db      	ldr	r3, [r3, #12]
 8004ae0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004ae8:	2001      	movs	r0, #1
 8004aea:	f7fc f8a1 	bl	8000c30 <HAL_Delay>
      ms++;
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	3301      	adds	r3, #1
 8004af2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004af4:	6878      	ldr	r0, [r7, #4]
 8004af6:	f000 f8f9 	bl	8004cec <USB_GetMode>
 8004afa:	4603      	mov	r3, r0
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d005      	beq.n	8004b0c <USB_SetCurrentMode+0x84>
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	2b31      	cmp	r3, #49	; 0x31
 8004b04:	d9f0      	bls.n	8004ae8 <USB_SetCurrentMode+0x60>
 8004b06:	e001      	b.n	8004b0c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004b08:	2301      	movs	r3, #1
 8004b0a:	e005      	b.n	8004b18 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	2b32      	cmp	r3, #50	; 0x32
 8004b10:	d101      	bne.n	8004b16 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004b12:	2301      	movs	r3, #1
 8004b14:	e000      	b.n	8004b18 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004b16:	2300      	movs	r3, #0
}
 8004b18:	4618      	mov	r0, r3
 8004b1a:	3710      	adds	r7, #16
 8004b1c:	46bd      	mov	sp, r7
 8004b1e:	bd80      	pop	{r7, pc}

08004b20 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004b20:	b480      	push	{r7}
 8004b22:	b085      	sub	sp, #20
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	6078      	str	r0, [r7, #4]
 8004b28:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8004b2a:	2300      	movs	r3, #0
 8004b2c:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004b2e:	683b      	ldr	r3, [r7, #0]
 8004b30:	019b      	lsls	r3, r3, #6
 8004b32:	f043 0220 	orr.w	r2, r3, #32
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	3301      	adds	r3, #1
 8004b3e:	60fb      	str	r3, [r7, #12]
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	4a08      	ldr	r2, [pc, #32]	; (8004b64 <USB_FlushTxFifo+0x44>)
 8004b44:	4293      	cmp	r3, r2
 8004b46:	d901      	bls.n	8004b4c <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8004b48:	2303      	movs	r3, #3
 8004b4a:	e006      	b.n	8004b5a <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	691b      	ldr	r3, [r3, #16]
 8004b50:	f003 0320 	and.w	r3, r3, #32
 8004b54:	2b20      	cmp	r3, #32
 8004b56:	d0f0      	beq.n	8004b3a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8004b58:	2300      	movs	r3, #0
}
 8004b5a:	4618      	mov	r0, r3
 8004b5c:	3714      	adds	r7, #20
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	bc80      	pop	{r7}
 8004b62:	4770      	bx	lr
 8004b64:	00030d40 	.word	0x00030d40

08004b68 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004b68:	b480      	push	{r7}
 8004b6a:	b085      	sub	sp, #20
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8004b70:	2300      	movs	r3, #0
 8004b72:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	2210      	movs	r2, #16
 8004b78:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	3301      	adds	r3, #1
 8004b7e:	60fb      	str	r3, [r7, #12]
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	4a08      	ldr	r2, [pc, #32]	; (8004ba4 <USB_FlushRxFifo+0x3c>)
 8004b84:	4293      	cmp	r3, r2
 8004b86:	d901      	bls.n	8004b8c <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8004b88:	2303      	movs	r3, #3
 8004b8a:	e006      	b.n	8004b9a <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	691b      	ldr	r3, [r3, #16]
 8004b90:	f003 0310 	and.w	r3, r3, #16
 8004b94:	2b10      	cmp	r3, #16
 8004b96:	d0f0      	beq.n	8004b7a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8004b98:	2300      	movs	r3, #0
}
 8004b9a:	4618      	mov	r0, r3
 8004b9c:	3714      	adds	r7, #20
 8004b9e:	46bd      	mov	sp, r7
 8004ba0:	bc80      	pop	{r7}
 8004ba2:	4770      	bx	lr
 8004ba4:	00030d40 	.word	0x00030d40

08004ba8 <USB_WritePacket>:
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len)
{
 8004ba8:	b480      	push	{r7}
 8004baa:	b089      	sub	sp, #36	; 0x24
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	60f8      	str	r0, [r7, #12]
 8004bb0:	60b9      	str	r1, [r7, #8]
 8004bb2:	4611      	mov	r1, r2
 8004bb4:	461a      	mov	r2, r3
 8004bb6:	460b      	mov	r3, r1
 8004bb8:	71fb      	strb	r3, [r7, #7]
 8004bba:	4613      	mov	r3, r2
 8004bbc:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8004bc2:	68bb      	ldr	r3, [r7, #8]
 8004bc4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  count32b = ((uint32_t)len + 3U) / 4U;
 8004bc6:	88bb      	ldrh	r3, [r7, #4]
 8004bc8:	3303      	adds	r3, #3
 8004bca:	089b      	lsrs	r3, r3, #2
 8004bcc:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 8004bce:	2300      	movs	r3, #0
 8004bd0:	61bb      	str	r3, [r7, #24]
 8004bd2:	e018      	b.n	8004c06 <USB_WritePacket+0x5e>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004bd4:	79fb      	ldrb	r3, [r7, #7]
 8004bd6:	031a      	lsls	r2, r3, #12
 8004bd8:	697b      	ldr	r3, [r7, #20]
 8004bda:	4413      	add	r3, r2
 8004bdc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004be0:	461a      	mov	r2, r3
 8004be2:	69fb      	ldr	r3, [r7, #28]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	6013      	str	r3, [r2, #0]
    pSrc++;
 8004be8:	69fb      	ldr	r3, [r7, #28]
 8004bea:	3301      	adds	r3, #1
 8004bec:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8004bee:	69fb      	ldr	r3, [r7, #28]
 8004bf0:	3301      	adds	r3, #1
 8004bf2:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8004bf4:	69fb      	ldr	r3, [r7, #28]
 8004bf6:	3301      	adds	r3, #1
 8004bf8:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8004bfa:	69fb      	ldr	r3, [r7, #28]
 8004bfc:	3301      	adds	r3, #1
 8004bfe:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8004c00:	69bb      	ldr	r3, [r7, #24]
 8004c02:	3301      	adds	r3, #1
 8004c04:	61bb      	str	r3, [r7, #24]
 8004c06:	69ba      	ldr	r2, [r7, #24]
 8004c08:	693b      	ldr	r3, [r7, #16]
 8004c0a:	429a      	cmp	r2, r3
 8004c0c:	d3e2      	bcc.n	8004bd4 <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 8004c0e:	2300      	movs	r3, #0
}
 8004c10:	4618      	mov	r0, r3
 8004c12:	3724      	adds	r7, #36	; 0x24
 8004c14:	46bd      	mov	sp, r7
 8004c16:	bc80      	pop	{r7}
 8004c18:	4770      	bx	lr

08004c1a <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004c1a:	b480      	push	{r7}
 8004c1c:	b08b      	sub	sp, #44	; 0x2c
 8004c1e:	af00      	add	r7, sp, #0
 8004c20:	60f8      	str	r0, [r7, #12]
 8004c22:	60b9      	str	r1, [r7, #8]
 8004c24:	4613      	mov	r3, r2
 8004c26:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8004c2c:	68bb      	ldr	r3, [r7, #8]
 8004c2e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8004c30:	88fb      	ldrh	r3, [r7, #6]
 8004c32:	089b      	lsrs	r3, r3, #2
 8004c34:	b29b      	uxth	r3, r3
 8004c36:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8004c38:	88fb      	ldrh	r3, [r7, #6]
 8004c3a:	f003 0303 	and.w	r3, r3, #3
 8004c3e:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8004c40:	2300      	movs	r3, #0
 8004c42:	623b      	str	r3, [r7, #32]
 8004c44:	e014      	b.n	8004c70 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004c46:	69bb      	ldr	r3, [r7, #24]
 8004c48:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c4c:	681a      	ldr	r2, [r3, #0]
 8004c4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c50:	601a      	str	r2, [r3, #0]
    pDest++;
 8004c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c54:	3301      	adds	r3, #1
 8004c56:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c5a:	3301      	adds	r3, #1
 8004c5c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004c5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c60:	3301      	adds	r3, #1
 8004c62:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004c64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c66:	3301      	adds	r3, #1
 8004c68:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8004c6a:	6a3b      	ldr	r3, [r7, #32]
 8004c6c:	3301      	adds	r3, #1
 8004c6e:	623b      	str	r3, [r7, #32]
 8004c70:	6a3a      	ldr	r2, [r7, #32]
 8004c72:	697b      	ldr	r3, [r7, #20]
 8004c74:	429a      	cmp	r2, r3
 8004c76:	d3e6      	bcc.n	8004c46 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8004c78:	8bfb      	ldrh	r3, [r7, #30]
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d01e      	beq.n	8004cbc <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8004c7e:	2300      	movs	r3, #0
 8004c80:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8004c82:	69bb      	ldr	r3, [r7, #24]
 8004c84:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c88:	461a      	mov	r2, r3
 8004c8a:	f107 0310 	add.w	r3, r7, #16
 8004c8e:	6812      	ldr	r2, [r2, #0]
 8004c90:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8004c92:	693a      	ldr	r2, [r7, #16]
 8004c94:	6a3b      	ldr	r3, [r7, #32]
 8004c96:	b2db      	uxtb	r3, r3
 8004c98:	00db      	lsls	r3, r3, #3
 8004c9a:	fa22 f303 	lsr.w	r3, r2, r3
 8004c9e:	b2da      	uxtb	r2, r3
 8004ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ca2:	701a      	strb	r2, [r3, #0]
      i++;
 8004ca4:	6a3b      	ldr	r3, [r7, #32]
 8004ca6:	3301      	adds	r3, #1
 8004ca8:	623b      	str	r3, [r7, #32]
      pDest++;
 8004caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cac:	3301      	adds	r3, #1
 8004cae:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8004cb0:	8bfb      	ldrh	r3, [r7, #30]
 8004cb2:	3b01      	subs	r3, #1
 8004cb4:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8004cb6:	8bfb      	ldrh	r3, [r7, #30]
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d1ea      	bne.n	8004c92 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8004cbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004cbe:	4618      	mov	r0, r3
 8004cc0:	372c      	adds	r7, #44	; 0x2c
 8004cc2:	46bd      	mov	sp, r7
 8004cc4:	bc80      	pop	{r7}
 8004cc6:	4770      	bx	lr

08004cc8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8004cc8:	b480      	push	{r7}
 8004cca:	b085      	sub	sp, #20
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	695b      	ldr	r3, [r3, #20]
 8004cd4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	699b      	ldr	r3, [r3, #24]
 8004cda:	68fa      	ldr	r2, [r7, #12]
 8004cdc:	4013      	ands	r3, r2
 8004cde:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004ce0:	68fb      	ldr	r3, [r7, #12]
}
 8004ce2:	4618      	mov	r0, r3
 8004ce4:	3714      	adds	r7, #20
 8004ce6:	46bd      	mov	sp, r7
 8004ce8:	bc80      	pop	{r7}
 8004cea:	4770      	bx	lr

08004cec <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004cec:	b480      	push	{r7}
 8004cee:	b083      	sub	sp, #12
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	695b      	ldr	r3, [r3, #20]
 8004cf8:	f003 0301 	and.w	r3, r3, #1
}
 8004cfc:	4618      	mov	r0, r3
 8004cfe:	370c      	adds	r7, #12
 8004d00:	46bd      	mov	sp, r7
 8004d02:	bc80      	pop	{r7}
 8004d04:	4770      	bx	lr
	...

08004d08 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004d08:	b480      	push	{r7}
 8004d0a:	b085      	sub	sp, #20
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8004d10:	2300      	movs	r3, #0
 8004d12:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	3301      	adds	r3, #1
 8004d18:	60fb      	str	r3, [r7, #12]
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	4a12      	ldr	r2, [pc, #72]	; (8004d68 <USB_CoreReset+0x60>)
 8004d1e:	4293      	cmp	r3, r2
 8004d20:	d901      	bls.n	8004d26 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004d22:	2303      	movs	r3, #3
 8004d24:	e01b      	b.n	8004d5e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	691b      	ldr	r3, [r3, #16]
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	daf2      	bge.n	8004d14 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004d2e:	2300      	movs	r3, #0
 8004d30:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	691b      	ldr	r3, [r3, #16]
 8004d36:	f043 0201 	orr.w	r2, r3, #1
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	3301      	adds	r3, #1
 8004d42:	60fb      	str	r3, [r7, #12]
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	4a08      	ldr	r2, [pc, #32]	; (8004d68 <USB_CoreReset+0x60>)
 8004d48:	4293      	cmp	r3, r2
 8004d4a:	d901      	bls.n	8004d50 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004d4c:	2303      	movs	r3, #3
 8004d4e:	e006      	b.n	8004d5e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	691b      	ldr	r3, [r3, #16]
 8004d54:	f003 0301 	and.w	r3, r3, #1
 8004d58:	2b01      	cmp	r3, #1
 8004d5a:	d0f0      	beq.n	8004d3e <USB_CoreReset+0x36>

  return HAL_OK;
 8004d5c:	2300      	movs	r3, #0
}
 8004d5e:	4618      	mov	r0, r3
 8004d60:	3714      	adds	r7, #20
 8004d62:	46bd      	mov	sp, r7
 8004d64:	bc80      	pop	{r7}
 8004d66:	4770      	bx	lr
 8004d68:	00030d40 	.word	0x00030d40

08004d6c <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004d6c:	b084      	sub	sp, #16
 8004d6e:	b580      	push	{r7, lr}
 8004d70:	b084      	sub	sp, #16
 8004d72:	af00      	add	r7, sp, #0
 8004d74:	6078      	str	r0, [r7, #4]
 8004d76:	f107 001c 	add.w	r0, r7, #28
 8004d7a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004d82:	68bb      	ldr	r3, [r7, #8]
 8004d84:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004d88:	461a      	mov	r2, r3
 8004d8a:	2300      	movs	r3, #0
 8004d8c:	6013      	str	r3, [r2, #0]

  /* Disable VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBUSASEN);
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d92:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBUSBSEN);
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d9e:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	639a      	str	r2, [r3, #56]	; 0x38
  /* Set default Max speed support */
  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8004da6:	68bb      	ldr	r3, [r7, #8]
 8004da8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	68ba      	ldr	r2, [r7, #8]
 8004db0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004db4:	f023 0304 	bic.w	r3, r3, #4
 8004db8:	6013      	str	r3, [r2, #0]

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8004dba:	2110      	movs	r1, #16
 8004dbc:	6878      	ldr	r0, [r7, #4]
 8004dbe:	f7ff feaf 	bl	8004b20 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8004dc2:	6878      	ldr	r0, [r7, #4]
 8004dc4:	f7ff fed0 	bl	8004b68 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8004dc8:	2300      	movs	r3, #0
 8004dca:	60fb      	str	r3, [r7, #12]
 8004dcc:	e015      	b.n	8004dfa <USB_HostInit+0x8e>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	015a      	lsls	r2, r3, #5
 8004dd2:	68bb      	ldr	r3, [r7, #8]
 8004dd4:	4413      	add	r3, r2
 8004dd6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004dda:	461a      	mov	r2, r3
 8004ddc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004de0:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	015a      	lsls	r2, r3, #5
 8004de6:	68bb      	ldr	r3, [r7, #8]
 8004de8:	4413      	add	r3, r2
 8004dea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004dee:	461a      	mov	r2, r3
 8004df0:	2300      	movs	r3, #0
 8004df2:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	3301      	adds	r3, #1
 8004df8:	60fb      	str	r3, [r7, #12]
 8004dfa:	6a3b      	ldr	r3, [r7, #32]
 8004dfc:	68fa      	ldr	r2, [r7, #12]
 8004dfe:	429a      	cmp	r2, r3
 8004e00:	d3e5      	bcc.n	8004dce <USB_HostInit+0x62>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	2200      	movs	r2, #0
 8004e06:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004e0e:	615a      	str	r2, [r3, #20]

  /* set Rx FIFO size */
  USBx->GRXFSIZ  = 0x80U;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	2280      	movs	r2, #128	; 0x80
 8004e14:	625a      	str	r2, [r3, #36]	; 0x24
  USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	4a0c      	ldr	r2, [pc, #48]	; (8004e4c <USB_HostInit+0xe0>)
 8004e1a:	629a      	str	r2, [r3, #40]	; 0x28
  USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	4a0c      	ldr	r2, [pc, #48]	; (8004e50 <USB_HostInit+0xe4>)
 8004e20:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	699b      	ldr	r3, [r3, #24]
 8004e28:	f043 0210 	orr.w	r2, r3, #16
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	699a      	ldr	r2, [r3, #24]
 8004e34:	4b07      	ldr	r3, [pc, #28]	; (8004e54 <USB_HostInit+0xe8>)
 8004e36:	4313      	orrs	r3, r2
 8004e38:	687a      	ldr	r2, [r7, #4]
 8004e3a:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 8004e3c:	2300      	movs	r3, #0
}
 8004e3e:	4618      	mov	r0, r3
 8004e40:	3710      	adds	r7, #16
 8004e42:	46bd      	mov	sp, r7
 8004e44:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004e48:	b004      	add	sp, #16
 8004e4a:	4770      	bx	lr
 8004e4c:	00600080 	.word	0x00600080
 8004e50:	004000e0 	.word	0x004000e0
 8004e54:	a3200008 	.word	0xa3200008

08004e58 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8004e58:	b480      	push	{r7}
 8004e5a:	b085      	sub	sp, #20
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	6078      	str	r0, [r7, #4]
 8004e60:	460b      	mov	r3, r1
 8004e62:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	68fa      	ldr	r2, [r7, #12]
 8004e72:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004e76:	f023 0303 	bic.w	r3, r3, #3
 8004e7a:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004e82:	681a      	ldr	r2, [r3, #0]
 8004e84:	78fb      	ldrb	r3, [r7, #3]
 8004e86:	f003 0303 	and.w	r3, r3, #3
 8004e8a:	68f9      	ldr	r1, [r7, #12]
 8004e8c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004e90:	4313      	orrs	r3, r2
 8004e92:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8004e94:	78fb      	ldrb	r3, [r7, #3]
 8004e96:	2b01      	cmp	r3, #1
 8004e98:	d107      	bne.n	8004eaa <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004ea0:	461a      	mov	r2, r3
 8004ea2:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8004ea6:	6053      	str	r3, [r2, #4]
 8004ea8:	e009      	b.n	8004ebe <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8004eaa:	78fb      	ldrb	r3, [r7, #3]
 8004eac:	2b02      	cmp	r3, #2
 8004eae:	d106      	bne.n	8004ebe <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004eb6:	461a      	mov	r2, r3
 8004eb8:	f241 7370 	movw	r3, #6000	; 0x1770
 8004ebc:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8004ebe:	2300      	movs	r3, #0
}
 8004ec0:	4618      	mov	r0, r3
 8004ec2:	3714      	adds	r7, #20
 8004ec4:	46bd      	mov	sp, r7
 8004ec6:	bc80      	pop	{r7}
 8004ec8:	4770      	bx	lr

08004eca <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8004eca:	b580      	push	{r7, lr}
 8004ecc:	b084      	sub	sp, #16
 8004ece:	af00      	add	r7, sp, #0
 8004ed0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8004ed6:	2300      	movs	r3, #0
 8004ed8:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8004ee4:	68bb      	ldr	r3, [r7, #8]
 8004ee6:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8004eea:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8004eec:	68bb      	ldr	r3, [r7, #8]
 8004eee:	68fa      	ldr	r2, [r7, #12]
 8004ef0:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8004ef4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ef8:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8004efa:	2064      	movs	r0, #100	; 0x64
 8004efc:	f7fb fe98 	bl	8000c30 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8004f00:	68bb      	ldr	r3, [r7, #8]
 8004f02:	68fa      	ldr	r2, [r7, #12]
 8004f04:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8004f08:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004f0c:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8004f0e:	200a      	movs	r0, #10
 8004f10:	f7fb fe8e 	bl	8000c30 <HAL_Delay>

  return HAL_OK;
 8004f14:	2300      	movs	r3, #0
}
 8004f16:	4618      	mov	r0, r3
 8004f18:	3710      	adds	r7, #16
 8004f1a:	46bd      	mov	sp, r7
 8004f1c:	bd80      	pop	{r7, pc}

08004f1e <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8004f1e:	b480      	push	{r7}
 8004f20:	b085      	sub	sp, #20
 8004f22:	af00      	add	r7, sp, #0
 8004f24:	6078      	str	r0, [r7, #4]
 8004f26:	460b      	mov	r3, r1
 8004f28:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8004f2e:	2300      	movs	r3, #0
 8004f30:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8004f3c:	68bb      	ldr	r3, [r7, #8]
 8004f3e:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8004f42:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8004f44:	68bb      	ldr	r3, [r7, #8]
 8004f46:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d109      	bne.n	8004f62 <USB_DriveVbus+0x44>
 8004f4e:	78fb      	ldrb	r3, [r7, #3]
 8004f50:	2b01      	cmp	r3, #1
 8004f52:	d106      	bne.n	8004f62 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8004f54:	68bb      	ldr	r3, [r7, #8]
 8004f56:	68fa      	ldr	r2, [r7, #12]
 8004f58:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8004f5c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004f60:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8004f62:	68bb      	ldr	r3, [r7, #8]
 8004f64:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004f68:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f6c:	d109      	bne.n	8004f82 <USB_DriveVbus+0x64>
 8004f6e:	78fb      	ldrb	r3, [r7, #3]
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d106      	bne.n	8004f82 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8004f74:	68bb      	ldr	r3, [r7, #8]
 8004f76:	68fa      	ldr	r2, [r7, #12]
 8004f78:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8004f7c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004f80:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8004f82:	2300      	movs	r3, #0
}
 8004f84:	4618      	mov	r0, r3
 8004f86:	3714      	adds	r7, #20
 8004f88:	46bd      	mov	sp, r7
 8004f8a:	bc80      	pop	{r7}
 8004f8c:	4770      	bx	lr

08004f8e <USB_GetHostSpeed>:
  *          This parameter can be one of these values:
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8004f8e:	b480      	push	{r7}
 8004f90:	b085      	sub	sp, #20
 8004f92:	af00      	add	r7, sp, #0
 8004f94:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8004f9a:	2300      	movs	r3, #0
 8004f9c:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8004fa8:	68bb      	ldr	r3, [r7, #8]
 8004faa:	0c5b      	lsrs	r3, r3, #17
 8004fac:	f003 0303 	and.w	r3, r3, #3
}
 8004fb0:	4618      	mov	r0, r3
 8004fb2:	3714      	adds	r7, #20
 8004fb4:	46bd      	mov	sp, r7
 8004fb6:	bc80      	pop	{r7}
 8004fb8:	4770      	bx	lr

08004fba <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8004fba:	b480      	push	{r7}
 8004fbc:	b085      	sub	sp, #20
 8004fbe:	af00      	add	r7, sp, #0
 8004fc0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004fcc:	689b      	ldr	r3, [r3, #8]
 8004fce:	b29b      	uxth	r3, r3
}
 8004fd0:	4618      	mov	r0, r3
 8004fd2:	3714      	adds	r7, #20
 8004fd4:	46bd      	mov	sp, r7
 8004fd6:	bc80      	pop	{r7}
 8004fd8:	4770      	bx	lr
	...

08004fdc <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8004fdc:	b580      	push	{r7, lr}
 8004fde:	b088      	sub	sp, #32
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	6078      	str	r0, [r7, #4]
 8004fe4:	4608      	mov	r0, r1
 8004fe6:	4611      	mov	r1, r2
 8004fe8:	461a      	mov	r2, r3
 8004fea:	4603      	mov	r3, r0
 8004fec:	70fb      	strb	r3, [r7, #3]
 8004fee:	460b      	mov	r3, r1
 8004ff0:	70bb      	strb	r3, [r7, #2]
 8004ff2:	4613      	mov	r3, r2
 8004ff4:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8004ff6:	2300      	movs	r3, #0
 8004ff8:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8004ffe:	78fb      	ldrb	r3, [r7, #3]
 8005000:	015a      	lsls	r2, r3, #5
 8005002:	693b      	ldr	r3, [r7, #16]
 8005004:	4413      	add	r3, r2
 8005006:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800500a:	461a      	mov	r2, r3
 800500c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005010:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8005012:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005016:	2b03      	cmp	r3, #3
 8005018:	d867      	bhi.n	80050ea <USB_HC_Init+0x10e>
 800501a:	a201      	add	r2, pc, #4	; (adr r2, 8005020 <USB_HC_Init+0x44>)
 800501c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005020:	08005031 	.word	0x08005031
 8005024:	080050ad 	.word	0x080050ad
 8005028:	08005031 	.word	0x08005031
 800502c:	0800506f 	.word	0x0800506f
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005030:	78fb      	ldrb	r3, [r7, #3]
 8005032:	015a      	lsls	r2, r3, #5
 8005034:	693b      	ldr	r3, [r7, #16]
 8005036:	4413      	add	r3, r2
 8005038:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800503c:	461a      	mov	r2, r3
 800503e:	f240 439d 	movw	r3, #1181	; 0x49d
 8005042:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8005044:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005048:	2b00      	cmp	r3, #0
 800504a:	da51      	bge.n	80050f0 <USB_HC_Init+0x114>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800504c:	78fb      	ldrb	r3, [r7, #3]
 800504e:	015a      	lsls	r2, r3, #5
 8005050:	693b      	ldr	r3, [r7, #16]
 8005052:	4413      	add	r3, r2
 8005054:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005058:	68db      	ldr	r3, [r3, #12]
 800505a:	78fa      	ldrb	r2, [r7, #3]
 800505c:	0151      	lsls	r1, r2, #5
 800505e:	693a      	ldr	r2, [r7, #16]
 8005060:	440a      	add	r2, r1
 8005062:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005066:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800506a:	60d3      	str	r3, [r2, #12]
      }
      break;
 800506c:	e040      	b.n	80050f0 <USB_HC_Init+0x114>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800506e:	78fb      	ldrb	r3, [r7, #3]
 8005070:	015a      	lsls	r2, r3, #5
 8005072:	693b      	ldr	r3, [r7, #16]
 8005074:	4413      	add	r3, r2
 8005076:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800507a:	461a      	mov	r2, r3
 800507c:	f240 639d 	movw	r3, #1693	; 0x69d
 8005080:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005082:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005086:	2b00      	cmp	r3, #0
 8005088:	da34      	bge.n	80050f4 <USB_HC_Init+0x118>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800508a:	78fb      	ldrb	r3, [r7, #3]
 800508c:	015a      	lsls	r2, r3, #5
 800508e:	693b      	ldr	r3, [r7, #16]
 8005090:	4413      	add	r3, r2
 8005092:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005096:	68db      	ldr	r3, [r3, #12]
 8005098:	78fa      	ldrb	r2, [r7, #3]
 800509a:	0151      	lsls	r1, r2, #5
 800509c:	693a      	ldr	r2, [r7, #16]
 800509e:	440a      	add	r2, r1
 80050a0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80050a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80050a8:	60d3      	str	r3, [r2, #12]
      }

      break;
 80050aa:	e023      	b.n	80050f4 <USB_HC_Init+0x118>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80050ac:	78fb      	ldrb	r3, [r7, #3]
 80050ae:	015a      	lsls	r2, r3, #5
 80050b0:	693b      	ldr	r3, [r7, #16]
 80050b2:	4413      	add	r3, r2
 80050b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80050b8:	461a      	mov	r2, r3
 80050ba:	f240 2325 	movw	r3, #549	; 0x225
 80050be:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80050c0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	da17      	bge.n	80050f8 <USB_HC_Init+0x11c>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 80050c8:	78fb      	ldrb	r3, [r7, #3]
 80050ca:	015a      	lsls	r2, r3, #5
 80050cc:	693b      	ldr	r3, [r7, #16]
 80050ce:	4413      	add	r3, r2
 80050d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80050d4:	68db      	ldr	r3, [r3, #12]
 80050d6:	78fa      	ldrb	r2, [r7, #3]
 80050d8:	0151      	lsls	r1, r2, #5
 80050da:	693a      	ldr	r2, [r7, #16]
 80050dc:	440a      	add	r2, r1
 80050de:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80050e2:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 80050e6:	60d3      	str	r3, [r2, #12]
      }
      break;
 80050e8:	e006      	b.n	80050f8 <USB_HC_Init+0x11c>

    default:
      ret = HAL_ERROR;
 80050ea:	2301      	movs	r3, #1
 80050ec:	77fb      	strb	r3, [r7, #31]
      break;
 80050ee:	e004      	b.n	80050fa <USB_HC_Init+0x11e>
      break;
 80050f0:	bf00      	nop
 80050f2:	e002      	b.n	80050fa <USB_HC_Init+0x11e>
      break;
 80050f4:	bf00      	nop
 80050f6:	e000      	b.n	80050fa <USB_HC_Init+0x11e>
      break;
 80050f8:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 80050fa:	693b      	ldr	r3, [r7, #16]
 80050fc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005100:	699a      	ldr	r2, [r3, #24]
 8005102:	78fb      	ldrb	r3, [r7, #3]
 8005104:	f003 030f 	and.w	r3, r3, #15
 8005108:	2101      	movs	r1, #1
 800510a:	fa01 f303 	lsl.w	r3, r1, r3
 800510e:	6939      	ldr	r1, [r7, #16]
 8005110:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005114:	4313      	orrs	r3, r2
 8005116:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	699b      	ldr	r3, [r3, #24]
 800511c:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8005124:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005128:	2b00      	cmp	r3, #0
 800512a:	da03      	bge.n	8005134 <USB_HC_Init+0x158>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800512c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005130:	61bb      	str	r3, [r7, #24]
 8005132:	e001      	b.n	8005138 <USB_HC_Init+0x15c>
  }
  else
  {
    HCcharEpDir = 0U;
 8005134:	2300      	movs	r3, #0
 8005136:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8005138:	6878      	ldr	r0, [r7, #4]
 800513a:	f7ff ff28 	bl	8004f8e <USB_GetHostSpeed>
 800513e:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8005140:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005144:	2b02      	cmp	r3, #2
 8005146:	d106      	bne.n	8005156 <USB_HC_Init+0x17a>
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	2b02      	cmp	r3, #2
 800514c:	d003      	beq.n	8005156 <USB_HC_Init+0x17a>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800514e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005152:	617b      	str	r3, [r7, #20]
 8005154:	e001      	b.n	800515a <USB_HC_Init+0x17e>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8005156:	2300      	movs	r3, #0
 8005158:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800515a:	787b      	ldrb	r3, [r7, #1]
 800515c:	059b      	lsls	r3, r3, #22
 800515e:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005162:	78bb      	ldrb	r3, [r7, #2]
 8005164:	02db      	lsls	r3, r3, #11
 8005166:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800516a:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800516c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005170:	049b      	lsls	r3, r3, #18
 8005172:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005176:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005178:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800517a:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800517e:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005180:	69bb      	ldr	r3, [r7, #24]
 8005182:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005184:	78fb      	ldrb	r3, [r7, #3]
 8005186:	0159      	lsls	r1, r3, #5
 8005188:	693b      	ldr	r3, [r7, #16]
 800518a:	440b      	add	r3, r1
 800518c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005190:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005192:	697b      	ldr	r3, [r7, #20]
 8005194:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005196:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 8005198:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800519c:	2b03      	cmp	r3, #3
 800519e:	d10f      	bne.n	80051c0 <USB_HC_Init+0x1e4>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 80051a0:	78fb      	ldrb	r3, [r7, #3]
 80051a2:	015a      	lsls	r2, r3, #5
 80051a4:	693b      	ldr	r3, [r7, #16]
 80051a6:	4413      	add	r3, r2
 80051a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	78fa      	ldrb	r2, [r7, #3]
 80051b0:	0151      	lsls	r1, r2, #5
 80051b2:	693a      	ldr	r2, [r7, #16]
 80051b4:	440a      	add	r2, r1
 80051b6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80051ba:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80051be:	6013      	str	r3, [r2, #0]
  }

  return ret;
 80051c0:	7ffb      	ldrb	r3, [r7, #31]
}
 80051c2:	4618      	mov	r0, r3
 80051c4:	3720      	adds	r7, #32
 80051c6:	46bd      	mov	sp, r7
 80051c8:	bd80      	pop	{r7, pc}
 80051ca:	bf00      	nop

080051cc <USB_HC_StartXfer>:
  * @param  USBx  Selected device
  * @param  hc  pointer to host channel structure
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc)
{
 80051cc:	b580      	push	{r7, lr}
 80051ce:	b088      	sub	sp, #32
 80051d0:	af00      	add	r7, sp, #0
 80051d2:	6078      	str	r0, [r7, #4]
 80051d4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 80051da:	683b      	ldr	r3, [r7, #0]
 80051dc:	785b      	ldrb	r3, [r3, #1]
 80051de:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 80051e0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80051e4:	827b      	strh	r3, [r7, #18]

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 80051e6:	683b      	ldr	r3, [r7, #0]
 80051e8:	695b      	ldr	r3, [r3, #20]
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d018      	beq.n	8005220 <USB_HC_StartXfer+0x54>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 80051ee:	683b      	ldr	r3, [r7, #0]
 80051f0:	695b      	ldr	r3, [r3, #20]
 80051f2:	683a      	ldr	r2, [r7, #0]
 80051f4:	8912      	ldrh	r2, [r2, #8]
 80051f6:	4413      	add	r3, r2
 80051f8:	3b01      	subs	r3, #1
 80051fa:	683a      	ldr	r2, [r7, #0]
 80051fc:	8912      	ldrh	r2, [r2, #8]
 80051fe:	fbb3 f3f2 	udiv	r3, r3, r2
 8005202:	83fb      	strh	r3, [r7, #30]

    if (num_packets > max_hc_pkt_count)
 8005204:	8bfa      	ldrh	r2, [r7, #30]
 8005206:	8a7b      	ldrh	r3, [r7, #18]
 8005208:	429a      	cmp	r2, r3
 800520a:	d90b      	bls.n	8005224 <USB_HC_StartXfer+0x58>
    {
      num_packets = max_hc_pkt_count;
 800520c:	8a7b      	ldrh	r3, [r7, #18]
 800520e:	83fb      	strh	r3, [r7, #30]
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8005210:	8bfb      	ldrh	r3, [r7, #30]
 8005212:	683a      	ldr	r2, [r7, #0]
 8005214:	8912      	ldrh	r2, [r2, #8]
 8005216:	fb03 f202 	mul.w	r2, r3, r2
 800521a:	683b      	ldr	r3, [r7, #0]
 800521c:	611a      	str	r2, [r3, #16]
 800521e:	e001      	b.n	8005224 <USB_HC_StartXfer+0x58>
    }
  }
  else
  {
    num_packets = 1U;
 8005220:	2301      	movs	r3, #1
 8005222:	83fb      	strh	r3, [r7, #30]

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8005224:	683b      	ldr	r3, [r7, #0]
 8005226:	78db      	ldrb	r3, [r3, #3]
 8005228:	2b00      	cmp	r3, #0
 800522a:	d007      	beq.n	800523c <USB_HC_StartXfer+0x70>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800522c:	8bfb      	ldrh	r3, [r7, #30]
 800522e:	683a      	ldr	r2, [r7, #0]
 8005230:	8912      	ldrh	r2, [r2, #8]
 8005232:	fb03 f202 	mul.w	r2, r3, r2
 8005236:	683b      	ldr	r3, [r7, #0]
 8005238:	611a      	str	r2, [r3, #16]
 800523a:	e003      	b.n	8005244 <USB_HC_StartXfer+0x78>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 800523c:	683b      	ldr	r3, [r7, #0]
 800523e:	695a      	ldr	r2, [r3, #20]
 8005240:	683b      	ldr	r3, [r7, #0]
 8005242:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005244:	683b      	ldr	r3, [r7, #0]
 8005246:	691b      	ldr	r3, [r3, #16]
 8005248:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800524c:	8bfb      	ldrh	r3, [r7, #30]
 800524e:	04d9      	lsls	r1, r3, #19
 8005250:	4b59      	ldr	r3, [pc, #356]	; (80053b8 <USB_HC_StartXfer+0x1ec>)
 8005252:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005254:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8005256:	683b      	ldr	r3, [r7, #0]
 8005258:	7a9b      	ldrb	r3, [r3, #10]
 800525a:	075b      	lsls	r3, r3, #29
 800525c:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005260:	6979      	ldr	r1, [r7, #20]
 8005262:	0148      	lsls	r0, r1, #5
 8005264:	69b9      	ldr	r1, [r7, #24]
 8005266:	4401      	add	r1, r0
 8005268:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800526c:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800526e:	610b      	str	r3, [r1, #16]

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8005270:	69bb      	ldr	r3, [r7, #24]
 8005272:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005276:	689b      	ldr	r3, [r3, #8]
 8005278:	f003 0301 	and.w	r3, r3, #1
 800527c:	2b00      	cmp	r3, #0
 800527e:	bf0c      	ite	eq
 8005280:	2301      	moveq	r3, #1
 8005282:	2300      	movne	r3, #0
 8005284:	b2db      	uxtb	r3, r3
 8005286:	747b      	strb	r3, [r7, #17]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8005288:	697b      	ldr	r3, [r7, #20]
 800528a:	015a      	lsls	r2, r3, #5
 800528c:	69bb      	ldr	r3, [r7, #24]
 800528e:	4413      	add	r3, r2
 8005290:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	697a      	ldr	r2, [r7, #20]
 8005298:	0151      	lsls	r1, r2, #5
 800529a:	69ba      	ldr	r2, [r7, #24]
 800529c:	440a      	add	r2, r1
 800529e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80052a2:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80052a6:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 80052a8:	697b      	ldr	r3, [r7, #20]
 80052aa:	015a      	lsls	r2, r3, #5
 80052ac:	69bb      	ldr	r3, [r7, #24]
 80052ae:	4413      	add	r3, r2
 80052b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052b4:	681a      	ldr	r2, [r3, #0]
 80052b6:	7c7b      	ldrb	r3, [r7, #17]
 80052b8:	075b      	lsls	r3, r3, #29
 80052ba:	6979      	ldr	r1, [r7, #20]
 80052bc:	0148      	lsls	r0, r1, #5
 80052be:	69b9      	ldr	r1, [r7, #24]
 80052c0:	4401      	add	r1, r0
 80052c2:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 80052c6:	4313      	orrs	r3, r2
 80052c8:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 80052ca:	697b      	ldr	r3, [r7, #20]
 80052cc:	015a      	lsls	r2, r3, #5
 80052ce:	69bb      	ldr	r3, [r7, #24]
 80052d0:	4413      	add	r3, r2
 80052d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80052da:	68bb      	ldr	r3, [r7, #8]
 80052dc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80052e0:	60bb      	str	r3, [r7, #8]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 80052e2:	683b      	ldr	r3, [r7, #0]
 80052e4:	78db      	ldrb	r3, [r3, #3]
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d004      	beq.n	80052f4 <USB_HC_StartXfer+0x128>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 80052ea:	68bb      	ldr	r3, [r7, #8]
 80052ec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80052f0:	60bb      	str	r3, [r7, #8]
 80052f2:	e003      	b.n	80052fc <USB_HC_StartXfer+0x130>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 80052f4:	68bb      	ldr	r3, [r7, #8]
 80052f6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80052fa:	60bb      	str	r3, [r7, #8]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80052fc:	68bb      	ldr	r3, [r7, #8]
 80052fe:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005302:	60bb      	str	r3, [r7, #8]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005304:	697b      	ldr	r3, [r7, #20]
 8005306:	015a      	lsls	r2, r3, #5
 8005308:	69bb      	ldr	r3, [r7, #24]
 800530a:	4413      	add	r3, r2
 800530c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005310:	461a      	mov	r2, r3
 8005312:	68bb      	ldr	r3, [r7, #8]
 8005314:	6013      	str	r3, [r2, #0]

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8005316:	683b      	ldr	r3, [r7, #0]
 8005318:	78db      	ldrb	r3, [r3, #3]
 800531a:	2b00      	cmp	r3, #0
 800531c:	d147      	bne.n	80053ae <USB_HC_StartXfer+0x1e2>
 800531e:	683b      	ldr	r3, [r7, #0]
 8005320:	695b      	ldr	r3, [r3, #20]
 8005322:	2b00      	cmp	r3, #0
 8005324:	d043      	beq.n	80053ae <USB_HC_StartXfer+0x1e2>
  {
    switch (hc->ep_type)
 8005326:	683b      	ldr	r3, [r7, #0]
 8005328:	79db      	ldrb	r3, [r3, #7]
 800532a:	2b03      	cmp	r3, #3
 800532c:	d830      	bhi.n	8005390 <USB_HC_StartXfer+0x1c4>
 800532e:	a201      	add	r2, pc, #4	; (adr r2, 8005334 <USB_HC_StartXfer+0x168>)
 8005330:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005334:	08005345 	.word	0x08005345
 8005338:	08005369 	.word	0x08005369
 800533c:	08005345 	.word	0x08005345
 8005340:	08005369 	.word	0x08005369
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005344:	683b      	ldr	r3, [r7, #0]
 8005346:	695b      	ldr	r3, [r3, #20]
 8005348:	3303      	adds	r3, #3
 800534a:	089b      	lsrs	r3, r3, #2
 800534c:	81fb      	strh	r3, [r7, #14]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800534e:	89fa      	ldrh	r2, [r7, #14]
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005354:	b29b      	uxth	r3, r3
 8005356:	429a      	cmp	r2, r3
 8005358:	d91c      	bls.n	8005394 <USB_HC_StartXfer+0x1c8>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	699b      	ldr	r3, [r3, #24]
 800535e:	f043 0220 	orr.w	r2, r3, #32
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	619a      	str	r2, [r3, #24]
        }
        break;
 8005366:	e015      	b.n	8005394 <USB_HC_StartXfer+0x1c8>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005368:	683b      	ldr	r3, [r7, #0]
 800536a:	695b      	ldr	r3, [r3, #20]
 800536c:	3303      	adds	r3, #3
 800536e:	089b      	lsrs	r3, r3, #2
 8005370:	81fb      	strh	r3, [r7, #14]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8005372:	89fa      	ldrh	r2, [r7, #14]
 8005374:	69bb      	ldr	r3, [r7, #24]
 8005376:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800537a:	691b      	ldr	r3, [r3, #16]
 800537c:	b29b      	uxth	r3, r3
 800537e:	429a      	cmp	r2, r3
 8005380:	d90a      	bls.n	8005398 <USB_HC_StartXfer+0x1cc>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	699b      	ldr	r3, [r3, #24]
 8005386:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	619a      	str	r2, [r3, #24]
        }
        break;
 800538e:	e003      	b.n	8005398 <USB_HC_StartXfer+0x1cc>

      default:
        break;
 8005390:	bf00      	nop
 8005392:	e002      	b.n	800539a <USB_HC_StartXfer+0x1ce>
        break;
 8005394:	bf00      	nop
 8005396:	e000      	b.n	800539a <USB_HC_StartXfer+0x1ce>
        break;
 8005398:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len);
 800539a:	683b      	ldr	r3, [r7, #0]
 800539c:	68d9      	ldr	r1, [r3, #12]
 800539e:	683b      	ldr	r3, [r7, #0]
 80053a0:	785a      	ldrb	r2, [r3, #1]
 80053a2:	683b      	ldr	r3, [r7, #0]
 80053a4:	695b      	ldr	r3, [r3, #20]
 80053a6:	b29b      	uxth	r3, r3
 80053a8:	6878      	ldr	r0, [r7, #4]
 80053aa:	f7ff fbfd 	bl	8004ba8 <USB_WritePacket>
  }

  return HAL_OK;
 80053ae:	2300      	movs	r3, #0
}
 80053b0:	4618      	mov	r0, r3
 80053b2:	3720      	adds	r7, #32
 80053b4:	46bd      	mov	sp, r7
 80053b6:	bd80      	pop	{r7, pc}
 80053b8:	1ff80000 	.word	0x1ff80000

080053bc <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80053bc:	b480      	push	{r7}
 80053be:	b085      	sub	sp, #20
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80053ce:	695b      	ldr	r3, [r3, #20]
 80053d0:	b29b      	uxth	r3, r3
}
 80053d2:	4618      	mov	r0, r3
 80053d4:	3714      	adds	r7, #20
 80053d6:	46bd      	mov	sp, r7
 80053d8:	bc80      	pop	{r7}
 80053da:	4770      	bx	lr

080053dc <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80053dc:	b480      	push	{r7}
 80053de:	b089      	sub	sp, #36	; 0x24
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	6078      	str	r0, [r7, #4]
 80053e4:	460b      	mov	r3, r1
 80053e6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	61bb      	str	r3, [r7, #24]
  uint32_t hcnum = (uint32_t)hc_num;
 80053ec:	78fb      	ldrb	r3, [r7, #3]
 80053ee:	617b      	str	r3, [r7, #20]
  uint32_t count = 0U;
 80053f0:	2300      	movs	r3, #0
 80053f2:	61fb      	str	r3, [r7, #28]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80053f4:	697b      	ldr	r3, [r7, #20]
 80053f6:	015a      	lsls	r2, r3, #5
 80053f8:	69bb      	ldr	r3, [r7, #24]
 80053fa:	4413      	add	r3, r2
 80053fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	0c9b      	lsrs	r3, r3, #18
 8005404:	f003 0303 	and.w	r3, r3, #3
 8005408:	613b      	str	r3, [r7, #16]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 800540a:	697b      	ldr	r3, [r7, #20]
 800540c:	015a      	lsls	r2, r3, #5
 800540e:	69bb      	ldr	r3, [r7, #24]
 8005410:	4413      	add	r3, r2
 8005412:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	0fdb      	lsrs	r3, r3, #31
 800541a:	f003 0301 	and.w	r3, r3, #1
 800541e:	60fb      	str	r3, [r7, #12]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	689b      	ldr	r3, [r3, #8]
 8005424:	f003 0320 	and.w	r3, r3, #32
 8005428:	2b20      	cmp	r3, #32
 800542a:	d104      	bne.n	8005436 <USB_HC_Halt+0x5a>
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	2b00      	cmp	r3, #0
 8005430:	d101      	bne.n	8005436 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8005432:	2300      	movs	r3, #0
 8005434:	e0e8      	b.n	8005608 <USB_HC_Halt+0x22c>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8005436:	693b      	ldr	r3, [r7, #16]
 8005438:	2b00      	cmp	r3, #0
 800543a:	d002      	beq.n	8005442 <USB_HC_Halt+0x66>
 800543c:	693b      	ldr	r3, [r7, #16]
 800543e:	2b02      	cmp	r3, #2
 8005440:	d173      	bne.n	800552a <USB_HC_Halt+0x14e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005442:	697b      	ldr	r3, [r7, #20]
 8005444:	015a      	lsls	r2, r3, #5
 8005446:	69bb      	ldr	r3, [r7, #24]
 8005448:	4413      	add	r3, r2
 800544a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	697a      	ldr	r2, [r7, #20]
 8005452:	0151      	lsls	r1, r2, #5
 8005454:	69ba      	ldr	r2, [r7, #24]
 8005456:	440a      	add	r2, r1
 8005458:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800545c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005460:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	689b      	ldr	r3, [r3, #8]
 8005466:	f003 0320 	and.w	r3, r3, #32
 800546a:	2b00      	cmp	r3, #0
 800546c:	f040 80cb 	bne.w	8005606 <USB_HC_Halt+0x22a>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005474:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005478:	2b00      	cmp	r3, #0
 800547a:	d143      	bne.n	8005504 <USB_HC_Halt+0x128>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800547c:	697b      	ldr	r3, [r7, #20]
 800547e:	015a      	lsls	r2, r3, #5
 8005480:	69bb      	ldr	r3, [r7, #24]
 8005482:	4413      	add	r3, r2
 8005484:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	697a      	ldr	r2, [r7, #20]
 800548c:	0151      	lsls	r1, r2, #5
 800548e:	69ba      	ldr	r2, [r7, #24]
 8005490:	440a      	add	r2, r1
 8005492:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005496:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800549a:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800549c:	697b      	ldr	r3, [r7, #20]
 800549e:	015a      	lsls	r2, r3, #5
 80054a0:	69bb      	ldr	r3, [r7, #24]
 80054a2:	4413      	add	r3, r2
 80054a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	697a      	ldr	r2, [r7, #20]
 80054ac:	0151      	lsls	r1, r2, #5
 80054ae:	69ba      	ldr	r2, [r7, #24]
 80054b0:	440a      	add	r2, r1
 80054b2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80054b6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80054ba:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 80054bc:	697b      	ldr	r3, [r7, #20]
 80054be:	015a      	lsls	r2, r3, #5
 80054c0:	69bb      	ldr	r3, [r7, #24]
 80054c2:	4413      	add	r3, r2
 80054c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	697a      	ldr	r2, [r7, #20]
 80054cc:	0151      	lsls	r1, r2, #5
 80054ce:	69ba      	ldr	r2, [r7, #24]
 80054d0:	440a      	add	r2, r1
 80054d2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80054d6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80054da:	6013      	str	r3, [r2, #0]
        do
        {
          if (++count > 1000U)
 80054dc:	69fb      	ldr	r3, [r7, #28]
 80054de:	3301      	adds	r3, #1
 80054e0:	61fb      	str	r3, [r7, #28]
 80054e2:	69fb      	ldr	r3, [r7, #28]
 80054e4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80054e8:	d81d      	bhi.n	8005526 <USB_HC_Halt+0x14a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80054ea:	697b      	ldr	r3, [r7, #20]
 80054ec:	015a      	lsls	r2, r3, #5
 80054ee:	69bb      	ldr	r3, [r7, #24]
 80054f0:	4413      	add	r3, r2
 80054f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80054fc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005500:	d0ec      	beq.n	80054dc <USB_HC_Halt+0x100>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005502:	e080      	b.n	8005606 <USB_HC_Halt+0x22a>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005504:	697b      	ldr	r3, [r7, #20]
 8005506:	015a      	lsls	r2, r3, #5
 8005508:	69bb      	ldr	r3, [r7, #24]
 800550a:	4413      	add	r3, r2
 800550c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	697a      	ldr	r2, [r7, #20]
 8005514:	0151      	lsls	r1, r2, #5
 8005516:	69ba      	ldr	r2, [r7, #24]
 8005518:	440a      	add	r2, r1
 800551a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800551e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005522:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005524:	e06f      	b.n	8005606 <USB_HC_Halt+0x22a>
            break;
 8005526:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005528:	e06d      	b.n	8005606 <USB_HC_Halt+0x22a>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800552a:	697b      	ldr	r3, [r7, #20]
 800552c:	015a      	lsls	r2, r3, #5
 800552e:	69bb      	ldr	r3, [r7, #24]
 8005530:	4413      	add	r3, r2
 8005532:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	697a      	ldr	r2, [r7, #20]
 800553a:	0151      	lsls	r1, r2, #5
 800553c:	69ba      	ldr	r2, [r7, #24]
 800553e:	440a      	add	r2, r1
 8005540:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005544:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005548:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800554a:	69bb      	ldr	r3, [r7, #24]
 800554c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005550:	691b      	ldr	r3, [r3, #16]
 8005552:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005556:	2b00      	cmp	r3, #0
 8005558:	d143      	bne.n	80055e2 <USB_HC_Halt+0x206>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800555a:	697b      	ldr	r3, [r7, #20]
 800555c:	015a      	lsls	r2, r3, #5
 800555e:	69bb      	ldr	r3, [r7, #24]
 8005560:	4413      	add	r3, r2
 8005562:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	697a      	ldr	r2, [r7, #20]
 800556a:	0151      	lsls	r1, r2, #5
 800556c:	69ba      	ldr	r2, [r7, #24]
 800556e:	440a      	add	r2, r1
 8005570:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005574:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005578:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800557a:	697b      	ldr	r3, [r7, #20]
 800557c:	015a      	lsls	r2, r3, #5
 800557e:	69bb      	ldr	r3, [r7, #24]
 8005580:	4413      	add	r3, r2
 8005582:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	697a      	ldr	r2, [r7, #20]
 800558a:	0151      	lsls	r1, r2, #5
 800558c:	69ba      	ldr	r2, [r7, #24]
 800558e:	440a      	add	r2, r1
 8005590:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005594:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005598:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800559a:	697b      	ldr	r3, [r7, #20]
 800559c:	015a      	lsls	r2, r3, #5
 800559e:	69bb      	ldr	r3, [r7, #24]
 80055a0:	4413      	add	r3, r2
 80055a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	697a      	ldr	r2, [r7, #20]
 80055aa:	0151      	lsls	r1, r2, #5
 80055ac:	69ba      	ldr	r2, [r7, #24]
 80055ae:	440a      	add	r2, r1
 80055b0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80055b4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80055b8:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 80055ba:	69fb      	ldr	r3, [r7, #28]
 80055bc:	3301      	adds	r3, #1
 80055be:	61fb      	str	r3, [r7, #28]
 80055c0:	69fb      	ldr	r3, [r7, #28]
 80055c2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80055c6:	d81d      	bhi.n	8005604 <USB_HC_Halt+0x228>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80055c8:	697b      	ldr	r3, [r7, #20]
 80055ca:	015a      	lsls	r2, r3, #5
 80055cc:	69bb      	ldr	r3, [r7, #24]
 80055ce:	4413      	add	r3, r2
 80055d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80055da:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80055de:	d0ec      	beq.n	80055ba <USB_HC_Halt+0x1de>
 80055e0:	e011      	b.n	8005606 <USB_HC_Halt+0x22a>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80055e2:	697b      	ldr	r3, [r7, #20]
 80055e4:	015a      	lsls	r2, r3, #5
 80055e6:	69bb      	ldr	r3, [r7, #24]
 80055e8:	4413      	add	r3, r2
 80055ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	697a      	ldr	r2, [r7, #20]
 80055f2:	0151      	lsls	r1, r2, #5
 80055f4:	69ba      	ldr	r2, [r7, #24]
 80055f6:	440a      	add	r2, r1
 80055f8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80055fc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005600:	6013      	str	r3, [r2, #0]
 8005602:	e000      	b.n	8005606 <USB_HC_Halt+0x22a>
          break;
 8005604:	bf00      	nop
    }
  }

  return HAL_OK;
 8005606:	2300      	movs	r3, #0
}
 8005608:	4618      	mov	r0, r3
 800560a:	3724      	adds	r7, #36	; 0x24
 800560c:	46bd      	mov	sp, r7
 800560e:	bc80      	pop	{r7}
 8005610:	4770      	bx	lr

08005612 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8005612:	b580      	push	{r7, lr}
 8005614:	b086      	sub	sp, #24
 8005616:	af00      	add	r7, sp, #0
 8005618:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 800561e:	2300      	movs	r3, #0
 8005620:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8005622:	6878      	ldr	r0, [r7, #4]
 8005624:	f7ff fa20 	bl	8004a68 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 8005628:	2110      	movs	r1, #16
 800562a:	6878      	ldr	r0, [r7, #4]
 800562c:	f7ff fa78 	bl	8004b20 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8005630:	6878      	ldr	r0, [r7, #4]
 8005632:	f7ff fa99 	bl	8004b68 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8005636:	2300      	movs	r3, #0
 8005638:	613b      	str	r3, [r7, #16]
 800563a:	e01f      	b.n	800567c <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 800563c:	693b      	ldr	r3, [r7, #16]
 800563e:	015a      	lsls	r2, r3, #5
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	4413      	add	r3, r2
 8005644:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800564c:	68bb      	ldr	r3, [r7, #8]
 800564e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005652:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8005654:	68bb      	ldr	r3, [r7, #8]
 8005656:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800565a:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800565c:	68bb      	ldr	r3, [r7, #8]
 800565e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005662:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8005664:	693b      	ldr	r3, [r7, #16]
 8005666:	015a      	lsls	r2, r3, #5
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	4413      	add	r3, r2
 800566c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005670:	461a      	mov	r2, r3
 8005672:	68bb      	ldr	r3, [r7, #8]
 8005674:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8005676:	693b      	ldr	r3, [r7, #16]
 8005678:	3301      	adds	r3, #1
 800567a:	613b      	str	r3, [r7, #16]
 800567c:	693b      	ldr	r3, [r7, #16]
 800567e:	2b0f      	cmp	r3, #15
 8005680:	d9dc      	bls.n	800563c <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8005682:	2300      	movs	r3, #0
 8005684:	613b      	str	r3, [r7, #16]
 8005686:	e034      	b.n	80056f2 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 8005688:	693b      	ldr	r3, [r7, #16]
 800568a:	015a      	lsls	r2, r3, #5
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	4413      	add	r3, r2
 8005690:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 8005698:	68bb      	ldr	r3, [r7, #8]
 800569a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800569e:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 80056a0:	68bb      	ldr	r3, [r7, #8]
 80056a2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80056a6:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80056a8:	68bb      	ldr	r3, [r7, #8]
 80056aa:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80056ae:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 80056b0:	693b      	ldr	r3, [r7, #16]
 80056b2:	015a      	lsls	r2, r3, #5
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	4413      	add	r3, r2
 80056b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80056bc:	461a      	mov	r2, r3
 80056be:	68bb      	ldr	r3, [r7, #8]
 80056c0:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 80056c2:	697b      	ldr	r3, [r7, #20]
 80056c4:	3301      	adds	r3, #1
 80056c6:	617b      	str	r3, [r7, #20]
 80056c8:	697b      	ldr	r3, [r7, #20]
 80056ca:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80056ce:	d80c      	bhi.n	80056ea <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80056d0:	693b      	ldr	r3, [r7, #16]
 80056d2:	015a      	lsls	r2, r3, #5
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	4413      	add	r3, r2
 80056d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80056e2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80056e6:	d0ec      	beq.n	80056c2 <USB_StopHost+0xb0>
 80056e8:	e000      	b.n	80056ec <USB_StopHost+0xda>
        break;
 80056ea:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 80056ec:	693b      	ldr	r3, [r7, #16]
 80056ee:	3301      	adds	r3, #1
 80056f0:	613b      	str	r3, [r7, #16]
 80056f2:	693b      	ldr	r3, [r7, #16]
 80056f4:	2b0f      	cmp	r3, #15
 80056f6:	d9c7      	bls.n	8005688 <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80056fe:	461a      	mov	r2, r3
 8005700:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005704:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800570c:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 800570e:	2300      	movs	r3, #0
}
 8005710:	4618      	mov	r0, r3
 8005712:	3718      	adds	r7, #24
 8005714:	46bd      	mov	sp, r7
 8005716:	bd80      	pop	{r7, pc}

08005718 <USBH_AUDIO_InterfaceInit>:
  *         The function init the Audio class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8005718:	b590      	push	{r4, r7, lr}
 800571a:	b08b      	sub	sp, #44	; 0x2c
 800571c:	af04      	add	r7, sp, #16
 800571e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef out_status, in_status;
  AUDIO_HandleTypeDef *AUDIO_Handle;
  uint8_t  interface, index;
  uint16_t ep_size_out = 0U;
 8005720:	2300      	movs	r3, #0
 8005722:	82bb      	strh	r3, [r7, #20]
  uint16_t ep_size_in = 0U;
 8005724:	2300      	movs	r3, #0
 8005726:	827b      	strh	r3, [r7, #18]

  interface = USBH_FindInterface(phost, AC_CLASS, USB_SUBCLASS_AUDIOCONTROL, 0x00U);
 8005728:	2300      	movs	r3, #0
 800572a:	2201      	movs	r2, #1
 800572c:	2101      	movs	r1, #1
 800572e:	6878      	ldr	r0, [r7, #4]
 8005730:	f006 fd96 	bl	800c260 <USBH_FindInterface>
 8005734:	4603      	mov	r3, r0
 8005736:	747b      	strb	r3, [r7, #17]

  if (interface == 0xFFU) /* Not Valid Interface */
 8005738:	7c7b      	ldrb	r3, [r7, #17]
 800573a:	2bff      	cmp	r3, #255	; 0xff
 800573c:	d111      	bne.n	8005762 <USBH_AUDIO_InterfaceInit+0x4a>
  {
    USBH_DbgLog("Cannot Find the interface for %s class.", phost->pActiveClass->Name);
 800573e:	482e      	ldr	r0, [pc, #184]	; (80057f8 <USBH_AUDIO_InterfaceInit+0xe0>)
 8005740:	f009 f830 	bl	800e7a4 <iprintf>
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800574a:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	4619      	mov	r1, r3
 8005752:	482a      	ldr	r0, [pc, #168]	; (80057fc <USBH_AUDIO_InterfaceInit+0xe4>)
 8005754:	f009 f826 	bl	800e7a4 <iprintf>
 8005758:	200a      	movs	r0, #10
 800575a:	f009 f83b 	bl	800e7d4 <putchar>
    return USBH_FAIL;
 800575e:	2302      	movs	r3, #2
 8005760:	e1ca      	b.n	8005af8 <USBH_AUDIO_InterfaceInit+0x3e0>
  }

  phost->pActiveClass->pData = (AUDIO_HandleTypeDef *)USBH_malloc(sizeof(AUDIO_HandleTypeDef));
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005768:	f8d3 411c 	ldr.w	r4, [r3, #284]	; 0x11c
 800576c:	f44f 70d2 	mov.w	r0, #420	; 0x1a4
 8005770:	f008 fc28 	bl	800dfc4 <malloc>
 8005774:	4603      	mov	r3, r0
 8005776:	61e3      	str	r3, [r4, #28]
  AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800577e:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 8005782:	69db      	ldr	r3, [r3, #28]
 8005784:	60fb      	str	r3, [r7, #12]

  if (AUDIO_Handle == NULL)
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	2b00      	cmp	r3, #0
 800578a:	d10a      	bne.n	80057a2 <USBH_AUDIO_InterfaceInit+0x8a>
  {
    USBH_DbgLog("Cannot allocate memory for AUDIO Handle");
 800578c:	481a      	ldr	r0, [pc, #104]	; (80057f8 <USBH_AUDIO_InterfaceInit+0xe0>)
 800578e:	f009 f809 	bl	800e7a4 <iprintf>
 8005792:	481b      	ldr	r0, [pc, #108]	; (8005800 <USBH_AUDIO_InterfaceInit+0xe8>)
 8005794:	f009 f806 	bl	800e7a4 <iprintf>
 8005798:	200a      	movs	r0, #10
 800579a:	f009 f81b 	bl	800e7d4 <putchar>
    return USBH_FAIL;
 800579e:	2302      	movs	r3, #2
 80057a0:	e1aa      	b.n	8005af8 <USBH_AUDIO_InterfaceInit+0x3e0>
  }

  /* Initialize audio handler */
  USBH_memset(AUDIO_Handle, 0, sizeof(AUDIO_HandleTypeDef));
 80057a2:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
 80057a6:	2100      	movs	r1, #0
 80057a8:	68f8      	ldr	r0, [r7, #12]
 80057aa:	f008 fc29 	bl	800e000 <memset>

  /* 1st Step:  Find Audio Interfaces */
  out_status = USBH_AUDIO_FindAudioStreamingIN(phost);
 80057ae:	6878      	ldr	r0, [r7, #4]
 80057b0:	f000 fc20 	bl	8005ff4 <USBH_AUDIO_FindAudioStreamingIN>
 80057b4:	4603      	mov	r3, r0
 80057b6:	72fb      	strb	r3, [r7, #11]

  in_status = USBH_AUDIO_FindAudioStreamingOUT(phost);
 80057b8:	6878      	ldr	r0, [r7, #4]
 80057ba:	f000 fce4 	bl	8006186 <USBH_AUDIO_FindAudioStreamingOUT>
 80057be:	4603      	mov	r3, r0
 80057c0:	72bb      	strb	r3, [r7, #10]

  if ((out_status == USBH_FAIL) && (in_status == USBH_FAIL))
 80057c2:	7afb      	ldrb	r3, [r7, #11]
 80057c4:	2b02      	cmp	r3, #2
 80057c6:	d114      	bne.n	80057f2 <USBH_AUDIO_InterfaceInit+0xda>
 80057c8:	7abb      	ldrb	r3, [r7, #10]
 80057ca:	2b02      	cmp	r3, #2
 80057cc:	d111      	bne.n	80057f2 <USBH_AUDIO_InterfaceInit+0xda>
  {
    USBH_DbgLog("%s class configuration not supported.", phost->pActiveClass->Name);
 80057ce:	480a      	ldr	r0, [pc, #40]	; (80057f8 <USBH_AUDIO_InterfaceInit+0xe0>)
 80057d0:	f008 ffe8 	bl	800e7a4 <iprintf>
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80057da:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	4619      	mov	r1, r3
 80057e2:	4808      	ldr	r0, [pc, #32]	; (8005804 <USBH_AUDIO_InterfaceInit+0xec>)
 80057e4:	f008 ffde 	bl	800e7a4 <iprintf>
 80057e8:	200a      	movs	r0, #10
 80057ea:	f008 fff3 	bl	800e7d4 <putchar>
    return USBH_FAIL;
 80057ee:	2302      	movs	r3, #2
 80057f0:	e182      	b.n	8005af8 <USBH_AUDIO_InterfaceInit+0x3e0>
  }

  /* 2nd Step:  Select Audio Streaming Interfaces with largest endpoint size : default behavior */
  for (index = 0U; index < AUDIO_MAX_AUDIO_STD_INTERFACE; index ++)
 80057f2:	2300      	movs	r3, #0
 80057f4:	75fb      	strb	r3, [r7, #23]
 80057f6:	e0ce      	b.n	8005996 <USBH_AUDIO_InterfaceInit+0x27e>
 80057f8:	0800f498 	.word	0x0800f498
 80057fc:	0800f4a4 	.word	0x0800f4a4
 8005800:	0800f4cc 	.word	0x0800f4cc
 8005804:	0800f4f4 	.word	0x0800f4f4
  {
    if (AUDIO_Handle->stream_out[index].valid == 1U)
 8005808:	7dfa      	ldrb	r2, [r7, #23]
 800580a:	68f9      	ldr	r1, [r7, #12]
 800580c:	4613      	mov	r3, r2
 800580e:	009b      	lsls	r3, r3, #2
 8005810:	4413      	add	r3, r2
 8005812:	005b      	lsls	r3, r3, #1
 8005814:	440b      	add	r3, r1
 8005816:	333e      	adds	r3, #62	; 0x3e
 8005818:	781b      	ldrb	r3, [r3, #0]
 800581a:	2b01      	cmp	r3, #1
 800581c:	d156      	bne.n	80058cc <USBH_AUDIO_InterfaceInit+0x1b4>
    {
      if (ep_size_out < AUDIO_Handle->stream_out[index].EpSize)
 800581e:	7dfa      	ldrb	r2, [r7, #23]
 8005820:	68f9      	ldr	r1, [r7, #12]
 8005822:	4613      	mov	r3, r2
 8005824:	009b      	lsls	r3, r3, #2
 8005826:	4413      	add	r3, r2
 8005828:	005b      	lsls	r3, r3, #1
 800582a:	440b      	add	r3, r1
 800582c:	333a      	adds	r3, #58	; 0x3a
 800582e:	881b      	ldrh	r3, [r3, #0]
 8005830:	8aba      	ldrh	r2, [r7, #20]
 8005832:	429a      	cmp	r2, r3
 8005834:	d24a      	bcs.n	80058cc <USBH_AUDIO_InterfaceInit+0x1b4>
      {
        ep_size_out = AUDIO_Handle->stream_out[index].EpSize;
 8005836:	7dfa      	ldrb	r2, [r7, #23]
 8005838:	68f9      	ldr	r1, [r7, #12]
 800583a:	4613      	mov	r3, r2
 800583c:	009b      	lsls	r3, r3, #2
 800583e:	4413      	add	r3, r2
 8005840:	005b      	lsls	r3, r3, #1
 8005842:	440b      	add	r3, r1
 8005844:	333a      	adds	r3, #58	; 0x3a
 8005846:	881b      	ldrh	r3, [r3, #0]
 8005848:	82bb      	strh	r3, [r7, #20]
        AUDIO_Handle->headphone.interface = AUDIO_Handle->stream_out[index].interface;
 800584a:	7dfa      	ldrb	r2, [r7, #23]
 800584c:	68f9      	ldr	r1, [r7, #12]
 800584e:	4613      	mov	r3, r2
 8005850:	009b      	lsls	r3, r3, #2
 8005852:	4413      	add	r3, r2
 8005854:	005b      	lsls	r3, r3, #1
 8005856:	440b      	add	r3, r1
 8005858:	333d      	adds	r3, #61	; 0x3d
 800585a:	781a      	ldrb	r2, [r3, #0]
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
        AUDIO_Handle->headphone.AltSettings = AUDIO_Handle->stream_out[index].AltSettings;
 8005862:	7dfa      	ldrb	r2, [r7, #23]
 8005864:	68f9      	ldr	r1, [r7, #12]
 8005866:	4613      	mov	r3, r2
 8005868:	009b      	lsls	r3, r3, #2
 800586a:	4413      	add	r3, r2
 800586c:	005b      	lsls	r3, r3, #1
 800586e:	440b      	add	r3, r1
 8005870:	333c      	adds	r3, #60	; 0x3c
 8005872:	781a      	ldrb	r2, [r3, #0]
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	f883 20f9 	strb.w	r2, [r3, #249]	; 0xf9
        AUDIO_Handle->headphone.Ep = AUDIO_Handle->stream_out[index].Ep;
 800587a:	7dfa      	ldrb	r2, [r7, #23]
 800587c:	68f9      	ldr	r1, [r7, #12]
 800587e:	4613      	mov	r3, r2
 8005880:	009b      	lsls	r3, r3, #2
 8005882:	4413      	add	r3, r2
 8005884:	005b      	lsls	r3, r3, #1
 8005886:	440b      	add	r3, r1
 8005888:	3338      	adds	r3, #56	; 0x38
 800588a:	781a      	ldrb	r2, [r3, #0]
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	f883 20f4 	strb.w	r2, [r3, #244]	; 0xf4
        AUDIO_Handle->headphone.EpSize = AUDIO_Handle->stream_out[index].EpSize;
 8005892:	7dfa      	ldrb	r2, [r7, #23]
 8005894:	68f9      	ldr	r1, [r7, #12]
 8005896:	4613      	mov	r3, r2
 8005898:	009b      	lsls	r3, r3, #2
 800589a:	4413      	add	r3, r2
 800589c:	005b      	lsls	r3, r3, #1
 800589e:	440b      	add	r3, r1
 80058a0:	333a      	adds	r3, #58	; 0x3a
 80058a2:	881a      	ldrh	r2, [r3, #0]
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	f8a3 20f6 	strh.w	r2, [r3, #246]	; 0xf6
        AUDIO_Handle->headphone.Poll = (uint8_t)AUDIO_Handle->stream_out[index].Poll;
 80058aa:	7dfa      	ldrb	r2, [r7, #23]
 80058ac:	68f9      	ldr	r1, [r7, #12]
 80058ae:	4613      	mov	r3, r2
 80058b0:	009b      	lsls	r3, r3, #2
 80058b2:	4413      	add	r3, r2
 80058b4:	005b      	lsls	r3, r3, #1
 80058b6:	440b      	add	r3, r1
 80058b8:	3340      	adds	r3, #64	; 0x40
 80058ba:	881b      	ldrh	r3, [r3, #0]
 80058bc:	b2da      	uxtb	r2, r3
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	f883 20fc 	strb.w	r2, [r3, #252]	; 0xfc
        AUDIO_Handle->headphone.supported = 1U;
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	2201      	movs	r2, #1
 80058c8:	f883 20fa 	strb.w	r2, [r3, #250]	; 0xfa
      }
    }

    if (AUDIO_Handle->stream_in[index].valid == 1U)
 80058cc:	7dfa      	ldrb	r2, [r7, #23]
 80058ce:	68f9      	ldr	r1, [r7, #12]
 80058d0:	4613      	mov	r3, r2
 80058d2:	009b      	lsls	r3, r3, #2
 80058d4:	4413      	add	r3, r2
 80058d6:	005b      	lsls	r3, r3, #1
 80058d8:	440b      	add	r3, r1
 80058da:	330c      	adds	r3, #12
 80058dc:	781b      	ldrb	r3, [r3, #0]
 80058de:	2b01      	cmp	r3, #1
 80058e0:	d156      	bne.n	8005990 <USBH_AUDIO_InterfaceInit+0x278>
    {
      if (ep_size_in < AUDIO_Handle->stream_in[index].EpSize)
 80058e2:	7dfa      	ldrb	r2, [r7, #23]
 80058e4:	68f9      	ldr	r1, [r7, #12]
 80058e6:	4613      	mov	r3, r2
 80058e8:	009b      	lsls	r3, r3, #2
 80058ea:	4413      	add	r3, r2
 80058ec:	005b      	lsls	r3, r3, #1
 80058ee:	440b      	add	r3, r1
 80058f0:	3308      	adds	r3, #8
 80058f2:	881b      	ldrh	r3, [r3, #0]
 80058f4:	8a7a      	ldrh	r2, [r7, #18]
 80058f6:	429a      	cmp	r2, r3
 80058f8:	d24a      	bcs.n	8005990 <USBH_AUDIO_InterfaceInit+0x278>
      {
        ep_size_in = AUDIO_Handle->stream_in[index].EpSize;
 80058fa:	7dfa      	ldrb	r2, [r7, #23]
 80058fc:	68f9      	ldr	r1, [r7, #12]
 80058fe:	4613      	mov	r3, r2
 8005900:	009b      	lsls	r3, r3, #2
 8005902:	4413      	add	r3, r2
 8005904:	005b      	lsls	r3, r3, #1
 8005906:	440b      	add	r3, r1
 8005908:	3308      	adds	r3, #8
 800590a:	881b      	ldrh	r3, [r3, #0]
 800590c:	827b      	strh	r3, [r7, #18]
        AUDIO_Handle->microphone.interface = AUDIO_Handle->stream_in[index].interface;
 800590e:	7dfa      	ldrb	r2, [r7, #23]
 8005910:	68f9      	ldr	r1, [r7, #12]
 8005912:	4613      	mov	r3, r2
 8005914:	009b      	lsls	r3, r3, #2
 8005916:	4413      	add	r3, r2
 8005918:	005b      	lsls	r3, r3, #1
 800591a:	440b      	add	r3, r1
 800591c:	330b      	adds	r3, #11
 800591e:	781a      	ldrb	r2, [r3, #0]
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	f883 2140 	strb.w	r2, [r3, #320]	; 0x140
        AUDIO_Handle->microphone.AltSettings = AUDIO_Handle->stream_in[index].AltSettings;
 8005926:	7dfa      	ldrb	r2, [r7, #23]
 8005928:	68f9      	ldr	r1, [r7, #12]
 800592a:	4613      	mov	r3, r2
 800592c:	009b      	lsls	r3, r3, #2
 800592e:	4413      	add	r3, r2
 8005930:	005b      	lsls	r3, r3, #1
 8005932:	440b      	add	r3, r1
 8005934:	330a      	adds	r3, #10
 8005936:	781a      	ldrb	r2, [r3, #0]
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	f883 2141 	strb.w	r2, [r3, #321]	; 0x141
        AUDIO_Handle->microphone.Ep = AUDIO_Handle->stream_in[index].Ep;
 800593e:	7dfa      	ldrb	r2, [r7, #23]
 8005940:	68f9      	ldr	r1, [r7, #12]
 8005942:	4613      	mov	r3, r2
 8005944:	009b      	lsls	r3, r3, #2
 8005946:	4413      	add	r3, r2
 8005948:	005b      	lsls	r3, r3, #1
 800594a:	440b      	add	r3, r1
 800594c:	3306      	adds	r3, #6
 800594e:	781a      	ldrb	r2, [r3, #0]
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	f883 213c 	strb.w	r2, [r3, #316]	; 0x13c
        AUDIO_Handle->microphone.EpSize = AUDIO_Handle->stream_in[index].EpSize;
 8005956:	7dfa      	ldrb	r2, [r7, #23]
 8005958:	68f9      	ldr	r1, [r7, #12]
 800595a:	4613      	mov	r3, r2
 800595c:	009b      	lsls	r3, r3, #2
 800595e:	4413      	add	r3, r2
 8005960:	005b      	lsls	r3, r3, #1
 8005962:	440b      	add	r3, r1
 8005964:	3308      	adds	r3, #8
 8005966:	881a      	ldrh	r2, [r3, #0]
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	f8a3 213e 	strh.w	r2, [r3, #318]	; 0x13e
        AUDIO_Handle->microphone.Poll = (uint8_t)AUDIO_Handle->stream_out[index].Poll;
 800596e:	7dfa      	ldrb	r2, [r7, #23]
 8005970:	68f9      	ldr	r1, [r7, #12]
 8005972:	4613      	mov	r3, r2
 8005974:	009b      	lsls	r3, r3, #2
 8005976:	4413      	add	r3, r2
 8005978:	005b      	lsls	r3, r3, #1
 800597a:	440b      	add	r3, r1
 800597c:	3340      	adds	r3, #64	; 0x40
 800597e:	881b      	ldrh	r3, [r3, #0]
 8005980:	b2da      	uxtb	r2, r3
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	f883 2144 	strb.w	r2, [r3, #324]	; 0x144
        AUDIO_Handle->microphone.supported = 1U;
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	2201      	movs	r2, #1
 800598c:	f883 2142 	strb.w	r2, [r3, #322]	; 0x142
  for (index = 0U; index < AUDIO_MAX_AUDIO_STD_INTERFACE; index ++)
 8005990:	7dfb      	ldrb	r3, [r7, #23]
 8005992:	3301      	adds	r3, #1
 8005994:	75fb      	strb	r3, [r7, #23]
 8005996:	7dfb      	ldrb	r3, [r7, #23]
 8005998:	2b04      	cmp	r3, #4
 800599a:	f67f af35 	bls.w	8005808 <USBH_AUDIO_InterfaceInit+0xf0>
      }
    }
  }

  if (USBH_AUDIO_FindHIDControl(phost) == USBH_OK)
 800599e:	6878      	ldr	r0, [r7, #4]
 80059a0:	f000 fcba 	bl	8006318 <USBH_AUDIO_FindHIDControl>
 80059a4:	4603      	mov	r3, r0
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d103      	bne.n	80059b2 <USBH_AUDIO_InterfaceInit+0x29a>
  {
    AUDIO_Handle->control.supported = 1U;
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	2201      	movs	r2, #1
 80059ae:	f883 2189 	strb.w	r2, [r3, #393]	; 0x189
  }

  /* 3rd Step:  Find and Parse Audio interfaces */
  USBH_AUDIO_ParseCSDescriptors(phost);
 80059b2:	6878      	ldr	r0, [r7, #4]
 80059b4:	f000 fd3c 	bl	8006430 <USBH_AUDIO_ParseCSDescriptors>


  /* 4th Step:  Open the Audio streaming pipes*/
  if (AUDIO_Handle->headphone.supported == 1U)
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 80059be:	2b01      	cmp	r3, #1
 80059c0:	d12e      	bne.n	8005a20 <USBH_AUDIO_InterfaceInit+0x308>
  {
    USBH_AUDIO_BuildHeadphonePath(phost);
 80059c2:	6878      	ldr	r0, [r7, #4]
 80059c4:	f000 ff98 	bl	80068f8 <USBH_AUDIO_BuildHeadphonePath>

    AUDIO_Handle->headphone.Pipe  = USBH_AllocPipe(phost, AUDIO_Handle->headphone.Ep);
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	f893 30f4 	ldrb.w	r3, [r3, #244]	; 0xf4
 80059ce:	4619      	mov	r1, r3
 80059d0:	6878      	ldr	r0, [r7, #4]
 80059d2:	f007 ff10 	bl	800d7f6 <USBH_AllocPipe>
 80059d6:	4603      	mov	r3, r0
 80059d8:	461a      	mov	r2, r3
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	f883 20fb 	strb.w	r2, [r3, #251]	; 0xfb

    /* Open pipe for IN endpoint */
    USBH_OpenPipe(phost,
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	f893 10fb 	ldrb.w	r1, [r3, #251]	; 0xfb
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	f893 00f4 	ldrb.w	r0, [r3, #244]	; 0xf4
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	f893 491c 	ldrb.w	r4, [r3, #2332]	; 0x91c
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	f893 391d 	ldrb.w	r3, [r3, #2333]	; 0x91d
 80059f8:	68fa      	ldr	r2, [r7, #12]
 80059fa:	f8b2 20f6 	ldrh.w	r2, [r2, #246]	; 0xf6
 80059fe:	9202      	str	r2, [sp, #8]
 8005a00:	2201      	movs	r2, #1
 8005a02:	9201      	str	r2, [sp, #4]
 8005a04:	9300      	str	r3, [sp, #0]
 8005a06:	4623      	mov	r3, r4
 8005a08:	4602      	mov	r2, r0
 8005a0a:	6878      	ldr	r0, [r7, #4]
 8005a0c:	f007 fec4 	bl	800d798 <USBH_OpenPipe>
                  phost->device.address,
                  phost->device.speed,
                  USB_EP_TYPE_ISOC,
                  AUDIO_Handle->headphone.EpSize);

    USBH_LL_SetToggle(phost,  AUDIO_Handle->headphone.Pipe, 0U);
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	f893 30fb 	ldrb.w	r3, [r3, #251]	; 0xfb
 8005a16:	2200      	movs	r2, #0
 8005a18:	4619      	mov	r1, r3
 8005a1a:	6878      	ldr	r0, [r7, #4]
 8005a1c:	f008 fa0b 	bl	800de36 <USBH_LL_SetToggle>

  }

  if (AUDIO_Handle->microphone.supported == 1U)
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	f893 3142 	ldrb.w	r3, [r3, #322]	; 0x142
 8005a26:	2b01      	cmp	r3, #1
 8005a28:	d12e      	bne.n	8005a88 <USBH_AUDIO_InterfaceInit+0x370>
  {
    USBH_AUDIO_BuildMicrophonePath(phost);
 8005a2a:	6878      	ldr	r0, [r7, #4]
 8005a2c:	f000 feda 	bl	80067e4 <USBH_AUDIO_BuildMicrophonePath>
    AUDIO_Handle->microphone.Pipe  = USBH_AllocPipe(phost, AUDIO_Handle->microphone.Ep);
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 8005a36:	4619      	mov	r1, r3
 8005a38:	6878      	ldr	r0, [r7, #4]
 8005a3a:	f007 fedc 	bl	800d7f6 <USBH_AllocPipe>
 8005a3e:	4603      	mov	r3, r0
 8005a40:	461a      	mov	r2, r3
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	f883 2143 	strb.w	r2, [r3, #323]	; 0x143

    /* Open pipe for IN endpoint */
    USBH_OpenPipe(phost,
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	f893 1143 	ldrb.w	r1, [r3, #323]	; 0x143
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	f893 013c 	ldrb.w	r0, [r3, #316]	; 0x13c
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	f893 491c 	ldrb.w	r4, [r3, #2332]	; 0x91c
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	f893 391d 	ldrb.w	r3, [r3, #2333]	; 0x91d
 8005a60:	68fa      	ldr	r2, [r7, #12]
 8005a62:	f8b2 213e 	ldrh.w	r2, [r2, #318]	; 0x13e
 8005a66:	9202      	str	r2, [sp, #8]
 8005a68:	2201      	movs	r2, #1
 8005a6a:	9201      	str	r2, [sp, #4]
 8005a6c:	9300      	str	r3, [sp, #0]
 8005a6e:	4623      	mov	r3, r4
 8005a70:	4602      	mov	r2, r0
 8005a72:	6878      	ldr	r0, [r7, #4]
 8005a74:	f007 fe90 	bl	800d798 <USBH_OpenPipe>
                  phost->device.address,
                  phost->device.speed,
                  USB_EP_TYPE_ISOC,
                  AUDIO_Handle->microphone.EpSize);

    USBH_LL_SetToggle(phost,  AUDIO_Handle->microphone.Pipe, 0U);
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	f893 3143 	ldrb.w	r3, [r3, #323]	; 0x143
 8005a7e:	2200      	movs	r2, #0
 8005a80:	4619      	mov	r1, r3
 8005a82:	6878      	ldr	r0, [r7, #4]
 8005a84:	f008 f9d7 	bl	800de36 <USBH_LL_SetToggle>
  }

  if (AUDIO_Handle->control.supported == 1U)
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	f893 3189 	ldrb.w	r3, [r3, #393]	; 0x189
 8005a8e:	2b01      	cmp	r3, #1
 8005a90:	d12b      	bne.n	8005aea <USBH_AUDIO_InterfaceInit+0x3d2>
  {
    AUDIO_Handle->control.Pipe  = USBH_AllocPipe(phost, AUDIO_Handle->control.Ep);
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	f893 3184 	ldrb.w	r3, [r3, #388]	; 0x184
 8005a98:	4619      	mov	r1, r3
 8005a9a:	6878      	ldr	r0, [r7, #4]
 8005a9c:	f007 feab 	bl	800d7f6 <USBH_AllocPipe>
 8005aa0:	4603      	mov	r3, r0
 8005aa2:	461a      	mov	r2, r3
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	f883 218a 	strb.w	r2, [r3, #394]	; 0x18a

    /* Open pipe for IN endpoint */
    USBH_OpenPipe(phost,
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	f893 118a 	ldrb.w	r1, [r3, #394]	; 0x18a
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	f893 0184 	ldrb.w	r0, [r3, #388]	; 0x184
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	f893 491c 	ldrb.w	r4, [r3, #2332]	; 0x91c
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	f893 391d 	ldrb.w	r3, [r3, #2333]	; 0x91d
 8005ac2:	68fa      	ldr	r2, [r7, #12]
 8005ac4:	f8b2 2186 	ldrh.w	r2, [r2, #390]	; 0x186
 8005ac8:	9202      	str	r2, [sp, #8]
 8005aca:	2203      	movs	r2, #3
 8005acc:	9201      	str	r2, [sp, #4]
 8005ace:	9300      	str	r3, [sp, #0]
 8005ad0:	4623      	mov	r3, r4
 8005ad2:	4602      	mov	r2, r0
 8005ad4:	6878      	ldr	r0, [r7, #4]
 8005ad6:	f007 fe5f 	bl	800d798 <USBH_OpenPipe>
                  phost->device.address,
                  phost->device.speed,
                  USB_EP_TYPE_INTR,
                  AUDIO_Handle->control.EpSize);

    USBH_LL_SetToggle(phost,  AUDIO_Handle->control.Pipe, 0U);
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	f893 318a 	ldrb.w	r3, [r3, #394]	; 0x18a
 8005ae0:	2200      	movs	r2, #0
 8005ae2:	4619      	mov	r1, r3
 8005ae4:	6878      	ldr	r0, [r7, #4]
 8005ae6:	f008 f9a6 	bl	800de36 <USBH_LL_SetToggle>

  }

  AUDIO_Handle->req_state = AUDIO_REQ_INIT;
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	2201      	movs	r2, #1
 8005aee:	701a      	strb	r2, [r3, #0]
  AUDIO_Handle->control_state = AUDIO_CONTROL_INIT;
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	2201      	movs	r2, #1
 8005af4:	70da      	strb	r2, [r3, #3]

  return USBH_OK;
 8005af6:	2300      	movs	r3, #0
}
 8005af8:	4618      	mov	r0, r3
 8005afa:	371c      	adds	r7, #28
 8005afc:	46bd      	mov	sp, r7
 8005afe:	bd90      	pop	{r4, r7, pc}

08005b00 <USBH_AUDIO_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the Audio class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8005b00:	b580      	push	{r7, lr}
 8005b02:	b084      	sub	sp, #16
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	6078      	str	r0, [r7, #4]
  AUDIO_HandleTypeDef *AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b0e:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 8005b12:	69db      	ldr	r3, [r3, #28]
 8005b14:	60fb      	str	r3, [r7, #12]

  if (AUDIO_Handle->microphone.Pipe != 0x00U)
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	f893 3143 	ldrb.w	r3, [r3, #323]	; 0x143
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d011      	beq.n	8005b44 <USBH_AUDIO_InterfaceDeInit+0x44>
  {
    USBH_ClosePipe(phost, AUDIO_Handle->microphone.Pipe);
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	f893 3143 	ldrb.w	r3, [r3, #323]	; 0x143
 8005b26:	4619      	mov	r1, r3
 8005b28:	6878      	ldr	r0, [r7, #4]
 8005b2a:	f007 fe54 	bl	800d7d6 <USBH_ClosePipe>
    USBH_FreePipe(phost, AUDIO_Handle->microphone.Pipe);
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	f893 3143 	ldrb.w	r3, [r3, #323]	; 0x143
 8005b34:	4619      	mov	r1, r3
 8005b36:	6878      	ldr	r0, [r7, #4]
 8005b38:	f007 fe7f 	bl	800d83a <USBH_FreePipe>
    AUDIO_Handle->microphone.Pipe = 0U;     /* Reset the pipe as Free */
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	2200      	movs	r2, #0
 8005b40:	f883 2143 	strb.w	r2, [r3, #323]	; 0x143
  }

  if (AUDIO_Handle->headphone.Pipe != 0x00U)
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	f893 30fb 	ldrb.w	r3, [r3, #251]	; 0xfb
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d011      	beq.n	8005b72 <USBH_AUDIO_InterfaceDeInit+0x72>
  {
    USBH_ClosePipe(phost,  AUDIO_Handle->headphone.Pipe);
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	f893 30fb 	ldrb.w	r3, [r3, #251]	; 0xfb
 8005b54:	4619      	mov	r1, r3
 8005b56:	6878      	ldr	r0, [r7, #4]
 8005b58:	f007 fe3d 	bl	800d7d6 <USBH_ClosePipe>
    USBH_FreePipe(phost,  AUDIO_Handle->headphone.Pipe);
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	f893 30fb 	ldrb.w	r3, [r3, #251]	; 0xfb
 8005b62:	4619      	mov	r1, r3
 8005b64:	6878      	ldr	r0, [r7, #4]
 8005b66:	f007 fe68 	bl	800d83a <USBH_FreePipe>
    AUDIO_Handle->headphone.Pipe = 0U;     /* Reset the pipe as Free */
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	2200      	movs	r2, #0
 8005b6e:	f883 20fb 	strb.w	r2, [r3, #251]	; 0xfb
  }

  if (AUDIO_Handle->control.Pipe != 0x00U)
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	f893 318a 	ldrb.w	r3, [r3, #394]	; 0x18a
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d011      	beq.n	8005ba0 <USBH_AUDIO_InterfaceDeInit+0xa0>
  {
    USBH_ClosePipe(phost,  AUDIO_Handle->control.Pipe);
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	f893 318a 	ldrb.w	r3, [r3, #394]	; 0x18a
 8005b82:	4619      	mov	r1, r3
 8005b84:	6878      	ldr	r0, [r7, #4]
 8005b86:	f007 fe26 	bl	800d7d6 <USBH_ClosePipe>
    USBH_FreePipe(phost,  AUDIO_Handle->control.Pipe);
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	f893 318a 	ldrb.w	r3, [r3, #394]	; 0x18a
 8005b90:	4619      	mov	r1, r3
 8005b92:	6878      	ldr	r0, [r7, #4]
 8005b94:	f007 fe51 	bl	800d83a <USBH_FreePipe>
    AUDIO_Handle->control.Pipe = 0U;     /* Reset the pipe as Free */
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	2200      	movs	r2, #0
 8005b9c:	f883 218a 	strb.w	r2, [r3, #394]	; 0x18a
  }

  if (phost->pActiveClass->pData)
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005ba6:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 8005baa:	69db      	ldr	r3, [r3, #28]
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d00f      	beq.n	8005bd0 <USBH_AUDIO_InterfaceDeInit+0xd0>
  {
    USBH_free(phost->pActiveClass->pData);
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005bb6:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 8005bba:	69db      	ldr	r3, [r3, #28]
 8005bbc:	4618      	mov	r0, r3
 8005bbe:	f008 fa09 	bl	800dfd4 <free>
    phost->pActiveClass->pData = 0U;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005bc8:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 8005bcc:	2200      	movs	r2, #0
 8005bce:	61da      	str	r2, [r3, #28]
  }
  return USBH_OK ;
 8005bd0:	2300      	movs	r3, #0
}
 8005bd2:	4618      	mov	r0, r3
 8005bd4:	3710      	adds	r7, #16
 8005bd6:	46bd      	mov	sp, r7
 8005bd8:	bd80      	pop	{r7, pc}
	...

08005bdc <USBH_AUDIO_ClassRequest>:
  *         for Audio class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_ClassRequest(USBH_HandleTypeDef *phost)
{
 8005bdc:	b580      	push	{r7, lr}
 8005bde:	b086      	sub	sp, #24
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	6078      	str	r0, [r7, #4]
  AUDIO_HandleTypeDef *AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005bea:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 8005bee:	69db      	ldr	r3, [r3, #28]
 8005bf0:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_BUSY;
 8005bf2:	2301      	movs	r3, #1
 8005bf4:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef req_status = USBH_BUSY;
 8005bf6:	2301      	movs	r3, #1
 8005bf8:	73fb      	strb	r3, [r7, #15]

  /* Switch AUDIO REQ state machine */
  switch (AUDIO_Handle->req_state)
 8005bfa:	693b      	ldr	r3, [r7, #16]
 8005bfc:	781b      	ldrb	r3, [r3, #0]
 8005bfe:	3b01      	subs	r3, #1
 8005c00:	2b06      	cmp	r3, #6
 8005c02:	f200 80a8 	bhi.w	8005d56 <USBH_AUDIO_ClassRequest+0x17a>
 8005c06:	a201      	add	r2, pc, #4	; (adr r2, 8005c0c <USBH_AUDIO_ClassRequest+0x30>)
 8005c08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c0c:	08005c29 	.word	0x08005c29
 8005c10:	08005d3b 	.word	0x08005d3b
 8005c14:	08005c29 	.word	0x08005c29
 8005c18:	08005c5f 	.word	0x08005c5f
 8005c1c:	08005ccb 	.word	0x08005ccb
 8005c20:	08005d03 	.word	0x08005d03
 8005c24:	08005cb7 	.word	0x08005cb7
  {
    case AUDIO_REQ_INIT:
    case AUDIO_REQ_SET_DEFAULT_IN_INTERFACE:
      if (AUDIO_Handle->microphone.supported == 1U)
 8005c28:	693b      	ldr	r3, [r7, #16]
 8005c2a:	f893 3142 	ldrb.w	r3, [r3, #322]	; 0x142
 8005c2e:	2b01      	cmp	r3, #1
 8005c30:	d111      	bne.n	8005c56 <USBH_AUDIO_ClassRequest+0x7a>
      {
        req_status = USBH_SetInterface(phost,
 8005c32:	693b      	ldr	r3, [r7, #16]
 8005c34:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 8005c38:	2200      	movs	r2, #0
 8005c3a:	4619      	mov	r1, r3
 8005c3c:	6878      	ldr	r0, [r7, #4]
 8005c3e:	f007 f8df 	bl	800ce00 <USBH_SetInterface>
 8005c42:	4603      	mov	r3, r0
 8005c44:	73fb      	strb	r3, [r7, #15]
                                       AUDIO_Handle->microphone.interface,
                                       0U);

        if (req_status == USBH_OK)
 8005c46:	7bfb      	ldrb	r3, [r7, #15]
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	f040 8086 	bne.w	8005d5a <USBH_AUDIO_ClassRequest+0x17e>
        {
          AUDIO_Handle->req_state = AUDIO_REQ_SET_DEFAULT_OUT_INTERFACE;
 8005c4e:	693b      	ldr	r3, [r7, #16]
 8005c50:	2204      	movs	r2, #4
 8005c52:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8005c54:	e081      	b.n	8005d5a <USBH_AUDIO_ClassRequest+0x17e>
        AUDIO_Handle->req_state = AUDIO_REQ_SET_DEFAULT_OUT_INTERFACE;
 8005c56:	693b      	ldr	r3, [r7, #16]
 8005c58:	2204      	movs	r2, #4
 8005c5a:	701a      	strb	r2, [r3, #0]
      break;
 8005c5c:	e07d      	b.n	8005d5a <USBH_AUDIO_ClassRequest+0x17e>

    case AUDIO_REQ_SET_DEFAULT_OUT_INTERFACE:
      if (AUDIO_Handle->headphone.supported == 1U)
 8005c5e:	693b      	ldr	r3, [r7, #16]
 8005c60:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 8005c64:	2b01      	cmp	r3, #1
 8005c66:	d11f      	bne.n	8005ca8 <USBH_AUDIO_ClassRequest+0xcc>
      {
        req_status = USBH_SetInterface(phost,
 8005c68:	693b      	ldr	r3, [r7, #16]
 8005c6a:	f893 30f8 	ldrb.w	r3, [r3, #248]	; 0xf8
 8005c6e:	2200      	movs	r2, #0
 8005c70:	4619      	mov	r1, r3
 8005c72:	6878      	ldr	r0, [r7, #4]
 8005c74:	f007 f8c4 	bl	800ce00 <USBH_SetInterface>
 8005c78:	4603      	mov	r3, r0
 8005c7a:	73fb      	strb	r3, [r7, #15]
                                       AUDIO_Handle->headphone.interface,
                                       0U);

        if (req_status == USBH_OK)
 8005c7c:	7bfb      	ldrb	r3, [r7, #15]
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d16d      	bne.n	8005d5e <USBH_AUDIO_ClassRequest+0x182>
        {
          AUDIO_Handle->req_state = AUDIO_REQ_CS_REQUESTS;
 8005c82:	693b      	ldr	r3, [r7, #16]
 8005c84:	2207      	movs	r2, #7
 8005c86:	701a      	strb	r2, [r3, #0]
          AUDIO_Handle->cs_req_state = AUDIO_REQ_GET_VOLUME;
 8005c88:	693b      	ldr	r3, [r7, #16]
 8005c8a:	2206      	movs	r2, #6
 8005c8c:	705a      	strb	r2, [r3, #1]

          AUDIO_Handle->temp_feature  = AUDIO_Handle->headphone.asociated_feature;
 8005c8e:	693b      	ldr	r3, [r7, #16]
 8005c90:	f893 2107 	ldrb.w	r2, [r3, #263]	; 0x107
 8005c94:	693b      	ldr	r3, [r7, #16]
 8005c96:	f883 21a0 	strb.w	r2, [r3, #416]	; 0x1a0
          AUDIO_Handle->temp_channels = AUDIO_Handle->headphone.asociated_channels;
 8005c9a:	693b      	ldr	r3, [r7, #16]
 8005c9c:	f893 2109 	ldrb.w	r2, [r3, #265]	; 0x109
 8005ca0:	693b      	ldr	r3, [r7, #16]
 8005ca2:	f883 21a1 	strb.w	r2, [r3, #417]	; 0x1a1
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8005ca6:	e05a      	b.n	8005d5e <USBH_AUDIO_ClassRequest+0x182>
        AUDIO_Handle->req_state = AUDIO_REQ_CS_REQUESTS;
 8005ca8:	693b      	ldr	r3, [r7, #16]
 8005caa:	2207      	movs	r2, #7
 8005cac:	701a      	strb	r2, [r3, #0]
        AUDIO_Handle->cs_req_state = AUDIO_REQ_GET_VOLUME;
 8005cae:	693b      	ldr	r3, [r7, #16]
 8005cb0:	2206      	movs	r2, #6
 8005cb2:	705a      	strb	r2, [r3, #1]
      break;
 8005cb4:	e053      	b.n	8005d5e <USBH_AUDIO_ClassRequest+0x182>

    case AUDIO_REQ_CS_REQUESTS:
      if (USBH_AUDIO_HandleCSRequest(phost) == USBH_OK)
 8005cb6:	6878      	ldr	r0, [r7, #4]
 8005cb8:	f000 f930 	bl	8005f1c <USBH_AUDIO_HandleCSRequest>
 8005cbc:	4603      	mov	r3, r0
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d14f      	bne.n	8005d62 <USBH_AUDIO_ClassRequest+0x186>
      {
        AUDIO_Handle->req_state = AUDIO_REQ_SET_IN_INTERFACE;
 8005cc2:	693b      	ldr	r3, [r7, #16]
 8005cc4:	2205      	movs	r2, #5
 8005cc6:	701a      	strb	r2, [r3, #0]
      }
      break;
 8005cc8:	e04b      	b.n	8005d62 <USBH_AUDIO_ClassRequest+0x186>

    case AUDIO_REQ_SET_IN_INTERFACE:
      if (AUDIO_Handle->microphone.supported == 1U)
 8005cca:	693b      	ldr	r3, [r7, #16]
 8005ccc:	f893 3142 	ldrb.w	r3, [r3, #322]	; 0x142
 8005cd0:	2b01      	cmp	r3, #1
 8005cd2:	d112      	bne.n	8005cfa <USBH_AUDIO_ClassRequest+0x11e>
      {
        req_status = USBH_SetInterface(phost,
 8005cd4:	693b      	ldr	r3, [r7, #16]
 8005cd6:	f893 1140 	ldrb.w	r1, [r3, #320]	; 0x140
 8005cda:	693b      	ldr	r3, [r7, #16]
 8005cdc:	f893 3141 	ldrb.w	r3, [r3, #321]	; 0x141
 8005ce0:	461a      	mov	r2, r3
 8005ce2:	6878      	ldr	r0, [r7, #4]
 8005ce4:	f007 f88c 	bl	800ce00 <USBH_SetInterface>
 8005ce8:	4603      	mov	r3, r0
 8005cea:	73fb      	strb	r3, [r7, #15]
                                       AUDIO_Handle->microphone.interface,
                                       AUDIO_Handle->microphone.AltSettings);

        if (req_status == USBH_OK)
 8005cec:	7bfb      	ldrb	r3, [r7, #15]
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d139      	bne.n	8005d66 <USBH_AUDIO_ClassRequest+0x18a>
        {
          AUDIO_Handle->req_state = AUDIO_REQ_SET_OUT_INTERFACE;
 8005cf2:	693b      	ldr	r3, [r7, #16]
 8005cf4:	2206      	movs	r2, #6
 8005cf6:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8005cf8:	e035      	b.n	8005d66 <USBH_AUDIO_ClassRequest+0x18a>
        AUDIO_Handle->req_state = AUDIO_REQ_SET_OUT_INTERFACE;
 8005cfa:	693b      	ldr	r3, [r7, #16]
 8005cfc:	2206      	movs	r2, #6
 8005cfe:	701a      	strb	r2, [r3, #0]
      break;
 8005d00:	e031      	b.n	8005d66 <USBH_AUDIO_ClassRequest+0x18a>
    case AUDIO_REQ_SET_OUT_INTERFACE:
      if (AUDIO_Handle->headphone.supported == 1U)
 8005d02:	693b      	ldr	r3, [r7, #16]
 8005d04:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 8005d08:	2b01      	cmp	r3, #1
 8005d0a:	d112      	bne.n	8005d32 <USBH_AUDIO_ClassRequest+0x156>
      {
        req_status = USBH_SetInterface(phost,
 8005d0c:	693b      	ldr	r3, [r7, #16]
 8005d0e:	f893 10f8 	ldrb.w	r1, [r3, #248]	; 0xf8
 8005d12:	693b      	ldr	r3, [r7, #16]
 8005d14:	f893 30f9 	ldrb.w	r3, [r3, #249]	; 0xf9
 8005d18:	461a      	mov	r2, r3
 8005d1a:	6878      	ldr	r0, [r7, #4]
 8005d1c:	f007 f870 	bl	800ce00 <USBH_SetInterface>
 8005d20:	4603      	mov	r3, r0
 8005d22:	73fb      	strb	r3, [r7, #15]
                                       AUDIO_Handle->headphone.interface,
                                       AUDIO_Handle->headphone.AltSettings);

        if (req_status == USBH_OK)
 8005d24:	7bfb      	ldrb	r3, [r7, #15]
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d11f      	bne.n	8005d6a <USBH_AUDIO_ClassRequest+0x18e>
        {
          AUDIO_Handle->req_state = AUDIO_REQ_IDLE;
 8005d2a:	693b      	ldr	r3, [r7, #16]
 8005d2c:	2202      	movs	r2, #2
 8005d2e:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8005d30:	e01b      	b.n	8005d6a <USBH_AUDIO_ClassRequest+0x18e>
        AUDIO_Handle->req_state = AUDIO_REQ_IDLE;
 8005d32:	693b      	ldr	r3, [r7, #16]
 8005d34:	2202      	movs	r2, #2
 8005d36:	701a      	strb	r2, [r3, #0]
      break;
 8005d38:	e017      	b.n	8005d6a <USBH_AUDIO_ClassRequest+0x18e>
    case AUDIO_REQ_IDLE:
      AUDIO_Handle->play_state = AUDIO_PLAYBACK_INIT;
 8005d3a:	693b      	ldr	r3, [r7, #16]
 8005d3c:	2201      	movs	r2, #1
 8005d3e:	709a      	strb	r2, [r3, #2]
      phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005d46:	f8d3 3170 	ldr.w	r3, [r3, #368]	; 0x170
 8005d4a:	2102      	movs	r1, #2
 8005d4c:	6878      	ldr	r0, [r7, #4]
 8005d4e:	4798      	blx	r3
      status  = USBH_OK;
 8005d50:	2300      	movs	r3, #0
 8005d52:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8005d54:	e00a      	b.n	8005d6c <USBH_AUDIO_ClassRequest+0x190>

    default:
      break;
 8005d56:	bf00      	nop
 8005d58:	e008      	b.n	8005d6c <USBH_AUDIO_ClassRequest+0x190>
      break;
 8005d5a:	bf00      	nop
 8005d5c:	e006      	b.n	8005d6c <USBH_AUDIO_ClassRequest+0x190>
      break;
 8005d5e:	bf00      	nop
 8005d60:	e004      	b.n	8005d6c <USBH_AUDIO_ClassRequest+0x190>
      break;
 8005d62:	bf00      	nop
 8005d64:	e002      	b.n	8005d6c <USBH_AUDIO_ClassRequest+0x190>
      break;
 8005d66:	bf00      	nop
 8005d68:	e000      	b.n	8005d6c <USBH_AUDIO_ClassRequest+0x190>
      break;
 8005d6a:	bf00      	nop
  }
  return status;
 8005d6c:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d6e:	4618      	mov	r0, r3
 8005d70:	3718      	adds	r7, #24
 8005d72:	46bd      	mov	sp, r7
 8005d74:	bd80      	pop	{r7, pc}
 8005d76:	bf00      	nop

08005d78 <USBH_AUDIO_CSRequest>:
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_CSRequest(USBH_HandleTypeDef *phost,
                                               uint8_t feature, uint8_t channel)
{
 8005d78:	b580      	push	{r7, lr}
 8005d7a:	b088      	sub	sp, #32
 8005d7c:	af02      	add	r7, sp, #8
 8005d7e:	6078      	str	r0, [r7, #4]
 8005d80:	460b      	mov	r3, r1
 8005d82:	70fb      	strb	r3, [r7, #3]
 8005d84:	4613      	mov	r3, r2
 8005d86:	70bb      	strb	r3, [r7, #2]
  AUDIO_HandleTypeDef *AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005d8e:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 8005d92:	69db      	ldr	r3, [r3, #28]
 8005d94:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_BUSY;
 8005d96:	2301      	movs	r3, #1
 8005d98:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef req_status = USBH_BUSY;
 8005d9a:	2301      	movs	r3, #1
 8005d9c:	73fb      	strb	r3, [r7, #15]
  uint16_t VolumeCtl, ResolutionCtl;

  /* Switch AUDIO REQ state machine */
  switch (AUDIO_Handle->cs_req_state)
 8005d9e:	693b      	ldr	r3, [r7, #16]
 8005da0:	785b      	ldrb	r3, [r3, #1]
 8005da2:	3b04      	subs	r3, #4
 8005da4:	2b04      	cmp	r3, #4
 8005da6:	f200 80aa 	bhi.w	8005efe <USBH_AUDIO_CSRequest+0x186>
 8005daa:	a201      	add	r2, pc, #4	; (adr r2, 8005db0 <USBH_AUDIO_CSRequest+0x38>)
 8005dac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005db0:	08005e0d 	.word	0x08005e0d
 8005db4:	08005e53 	.word	0x08005e53
 8005db8:	08005dc5 	.word	0x08005dc5
 8005dbc:	08005eb3 	.word	0x08005eb3
 8005dc0:	08005ef9 	.word	0x08005ef9
  {
    case AUDIO_REQ_GET_VOLUME:
      req_status = USBH_AC_GetCur(phost,
 8005dc4:	78fa      	ldrb	r2, [r7, #3]
 8005dc6:	2302      	movs	r3, #2
 8005dc8:	9301      	str	r3, [sp, #4]
 8005dca:	78bb      	ldrb	r3, [r7, #2]
 8005dcc:	9300      	str	r3, [sp, #0]
 8005dce:	2302      	movs	r3, #2
 8005dd0:	2106      	movs	r1, #6
 8005dd2:	6878      	ldr	r0, [r7, #4]
 8005dd4:	f000 fed2 	bl	8006b7c <USBH_AC_GetCur>
 8005dd8:	4603      	mov	r3, r0
 8005dda:	73fb      	strb	r3, [r7, #15]
                                  UAC_FEATURE_UNIT,     /* subtype  */
                                  feature,              /* feature  */
                                  VOLUME_CONTROL,       /* Selector */
                                  channel,              /* channel  */
                                  0x02U);               /* length   */
      if (req_status != USBH_BUSY)
 8005ddc:	7bfb      	ldrb	r3, [r7, #15]
 8005dde:	2b01      	cmp	r3, #1
 8005de0:	f000 808f 	beq.w	8005f02 <USBH_AUDIO_CSRequest+0x18a>
      {
        AUDIO_Handle->cs_req_state = AUDIO_REQ_GET_MIN_VOLUME;
 8005de4:	693b      	ldr	r3, [r7, #16]
 8005de6:	2204      	movs	r2, #4
 8005de8:	705a      	strb	r2, [r3, #1]
        VolumeCtl = LE16(&(AUDIO_Handle->mem[0]));
 8005dea:	693b      	ldr	r3, [r7, #16]
 8005dec:	f8b3 2190 	ldrh.w	r2, [r3, #400]	; 0x190
 8005df0:	693b      	ldr	r3, [r7, #16]
 8005df2:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8005df6:	3302      	adds	r3, #2
 8005df8:	881b      	ldrh	r3, [r3, #0]
 8005dfa:	021b      	lsls	r3, r3, #8
 8005dfc:	b29b      	uxth	r3, r3
 8005dfe:	4313      	orrs	r3, r2
 8005e00:	817b      	strh	r3, [r7, #10]
        AUDIO_Handle->headphone.attribute.volume = (uint32_t)VolumeCtl;
 8005e02:	897a      	ldrh	r2, [r7, #10]
 8005e04:	693b      	ldr	r3, [r7, #16]
 8005e06:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
      }
      break;
 8005e0a:	e07a      	b.n	8005f02 <USBH_AUDIO_CSRequest+0x18a>

    case AUDIO_REQ_GET_MIN_VOLUME:
      req_status = USBH_AC_GetMin(phost,
 8005e0c:	78fa      	ldrb	r2, [r7, #3]
 8005e0e:	2302      	movs	r3, #2
 8005e10:	9301      	str	r3, [sp, #4]
 8005e12:	78bb      	ldrb	r3, [r7, #2]
 8005e14:	9300      	str	r3, [sp, #0]
 8005e16:	2302      	movs	r3, #2
 8005e18:	2106      	movs	r1, #6
 8005e1a:	6878      	ldr	r0, [r7, #4]
 8005e1c:	f001 f879 	bl	8006f12 <USBH_AC_GetMin>
 8005e20:	4603      	mov	r3, r0
 8005e22:	73fb      	strb	r3, [r7, #15]
                                  UAC_FEATURE_UNIT,     /* subtype  */
                                  feature,              /* feature  */
                                  VOLUME_CONTROL,       /* Selector */
                                  channel,              /* channel  */
                                  0x02U);               /* length   */
      if (req_status != USBH_BUSY)
 8005e24:	7bfb      	ldrb	r3, [r7, #15]
 8005e26:	2b01      	cmp	r3, #1
 8005e28:	d06d      	beq.n	8005f06 <USBH_AUDIO_CSRequest+0x18e>
      {
        AUDIO_Handle->cs_req_state = AUDIO_REQ_GET_MAX_VOLUME;
 8005e2a:	693b      	ldr	r3, [r7, #16]
 8005e2c:	2205      	movs	r2, #5
 8005e2e:	705a      	strb	r2, [r3, #1]
        VolumeCtl = LE16(&(AUDIO_Handle->mem[0]));
 8005e30:	693b      	ldr	r3, [r7, #16]
 8005e32:	f8b3 2190 	ldrh.w	r2, [r3, #400]	; 0x190
 8005e36:	693b      	ldr	r3, [r7, #16]
 8005e38:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8005e3c:	3302      	adds	r3, #2
 8005e3e:	881b      	ldrh	r3, [r3, #0]
 8005e40:	021b      	lsls	r3, r3, #8
 8005e42:	b29b      	uxth	r3, r3
 8005e44:	4313      	orrs	r3, r2
 8005e46:	817b      	strh	r3, [r7, #10]
        AUDIO_Handle->headphone.attribute.volumeMin = (uint32_t)VolumeCtl;
 8005e48:	897a      	ldrh	r2, [r7, #10]
 8005e4a:	693b      	ldr	r3, [r7, #16]
 8005e4c:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
      }
      break;
 8005e50:	e059      	b.n	8005f06 <USBH_AUDIO_CSRequest+0x18e>

    case AUDIO_REQ_GET_MAX_VOLUME:
      req_status = USBH_AC_GetMax(phost,
 8005e52:	78fa      	ldrb	r2, [r7, #3]
 8005e54:	2302      	movs	r3, #2
 8005e56:	9301      	str	r3, [sp, #4]
 8005e58:	78bb      	ldrb	r3, [r7, #2]
 8005e5a:	9300      	str	r3, [sp, #0]
 8005e5c:	2302      	movs	r3, #2
 8005e5e:	2106      	movs	r1, #6
 8005e60:	6878      	ldr	r0, [r7, #4]
 8005e62:	f000 ff24 	bl	8006cae <USBH_AC_GetMax>
 8005e66:	4603      	mov	r3, r0
 8005e68:	73fb      	strb	r3, [r7, #15]
                                  UAC_FEATURE_UNIT,     /* subtype  */
                                  feature,              /* feature  */
                                  VOLUME_CONTROL,       /* Selector */
                                  channel,              /* channel  */
                                  0x02U);               /* length   */
      if (req_status != USBH_BUSY)
 8005e6a:	7bfb      	ldrb	r3, [r7, #15]
 8005e6c:	2b01      	cmp	r3, #1
 8005e6e:	d04c      	beq.n	8005f0a <USBH_AUDIO_CSRequest+0x192>
      {
        AUDIO_Handle->cs_req_state = AUDIO_REQ_GET_RESOLUTION;
 8005e70:	693b      	ldr	r3, [r7, #16]
 8005e72:	2207      	movs	r2, #7
 8005e74:	705a      	strb	r2, [r3, #1]
        VolumeCtl = LE16(&(AUDIO_Handle->mem[0]));
 8005e76:	693b      	ldr	r3, [r7, #16]
 8005e78:	f8b3 2190 	ldrh.w	r2, [r3, #400]	; 0x190
 8005e7c:	693b      	ldr	r3, [r7, #16]
 8005e7e:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8005e82:	3302      	adds	r3, #2
 8005e84:	881b      	ldrh	r3, [r3, #0]
 8005e86:	021b      	lsls	r3, r3, #8
 8005e88:	b29b      	uxth	r3, r3
 8005e8a:	4313      	orrs	r3, r2
 8005e8c:	817b      	strh	r3, [r7, #10]
        AUDIO_Handle->headphone.attribute.volumeMax = (uint32_t)VolumeCtl;
 8005e8e:	897a      	ldrh	r2, [r7, #10]
 8005e90:	693b      	ldr	r3, [r7, #16]
 8005e92:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130

        if (AUDIO_Handle->headphone.attribute.volumeMax < AUDIO_Handle->headphone.attribute.volumeMin)
 8005e96:	693b      	ldr	r3, [r7, #16]
 8005e98:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
 8005e9c:	693b      	ldr	r3, [r7, #16]
 8005e9e:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 8005ea2:	429a      	cmp	r2, r3
 8005ea4:	d231      	bcs.n	8005f0a <USBH_AUDIO_CSRequest+0x192>
        {
          AUDIO_Handle->headphone.attribute.volumeMax = 0xFF00U;
 8005ea6:	693b      	ldr	r3, [r7, #16]
 8005ea8:	f44f 427f 	mov.w	r2, #65280	; 0xff00
 8005eac:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
        }
      }
      break;
 8005eb0:	e02b      	b.n	8005f0a <USBH_AUDIO_CSRequest+0x192>

    case AUDIO_REQ_GET_RESOLUTION:
      req_status = USBH_AC_GetRes(phost,
 8005eb2:	78fa      	ldrb	r2, [r7, #3]
 8005eb4:	2302      	movs	r3, #2
 8005eb6:	9301      	str	r3, [sp, #4]
 8005eb8:	78bb      	ldrb	r3, [r7, #2]
 8005eba:	9300      	str	r3, [sp, #0]
 8005ebc:	2302      	movs	r3, #2
 8005ebe:	2106      	movs	r1, #6
 8005ec0:	6878      	ldr	r0, [r7, #4]
 8005ec2:	f000 ff8d 	bl	8006de0 <USBH_AC_GetRes>
 8005ec6:	4603      	mov	r3, r0
 8005ec8:	73fb      	strb	r3, [r7, #15]
                                  UAC_FEATURE_UNIT,     /* subtype  */
                                  feature,              /* feature  */
                                  VOLUME_CONTROL,       /* Selector */
                                  channel,              /* channel  */
                                  0x02U);                /* length   */
      if (req_status != USBH_BUSY)
 8005eca:	7bfb      	ldrb	r3, [r7, #15]
 8005ecc:	2b01      	cmp	r3, #1
 8005ece:	d01e      	beq.n	8005f0e <USBH_AUDIO_CSRequest+0x196>
      {
        AUDIO_Handle->cs_req_state = AUDIO_REQ_CS_IDLE;
 8005ed0:	693b      	ldr	r3, [r7, #16]
 8005ed2:	2208      	movs	r2, #8
 8005ed4:	705a      	strb	r2, [r3, #1]
        ResolutionCtl = LE16(&AUDIO_Handle->mem[0]);
 8005ed6:	693b      	ldr	r3, [r7, #16]
 8005ed8:	f8b3 2190 	ldrh.w	r2, [r3, #400]	; 0x190
 8005edc:	693b      	ldr	r3, [r7, #16]
 8005ede:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8005ee2:	3302      	adds	r3, #2
 8005ee4:	881b      	ldrh	r3, [r3, #0]
 8005ee6:	021b      	lsls	r3, r3, #8
 8005ee8:	b29b      	uxth	r3, r3
 8005eea:	4313      	orrs	r3, r2
 8005eec:	81bb      	strh	r3, [r7, #12]
        AUDIO_Handle->headphone.attribute.resolution = (uint32_t)ResolutionCtl;
 8005eee:	89ba      	ldrh	r2, [r7, #12]
 8005ef0:	693b      	ldr	r3, [r7, #16]
 8005ef2:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
      }
      break;
 8005ef6:	e00a      	b.n	8005f0e <USBH_AUDIO_CSRequest+0x196>


    case AUDIO_REQ_CS_IDLE:
      status = USBH_OK;
 8005ef8:	2300      	movs	r3, #0
 8005efa:	75fb      	strb	r3, [r7, #23]
      break;
 8005efc:	e008      	b.n	8005f10 <USBH_AUDIO_CSRequest+0x198>

    default:
      break;
 8005efe:	bf00      	nop
 8005f00:	e006      	b.n	8005f10 <USBH_AUDIO_CSRequest+0x198>
      break;
 8005f02:	bf00      	nop
 8005f04:	e004      	b.n	8005f10 <USBH_AUDIO_CSRequest+0x198>
      break;
 8005f06:	bf00      	nop
 8005f08:	e002      	b.n	8005f10 <USBH_AUDIO_CSRequest+0x198>
      break;
 8005f0a:	bf00      	nop
 8005f0c:	e000      	b.n	8005f10 <USBH_AUDIO_CSRequest+0x198>
      break;
 8005f0e:	bf00      	nop
  }
  return status;
 8005f10:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f12:	4618      	mov	r0, r3
 8005f14:	3718      	adds	r7, #24
 8005f16:	46bd      	mov	sp, r7
 8005f18:	bd80      	pop	{r7, pc}
 8005f1a:	bf00      	nop

08005f1c <USBH_AUDIO_HandleCSRequest>:
  *         and associated channels for Audio class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_HandleCSRequest(USBH_HandleTypeDef *phost)
{
 8005f1c:	b580      	push	{r7, lr}
 8005f1e:	b084      	sub	sp, #16
 8005f20:	af00      	add	r7, sp, #0
 8005f22:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status = USBH_BUSY;
 8005f24:	2301      	movs	r3, #1
 8005f26:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef cs_status = USBH_BUSY;
 8005f28:	2301      	movs	r3, #1
 8005f2a:	73bb      	strb	r3, [r7, #14]
  AUDIO_HandleTypeDef *AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005f32:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 8005f36:	69db      	ldr	r3, [r3, #28]
 8005f38:	60bb      	str	r3, [r7, #8]

  cs_status = USBH_AUDIO_CSRequest(phost,
 8005f3a:	68bb      	ldr	r3, [r7, #8]
 8005f3c:	f893 11a0 	ldrb.w	r1, [r3, #416]	; 0x1a0
 8005f40:	68bb      	ldr	r3, [r7, #8]
 8005f42:	f893 31a1 	ldrb.w	r3, [r3, #417]	; 0x1a1
 8005f46:	461a      	mov	r2, r3
 8005f48:	6878      	ldr	r0, [r7, #4]
 8005f4a:	f7ff ff15 	bl	8005d78 <USBH_AUDIO_CSRequest>
 8005f4e:	4603      	mov	r3, r0
 8005f50:	73bb      	strb	r3, [r7, #14]
                                   AUDIO_Handle->temp_feature,
                                   AUDIO_Handle->temp_channels);

  if (cs_status != USBH_BUSY)
 8005f52:	7bbb      	ldrb	r3, [r7, #14]
 8005f54:	2b01      	cmp	r3, #1
 8005f56:	d01c      	beq.n	8005f92 <USBH_AUDIO_HandleCSRequest+0x76>
  {

    if (AUDIO_Handle->temp_channels == 1U)
 8005f58:	68bb      	ldr	r3, [r7, #8]
 8005f5a:	f893 31a1 	ldrb.w	r3, [r3, #417]	; 0x1a1
 8005f5e:	2b01      	cmp	r3, #1
 8005f60:	d10c      	bne.n	8005f7c <USBH_AUDIO_HandleCSRequest+0x60>
    {
      AUDIO_Handle->temp_feature = AUDIO_Handle->headphone.asociated_feature;
 8005f62:	68bb      	ldr	r3, [r7, #8]
 8005f64:	f893 2107 	ldrb.w	r2, [r3, #263]	; 0x107
 8005f68:	68bb      	ldr	r3, [r7, #8]
 8005f6a:	f883 21a0 	strb.w	r2, [r3, #416]	; 0x1a0
      AUDIO_Handle->temp_channels = 0U;
 8005f6e:	68bb      	ldr	r3, [r7, #8]
 8005f70:	2200      	movs	r2, #0
 8005f72:	f883 21a1 	strb.w	r2, [r3, #417]	; 0x1a1
      status = USBH_OK;
 8005f76:	2300      	movs	r3, #0
 8005f78:	73fb      	strb	r3, [r7, #15]
 8005f7a:	e007      	b.n	8005f8c <USBH_AUDIO_HandleCSRequest+0x70>
    }
    else
    {
      AUDIO_Handle->temp_channels--;
 8005f7c:	68bb      	ldr	r3, [r7, #8]
 8005f7e:	f893 31a1 	ldrb.w	r3, [r3, #417]	; 0x1a1
 8005f82:	3b01      	subs	r3, #1
 8005f84:	b2da      	uxtb	r2, r3
 8005f86:	68bb      	ldr	r3, [r7, #8]
 8005f88:	f883 21a1 	strb.w	r2, [r3, #417]	; 0x1a1
    }
    AUDIO_Handle->cs_req_state = AUDIO_REQ_GET_VOLUME;
 8005f8c:	68bb      	ldr	r3, [r7, #8]
 8005f8e:	2206      	movs	r2, #6
 8005f90:	705a      	strb	r2, [r3, #1]
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
  }

  return status;
 8005f92:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f94:	4618      	mov	r0, r3
 8005f96:	3710      	adds	r7, #16
 8005f98:	46bd      	mov	sp, r7
 8005f9a:	bd80      	pop	{r7, pc}

08005f9c <USBH_AUDIO_Process>:
  *         The function is for managing state machine for Audio data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_Process(USBH_HandleTypeDef *phost)
{
 8005f9c:	b580      	push	{r7, lr}
 8005f9e:	b084      	sub	sp, #16
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8005fa4:	2301      	movs	r3, #1
 8005fa6:	73fb      	strb	r3, [r7, #15]
  AUDIO_HandleTypeDef *AUDIO_Handle = (AUDIO_HandleTypeDef *)  phost->pActiveClass->pData;
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005fae:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 8005fb2:	69db      	ldr	r3, [r3, #28]
 8005fb4:	60bb      	str	r3, [r7, #8]

  if (AUDIO_Handle->headphone.supported == 1U)
 8005fb6:	68bb      	ldr	r3, [r7, #8]
 8005fb8:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 8005fbc:	2b01      	cmp	r3, #1
 8005fbe:	d102      	bne.n	8005fc6 <USBH_AUDIO_Process+0x2a>
  {
    USBH_AUDIO_OutputStream(phost);
 8005fc0:	6878      	ldr	r0, [r7, #4]
 8005fc2:	f001 f931 	bl	8007228 <USBH_AUDIO_OutputStream>
  }

  if (AUDIO_Handle->microphone.supported == 1U)
 8005fc6:	68bb      	ldr	r3, [r7, #8]
 8005fc8:	f893 3142 	ldrb.w	r3, [r3, #322]	; 0x142
 8005fcc:	2b01      	cmp	r3, #1
 8005fce:	d102      	bne.n	8005fd6 <USBH_AUDIO_Process+0x3a>
  {
    USBH_AUDIO_InputStream(phost);
 8005fd0:	6878      	ldr	r0, [r7, #4]
 8005fd2:	f001 f85f 	bl	8007094 <USBH_AUDIO_InputStream>
  }

  return status;
 8005fd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fd8:	4618      	mov	r0, r3
 8005fda:	3710      	adds	r7, #16
 8005fdc:	46bd      	mov	sp, r7
 8005fde:	bd80      	pop	{r7, pc}

08005fe0 <USBH_AUDIO_SOFProcess>:
  *         The function is for managing the SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_SOFProcess(USBH_HandleTypeDef *phost)
{
 8005fe0:	b480      	push	{r7}
 8005fe2:	b083      	sub	sp, #12
 8005fe4:	af00      	add	r7, sp, #0
 8005fe6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8005fe8:	2300      	movs	r3, #0
}
 8005fea:	4618      	mov	r0, r3
 8005fec:	370c      	adds	r7, #12
 8005fee:	46bd      	mov	sp, r7
 8005ff0:	bc80      	pop	{r7}
 8005ff2:	4770      	bx	lr

08005ff4 <USBH_AUDIO_FindAudioStreamingIN>:
  * @brief  Find IN Audio Streaming interfaces
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_FindAudioStreamingIN(USBH_HandleTypeDef *phost)
{
 8005ff4:	b480      	push	{r7}
 8005ff6:	b085      	sub	sp, #20
 8005ff8:	af00      	add	r7, sp, #0
 8005ffa:	6078      	str	r0, [r7, #4]
  uint8_t interface, alt_settings;
  USBH_StatusTypeDef status = USBH_FAIL ;
 8005ffc:	2302      	movs	r3, #2
 8005ffe:	737b      	strb	r3, [r7, #13]
  AUDIO_HandleTypeDef *AUDIO_Handle;

  AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006006:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 800600a:	69db      	ldr	r3, [r3, #28]
 800600c:	60bb      	str	r3, [r7, #8]

  /* Look For AUDIOSTREAMING IN interface */
  alt_settings = 0U;
 800600e:	2300      	movs	r3, #0
 8006010:	73bb      	strb	r3, [r7, #14]
  for (interface = 0U; interface < USBH_MAX_NUM_INTERFACES; interface++)
 8006012:	2300      	movs	r3, #0
 8006014:	73fb      	strb	r3, [r7, #15]
 8006016:	e0a7      	b.n	8006168 <USBH_AUDIO_FindAudioStreamingIN+0x174>
  {
    if ((phost->device.CfgDesc.Itf_Desc[interface].bInterfaceClass == AC_CLASS) &&
 8006018:	7bfa      	ldrb	r2, [r7, #15]
 800601a:	6879      	ldr	r1, [r7, #4]
 800601c:	4613      	mov	r3, r2
 800601e:	019b      	lsls	r3, r3, #6
 8006020:	4413      	add	r3, r2
 8006022:	005b      	lsls	r3, r3, #1
 8006024:	440b      	add	r3, r1
 8006026:	f603 1345 	addw	r3, r3, #2373	; 0x945
 800602a:	781b      	ldrb	r3, [r3, #0]
 800602c:	2b01      	cmp	r3, #1
 800602e:	f040 8098 	bne.w	8006162 <USBH_AUDIO_FindAudioStreamingIN+0x16e>
        (phost->device.CfgDesc.Itf_Desc[interface].bInterfaceSubClass == USB_SUBCLASS_AUDIOSTREAMING))
 8006032:	7bfa      	ldrb	r2, [r7, #15]
 8006034:	6879      	ldr	r1, [r7, #4]
 8006036:	4613      	mov	r3, r2
 8006038:	019b      	lsls	r3, r3, #6
 800603a:	4413      	add	r3, r2
 800603c:	005b      	lsls	r3, r3, #1
 800603e:	440b      	add	r3, r1
 8006040:	f603 1346 	addw	r3, r3, #2374	; 0x946
 8006044:	781b      	ldrb	r3, [r3, #0]
    if ((phost->device.CfgDesc.Itf_Desc[interface].bInterfaceClass == AC_CLASS) &&
 8006046:	2b02      	cmp	r3, #2
 8006048:	f040 808b 	bne.w	8006162 <USBH_AUDIO_FindAudioStreamingIN+0x16e>
    {
      if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) &&
 800604c:	7bfa      	ldrb	r2, [r7, #15]
 800604e:	6879      	ldr	r1, [r7, #4]
 8006050:	4613      	mov	r3, r2
 8006052:	019b      	lsls	r3, r3, #6
 8006054:	4413      	add	r3, r2
 8006056:	005b      	lsls	r3, r3, #1
 8006058:	440b      	add	r3, r1
 800605a:	f603 134c 	addw	r3, r3, #2380	; 0x94c
 800605e:	781b      	ldrb	r3, [r3, #0]
 8006060:	b25b      	sxtb	r3, r3
 8006062:	2b00      	cmp	r3, #0
 8006064:	da7d      	bge.n	8006162 <USBH_AUDIO_FindAudioStreamingIN+0x16e>
          (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize > 0U))
 8006066:	7bfa      	ldrb	r2, [r7, #15]
 8006068:	6879      	ldr	r1, [r7, #4]
 800606a:	4613      	mov	r3, r2
 800606c:	019b      	lsls	r3, r3, #6
 800606e:	4413      	add	r3, r2
 8006070:	005b      	lsls	r3, r3, #1
 8006072:	440b      	add	r3, r1
 8006074:	f603 134e 	addw	r3, r3, #2382	; 0x94e
 8006078:	881b      	ldrh	r3, [r3, #0]
      if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) &&
 800607a:	2b00      	cmp	r3, #0
 800607c:	d071      	beq.n	8006162 <USBH_AUDIO_FindAudioStreamingIN+0x16e>
      {
        AUDIO_Handle->stream_in[alt_settings].Ep = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800607e:	7bf9      	ldrb	r1, [r7, #15]
 8006080:	7bba      	ldrb	r2, [r7, #14]
 8006082:	6878      	ldr	r0, [r7, #4]
 8006084:	460b      	mov	r3, r1
 8006086:	019b      	lsls	r3, r3, #6
 8006088:	440b      	add	r3, r1
 800608a:	005b      	lsls	r3, r3, #1
 800608c:	4403      	add	r3, r0
 800608e:	f603 134c 	addw	r3, r3, #2380	; 0x94c
 8006092:	7818      	ldrb	r0, [r3, #0]
 8006094:	68b9      	ldr	r1, [r7, #8]
 8006096:	4613      	mov	r3, r2
 8006098:	009b      	lsls	r3, r3, #2
 800609a:	4413      	add	r3, r2
 800609c:	005b      	lsls	r3, r3, #1
 800609e:	440b      	add	r3, r1
 80060a0:	3306      	adds	r3, #6
 80060a2:	4602      	mov	r2, r0
 80060a4:	701a      	strb	r2, [r3, #0]
        AUDIO_Handle->stream_in[alt_settings].EpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80060a6:	7bf9      	ldrb	r1, [r7, #15]
 80060a8:	7bba      	ldrb	r2, [r7, #14]
 80060aa:	6878      	ldr	r0, [r7, #4]
 80060ac:	460b      	mov	r3, r1
 80060ae:	019b      	lsls	r3, r3, #6
 80060b0:	440b      	add	r3, r1
 80060b2:	005b      	lsls	r3, r3, #1
 80060b4:	4403      	add	r3, r0
 80060b6:	f603 134e 	addw	r3, r3, #2382	; 0x94e
 80060ba:	8818      	ldrh	r0, [r3, #0]
 80060bc:	68b9      	ldr	r1, [r7, #8]
 80060be:	4613      	mov	r3, r2
 80060c0:	009b      	lsls	r3, r3, #2
 80060c2:	4413      	add	r3, r2
 80060c4:	005b      	lsls	r3, r3, #1
 80060c6:	440b      	add	r3, r1
 80060c8:	3308      	adds	r3, #8
 80060ca:	4602      	mov	r2, r0
 80060cc:	801a      	strh	r2, [r3, #0]
        AUDIO_Handle->stream_in[alt_settings].interface = phost->device.CfgDesc.Itf_Desc[interface].bInterfaceNumber;
 80060ce:	7bf9      	ldrb	r1, [r7, #15]
 80060d0:	7bba      	ldrb	r2, [r7, #14]
 80060d2:	6878      	ldr	r0, [r7, #4]
 80060d4:	460b      	mov	r3, r1
 80060d6:	019b      	lsls	r3, r3, #6
 80060d8:	440b      	add	r3, r1
 80060da:	005b      	lsls	r3, r3, #1
 80060dc:	4403      	add	r3, r0
 80060de:	f603 1342 	addw	r3, r3, #2370	; 0x942
 80060e2:	7818      	ldrb	r0, [r3, #0]
 80060e4:	68b9      	ldr	r1, [r7, #8]
 80060e6:	4613      	mov	r3, r2
 80060e8:	009b      	lsls	r3, r3, #2
 80060ea:	4413      	add	r3, r2
 80060ec:	005b      	lsls	r3, r3, #1
 80060ee:	440b      	add	r3, r1
 80060f0:	330b      	adds	r3, #11
 80060f2:	4602      	mov	r2, r0
 80060f4:	701a      	strb	r2, [r3, #0]
        AUDIO_Handle->stream_in[alt_settings].AltSettings = phost->device.CfgDesc.Itf_Desc[interface].bAlternateSetting;
 80060f6:	7bf9      	ldrb	r1, [r7, #15]
 80060f8:	7bba      	ldrb	r2, [r7, #14]
 80060fa:	6878      	ldr	r0, [r7, #4]
 80060fc:	460b      	mov	r3, r1
 80060fe:	019b      	lsls	r3, r3, #6
 8006100:	440b      	add	r3, r1
 8006102:	005b      	lsls	r3, r3, #1
 8006104:	4403      	add	r3, r0
 8006106:	f603 1343 	addw	r3, r3, #2371	; 0x943
 800610a:	7818      	ldrb	r0, [r3, #0]
 800610c:	68b9      	ldr	r1, [r7, #8]
 800610e:	4613      	mov	r3, r2
 8006110:	009b      	lsls	r3, r3, #2
 8006112:	4413      	add	r3, r2
 8006114:	005b      	lsls	r3, r3, #1
 8006116:	440b      	add	r3, r1
 8006118:	330a      	adds	r3, #10
 800611a:	4602      	mov	r2, r0
 800611c:	701a      	strb	r2, [r3, #0]
        AUDIO_Handle->stream_in[alt_settings].Poll = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bInterval;
 800611e:	7bfa      	ldrb	r2, [r7, #15]
 8006120:	6879      	ldr	r1, [r7, #4]
 8006122:	4613      	mov	r3, r2
 8006124:	019b      	lsls	r3, r3, #6
 8006126:	4413      	add	r3, r2
 8006128:	005b      	lsls	r3, r3, #1
 800612a:	440b      	add	r3, r1
 800612c:	f503 6315 	add.w	r3, r3, #2384	; 0x950
 8006130:	781b      	ldrb	r3, [r3, #0]
 8006132:	7bba      	ldrb	r2, [r7, #14]
 8006134:	b298      	uxth	r0, r3
 8006136:	68b9      	ldr	r1, [r7, #8]
 8006138:	4613      	mov	r3, r2
 800613a:	009b      	lsls	r3, r3, #2
 800613c:	4413      	add	r3, r2
 800613e:	005b      	lsls	r3, r3, #1
 8006140:	440b      	add	r3, r1
 8006142:	330e      	adds	r3, #14
 8006144:	4602      	mov	r2, r0
 8006146:	801a      	strh	r2, [r3, #0]
        AUDIO_Handle->stream_in[alt_settings].valid = 1U;
 8006148:	7bba      	ldrb	r2, [r7, #14]
 800614a:	68b9      	ldr	r1, [r7, #8]
 800614c:	4613      	mov	r3, r2
 800614e:	009b      	lsls	r3, r3, #2
 8006150:	4413      	add	r3, r2
 8006152:	005b      	lsls	r3, r3, #1
 8006154:	440b      	add	r3, r1
 8006156:	330c      	adds	r3, #12
 8006158:	2201      	movs	r2, #1
 800615a:	701a      	strb	r2, [r3, #0]
        alt_settings++;
 800615c:	7bbb      	ldrb	r3, [r7, #14]
 800615e:	3301      	adds	r3, #1
 8006160:	73bb      	strb	r3, [r7, #14]
  for (interface = 0U; interface < USBH_MAX_NUM_INTERFACES; interface++)
 8006162:	7bfb      	ldrb	r3, [r7, #15]
 8006164:	3301      	adds	r3, #1
 8006166:	73fb      	strb	r3, [r7, #15]
 8006168:	7bfb      	ldrb	r3, [r7, #15]
 800616a:	2b0e      	cmp	r3, #14
 800616c:	f67f af54 	bls.w	8006018 <USBH_AUDIO_FindAudioStreamingIN+0x24>
      }
    }
  }

  if (alt_settings > 0U)
 8006170:	7bbb      	ldrb	r3, [r7, #14]
 8006172:	2b00      	cmp	r3, #0
 8006174:	d001      	beq.n	800617a <USBH_AUDIO_FindAudioStreamingIN+0x186>
  {
    status = USBH_OK;
 8006176:	2300      	movs	r3, #0
 8006178:	737b      	strb	r3, [r7, #13]
  }

  return status;
 800617a:	7b7b      	ldrb	r3, [r7, #13]
}
 800617c:	4618      	mov	r0, r3
 800617e:	3714      	adds	r7, #20
 8006180:	46bd      	mov	sp, r7
 8006182:	bc80      	pop	{r7}
 8006184:	4770      	bx	lr

08006186 <USBH_AUDIO_FindAudioStreamingOUT>:
  * @brief  Find OUT Audio Streaming interfaces
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_FindAudioStreamingOUT(USBH_HandleTypeDef *phost)
{
 8006186:	b480      	push	{r7}
 8006188:	b085      	sub	sp, #20
 800618a:	af00      	add	r7, sp, #0
 800618c:	6078      	str	r0, [r7, #4]
  uint8_t interface, alt_settings;
  USBH_StatusTypeDef status = USBH_FAIL ;
 800618e:	2302      	movs	r3, #2
 8006190:	737b      	strb	r3, [r7, #13]
  AUDIO_HandleTypeDef *AUDIO_Handle;

  AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006198:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 800619c:	69db      	ldr	r3, [r3, #28]
 800619e:	60bb      	str	r3, [r7, #8]

  /* Look For AUDIOSTREAMING IN interface */
  alt_settings = 0U;
 80061a0:	2300      	movs	r3, #0
 80061a2:	73bb      	strb	r3, [r7, #14]
  for (interface = 0U; interface < USBH_MAX_NUM_INTERFACES; interface++)
 80061a4:	2300      	movs	r3, #0
 80061a6:	73fb      	strb	r3, [r7, #15]
 80061a8:	e0a7      	b.n	80062fa <USBH_AUDIO_FindAudioStreamingOUT+0x174>
  {
    if ((phost->device.CfgDesc.Itf_Desc[interface].bInterfaceClass == AC_CLASS) &&
 80061aa:	7bfa      	ldrb	r2, [r7, #15]
 80061ac:	6879      	ldr	r1, [r7, #4]
 80061ae:	4613      	mov	r3, r2
 80061b0:	019b      	lsls	r3, r3, #6
 80061b2:	4413      	add	r3, r2
 80061b4:	005b      	lsls	r3, r3, #1
 80061b6:	440b      	add	r3, r1
 80061b8:	f603 1345 	addw	r3, r3, #2373	; 0x945
 80061bc:	781b      	ldrb	r3, [r3, #0]
 80061be:	2b01      	cmp	r3, #1
 80061c0:	f040 8098 	bne.w	80062f4 <USBH_AUDIO_FindAudioStreamingOUT+0x16e>
        (phost->device.CfgDesc.Itf_Desc[interface].bInterfaceSubClass == USB_SUBCLASS_AUDIOSTREAMING))
 80061c4:	7bfa      	ldrb	r2, [r7, #15]
 80061c6:	6879      	ldr	r1, [r7, #4]
 80061c8:	4613      	mov	r3, r2
 80061ca:	019b      	lsls	r3, r3, #6
 80061cc:	4413      	add	r3, r2
 80061ce:	005b      	lsls	r3, r3, #1
 80061d0:	440b      	add	r3, r1
 80061d2:	f603 1346 	addw	r3, r3, #2374	; 0x946
 80061d6:	781b      	ldrb	r3, [r3, #0]
    if ((phost->device.CfgDesc.Itf_Desc[interface].bInterfaceClass == AC_CLASS) &&
 80061d8:	2b02      	cmp	r3, #2
 80061da:	f040 808b 	bne.w	80062f4 <USBH_AUDIO_FindAudioStreamingOUT+0x16e>
    {
      if (((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) == 0x00U) &&
 80061de:	7bfa      	ldrb	r2, [r7, #15]
 80061e0:	6879      	ldr	r1, [r7, #4]
 80061e2:	4613      	mov	r3, r2
 80061e4:	019b      	lsls	r3, r3, #6
 80061e6:	4413      	add	r3, r2
 80061e8:	005b      	lsls	r3, r3, #1
 80061ea:	440b      	add	r3, r1
 80061ec:	f603 134c 	addw	r3, r3, #2380	; 0x94c
 80061f0:	781b      	ldrb	r3, [r3, #0]
 80061f2:	b25b      	sxtb	r3, r3
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	db7d      	blt.n	80062f4 <USBH_AUDIO_FindAudioStreamingOUT+0x16e>
          (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize > 0U))
 80061f8:	7bfa      	ldrb	r2, [r7, #15]
 80061fa:	6879      	ldr	r1, [r7, #4]
 80061fc:	4613      	mov	r3, r2
 80061fe:	019b      	lsls	r3, r3, #6
 8006200:	4413      	add	r3, r2
 8006202:	005b      	lsls	r3, r3, #1
 8006204:	440b      	add	r3, r1
 8006206:	f603 134e 	addw	r3, r3, #2382	; 0x94e
 800620a:	881b      	ldrh	r3, [r3, #0]
      if (((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) == 0x00U) &&
 800620c:	2b00      	cmp	r3, #0
 800620e:	d071      	beq.n	80062f4 <USBH_AUDIO_FindAudioStreamingOUT+0x16e>
      {
        AUDIO_Handle->stream_out[alt_settings].Ep = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006210:	7bf9      	ldrb	r1, [r7, #15]
 8006212:	7bba      	ldrb	r2, [r7, #14]
 8006214:	6878      	ldr	r0, [r7, #4]
 8006216:	460b      	mov	r3, r1
 8006218:	019b      	lsls	r3, r3, #6
 800621a:	440b      	add	r3, r1
 800621c:	005b      	lsls	r3, r3, #1
 800621e:	4403      	add	r3, r0
 8006220:	f603 134c 	addw	r3, r3, #2380	; 0x94c
 8006224:	7818      	ldrb	r0, [r3, #0]
 8006226:	68b9      	ldr	r1, [r7, #8]
 8006228:	4613      	mov	r3, r2
 800622a:	009b      	lsls	r3, r3, #2
 800622c:	4413      	add	r3, r2
 800622e:	005b      	lsls	r3, r3, #1
 8006230:	440b      	add	r3, r1
 8006232:	3338      	adds	r3, #56	; 0x38
 8006234:	4602      	mov	r2, r0
 8006236:	701a      	strb	r2, [r3, #0]
        AUDIO_Handle->stream_out[alt_settings].EpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006238:	7bf9      	ldrb	r1, [r7, #15]
 800623a:	7bba      	ldrb	r2, [r7, #14]
 800623c:	6878      	ldr	r0, [r7, #4]
 800623e:	460b      	mov	r3, r1
 8006240:	019b      	lsls	r3, r3, #6
 8006242:	440b      	add	r3, r1
 8006244:	005b      	lsls	r3, r3, #1
 8006246:	4403      	add	r3, r0
 8006248:	f603 134e 	addw	r3, r3, #2382	; 0x94e
 800624c:	8818      	ldrh	r0, [r3, #0]
 800624e:	68b9      	ldr	r1, [r7, #8]
 8006250:	4613      	mov	r3, r2
 8006252:	009b      	lsls	r3, r3, #2
 8006254:	4413      	add	r3, r2
 8006256:	005b      	lsls	r3, r3, #1
 8006258:	440b      	add	r3, r1
 800625a:	333a      	adds	r3, #58	; 0x3a
 800625c:	4602      	mov	r2, r0
 800625e:	801a      	strh	r2, [r3, #0]
        AUDIO_Handle->stream_out[alt_settings].interface = phost->device.CfgDesc.Itf_Desc[interface].bInterfaceNumber;
 8006260:	7bf9      	ldrb	r1, [r7, #15]
 8006262:	7bba      	ldrb	r2, [r7, #14]
 8006264:	6878      	ldr	r0, [r7, #4]
 8006266:	460b      	mov	r3, r1
 8006268:	019b      	lsls	r3, r3, #6
 800626a:	440b      	add	r3, r1
 800626c:	005b      	lsls	r3, r3, #1
 800626e:	4403      	add	r3, r0
 8006270:	f603 1342 	addw	r3, r3, #2370	; 0x942
 8006274:	7818      	ldrb	r0, [r3, #0]
 8006276:	68b9      	ldr	r1, [r7, #8]
 8006278:	4613      	mov	r3, r2
 800627a:	009b      	lsls	r3, r3, #2
 800627c:	4413      	add	r3, r2
 800627e:	005b      	lsls	r3, r3, #1
 8006280:	440b      	add	r3, r1
 8006282:	333d      	adds	r3, #61	; 0x3d
 8006284:	4602      	mov	r2, r0
 8006286:	701a      	strb	r2, [r3, #0]
        AUDIO_Handle->stream_out[alt_settings].AltSettings = phost->device.CfgDesc.Itf_Desc[interface].bAlternateSetting;
 8006288:	7bf9      	ldrb	r1, [r7, #15]
 800628a:	7bba      	ldrb	r2, [r7, #14]
 800628c:	6878      	ldr	r0, [r7, #4]
 800628e:	460b      	mov	r3, r1
 8006290:	019b      	lsls	r3, r3, #6
 8006292:	440b      	add	r3, r1
 8006294:	005b      	lsls	r3, r3, #1
 8006296:	4403      	add	r3, r0
 8006298:	f603 1343 	addw	r3, r3, #2371	; 0x943
 800629c:	7818      	ldrb	r0, [r3, #0]
 800629e:	68b9      	ldr	r1, [r7, #8]
 80062a0:	4613      	mov	r3, r2
 80062a2:	009b      	lsls	r3, r3, #2
 80062a4:	4413      	add	r3, r2
 80062a6:	005b      	lsls	r3, r3, #1
 80062a8:	440b      	add	r3, r1
 80062aa:	333c      	adds	r3, #60	; 0x3c
 80062ac:	4602      	mov	r2, r0
 80062ae:	701a      	strb	r2, [r3, #0]
        AUDIO_Handle->stream_out[alt_settings].Poll = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bInterval;
 80062b0:	7bfa      	ldrb	r2, [r7, #15]
 80062b2:	6879      	ldr	r1, [r7, #4]
 80062b4:	4613      	mov	r3, r2
 80062b6:	019b      	lsls	r3, r3, #6
 80062b8:	4413      	add	r3, r2
 80062ba:	005b      	lsls	r3, r3, #1
 80062bc:	440b      	add	r3, r1
 80062be:	f503 6315 	add.w	r3, r3, #2384	; 0x950
 80062c2:	781b      	ldrb	r3, [r3, #0]
 80062c4:	7bba      	ldrb	r2, [r7, #14]
 80062c6:	b298      	uxth	r0, r3
 80062c8:	68b9      	ldr	r1, [r7, #8]
 80062ca:	4613      	mov	r3, r2
 80062cc:	009b      	lsls	r3, r3, #2
 80062ce:	4413      	add	r3, r2
 80062d0:	005b      	lsls	r3, r3, #1
 80062d2:	440b      	add	r3, r1
 80062d4:	3340      	adds	r3, #64	; 0x40
 80062d6:	4602      	mov	r2, r0
 80062d8:	801a      	strh	r2, [r3, #0]
        AUDIO_Handle->stream_out[alt_settings].valid = 1U;
 80062da:	7bba      	ldrb	r2, [r7, #14]
 80062dc:	68b9      	ldr	r1, [r7, #8]
 80062de:	4613      	mov	r3, r2
 80062e0:	009b      	lsls	r3, r3, #2
 80062e2:	4413      	add	r3, r2
 80062e4:	005b      	lsls	r3, r3, #1
 80062e6:	440b      	add	r3, r1
 80062e8:	333e      	adds	r3, #62	; 0x3e
 80062ea:	2201      	movs	r2, #1
 80062ec:	701a      	strb	r2, [r3, #0]
        alt_settings++;
 80062ee:	7bbb      	ldrb	r3, [r7, #14]
 80062f0:	3301      	adds	r3, #1
 80062f2:	73bb      	strb	r3, [r7, #14]
  for (interface = 0U; interface < USBH_MAX_NUM_INTERFACES; interface++)
 80062f4:	7bfb      	ldrb	r3, [r7, #15]
 80062f6:	3301      	adds	r3, #1
 80062f8:	73fb      	strb	r3, [r7, #15]
 80062fa:	7bfb      	ldrb	r3, [r7, #15]
 80062fc:	2b0e      	cmp	r3, #14
 80062fe:	f67f af54 	bls.w	80061aa <USBH_AUDIO_FindAudioStreamingOUT+0x24>
      }
    }
  }

  if (alt_settings > 0U)
 8006302:	7bbb      	ldrb	r3, [r7, #14]
 8006304:	2b00      	cmp	r3, #0
 8006306:	d001      	beq.n	800630c <USBH_AUDIO_FindAudioStreamingOUT+0x186>
  {
    status = USBH_OK;
 8006308:	2300      	movs	r3, #0
 800630a:	737b      	strb	r3, [r7, #13]
  }

  return status;
 800630c:	7b7b      	ldrb	r3, [r7, #13]
}
 800630e:	4618      	mov	r0, r3
 8006310:	3714      	adds	r7, #20
 8006312:	46bd      	mov	sp, r7
 8006314:	bc80      	pop	{r7}
 8006316:	4770      	bx	lr

08006318 <USBH_AUDIO_FindHIDControl>:
  * @brief  Find HID Control interfaces
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_FindHIDControl(USBH_HandleTypeDef *phost)
{
 8006318:	b580      	push	{r7, lr}
 800631a:	b084      	sub	sp, #16
 800631c:	af00      	add	r7, sp, #0
 800631e:	6078      	str	r0, [r7, #4]
  uint8_t interface;
  USBH_StatusTypeDef status = USBH_FAIL;
 8006320:	2302      	movs	r3, #2
 8006322:	73bb      	strb	r3, [r7, #14]
  AUDIO_HandleTypeDef *AUDIO_Handle;

  AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800632a:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 800632e:	69db      	ldr	r3, [r3, #28]
 8006330:	60bb      	str	r3, [r7, #8]

  /* Look For AUDIOCONTROL  interface */
  interface = USBH_FindInterface(phost, AC_CLASS, USB_SUBCLASS_AUDIOCONTROL, 0xFFU);
 8006332:	23ff      	movs	r3, #255	; 0xff
 8006334:	2201      	movs	r2, #1
 8006336:	2101      	movs	r1, #1
 8006338:	6878      	ldr	r0, [r7, #4]
 800633a:	f005 ff91 	bl	800c260 <USBH_FindInterface>
 800633e:	4603      	mov	r3, r0
 8006340:	73fb      	strb	r3, [r7, #15]
  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES))
 8006342:	7bfb      	ldrb	r3, [r7, #15]
 8006344:	2bff      	cmp	r3, #255	; 0xff
 8006346:	d002      	beq.n	800634e <USBH_AUDIO_FindHIDControl+0x36>
 8006348:	7bfb      	ldrb	r3, [r7, #15]
 800634a:	2b0e      	cmp	r3, #14
 800634c:	d901      	bls.n	8006352 <USBH_AUDIO_FindHIDControl+0x3a>
  {
    return USBH_FAIL;
 800634e:	2302      	movs	r3, #2
 8006350:	e069      	b.n	8006426 <USBH_AUDIO_FindHIDControl+0x10e>
  }

  for (interface = 0U; interface < USBH_MAX_NUM_INTERFACES; interface++)
 8006352:	2300      	movs	r3, #0
 8006354:	73fb      	strb	r3, [r7, #15]
 8006356:	e062      	b.n	800641e <USBH_AUDIO_FindHIDControl+0x106>
  {
    if ((phost->device.CfgDesc.Itf_Desc[interface].bInterfaceClass == 0x03U) && /*HID*/
 8006358:	7bfa      	ldrb	r2, [r7, #15]
 800635a:	6879      	ldr	r1, [r7, #4]
 800635c:	4613      	mov	r3, r2
 800635e:	019b      	lsls	r3, r3, #6
 8006360:	4413      	add	r3, r2
 8006362:	005b      	lsls	r3, r3, #1
 8006364:	440b      	add	r3, r1
 8006366:	f603 1345 	addw	r3, r3, #2373	; 0x945
 800636a:	781b      	ldrb	r3, [r3, #0]
 800636c:	2b03      	cmp	r3, #3
 800636e:	d153      	bne.n	8006418 <USBH_AUDIO_FindHIDControl+0x100>
        (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize > 0U))
 8006370:	7bfa      	ldrb	r2, [r7, #15]
 8006372:	6879      	ldr	r1, [r7, #4]
 8006374:	4613      	mov	r3, r2
 8006376:	019b      	lsls	r3, r3, #6
 8006378:	4413      	add	r3, r2
 800637a:	005b      	lsls	r3, r3, #1
 800637c:	440b      	add	r3, r1
 800637e:	f603 134e 	addw	r3, r3, #2382	; 0x94e
 8006382:	881b      	ldrh	r3, [r3, #0]
    if ((phost->device.CfgDesc.Itf_Desc[interface].bInterfaceClass == 0x03U) && /*HID*/
 8006384:	2b00      	cmp	r3, #0
 8006386:	d047      	beq.n	8006418 <USBH_AUDIO_FindHIDControl+0x100>
    {
      if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) == 0x80U)
 8006388:	7bfa      	ldrb	r2, [r7, #15]
 800638a:	6879      	ldr	r1, [r7, #4]
 800638c:	4613      	mov	r3, r2
 800638e:	019b      	lsls	r3, r3, #6
 8006390:	4413      	add	r3, r2
 8006392:	005b      	lsls	r3, r3, #1
 8006394:	440b      	add	r3, r1
 8006396:	f603 134c 	addw	r3, r3, #2380	; 0x94c
 800639a:	781b      	ldrb	r3, [r3, #0]
 800639c:	b25b      	sxtb	r3, r3
 800639e:	2b00      	cmp	r3, #0
 80063a0:	da3a      	bge.n	8006418 <USBH_AUDIO_FindHIDControl+0x100>
      {
        AUDIO_Handle->control.Ep = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80063a2:	7bfa      	ldrb	r2, [r7, #15]
 80063a4:	6879      	ldr	r1, [r7, #4]
 80063a6:	4613      	mov	r3, r2
 80063a8:	019b      	lsls	r3, r3, #6
 80063aa:	4413      	add	r3, r2
 80063ac:	005b      	lsls	r3, r3, #1
 80063ae:	440b      	add	r3, r1
 80063b0:	f603 134c 	addw	r3, r3, #2380	; 0x94c
 80063b4:	781a      	ldrb	r2, [r3, #0]
 80063b6:	68bb      	ldr	r3, [r7, #8]
 80063b8:	f883 2184 	strb.w	r2, [r3, #388]	; 0x184
        AUDIO_Handle->control.EpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80063bc:	7bfa      	ldrb	r2, [r7, #15]
 80063be:	6879      	ldr	r1, [r7, #4]
 80063c0:	4613      	mov	r3, r2
 80063c2:	019b      	lsls	r3, r3, #6
 80063c4:	4413      	add	r3, r2
 80063c6:	005b      	lsls	r3, r3, #1
 80063c8:	440b      	add	r3, r1
 80063ca:	f603 134e 	addw	r3, r3, #2382	; 0x94e
 80063ce:	881a      	ldrh	r2, [r3, #0]
 80063d0:	68bb      	ldr	r3, [r7, #8]
 80063d2:	f8a3 2186 	strh.w	r2, [r3, #390]	; 0x186
        AUDIO_Handle->control.interface = phost->device.CfgDesc.Itf_Desc[interface].bInterfaceNumber;
 80063d6:	7bfa      	ldrb	r2, [r7, #15]
 80063d8:	6879      	ldr	r1, [r7, #4]
 80063da:	4613      	mov	r3, r2
 80063dc:	019b      	lsls	r3, r3, #6
 80063de:	4413      	add	r3, r2
 80063e0:	005b      	lsls	r3, r3, #1
 80063e2:	440b      	add	r3, r1
 80063e4:	f603 1342 	addw	r3, r3, #2370	; 0x942
 80063e8:	781a      	ldrb	r2, [r3, #0]
 80063ea:	68bb      	ldr	r3, [r7, #8]
 80063ec:	f883 2188 	strb.w	r2, [r3, #392]	; 0x188
        AUDIO_Handle->control.Poll = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bInterval;
 80063f0:	7bfa      	ldrb	r2, [r7, #15]
 80063f2:	6879      	ldr	r1, [r7, #4]
 80063f4:	4613      	mov	r3, r2
 80063f6:	019b      	lsls	r3, r3, #6
 80063f8:	4413      	add	r3, r2
 80063fa:	005b      	lsls	r3, r3, #1
 80063fc:	440b      	add	r3, r1
 80063fe:	f503 6315 	add.w	r3, r3, #2384	; 0x950
 8006402:	781a      	ldrb	r2, [r3, #0]
 8006404:	68bb      	ldr	r3, [r7, #8]
 8006406:	f883 218b 	strb.w	r2, [r3, #395]	; 0x18b
        AUDIO_Handle->control.supported = 1U;
 800640a:	68bb      	ldr	r3, [r7, #8]
 800640c:	2201      	movs	r2, #1
 800640e:	f883 2189 	strb.w	r2, [r3, #393]	; 0x189
        status = USBH_OK;
 8006412:	2300      	movs	r3, #0
 8006414:	73bb      	strb	r3, [r7, #14]
        break;
 8006416:	e005      	b.n	8006424 <USBH_AUDIO_FindHIDControl+0x10c>
  for (interface = 0U; interface < USBH_MAX_NUM_INTERFACES; interface++)
 8006418:	7bfb      	ldrb	r3, [r7, #15]
 800641a:	3301      	adds	r3, #1
 800641c:	73fb      	strb	r3, [r7, #15]
 800641e:	7bfb      	ldrb	r3, [r7, #15]
 8006420:	2b0e      	cmp	r3, #14
 8006422:	d999      	bls.n	8006358 <USBH_AUDIO_FindHIDControl+0x40>
      }
    }
  }

  return status;
 8006424:	7bbb      	ldrb	r3, [r7, #14]
}
 8006426:	4618      	mov	r0, r3
 8006428:	3710      	adds	r7, #16
 800642a:	46bd      	mov	sp, r7
 800642c:	bd80      	pop	{r7, pc}
	...

08006430 <USBH_AUDIO_ParseCSDescriptors>:
  * @brief  Parse AC and interfaces Descriptors
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_ParseCSDescriptors(USBH_HandleTypeDef *phost)
{
 8006430:	b580      	push	{r7, lr}
 8006432:	b088      	sub	sp, #32
 8006434:	af00      	add	r7, sp, #0
 8006436:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8006438:	2300      	movs	r3, #0
 800643a:	77fb      	strb	r3, [r7, #31]
  USBH_DescHeader_t            *pdesc;
  uint16_t                      ptr;
  uint8_t                       itf_index = 0U;
 800643c:	2300      	movs	r3, #0
 800643e:	75fb      	strb	r3, [r7, #23]
  uint8_t                       itf_number = 0U;
 8006440:	2300      	movs	r3, #0
 8006442:	75bb      	strb	r3, [r7, #22]
  uint8_t                       alt_setting;
  AUDIO_HandleTypeDef           *AUDIO_Handle;

  AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800644a:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 800644e:	69db      	ldr	r3, [r3, #28]
 8006450:	613b      	str	r3, [r7, #16]
  pdesc   = (USBH_DescHeader_t *)(void *)(phost->device.CfgDesc_Raw);
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	331c      	adds	r3, #28
 8006456:	61bb      	str	r3, [r7, #24]
  ptr = USB_LEN_CFG_DESC;
 8006458:	2309      	movs	r3, #9
 800645a:	81bb      	strh	r3, [r7, #12]

  AUDIO_Handle->class_desc.FeatureUnitNum = 0U;
 800645c:	693b      	ldr	r3, [r7, #16]
 800645e:	2200      	movs	r2, #0
 8006460:	f8a3 20ee 	strh.w	r2, [r3, #238]	; 0xee
  AUDIO_Handle->class_desc.InputTerminalNum = 0U;
 8006464:	693b      	ldr	r3, [r7, #16]
 8006466:	2200      	movs	r2, #0
 8006468:	f8a3 20ea 	strh.w	r2, [r3, #234]	; 0xea
  AUDIO_Handle->class_desc.OutputTerminalNum = 0U;
 800646c:	693b      	ldr	r3, [r7, #16]
 800646e:	2200      	movs	r2, #0
 8006470:	f8a3 20ec 	strh.w	r2, [r3, #236]	; 0xec
  AUDIO_Handle->class_desc.ASNum = 0U;
 8006474:	693b      	ldr	r3, [r7, #16]
 8006476:	2200      	movs	r2, #0
 8006478:	f8a3 20e8 	strh.w	r2, [r3, #232]	; 0xe8

  while (ptr < phost->device.CfgDesc.wTotalLength)
 800647c:	e04e      	b.n	800651c <USBH_AUDIO_ParseCSDescriptors+0xec>
  {
    pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800647e:	f107 030c 	add.w	r3, r7, #12
 8006482:	4619      	mov	r1, r3
 8006484:	69b8      	ldr	r0, [r7, #24]
 8006486:	f006 fec9 	bl	800d21c <USBH_GetNextDesc>
 800648a:	61b8      	str	r0, [r7, #24]

    switch (pdesc->bDescriptorType)
 800648c:	69bb      	ldr	r3, [r7, #24]
 800648e:	785b      	ldrb	r3, [r3, #1]
 8006490:	2b04      	cmp	r3, #4
 8006492:	d002      	beq.n	800649a <USBH_AUDIO_ParseCSDescriptors+0x6a>
 8006494:	2b24      	cmp	r3, #36	; 0x24
 8006496:	d00f      	beq.n	80064b8 <USBH_AUDIO_ParseCSDescriptors+0x88>
 8006498:	e03f      	b.n	800651a <USBH_AUDIO_ParseCSDescriptors+0xea>
    {

      case USB_DESC_TYPE_INTERFACE:
        itf_number = *((uint8_t *)(void *)pdesc + 2U);
 800649a:	69bb      	ldr	r3, [r7, #24]
 800649c:	789b      	ldrb	r3, [r3, #2]
 800649e:	75bb      	strb	r3, [r7, #22]
        alt_setting = *((uint8_t *)(void *)pdesc + 3U);
 80064a0:	69bb      	ldr	r3, [r7, #24]
 80064a2:	78db      	ldrb	r3, [r3, #3]
 80064a4:	73fb      	strb	r3, [r7, #15]
        itf_index = USBH_FindInterfaceIndex(phost, itf_number, alt_setting);
 80064a6:	7bfa      	ldrb	r2, [r7, #15]
 80064a8:	7dbb      	ldrb	r3, [r7, #22]
 80064aa:	4619      	mov	r1, r3
 80064ac:	6878      	ldr	r0, [r7, #4]
 80064ae:	f005 ff1d 	bl	800c2ec <USBH_FindInterfaceIndex>
 80064b2:	4603      	mov	r3, r0
 80064b4:	75fb      	strb	r3, [r7, #23]
        break;
 80064b6:	e031      	b.n	800651c <USBH_AUDIO_ParseCSDescriptors+0xec>

      case USB_DESC_TYPE_CS_INTERFACE:
        if (itf_number <= phost->device.CfgDesc.bNumInterfaces)
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	f893 393a 	ldrb.w	r3, [r3, #2362]	; 0x93a
 80064be:	7dba      	ldrb	r2, [r7, #22]
 80064c0:	429a      	cmp	r2, r3
 80064c2:	d82b      	bhi.n	800651c <USBH_AUDIO_ParseCSDescriptors+0xec>
        {
          if ((itf_index == 0xFFU) || (itf_index >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80064c4:	7dfb      	ldrb	r3, [r7, #23]
 80064c6:	2bff      	cmp	r3, #255	; 0xff
 80064c8:	d002      	beq.n	80064d0 <USBH_AUDIO_ParseCSDescriptors+0xa0>
 80064ca:	7dfb      	ldrb	r3, [r7, #23]
 80064cc:	2b0e      	cmp	r3, #14
 80064ce:	d912      	bls.n	80064f6 <USBH_AUDIO_ParseCSDescriptors+0xc6>
          {
            USBH_DbgLog("Cannot Find the audio interface index for %s class.", phost->pActiveClass->Name);
 80064d0:	4818      	ldr	r0, [pc, #96]	; (8006534 <USBH_AUDIO_ParseCSDescriptors+0x104>)
 80064d2:	f008 f967 	bl	800e7a4 <iprintf>
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80064dc:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	4619      	mov	r1, r3
 80064e4:	4814      	ldr	r0, [pc, #80]	; (8006538 <USBH_AUDIO_ParseCSDescriptors+0x108>)
 80064e6:	f008 f95d 	bl	800e7a4 <iprintf>
 80064ea:	200a      	movs	r0, #10
 80064ec:	f008 f972 	bl	800e7d4 <putchar>
            status = USBH_FAIL;
 80064f0:	2302      	movs	r3, #2
 80064f2:	77fb      	strb	r3, [r7, #31]
 80064f4:	e010      	b.n	8006518 <USBH_AUDIO_ParseCSDescriptors+0xe8>
          }
          else
          {

            ParseCSDescriptors(&AUDIO_Handle->class_desc,
 80064f6:	693b      	ldr	r3, [r7, #16]
 80064f8:	f103 006c 	add.w	r0, r3, #108	; 0x6c
 80064fc:	7dfa      	ldrb	r2, [r7, #23]
 80064fe:	6879      	ldr	r1, [r7, #4]
 8006500:	4613      	mov	r3, r2
 8006502:	019b      	lsls	r3, r3, #6
 8006504:	4413      	add	r3, r2
 8006506:	005b      	lsls	r3, r3, #1
 8006508:	440b      	add	r3, r1
 800650a:	f603 1346 	addw	r3, r3, #2374	; 0x946
 800650e:	781b      	ldrb	r3, [r3, #0]
 8006510:	69ba      	ldr	r2, [r7, #24]
 8006512:	4619      	mov	r1, r3
 8006514:	f000 f812 	bl	800653c <ParseCSDescriptors>
                               phost->device.CfgDesc.Itf_Desc[itf_index].bInterfaceSubClass,
                               (uint8_t *)pdesc);
          }
        }
        break;
 8006518:	e000      	b.n	800651c <USBH_AUDIO_ParseCSDescriptors+0xec>

      default:
        break;
 800651a:	bf00      	nop
  while (ptr < phost->device.CfgDesc.wTotalLength)
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	f8b3 2938 	ldrh.w	r2, [r3, #2360]	; 0x938
 8006522:	89bb      	ldrh	r3, [r7, #12]
 8006524:	429a      	cmp	r2, r3
 8006526:	d8aa      	bhi.n	800647e <USBH_AUDIO_ParseCSDescriptors+0x4e>
    }
  }

  return status;
 8006528:	7ffb      	ldrb	r3, [r7, #31]
}
 800652a:	4618      	mov	r0, r3
 800652c:	3720      	adds	r7, #32
 800652e:	46bd      	mov	sp, r7
 8006530:	bd80      	pop	{r7, pc}
 8006532:	bf00      	nop
 8006534:	0800f498 	.word	0x0800f498
 8006538:	0800f51c 	.word	0x0800f51c

0800653c <ParseCSDescriptors>:
  * @retval USBH Status
  */
static USBH_StatusTypeDef ParseCSDescriptors(AUDIO_ClassSpecificDescTypedef *class_desc,
                                             uint8_t ac_subclass,
                                             uint8_t *pdesc)
{
 800653c:	b480      	push	{r7}
 800653e:	b085      	sub	sp, #20
 8006540:	af00      	add	r7, sp, #0
 8006542:	60f8      	str	r0, [r7, #12]
 8006544:	460b      	mov	r3, r1
 8006546:	607a      	str	r2, [r7, #4]
 8006548:	72fb      	strb	r3, [r7, #11]
  if (ac_subclass == USB_SUBCLASS_AUDIOCONTROL)
 800654a:	7afb      	ldrb	r3, [r7, #11]
 800654c:	2b01      	cmp	r3, #1
 800654e:	d163      	bne.n	8006618 <ParseCSDescriptors+0xdc>
  {
    switch (pdesc[2])
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	3302      	adds	r3, #2
 8006554:	781b      	ldrb	r3, [r3, #0]
 8006556:	3b01      	subs	r3, #1
 8006558:	2b05      	cmp	r3, #5
 800655a:	f200 8081 	bhi.w	8006660 <ParseCSDescriptors+0x124>
 800655e:	a201      	add	r2, pc, #4	; (adr r2, 8006564 <ParseCSDescriptors+0x28>)
 8006560:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006564:	0800657d 	.word	0x0800657d
 8006568:	08006585 	.word	0x08006585
 800656c:	080065a1 	.word	0x080065a1
 8006570:	080065fb 	.word	0x080065fb
 8006574:	080065dd 	.word	0x080065dd
 8006578:	080065bf 	.word	0x080065bf
    {
      case UAC_HEADER:
        class_desc->cs_desc.HeaderDesc = (AUDIO_HeaderDescTypeDef *)(void *)pdesc;
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	687a      	ldr	r2, [r7, #4]
 8006580:	601a      	str	r2, [r3, #0]
        break;
 8006582:	e070      	b.n	8006666 <ParseCSDescriptors+0x12a>

      case UAC_INPUT_TERMINAL:
        class_desc->cs_desc.InputTerminalDesc[class_desc->InputTerminalNum++] = (AUDIO_ITDescTypeDef *)(void *)pdesc;
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	f8b3 307e 	ldrh.w	r3, [r3, #126]	; 0x7e
 800658a:	1c5a      	adds	r2, r3, #1
 800658c:	b291      	uxth	r1, r2
 800658e:	68fa      	ldr	r2, [r7, #12]
 8006590:	f8a2 107e 	strh.w	r1, [r2, #126]	; 0x7e
 8006594:	68fa      	ldr	r2, [r7, #12]
 8006596:	009b      	lsls	r3, r3, #2
 8006598:	4413      	add	r3, r2
 800659a:	687a      	ldr	r2, [r7, #4]
 800659c:	605a      	str	r2, [r3, #4]
        break;
 800659e:	e062      	b.n	8006666 <ParseCSDescriptors+0x12a>

      case UAC_OUTPUT_TERMINAL:
        class_desc->cs_desc.OutputTerminalDesc[class_desc->OutputTerminalNum++] = (AUDIO_OTDescTypeDef *)(void *)pdesc;
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
 80065a6:	1c5a      	adds	r2, r3, #1
 80065a8:	b291      	uxth	r1, r2
 80065aa:	68fa      	ldr	r2, [r7, #12]
 80065ac:	f8a2 1080 	strh.w	r1, [r2, #128]	; 0x80
 80065b0:	68fa      	ldr	r2, [r7, #12]
 80065b2:	3304      	adds	r3, #4
 80065b4:	009b      	lsls	r3, r3, #2
 80065b6:	4413      	add	r3, r2
 80065b8:	687a      	ldr	r2, [r7, #4]
 80065ba:	605a      	str	r2, [r3, #4]
        break;
 80065bc:	e053      	b.n	8006666 <ParseCSDescriptors+0x12a>

      case UAC_FEATURE_UNIT:
        class_desc->cs_desc.FeatureUnitDesc[class_desc->FeatureUnitNum++] = (AUDIO_FeatureDescTypeDef *)(void *)pdesc;
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
 80065c4:	1c5a      	adds	r2, r3, #1
 80065c6:	b291      	uxth	r1, r2
 80065c8:	68fa      	ldr	r2, [r7, #12]
 80065ca:	f8a2 1082 	strh.w	r1, [r2, #130]	; 0x82
 80065ce:	68fa      	ldr	r2, [r7, #12]
 80065d0:	3308      	adds	r3, #8
 80065d2:	009b      	lsls	r3, r3, #2
 80065d4:	4413      	add	r3, r2
 80065d6:	687a      	ldr	r2, [r7, #4]
 80065d8:	605a      	str	r2, [r3, #4]
        break;
 80065da:	e044      	b.n	8006666 <ParseCSDescriptors+0x12a>

      case UAC_SELECTOR_UNIT:
        class_desc->cs_desc.SelectorUnitDesc[class_desc->SelectorUnitNum++] = (AUDIO_SelectorDescTypeDef *)(void *)pdesc;
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 80065e2:	1c5a      	adds	r2, r3, #1
 80065e4:	b291      	uxth	r1, r2
 80065e6:	68fa      	ldr	r2, [r7, #12]
 80065e8:	f8a2 1084 	strh.w	r1, [r2, #132]	; 0x84
 80065ec:	68fa      	ldr	r2, [r7, #12]
 80065ee:	3310      	adds	r3, #16
 80065f0:	009b      	lsls	r3, r3, #2
 80065f2:	4413      	add	r3, r2
 80065f4:	687a      	ldr	r2, [r7, #4]
 80065f6:	605a      	str	r2, [r3, #4]
        break;
 80065f8:	e035      	b.n	8006666 <ParseCSDescriptors+0x12a>

      case UAC_MIXER_UNIT:
        class_desc->cs_desc.MixerUnitDesc[class_desc->MixerUnitNum++] = (AUDIO_MixerDescTypeDef *)(void *)pdesc;
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 8006600:	1c5a      	adds	r2, r3, #1
 8006602:	b291      	uxth	r1, r2
 8006604:	68fa      	ldr	r2, [r7, #12]
 8006606:	f8a2 1086 	strh.w	r1, [r2, #134]	; 0x86
 800660a:	68fa      	ldr	r2, [r7, #12]
 800660c:	330c      	adds	r3, #12
 800660e:	009b      	lsls	r3, r3, #2
 8006610:	4413      	add	r3, r2
 8006612:	687a      	ldr	r2, [r7, #4]
 8006614:	605a      	str	r2, [r3, #4]
        break;
 8006616:	e026      	b.n	8006666 <ParseCSDescriptors+0x12a>
        break;
    }
  }
  else
  {
    if (ac_subclass == USB_SUBCLASS_AUDIOSTREAMING)
 8006618:	7afb      	ldrb	r3, [r7, #11]
 800661a:	2b02      	cmp	r3, #2
 800661c:	d122      	bne.n	8006664 <ParseCSDescriptors+0x128>
    {
      switch (pdesc[2])
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	3302      	adds	r3, #2
 8006622:	781b      	ldrb	r3, [r3, #0]
 8006624:	2b01      	cmp	r3, #1
 8006626:	d002      	beq.n	800662e <ParseCSDescriptors+0xf2>
 8006628:	2b02      	cmp	r3, #2
 800662a:	d00a      	beq.n	8006642 <ParseCSDescriptors+0x106>
          break;
        case UAC_FORMAT_TYPE:
          class_desc->as_desc[class_desc->ASNum++].FormatTypeDesc = (AUDIO_ASFormatTypeDescTypeDef *)(void *)pdesc;
          break;
        default:
          break;
 800662c:	e01b      	b.n	8006666 <ParseCSDescriptors+0x12a>
          class_desc->as_desc[class_desc->ASNum].GeneralDesc = (AUDIO_ASGeneralDescTypeDef *)(void *)pdesc;
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 8006634:	68fa      	ldr	r2, [r7, #12]
 8006636:	330a      	adds	r3, #10
 8006638:	00db      	lsls	r3, r3, #3
 800663a:	4413      	add	r3, r2
 800663c:	687a      	ldr	r2, [r7, #4]
 800663e:	605a      	str	r2, [r3, #4]
          break;
 8006640:	e011      	b.n	8006666 <ParseCSDescriptors+0x12a>
          class_desc->as_desc[class_desc->ASNum++].FormatTypeDesc = (AUDIO_ASFormatTypeDescTypeDef *)(void *)pdesc;
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 8006648:	1c5a      	adds	r2, r3, #1
 800664a:	b291      	uxth	r1, r2
 800664c:	68fa      	ldr	r2, [r7, #12]
 800664e:	f8a2 107c 	strh.w	r1, [r2, #124]	; 0x7c
 8006652:	68fa      	ldr	r2, [r7, #12]
 8006654:	330a      	adds	r3, #10
 8006656:	00db      	lsls	r3, r3, #3
 8006658:	4413      	add	r3, r2
 800665a:	687a      	ldr	r2, [r7, #4]
 800665c:	609a      	str	r2, [r3, #8]
          break;
 800665e:	e002      	b.n	8006666 <ParseCSDescriptors+0x12a>
        break;
 8006660:	bf00      	nop
 8006662:	e000      	b.n	8006666 <ParseCSDescriptors+0x12a>
      }
    }
 8006664:	bf00      	nop
  }

  return USBH_OK;
 8006666:	2300      	movs	r3, #0
}
 8006668:	4618      	mov	r0, r3
 800666a:	3714      	adds	r7, #20
 800666c:	46bd      	mov	sp, r7
 800666e:	bc80      	pop	{r7}
 8006670:	4770      	bx	lr
 8006672:	bf00      	nop

08006674 <USBH_AUDIO_FindLinkedUnit>:
  * @param  phost: Host handle
  * @param  UnitID: Unit identifer
  * @retval UnitID, Index and Type of the associated Unit
  */
static uint32_t USBH_AUDIO_FindLinkedUnit(USBH_HandleTypeDef *phost, uint8_t UnitID)
{
 8006674:	b480      	push	{r7}
 8006676:	b085      	sub	sp, #20
 8006678:	af00      	add	r7, sp, #0
 800667a:	6078      	str	r0, [r7, #4]
 800667c:	460b      	mov	r3, r1
 800667e:	70fb      	strb	r3, [r7, #3]
  uint8_t Index;
  AUDIO_HandleTypeDef *AUDIO_Handle;

  AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006686:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 800668a:	69db      	ldr	r3, [r3, #28]
 800668c:	60bb      	str	r3, [r7, #8]

  /* Find Feature Unit */
  for (Index = 0U; Index < AUDIO_Handle->class_desc.FeatureUnitNum; Index ++)
 800668e:	2300      	movs	r3, #0
 8006690:	73fb      	strb	r3, [r7, #15]
 8006692:	e01b      	b.n	80066cc <USBH_AUDIO_FindLinkedUnit+0x58>
  {
    if (AUDIO_Handle->class_desc.cs_desc.FeatureUnitDesc[Index]->bSourceID == UnitID)
 8006694:	7bfb      	ldrb	r3, [r7, #15]
 8006696:	68ba      	ldr	r2, [r7, #8]
 8006698:	3322      	adds	r3, #34	; 0x22
 800669a:	009b      	lsls	r3, r3, #2
 800669c:	4413      	add	r3, r2
 800669e:	689b      	ldr	r3, [r3, #8]
 80066a0:	791b      	ldrb	r3, [r3, #4]
 80066a2:	78fa      	ldrb	r2, [r7, #3]
 80066a4:	429a      	cmp	r2, r3
 80066a6:	d10e      	bne.n	80066c6 <USBH_AUDIO_FindLinkedUnit+0x52>
    {
      UnitID = AUDIO_Handle->class_desc.cs_desc.FeatureUnitDesc[Index]->bUnitID;
 80066a8:	7bfb      	ldrb	r3, [r7, #15]
 80066aa:	68ba      	ldr	r2, [r7, #8]
 80066ac:	3322      	adds	r3, #34	; 0x22
 80066ae:	009b      	lsls	r3, r3, #2
 80066b0:	4413      	add	r3, r2
 80066b2:	689b      	ldr	r3, [r3, #8]
 80066b4:	78db      	ldrb	r3, [r3, #3]
 80066b6:	70fb      	strb	r3, [r7, #3]

      return (((uint32_t)UnitID << 16U) | (UAC_FEATURE_UNIT << 8U) | (uint32_t)Index);
 80066b8:	78fb      	ldrb	r3, [r7, #3]
 80066ba:	041a      	lsls	r2, r3, #16
 80066bc:	7bfb      	ldrb	r3, [r7, #15]
 80066be:	4313      	orrs	r3, r2
 80066c0:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 80066c4:	e089      	b.n	80067da <USBH_AUDIO_FindLinkedUnit+0x166>
  for (Index = 0U; Index < AUDIO_Handle->class_desc.FeatureUnitNum; Index ++)
 80066c6:	7bfb      	ldrb	r3, [r7, #15]
 80066c8:	3301      	adds	r3, #1
 80066ca:	73fb      	strb	r3, [r7, #15]
 80066cc:	7bfb      	ldrb	r3, [r7, #15]
 80066ce:	b29a      	uxth	r2, r3
 80066d0:	68bb      	ldr	r3, [r7, #8]
 80066d2:	f8b3 30ee 	ldrh.w	r3, [r3, #238]	; 0xee
 80066d6:	429a      	cmp	r2, r3
 80066d8:	d3dc      	bcc.n	8006694 <USBH_AUDIO_FindLinkedUnit+0x20>
    }
  }

  /* Find Mixer Unit */
  for (Index = 0U; Index < AUDIO_Handle->class_desc.MixerUnitNum; Index ++)
 80066da:	2300      	movs	r3, #0
 80066dc:	73fb      	strb	r3, [r7, #15]
 80066de:	e026      	b.n	800672e <USBH_AUDIO_FindLinkedUnit+0xba>
  {
    if ((AUDIO_Handle->class_desc.cs_desc.MixerUnitDesc[Index]->bSourceID0 == UnitID) ||
 80066e0:	7bfb      	ldrb	r3, [r7, #15]
 80066e2:	68ba      	ldr	r2, [r7, #8]
 80066e4:	3326      	adds	r3, #38	; 0x26
 80066e6:	009b      	lsls	r3, r3, #2
 80066e8:	4413      	add	r3, r2
 80066ea:	689b      	ldr	r3, [r3, #8]
 80066ec:	795b      	ldrb	r3, [r3, #5]
 80066ee:	78fa      	ldrb	r2, [r7, #3]
 80066f0:	429a      	cmp	r2, r3
 80066f2:	d009      	beq.n	8006708 <USBH_AUDIO_FindLinkedUnit+0x94>
        (AUDIO_Handle->class_desc.cs_desc.MixerUnitDesc[Index]->bSourceID1 == UnitID))
 80066f4:	7bfb      	ldrb	r3, [r7, #15]
 80066f6:	68ba      	ldr	r2, [r7, #8]
 80066f8:	3326      	adds	r3, #38	; 0x26
 80066fa:	009b      	lsls	r3, r3, #2
 80066fc:	4413      	add	r3, r2
 80066fe:	689b      	ldr	r3, [r3, #8]
 8006700:	799b      	ldrb	r3, [r3, #6]
    if ((AUDIO_Handle->class_desc.cs_desc.MixerUnitDesc[Index]->bSourceID0 == UnitID) ||
 8006702:	78fa      	ldrb	r2, [r7, #3]
 8006704:	429a      	cmp	r2, r3
 8006706:	d10f      	bne.n	8006728 <USBH_AUDIO_FindLinkedUnit+0xb4>
    {
      UnitID = AUDIO_Handle->class_desc.cs_desc.MixerUnitDesc[Index]->bUnitID;
 8006708:	7bfb      	ldrb	r3, [r7, #15]
 800670a:	68ba      	ldr	r2, [r7, #8]
 800670c:	3326      	adds	r3, #38	; 0x26
 800670e:	009b      	lsls	r3, r3, #2
 8006710:	4413      	add	r3, r2
 8006712:	689b      	ldr	r3, [r3, #8]
 8006714:	78db      	ldrb	r3, [r3, #3]
 8006716:	70fb      	strb	r3, [r7, #3]

      return ((UnitID << 16U) | (UAC_MIXER_UNIT << 8U) | Index);
 8006718:	78fb      	ldrb	r3, [r7, #3]
 800671a:	041b      	lsls	r3, r3, #16
 800671c:	461a      	mov	r2, r3
 800671e:	7bfb      	ldrb	r3, [r7, #15]
 8006720:	4313      	orrs	r3, r2
 8006722:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006726:	e058      	b.n	80067da <USBH_AUDIO_FindLinkedUnit+0x166>
  for (Index = 0U; Index < AUDIO_Handle->class_desc.MixerUnitNum; Index ++)
 8006728:	7bfb      	ldrb	r3, [r7, #15]
 800672a:	3301      	adds	r3, #1
 800672c:	73fb      	strb	r3, [r7, #15]
 800672e:	7bfb      	ldrb	r3, [r7, #15]
 8006730:	b29a      	uxth	r2, r3
 8006732:	68bb      	ldr	r3, [r7, #8]
 8006734:	f8b3 30f2 	ldrh.w	r3, [r3, #242]	; 0xf2
 8006738:	429a      	cmp	r2, r3
 800673a:	d3d1      	bcc.n	80066e0 <USBH_AUDIO_FindLinkedUnit+0x6c>
    }
  }

  /* Find Selector Unit */
  for (Index = 0U; Index < AUDIO_Handle->class_desc.SelectorUnitNum; Index ++)
 800673c:	2300      	movs	r3, #0
 800673e:	73fb      	strb	r3, [r7, #15]
 8006740:	e01c      	b.n	800677c <USBH_AUDIO_FindLinkedUnit+0x108>
  {
    if (AUDIO_Handle->class_desc.cs_desc.SelectorUnitDesc[Index]->bSourceID0 == UnitID)
 8006742:	7bfb      	ldrb	r3, [r7, #15]
 8006744:	68ba      	ldr	r2, [r7, #8]
 8006746:	332a      	adds	r3, #42	; 0x2a
 8006748:	009b      	lsls	r3, r3, #2
 800674a:	4413      	add	r3, r2
 800674c:	689b      	ldr	r3, [r3, #8]
 800674e:	795b      	ldrb	r3, [r3, #5]
 8006750:	78fa      	ldrb	r2, [r7, #3]
 8006752:	429a      	cmp	r2, r3
 8006754:	d10f      	bne.n	8006776 <USBH_AUDIO_FindLinkedUnit+0x102>
    {
      UnitID = AUDIO_Handle->class_desc.cs_desc.SelectorUnitDesc[Index]->bUnitID;
 8006756:	7bfb      	ldrb	r3, [r7, #15]
 8006758:	68ba      	ldr	r2, [r7, #8]
 800675a:	332a      	adds	r3, #42	; 0x2a
 800675c:	009b      	lsls	r3, r3, #2
 800675e:	4413      	add	r3, r2
 8006760:	689b      	ldr	r3, [r3, #8]
 8006762:	78db      	ldrb	r3, [r3, #3]
 8006764:	70fb      	strb	r3, [r7, #3]

      return ((UnitID << 16U) | (UAC_SELECTOR_UNIT << 8U) | Index);
 8006766:	78fb      	ldrb	r3, [r7, #3]
 8006768:	041b      	lsls	r3, r3, #16
 800676a:	461a      	mov	r2, r3
 800676c:	7bfb      	ldrb	r3, [r7, #15]
 800676e:	4313      	orrs	r3, r2
 8006770:	f443 63a0 	orr.w	r3, r3, #1280	; 0x500
 8006774:	e031      	b.n	80067da <USBH_AUDIO_FindLinkedUnit+0x166>
  for (Index = 0U; Index < AUDIO_Handle->class_desc.SelectorUnitNum; Index ++)
 8006776:	7bfb      	ldrb	r3, [r7, #15]
 8006778:	3301      	adds	r3, #1
 800677a:	73fb      	strb	r3, [r7, #15]
 800677c:	7bfb      	ldrb	r3, [r7, #15]
 800677e:	b29a      	uxth	r2, r3
 8006780:	68bb      	ldr	r3, [r7, #8]
 8006782:	f8b3 30f0 	ldrh.w	r3, [r3, #240]	; 0xf0
 8006786:	429a      	cmp	r2, r3
 8006788:	d3db      	bcc.n	8006742 <USBH_AUDIO_FindLinkedUnit+0xce>
    }
  }

  /* Find OT Unit */
  for (Index = 0U; Index < AUDIO_Handle->class_desc.OutputTerminalNum; Index ++)
 800678a:	2300      	movs	r3, #0
 800678c:	73fb      	strb	r3, [r7, #15]
 800678e:	e01c      	b.n	80067ca <USBH_AUDIO_FindLinkedUnit+0x156>
  {
    if (AUDIO_Handle->class_desc.cs_desc.OutputTerminalDesc[Index]->bSourceID == UnitID)
 8006790:	7bfb      	ldrb	r3, [r7, #15]
 8006792:	68ba      	ldr	r2, [r7, #8]
 8006794:	331e      	adds	r3, #30
 8006796:	009b      	lsls	r3, r3, #2
 8006798:	4413      	add	r3, r2
 800679a:	689b      	ldr	r3, [r3, #8]
 800679c:	79db      	ldrb	r3, [r3, #7]
 800679e:	78fa      	ldrb	r2, [r7, #3]
 80067a0:	429a      	cmp	r2, r3
 80067a2:	d10f      	bne.n	80067c4 <USBH_AUDIO_FindLinkedUnit+0x150>
    {
      UnitID = AUDIO_Handle->class_desc.cs_desc.OutputTerminalDesc[Index]->bTerminalID;
 80067a4:	7bfb      	ldrb	r3, [r7, #15]
 80067a6:	68ba      	ldr	r2, [r7, #8]
 80067a8:	331e      	adds	r3, #30
 80067aa:	009b      	lsls	r3, r3, #2
 80067ac:	4413      	add	r3, r2
 80067ae:	689b      	ldr	r3, [r3, #8]
 80067b0:	78db      	ldrb	r3, [r3, #3]
 80067b2:	70fb      	strb	r3, [r7, #3]

      return ((UnitID << 16U) | (UAC_OUTPUT_TERMINAL << 8U) | Index);
 80067b4:	78fb      	ldrb	r3, [r7, #3]
 80067b6:	041b      	lsls	r3, r3, #16
 80067b8:	461a      	mov	r2, r3
 80067ba:	7bfb      	ldrb	r3, [r7, #15]
 80067bc:	4313      	orrs	r3, r2
 80067be:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80067c2:	e00a      	b.n	80067da <USBH_AUDIO_FindLinkedUnit+0x166>
  for (Index = 0U; Index < AUDIO_Handle->class_desc.OutputTerminalNum; Index ++)
 80067c4:	7bfb      	ldrb	r3, [r7, #15]
 80067c6:	3301      	adds	r3, #1
 80067c8:	73fb      	strb	r3, [r7, #15]
 80067ca:	7bfb      	ldrb	r3, [r7, #15]
 80067cc:	b29a      	uxth	r2, r3
 80067ce:	68bb      	ldr	r3, [r7, #8]
 80067d0:	f8b3 30ec 	ldrh.w	r3, [r3, #236]	; 0xec
 80067d4:	429a      	cmp	r2, r3
 80067d6:	d3db      	bcc.n	8006790 <USBH_AUDIO_FindLinkedUnit+0x11c>
    }
  }

  /* No associated Unit found return undefined ID 0x00*/
  return 0U;
 80067d8:	2300      	movs	r3, #0
}
 80067da:	4618      	mov	r0, r3
 80067dc:	3714      	adds	r7, #20
 80067de:	46bd      	mov	sp, r7
 80067e0:	bc80      	pop	{r7}
 80067e2:	4770      	bx	lr

080067e4 <USBH_AUDIO_BuildMicrophonePath>:
  * @brief  Build full path for Microphone device
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_BuildMicrophonePath(USBH_HandleTypeDef *phost)
{
 80067e4:	b580      	push	{r7, lr}
 80067e6:	b086      	sub	sp, #24
 80067e8:	af00      	add	r7, sp, #0
 80067ea:	6078      	str	r0, [r7, #4]
  uint8_t UnitID = 0U, Type, Index;
 80067ec:	2300      	movs	r3, #0
 80067ee:	75fb      	strb	r3, [r7, #23]
  uint32_t value;
  uint8_t terminalIndex;
  AUDIO_HandleTypeDef *AUDIO_Handle;
  USBH_StatusTypeDef ret = USBH_OK;
 80067f0:	2300      	movs	r3, #0
 80067f2:	757b      	strb	r3, [r7, #21]

  AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80067fa:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 80067fe:	69db      	ldr	r3, [r3, #28]
 8006800:	613b      	str	r3, [r7, #16]

  /*Find microphone IT*/
  for (terminalIndex = 0U; terminalIndex < AUDIO_Handle->class_desc.InputTerminalNum; terminalIndex++)
 8006802:	2300      	movs	r3, #0
 8006804:	75bb      	strb	r3, [r7, #22]
 8006806:	e02c      	b.n	8006862 <USBH_AUDIO_BuildMicrophonePath+0x7e>
  {
    if (LE16(AUDIO_Handle->class_desc.cs_desc.InputTerminalDesc[terminalIndex]->wTerminalType) == 0x201)
 8006808:	7dbb      	ldrb	r3, [r7, #22]
 800680a:	693a      	ldr	r2, [r7, #16]
 800680c:	331a      	adds	r3, #26
 800680e:	009b      	lsls	r3, r3, #2
 8006810:	4413      	add	r3, r2
 8006812:	689b      	ldr	r3, [r3, #8]
 8006814:	791b      	ldrb	r3, [r3, #4]
 8006816:	4619      	mov	r1, r3
 8006818:	7dbb      	ldrb	r3, [r7, #22]
 800681a:	693a      	ldr	r2, [r7, #16]
 800681c:	331a      	adds	r3, #26
 800681e:	009b      	lsls	r3, r3, #2
 8006820:	4413      	add	r3, r2
 8006822:	689b      	ldr	r3, [r3, #8]
 8006824:	795b      	ldrb	r3, [r3, #5]
 8006826:	b29b      	uxth	r3, r3
 8006828:	021b      	lsls	r3, r3, #8
 800682a:	b29b      	uxth	r3, r3
 800682c:	430b      	orrs	r3, r1
 800682e:	f240 2201 	movw	r2, #513	; 0x201
 8006832:	4293      	cmp	r3, r2
 8006834:	d112      	bne.n	800685c <USBH_AUDIO_BuildMicrophonePath+0x78>
    {
      UnitID = AUDIO_Handle->class_desc.cs_desc.InputTerminalDesc[terminalIndex]->bTerminalID;
 8006836:	7dbb      	ldrb	r3, [r7, #22]
 8006838:	693a      	ldr	r2, [r7, #16]
 800683a:	331a      	adds	r3, #26
 800683c:	009b      	lsls	r3, r3, #2
 800683e:	4413      	add	r3, r2
 8006840:	689b      	ldr	r3, [r3, #8]
 8006842:	78db      	ldrb	r3, [r3, #3]
 8006844:	75fb      	strb	r3, [r7, #23]
      AUDIO_Handle->microphone.asociated_channels =  AUDIO_Handle->class_desc.cs_desc.InputTerminalDesc[terminalIndex]->bNrChannels;
 8006846:	7dbb      	ldrb	r3, [r7, #22]
 8006848:	693a      	ldr	r2, [r7, #16]
 800684a:	331a      	adds	r3, #26
 800684c:	009b      	lsls	r3, r3, #2
 800684e:	4413      	add	r3, r2
 8006850:	689b      	ldr	r3, [r3, #8]
 8006852:	79da      	ldrb	r2, [r3, #7]
 8006854:	693b      	ldr	r3, [r7, #16]
 8006856:	f883 2151 	strb.w	r2, [r3, #337]	; 0x151
      break;
 800685a:	e009      	b.n	8006870 <USBH_AUDIO_BuildMicrophonePath+0x8c>
  for (terminalIndex = 0U; terminalIndex < AUDIO_Handle->class_desc.InputTerminalNum; terminalIndex++)
 800685c:	7dbb      	ldrb	r3, [r7, #22]
 800685e:	3301      	adds	r3, #1
 8006860:	75bb      	strb	r3, [r7, #22]
 8006862:	7dbb      	ldrb	r3, [r7, #22]
 8006864:	b29a      	uxth	r2, r3
 8006866:	693b      	ldr	r3, [r7, #16]
 8006868:	f8b3 30ea 	ldrh.w	r3, [r3, #234]	; 0xea
 800686c:	429a      	cmp	r2, r3
 800686e:	d3cb      	bcc.n	8006808 <USBH_AUDIO_BuildMicrophonePath+0x24>
    }
  }

  do
  {
    value = USBH_AUDIO_FindLinkedUnit(phost, UnitID);
 8006870:	7dfb      	ldrb	r3, [r7, #23]
 8006872:	4619      	mov	r1, r3
 8006874:	6878      	ldr	r0, [r7, #4]
 8006876:	f7ff fefd 	bl	8006674 <USBH_AUDIO_FindLinkedUnit>
 800687a:	60f8      	str	r0, [r7, #12]

    if (!value)
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	2b00      	cmp	r3, #0
 8006880:	d101      	bne.n	8006886 <USBH_AUDIO_BuildMicrophonePath+0xa2>
    {
      return USBH_FAIL;
 8006882:	2302      	movs	r3, #2
 8006884:	e034      	b.n	80068f0 <USBH_AUDIO_BuildMicrophonePath+0x10c>
    }

    Index = (uint8_t)(value & 0xFFU);
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	72fb      	strb	r3, [r7, #11]
    Type = (uint8_t)((value >> 8U) & 0xFFU);
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	0a1b      	lsrs	r3, r3, #8
 800688e:	72bb      	strb	r3, [r7, #10]
    UnitID = (uint8_t)((value >> 16U) & 0xFFU);
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	0c1b      	lsrs	r3, r3, #16
 8006894:	75fb      	strb	r3, [r7, #23]

    switch (Type)
 8006896:	7abb      	ldrb	r3, [r7, #10]
 8006898:	3b03      	subs	r3, #3
 800689a:	2b03      	cmp	r3, #3
 800689c:	d81e      	bhi.n	80068dc <USBH_AUDIO_BuildMicrophonePath+0xf8>
 800689e:	a201      	add	r2, pc, #4	; (adr r2, 80068a4 <USBH_AUDIO_BuildMicrophonePath+0xc0>)
 80068a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068a4:	080068d3 	.word	0x080068d3
 80068a8:	080068bf 	.word	0x080068bf
 80068ac:	080068c9 	.word	0x080068c9
 80068b0:	080068b5 	.word	0x080068b5
    {
      case UAC_FEATURE_UNIT:
        AUDIO_Handle->microphone.asociated_feature = Index;
 80068b4:	693b      	ldr	r3, [r7, #16]
 80068b6:	7afa      	ldrb	r2, [r7, #11]
 80068b8:	f883 214f 	strb.w	r2, [r3, #335]	; 0x14f
        break;
 80068bc:	e011      	b.n	80068e2 <USBH_AUDIO_BuildMicrophonePath+0xfe>

      case UAC_MIXER_UNIT:
        AUDIO_Handle->microphone.asociated_mixer = Index;
 80068be:	693b      	ldr	r3, [r7, #16]
 80068c0:	7afa      	ldrb	r2, [r7, #11]
 80068c2:	f883 214d 	strb.w	r2, [r3, #333]	; 0x14d
        break;
 80068c6:	e00c      	b.n	80068e2 <USBH_AUDIO_BuildMicrophonePath+0xfe>

      case UAC_SELECTOR_UNIT:
        AUDIO_Handle->microphone.asociated_selector = Index;
 80068c8:	693b      	ldr	r3, [r7, #16]
 80068ca:	7afa      	ldrb	r2, [r7, #11]
 80068cc:	f883 214e 	strb.w	r2, [r3, #334]	; 0x14e
        break;
 80068d0:	e007      	b.n	80068e2 <USBH_AUDIO_BuildMicrophonePath+0xfe>

      case UAC_OUTPUT_TERMINAL:
        AUDIO_Handle->microphone.asociated_terminal = Index;
 80068d2:	693b      	ldr	r3, [r7, #16]
 80068d4:	7afa      	ldrb	r2, [r7, #11]
 80068d6:	f883 2150 	strb.w	r2, [r3, #336]	; 0x150
        break;
 80068da:	e002      	b.n	80068e2 <USBH_AUDIO_BuildMicrophonePath+0xfe>

      default:
        ret = USBH_FAIL;
 80068dc:	2302      	movs	r3, #2
 80068de:	757b      	strb	r3, [r7, #21]
        break;
 80068e0:	bf00      	nop
    }
  }
  while ((Type != UAC_OUTPUT_TERMINAL) && (value > 0U));
 80068e2:	7abb      	ldrb	r3, [r7, #10]
 80068e4:	2b03      	cmp	r3, #3
 80068e6:	d002      	beq.n	80068ee <USBH_AUDIO_BuildMicrophonePath+0x10a>
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d1c0      	bne.n	8006870 <USBH_AUDIO_BuildMicrophonePath+0x8c>

  return ret;
 80068ee:	7d7b      	ldrb	r3, [r7, #21]
}
 80068f0:	4618      	mov	r0, r3
 80068f2:	3718      	adds	r7, #24
 80068f4:	46bd      	mov	sp, r7
 80068f6:	bd80      	pop	{r7, pc}

080068f8 <USBH_AUDIO_BuildHeadphonePath>:
  * @brief  Build full path for Headphone device
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_BuildHeadphonePath(USBH_HandleTypeDef *phost)
{
 80068f8:	b580      	push	{r7, lr}
 80068fa:	b086      	sub	sp, #24
 80068fc:	af00      	add	r7, sp, #0
 80068fe:	6078      	str	r0, [r7, #4]
  uint8_t UnitID = 0U, Type, Index;
 8006900:	2300      	movs	r3, #0
 8006902:	75fb      	strb	r3, [r7, #23]
  uint32_t value;
  uint8_t terminalIndex;
  AUDIO_HandleTypeDef *AUDIO_Handle;
  USBH_StatusTypeDef ret = USBH_OK;
 8006904:	2300      	movs	r3, #0
 8006906:	753b      	strb	r3, [r7, #20]

  AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800690e:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 8006912:	69db      	ldr	r3, [r3, #28]
 8006914:	613b      	str	r3, [r7, #16]

  /* Find association between audio streaming and microphone */
  for (terminalIndex = 0U; terminalIndex < AUDIO_Handle->class_desc.InputTerminalNum; terminalIndex++)
 8006916:	2300      	movs	r3, #0
 8006918:	757b      	strb	r3, [r7, #21]
 800691a:	e02c      	b.n	8006976 <USBH_AUDIO_BuildHeadphonePath+0x7e>
  {
    if (LE16(AUDIO_Handle->class_desc.cs_desc.InputTerminalDesc[terminalIndex]->wTerminalType) == 0x101)
 800691c:	7d7b      	ldrb	r3, [r7, #21]
 800691e:	693a      	ldr	r2, [r7, #16]
 8006920:	331a      	adds	r3, #26
 8006922:	009b      	lsls	r3, r3, #2
 8006924:	4413      	add	r3, r2
 8006926:	689b      	ldr	r3, [r3, #8]
 8006928:	791b      	ldrb	r3, [r3, #4]
 800692a:	4619      	mov	r1, r3
 800692c:	7d7b      	ldrb	r3, [r7, #21]
 800692e:	693a      	ldr	r2, [r7, #16]
 8006930:	331a      	adds	r3, #26
 8006932:	009b      	lsls	r3, r3, #2
 8006934:	4413      	add	r3, r2
 8006936:	689b      	ldr	r3, [r3, #8]
 8006938:	795b      	ldrb	r3, [r3, #5]
 800693a:	b29b      	uxth	r3, r3
 800693c:	021b      	lsls	r3, r3, #8
 800693e:	b29b      	uxth	r3, r3
 8006940:	430b      	orrs	r3, r1
 8006942:	f240 1201 	movw	r2, #257	; 0x101
 8006946:	4293      	cmp	r3, r2
 8006948:	d112      	bne.n	8006970 <USBH_AUDIO_BuildHeadphonePath+0x78>
    {
      UnitID = AUDIO_Handle->class_desc.cs_desc.InputTerminalDesc[terminalIndex]->bTerminalID;
 800694a:	7d7b      	ldrb	r3, [r7, #21]
 800694c:	693a      	ldr	r2, [r7, #16]
 800694e:	331a      	adds	r3, #26
 8006950:	009b      	lsls	r3, r3, #2
 8006952:	4413      	add	r3, r2
 8006954:	689b      	ldr	r3, [r3, #8]
 8006956:	78db      	ldrb	r3, [r3, #3]
 8006958:	75fb      	strb	r3, [r7, #23]
      AUDIO_Handle->headphone.asociated_channels =  AUDIO_Handle->class_desc.cs_desc.InputTerminalDesc[terminalIndex]->bNrChannels;
 800695a:	7d7b      	ldrb	r3, [r7, #21]
 800695c:	693a      	ldr	r2, [r7, #16]
 800695e:	331a      	adds	r3, #26
 8006960:	009b      	lsls	r3, r3, #2
 8006962:	4413      	add	r3, r2
 8006964:	689b      	ldr	r3, [r3, #8]
 8006966:	79da      	ldrb	r2, [r3, #7]
 8006968:	693b      	ldr	r3, [r7, #16]
 800696a:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
      break;
 800696e:	e009      	b.n	8006984 <USBH_AUDIO_BuildHeadphonePath+0x8c>
  for (terminalIndex = 0U; terminalIndex < AUDIO_Handle->class_desc.InputTerminalNum; terminalIndex++)
 8006970:	7d7b      	ldrb	r3, [r7, #21]
 8006972:	3301      	adds	r3, #1
 8006974:	757b      	strb	r3, [r7, #21]
 8006976:	7d7b      	ldrb	r3, [r7, #21]
 8006978:	b29a      	uxth	r2, r3
 800697a:	693b      	ldr	r3, [r7, #16]
 800697c:	f8b3 30ea 	ldrh.w	r3, [r3, #234]	; 0xea
 8006980:	429a      	cmp	r2, r3
 8006982:	d3cb      	bcc.n	800691c <USBH_AUDIO_BuildHeadphonePath+0x24>
    }
  }

  for (Index = 0U; Index < AUDIO_Handle->class_desc.ASNum; Index++)
 8006984:	2300      	movs	r3, #0
 8006986:	75bb      	strb	r3, [r7, #22]
 8006988:	e011      	b.n	80069ae <USBH_AUDIO_BuildHeadphonePath+0xb6>
  {
    if (AUDIO_Handle->class_desc.as_desc[Index].GeneralDesc->bTerminalLink == UnitID)
 800698a:	7dbb      	ldrb	r3, [r7, #22]
 800698c:	693a      	ldr	r2, [r7, #16]
 800698e:	3317      	adds	r3, #23
 8006990:	00db      	lsls	r3, r3, #3
 8006992:	4413      	add	r3, r2
 8006994:	689b      	ldr	r3, [r3, #8]
 8006996:	78db      	ldrb	r3, [r3, #3]
 8006998:	7dfa      	ldrb	r2, [r7, #23]
 800699a:	429a      	cmp	r2, r3
 800699c:	d104      	bne.n	80069a8 <USBH_AUDIO_BuildHeadphonePath+0xb0>
    {
      AUDIO_Handle->headphone.asociated_as = Index;
 800699e:	693b      	ldr	r3, [r7, #16]
 80069a0:	7dba      	ldrb	r2, [r7, #22]
 80069a2:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
      break;
 80069a6:	e009      	b.n	80069bc <USBH_AUDIO_BuildHeadphonePath+0xc4>
  for (Index = 0U; Index < AUDIO_Handle->class_desc.ASNum; Index++)
 80069a8:	7dbb      	ldrb	r3, [r7, #22]
 80069aa:	3301      	adds	r3, #1
 80069ac:	75bb      	strb	r3, [r7, #22]
 80069ae:	7dbb      	ldrb	r3, [r7, #22]
 80069b0:	b29a      	uxth	r2, r3
 80069b2:	693b      	ldr	r3, [r7, #16]
 80069b4:	f8b3 30e8 	ldrh.w	r3, [r3, #232]	; 0xe8
 80069b8:	429a      	cmp	r2, r3
 80069ba:	d3e6      	bcc.n	800698a <USBH_AUDIO_BuildHeadphonePath+0x92>
    }
  }

  do
  {
    value = USBH_AUDIO_FindLinkedUnit(phost, UnitID);
 80069bc:	7dfb      	ldrb	r3, [r7, #23]
 80069be:	4619      	mov	r1, r3
 80069c0:	6878      	ldr	r0, [r7, #4]
 80069c2:	f7ff fe57 	bl	8006674 <USBH_AUDIO_FindLinkedUnit>
 80069c6:	60f8      	str	r0, [r7, #12]

    if (!value)
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d101      	bne.n	80069d2 <USBH_AUDIO_BuildHeadphonePath+0xda>
    {
      return USBH_FAIL;
 80069ce:	2302      	movs	r3, #2
 80069d0:	e053      	b.n	8006a7a <USBH_AUDIO_BuildHeadphonePath+0x182>
    }

    Index = (uint8_t)(value & 0xFFU);
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	75bb      	strb	r3, [r7, #22]
    Type = (uint8_t)((value >> 8U) & 0xFFU);
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	0a1b      	lsrs	r3, r3, #8
 80069da:	72fb      	strb	r3, [r7, #11]
    UnitID = (uint8_t)((value >> 16U) & 0xFFU);
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	0c1b      	lsrs	r3, r3, #16
 80069e0:	75fb      	strb	r3, [r7, #23]

    switch (Type)
 80069e2:	7afb      	ldrb	r3, [r7, #11]
 80069e4:	3b03      	subs	r3, #3
 80069e6:	2b03      	cmp	r3, #3
 80069e8:	d83c      	bhi.n	8006a64 <USBH_AUDIO_BuildHeadphonePath+0x16c>
 80069ea:	a201      	add	r2, pc, #4	; (adr r2, 80069f0 <USBH_AUDIO_BuildHeadphonePath+0xf8>)
 80069ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069f0:	08006a1f 	.word	0x08006a1f
 80069f4:	08006a0b 	.word	0x08006a0b
 80069f8:	08006a15 	.word	0x08006a15
 80069fc:	08006a01 	.word	0x08006a01
    {
      case UAC_FEATURE_UNIT:
        AUDIO_Handle->headphone.asociated_feature = Index;
 8006a00:	693b      	ldr	r3, [r7, #16]
 8006a02:	7dba      	ldrb	r2, [r7, #22]
 8006a04:	f883 2107 	strb.w	r2, [r3, #263]	; 0x107
        break;
 8006a08:	e030      	b.n	8006a6c <USBH_AUDIO_BuildHeadphonePath+0x174>

      case UAC_MIXER_UNIT:
        AUDIO_Handle->headphone.asociated_mixer = Index;
 8006a0a:	693b      	ldr	r3, [r7, #16]
 8006a0c:	7dba      	ldrb	r2, [r7, #22]
 8006a0e:	f883 2105 	strb.w	r2, [r3, #261]	; 0x105
        break;
 8006a12:	e02b      	b.n	8006a6c <USBH_AUDIO_BuildHeadphonePath+0x174>

      case UAC_SELECTOR_UNIT:
        AUDIO_Handle->headphone.asociated_selector = Index;
 8006a14:	693b      	ldr	r3, [r7, #16]
 8006a16:	7dba      	ldrb	r2, [r7, #22]
 8006a18:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106
        break;
 8006a1c:	e026      	b.n	8006a6c <USBH_AUDIO_BuildHeadphonePath+0x174>

      case UAC_OUTPUT_TERMINAL:
        AUDIO_Handle->headphone.asociated_terminal = Index;
 8006a1e:	693b      	ldr	r3, [r7, #16]
 8006a20:	7dba      	ldrb	r2, [r7, #22]
 8006a22:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
        if (Index < AUDIO_MAX_NUM_OUT_TERMINAL)
 8006a26:	7dbb      	ldrb	r3, [r7, #22]
 8006a28:	2b03      	cmp	r3, #3
 8006a2a:	d818      	bhi.n	8006a5e <USBH_AUDIO_BuildHeadphonePath+0x166>
        {
          if (LE16(AUDIO_Handle->class_desc.cs_desc.OutputTerminalDesc[Index]->wTerminalType) != 0x103)
 8006a2c:	7dbb      	ldrb	r3, [r7, #22]
 8006a2e:	693a      	ldr	r2, [r7, #16]
 8006a30:	331e      	adds	r3, #30
 8006a32:	009b      	lsls	r3, r3, #2
 8006a34:	4413      	add	r3, r2
 8006a36:	689b      	ldr	r3, [r3, #8]
 8006a38:	791b      	ldrb	r3, [r3, #4]
 8006a3a:	4619      	mov	r1, r3
 8006a3c:	7dbb      	ldrb	r3, [r7, #22]
 8006a3e:	693a      	ldr	r2, [r7, #16]
 8006a40:	331e      	adds	r3, #30
 8006a42:	009b      	lsls	r3, r3, #2
 8006a44:	4413      	add	r3, r2
 8006a46:	689b      	ldr	r3, [r3, #8]
 8006a48:	795b      	ldrb	r3, [r3, #5]
 8006a4a:	b29b      	uxth	r3, r3
 8006a4c:	021b      	lsls	r3, r3, #8
 8006a4e:	b29b      	uxth	r3, r3
 8006a50:	430b      	orrs	r3, r1
 8006a52:	f240 1203 	movw	r2, #259	; 0x103
 8006a56:	4293      	cmp	r3, r2
 8006a58:	d007      	beq.n	8006a6a <USBH_AUDIO_BuildHeadphonePath+0x172>
          {
            return  USBH_OK;
 8006a5a:	2300      	movs	r3, #0
 8006a5c:	e00d      	b.n	8006a7a <USBH_AUDIO_BuildHeadphonePath+0x182>
          }
        }
        else
        {
          ret = USBH_FAIL;
 8006a5e:	2302      	movs	r3, #2
 8006a60:	753b      	strb	r3, [r7, #20]
        }
        break;
 8006a62:	e002      	b.n	8006a6a <USBH_AUDIO_BuildHeadphonePath+0x172>

      default:
        ret = USBH_FAIL;
 8006a64:	2302      	movs	r3, #2
 8006a66:	753b      	strb	r3, [r7, #20]
        break;
 8006a68:	e000      	b.n	8006a6c <USBH_AUDIO_BuildHeadphonePath+0x174>
        break;
 8006a6a:	bf00      	nop
    }
  }
  while ((Type != UAC_OUTPUT_TERMINAL) && (value > 0U));
 8006a6c:	7afb      	ldrb	r3, [r7, #11]
 8006a6e:	2b03      	cmp	r3, #3
 8006a70:	d002      	beq.n	8006a78 <USBH_AUDIO_BuildHeadphonePath+0x180>
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d1a1      	bne.n	80069bc <USBH_AUDIO_BuildHeadphonePath+0xc4>

  return ret;
 8006a78:	7d3b      	ldrb	r3, [r7, #20]
}
 8006a7a:	4618      	mov	r0, r3
 8006a7c:	3718      	adds	r7, #24
 8006a7e:	46bd      	mov	sp, r7
 8006a80:	bd80      	pop	{r7, pc}
 8006a82:	bf00      	nop

08006a84 <USBH_AC_SetCur>:
                                         uint8_t subtype,
                                         uint8_t feature,
                                         uint8_t controlSelector,
                                         uint8_t channel,
                                         uint16_t length)
{
 8006a84:	b580      	push	{r7, lr}
 8006a86:	b086      	sub	sp, #24
 8006a88:	af00      	add	r7, sp, #0
 8006a8a:	6078      	str	r0, [r7, #4]
 8006a8c:	4608      	mov	r0, r1
 8006a8e:	4611      	mov	r1, r2
 8006a90:	461a      	mov	r2, r3
 8006a92:	4603      	mov	r3, r0
 8006a94:	70fb      	strb	r3, [r7, #3]
 8006a96:	460b      	mov	r3, r1
 8006a98:	70bb      	strb	r3, [r7, #2]
 8006a9a:	4613      	mov	r3, r2
 8006a9c:	707b      	strb	r3, [r7, #1]
  uint16_t wValue = 0U, wIndex = 0U, wLength = 0U;
 8006a9e:	2300      	movs	r3, #0
 8006aa0:	82fb      	strh	r3, [r7, #22]
 8006aa2:	2300      	movs	r3, #0
 8006aa4:	82bb      	strh	r3, [r7, #20]
 8006aa6:	2300      	movs	r3, #0
 8006aa8:	827b      	strh	r3, [r7, #18]
  uint8_t UnitID, InterfaceNum;
  AUDIO_HandleTypeDef *AUDIO_Handle;
  AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006ab0:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 8006ab4:	69db      	ldr	r3, [r3, #28]
 8006ab6:	60fb      	str	r3, [r7, #12]
  USBH_StatusTypeDef ret = USBH_OK;
 8006ab8:	2300      	movs	r3, #0
 8006aba:	747b      	strb	r3, [r7, #17]

  switch (subtype)
 8006abc:	78fb      	ldrb	r3, [r7, #3]
 8006abe:	2b02      	cmp	r3, #2
 8006ac0:	d002      	beq.n	8006ac8 <USBH_AC_SetCur+0x44>
 8006ac2:	2b06      	cmp	r3, #6
 8006ac4:	d018      	beq.n	8006af8 <USBH_AC_SetCur+0x74>
 8006ac6:	e035      	b.n	8006b34 <USBH_AC_SetCur+0xb0>
  {
    case UAC_INPUT_TERMINAL:
      UnitID = AUDIO_Handle->class_desc.cs_desc.InputTerminalDesc[0]->bTerminalID;
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006acc:	78db      	ldrb	r3, [r3, #3]
 8006ace:	72fb      	strb	r3, [r7, #11]
      InterfaceNum = 0U; /*Always zero Control Interface */
 8006ad0:	2300      	movs	r3, #0
 8006ad2:	72bb      	strb	r3, [r7, #10]
      wIndex = (uint16_t)((uint32_t)UnitID << 8U) | (uint16_t)InterfaceNum;
 8006ad4:	7afb      	ldrb	r3, [r7, #11]
 8006ad6:	b29b      	uxth	r3, r3
 8006ad8:	021b      	lsls	r3, r3, #8
 8006ada:	b29a      	uxth	r2, r3
 8006adc:	7abb      	ldrb	r3, [r7, #10]
 8006ade:	b29b      	uxth	r3, r3
 8006ae0:	4313      	orrs	r3, r2
 8006ae2:	82bb      	strh	r3, [r7, #20]
      wValue = (COPY_PROTECT_CONTROL << 8U);
 8006ae4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006ae8:	82fb      	strh	r3, [r7, #22]
      AUDIO_Handle->mem[0] = 0x00U;
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	2200      	movs	r2, #0
 8006aee:	f8a3 2190 	strh.w	r2, [r3, #400]	; 0x190

      wLength = 1U;
 8006af2:	2301      	movs	r3, #1
 8006af4:	827b      	strh	r3, [r7, #18]
      break;
 8006af6:	e020      	b.n	8006b3a <USBH_AC_SetCur+0xb6>
    case UAC_FEATURE_UNIT:
      UnitID = AUDIO_Handle->class_desc.cs_desc.FeatureUnitDesc[feature]->bUnitID;
 8006af8:	78bb      	ldrb	r3, [r7, #2]
 8006afa:	68fa      	ldr	r2, [r7, #12]
 8006afc:	3322      	adds	r3, #34	; 0x22
 8006afe:	009b      	lsls	r3, r3, #2
 8006b00:	4413      	add	r3, r2
 8006b02:	689b      	ldr	r3, [r3, #8]
 8006b04:	78db      	ldrb	r3, [r3, #3]
 8006b06:	72fb      	strb	r3, [r7, #11]
      InterfaceNum = 0U; /*Always zero Control Interface */
 8006b08:	2300      	movs	r3, #0
 8006b0a:	72bb      	strb	r3, [r7, #10]
      wIndex = (uint16_t)((uint32_t)UnitID << 8U) | (uint16_t)InterfaceNum ;
 8006b0c:	7afb      	ldrb	r3, [r7, #11]
 8006b0e:	b29b      	uxth	r3, r3
 8006b10:	021b      	lsls	r3, r3, #8
 8006b12:	b29a      	uxth	r2, r3
 8006b14:	7abb      	ldrb	r3, [r7, #10]
 8006b16:	b29b      	uxth	r3, r3
 8006b18:	4313      	orrs	r3, r2
 8006b1a:	82bb      	strh	r3, [r7, #20]
      /*holds the CS(control selector ) and CN (channel number)*/
      wValue = (uint16_t)((uint32_t)controlSelector << 8U) | (uint16_t)channel;
 8006b1c:	787b      	ldrb	r3, [r7, #1]
 8006b1e:	b29b      	uxth	r3, r3
 8006b20:	021b      	lsls	r3, r3, #8
 8006b22:	b29a      	uxth	r2, r3
 8006b24:	f897 3020 	ldrb.w	r3, [r7, #32]
 8006b28:	b29b      	uxth	r3, r3
 8006b2a:	4313      	orrs	r3, r2
 8006b2c:	82fb      	strh	r3, [r7, #22]
      wLength = length;
 8006b2e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006b30:	827b      	strh	r3, [r7, #18]
      break;
 8006b32:	e002      	b.n	8006b3a <USBH_AC_SetCur+0xb6>

    default:
      ret = USBH_FAIL;
 8006b34:	2302      	movs	r3, #2
 8006b36:	747b      	strb	r3, [r7, #17]
      break;
 8006b38:	bf00      	nop
  }

  if (ret != USBH_OK)
 8006b3a:	7c7b      	ldrb	r3, [r7, #17]
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d001      	beq.n	8006b44 <USBH_AC_SetCur+0xc0>
  {
    return ret;
 8006b40:	7c7b      	ldrb	r3, [r7, #17]
 8006b42:	e017      	b.n	8006b74 <USBH_AC_SetCur+0xf0>
  }

  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_INTERFACE
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	2221      	movs	r2, #33	; 0x21
 8006b48:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_TYPE_CLASS;

  phost->Control.setup.b.bRequest = UAC_SET_CUR;
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	2201      	movs	r2, #1
 8006b4e:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = wValue;
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	8afa      	ldrh	r2, [r7, #22]
 8006b54:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = wIndex;
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	8aba      	ldrh	r2, [r7, #20]
 8006b5a:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = wLength;
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	8a7a      	ldrh	r2, [r7, #18]
 8006b60:	82da      	strh	r2, [r3, #22]

  return (USBH_CtlReq(phost, (uint8_t *)(void *)(AUDIO_Handle->mem), wLength));
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8006b68:	8a7a      	ldrh	r2, [r7, #18]
 8006b6a:	4619      	mov	r1, r3
 8006b6c:	6878      	ldr	r0, [r7, #4]
 8006b6e:	f006 fb6f 	bl	800d250 <USBH_CtlReq>
 8006b72:	4603      	mov	r3, r0
}
 8006b74:	4618      	mov	r0, r3
 8006b76:	3718      	adds	r7, #24
 8006b78:	46bd      	mov	sp, r7
 8006b7a:	bd80      	pop	{r7, pc}

08006b7c <USBH_AC_GetCur>:
                                         uint8_t subtype,
                                         uint8_t feature,
                                         uint8_t controlSelector,
                                         uint8_t channel,
                                         uint16_t length)
{
 8006b7c:	b580      	push	{r7, lr}
 8006b7e:	b086      	sub	sp, #24
 8006b80:	af00      	add	r7, sp, #0
 8006b82:	6078      	str	r0, [r7, #4]
 8006b84:	4608      	mov	r0, r1
 8006b86:	4611      	mov	r1, r2
 8006b88:	461a      	mov	r2, r3
 8006b8a:	4603      	mov	r3, r0
 8006b8c:	70fb      	strb	r3, [r7, #3]
 8006b8e:	460b      	mov	r3, r1
 8006b90:	70bb      	strb	r3, [r7, #2]
 8006b92:	4613      	mov	r3, r2
 8006b94:	707b      	strb	r3, [r7, #1]
  uint16_t wValue = 0U, wIndex = 0U, wLength = 0U;
 8006b96:	2300      	movs	r3, #0
 8006b98:	82fb      	strh	r3, [r7, #22]
 8006b9a:	2300      	movs	r3, #0
 8006b9c:	82bb      	strh	r3, [r7, #20]
 8006b9e:	2300      	movs	r3, #0
 8006ba0:	827b      	strh	r3, [r7, #18]
  uint8_t UnitID = 0U, InterfaceNum = 0U;
 8006ba2:	2300      	movs	r3, #0
 8006ba4:	743b      	strb	r3, [r7, #16]
 8006ba6:	2300      	movs	r3, #0
 8006ba8:	73fb      	strb	r3, [r7, #15]
  AUDIO_HandleTypeDef *AUDIO_Handle;
  AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006bb0:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 8006bb4:	69db      	ldr	r3, [r3, #28]
 8006bb6:	60bb      	str	r3, [r7, #8]
  USBH_StatusTypeDef ret = USBH_OK;
 8006bb8:	2300      	movs	r3, #0
 8006bba:	747b      	strb	r3, [r7, #17]

  switch (subtype)
 8006bbc:	78fb      	ldrb	r3, [r7, #3]
 8006bbe:	2b06      	cmp	r3, #6
 8006bc0:	d01e      	beq.n	8006c00 <USBH_AC_GetCur+0x84>
 8006bc2:	2b06      	cmp	r3, #6
 8006bc4:	dc4f      	bgt.n	8006c66 <USBH_AC_GetCur+0xea>
 8006bc6:	2b02      	cmp	r3, #2
 8006bc8:	d002      	beq.n	8006bd0 <USBH_AC_GetCur+0x54>
 8006bca:	2b03      	cmp	r3, #3
 8006bcc:	d036      	beq.n	8006c3c <USBH_AC_GetCur+0xc0>
 8006bce:	e04a      	b.n	8006c66 <USBH_AC_GetCur+0xea>
  {
    case UAC_INPUT_TERMINAL:
      UnitID = AUDIO_Handle->class_desc.cs_desc.InputTerminalDesc[0]->bTerminalID;
 8006bd0:	68bb      	ldr	r3, [r7, #8]
 8006bd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006bd4:	78db      	ldrb	r3, [r3, #3]
 8006bd6:	743b      	strb	r3, [r7, #16]
      InterfaceNum = 0U; /*Always zero Control Interface */
 8006bd8:	2300      	movs	r3, #0
 8006bda:	73fb      	strb	r3, [r7, #15]
      wIndex = (uint16_t)((uint32_t)UnitID << 8U) | (uint16_t)InterfaceNum;
 8006bdc:	7c3b      	ldrb	r3, [r7, #16]
 8006bde:	b29b      	uxth	r3, r3
 8006be0:	021b      	lsls	r3, r3, #8
 8006be2:	b29a      	uxth	r2, r3
 8006be4:	7bfb      	ldrb	r3, [r7, #15]
 8006be6:	b29b      	uxth	r3, r3
 8006be8:	4313      	orrs	r3, r2
 8006bea:	82bb      	strh	r3, [r7, #20]
      wValue = (COPY_PROTECT_CONTROL << 8U);
 8006bec:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006bf0:	82fb      	strh	r3, [r7, #22]
      AUDIO_Handle->mem[0] = 0x00U;
 8006bf2:	68bb      	ldr	r3, [r7, #8]
 8006bf4:	2200      	movs	r2, #0
 8006bf6:	f8a3 2190 	strh.w	r2, [r3, #400]	; 0x190

      wLength = 1U;
 8006bfa:	2301      	movs	r3, #1
 8006bfc:	827b      	strh	r3, [r7, #18]
      break;
 8006bfe:	e035      	b.n	8006c6c <USBH_AC_GetCur+0xf0>
    case UAC_FEATURE_UNIT:
      UnitID = AUDIO_Handle->class_desc.cs_desc.FeatureUnitDesc[feature]->bUnitID;
 8006c00:	78bb      	ldrb	r3, [r7, #2]
 8006c02:	68ba      	ldr	r2, [r7, #8]
 8006c04:	3322      	adds	r3, #34	; 0x22
 8006c06:	009b      	lsls	r3, r3, #2
 8006c08:	4413      	add	r3, r2
 8006c0a:	689b      	ldr	r3, [r3, #8]
 8006c0c:	78db      	ldrb	r3, [r3, #3]
 8006c0e:	743b      	strb	r3, [r7, #16]
      InterfaceNum = 0U; /*Always zero Control Interface */
 8006c10:	2300      	movs	r3, #0
 8006c12:	73fb      	strb	r3, [r7, #15]
      wIndex = (uint16_t)((uint32_t)UnitID << 8U) | (uint16_t)InterfaceNum;
 8006c14:	7c3b      	ldrb	r3, [r7, #16]
 8006c16:	b29b      	uxth	r3, r3
 8006c18:	021b      	lsls	r3, r3, #8
 8006c1a:	b29a      	uxth	r2, r3
 8006c1c:	7bfb      	ldrb	r3, [r7, #15]
 8006c1e:	b29b      	uxth	r3, r3
 8006c20:	4313      	orrs	r3, r2
 8006c22:	82bb      	strh	r3, [r7, #20]
      /*holds the CS(control selector ) and CN (channel number)*/
      wValue = (uint16_t)((uint32_t)controlSelector << 8U) | (uint16_t)channel;
 8006c24:	787b      	ldrb	r3, [r7, #1]
 8006c26:	b29b      	uxth	r3, r3
 8006c28:	021b      	lsls	r3, r3, #8
 8006c2a:	b29a      	uxth	r2, r3
 8006c2c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8006c30:	b29b      	uxth	r3, r3
 8006c32:	4313      	orrs	r3, r2
 8006c34:	82fb      	strh	r3, [r7, #22]
      wLength = length;
 8006c36:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006c38:	827b      	strh	r3, [r7, #18]
      break;
 8006c3a:	e017      	b.n	8006c6c <USBH_AC_GetCur+0xf0>

    case UAC_OUTPUT_TERMINAL:
      UnitID = AUDIO_Handle->class_desc.cs_desc.OutputTerminalDesc[0]->bTerminalID;
 8006c3c:	68bb      	ldr	r3, [r7, #8]
 8006c3e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006c42:	78db      	ldrb	r3, [r3, #3]
 8006c44:	743b      	strb	r3, [r7, #16]
      InterfaceNum = 0U; /*Always zero Control Interface */
 8006c46:	2300      	movs	r3, #0
 8006c48:	73fb      	strb	r3, [r7, #15]
      wIndex = (uint16_t)((uint32_t)UnitID << 8U) | (uint16_t)InterfaceNum;
 8006c4a:	7c3b      	ldrb	r3, [r7, #16]
 8006c4c:	b29b      	uxth	r3, r3
 8006c4e:	021b      	lsls	r3, r3, #8
 8006c50:	b29a      	uxth	r2, r3
 8006c52:	7bfb      	ldrb	r3, [r7, #15]
 8006c54:	b29b      	uxth	r3, r3
 8006c56:	4313      	orrs	r3, r2
 8006c58:	82bb      	strh	r3, [r7, #20]
      wValue = (COPY_PROTECT_CONTROL << 8U);
 8006c5a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006c5e:	82fb      	strh	r3, [r7, #22]
      wLength = 1U;
 8006c60:	2301      	movs	r3, #1
 8006c62:	827b      	strh	r3, [r7, #18]
      break;
 8006c64:	e002      	b.n	8006c6c <USBH_AC_GetCur+0xf0>

    default:
      ret = USBH_FAIL;
 8006c66:	2302      	movs	r3, #2
 8006c68:	747b      	strb	r3, [r7, #17]
      break;
 8006c6a:	bf00      	nop
  }

  if (ret != USBH_OK)
 8006c6c:	7c7b      	ldrb	r3, [r7, #17]
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d001      	beq.n	8006c76 <USBH_AC_GetCur+0xfa>
  {
    return ret;
 8006c72:	7c7b      	ldrb	r3, [r7, #17]
 8006c74:	e017      	b.n	8006ca6 <USBH_AC_GetCur+0x12a>
  }

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_RECIPIENT_INTERFACE | \
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	22a1      	movs	r2, #161	; 0xa1
 8006c7a:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_TYPE_CLASS;

  phost->Control.setup.b.bRequest = UAC_GET_CUR;
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	2281      	movs	r2, #129	; 0x81
 8006c80:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = wValue;
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	8afa      	ldrh	r2, [r7, #22]
 8006c86:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = wIndex;
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	8aba      	ldrh	r2, [r7, #20]
 8006c8c:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = wLength;
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	8a7a      	ldrh	r2, [r7, #18]
 8006c92:	82da      	strh	r2, [r3, #22]

  return (USBH_CtlReq(phost, (uint8_t *)(void *)(AUDIO_Handle->mem), wLength));
 8006c94:	68bb      	ldr	r3, [r7, #8]
 8006c96:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8006c9a:	8a7a      	ldrh	r2, [r7, #18]
 8006c9c:	4619      	mov	r1, r3
 8006c9e:	6878      	ldr	r0, [r7, #4]
 8006ca0:	f006 fad6 	bl	800d250 <USBH_CtlReq>
 8006ca4:	4603      	mov	r3, r0
}
 8006ca6:	4618      	mov	r0, r3
 8006ca8:	3718      	adds	r7, #24
 8006caa:	46bd      	mov	sp, r7
 8006cac:	bd80      	pop	{r7, pc}

08006cae <USBH_AC_GetMax>:
                                         uint8_t subtype,
                                         uint8_t feature,
                                         uint8_t controlSelector,
                                         uint8_t channel,
                                         uint16_t length)
{
 8006cae:	b580      	push	{r7, lr}
 8006cb0:	b086      	sub	sp, #24
 8006cb2:	af00      	add	r7, sp, #0
 8006cb4:	6078      	str	r0, [r7, #4]
 8006cb6:	4608      	mov	r0, r1
 8006cb8:	4611      	mov	r1, r2
 8006cba:	461a      	mov	r2, r3
 8006cbc:	4603      	mov	r3, r0
 8006cbe:	70fb      	strb	r3, [r7, #3]
 8006cc0:	460b      	mov	r3, r1
 8006cc2:	70bb      	strb	r3, [r7, #2]
 8006cc4:	4613      	mov	r3, r2
 8006cc6:	707b      	strb	r3, [r7, #1]
  uint16_t wValue = 0U, wIndex = 0U, wLength = 0U;
 8006cc8:	2300      	movs	r3, #0
 8006cca:	82fb      	strh	r3, [r7, #22]
 8006ccc:	2300      	movs	r3, #0
 8006cce:	82bb      	strh	r3, [r7, #20]
 8006cd0:	2300      	movs	r3, #0
 8006cd2:	827b      	strh	r3, [r7, #18]
  uint8_t UnitID = 0U, InterfaceNum = 0U;
 8006cd4:	2300      	movs	r3, #0
 8006cd6:	743b      	strb	r3, [r7, #16]
 8006cd8:	2300      	movs	r3, #0
 8006cda:	73fb      	strb	r3, [r7, #15]
  AUDIO_HandleTypeDef *AUDIO_Handle;
  AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006ce2:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 8006ce6:	69db      	ldr	r3, [r3, #28]
 8006ce8:	60bb      	str	r3, [r7, #8]
  USBH_StatusTypeDef ret = USBH_OK;
 8006cea:	2300      	movs	r3, #0
 8006cec:	747b      	strb	r3, [r7, #17]

  switch (subtype)
 8006cee:	78fb      	ldrb	r3, [r7, #3]
 8006cf0:	2b06      	cmp	r3, #6
 8006cf2:	d01e      	beq.n	8006d32 <USBH_AC_GetMax+0x84>
 8006cf4:	2b06      	cmp	r3, #6
 8006cf6:	dc4f      	bgt.n	8006d98 <USBH_AC_GetMax+0xea>
 8006cf8:	2b02      	cmp	r3, #2
 8006cfa:	d002      	beq.n	8006d02 <USBH_AC_GetMax+0x54>
 8006cfc:	2b03      	cmp	r3, #3
 8006cfe:	d036      	beq.n	8006d6e <USBH_AC_GetMax+0xc0>
 8006d00:	e04a      	b.n	8006d98 <USBH_AC_GetMax+0xea>
  {
    case UAC_INPUT_TERMINAL:
      UnitID = AUDIO_Handle->class_desc.cs_desc.InputTerminalDesc[0]->bTerminalID;
 8006d02:	68bb      	ldr	r3, [r7, #8]
 8006d04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d06:	78db      	ldrb	r3, [r3, #3]
 8006d08:	743b      	strb	r3, [r7, #16]
      InterfaceNum = 0U; /*Always zero Control Interface */
 8006d0a:	2300      	movs	r3, #0
 8006d0c:	73fb      	strb	r3, [r7, #15]
      wIndex = (uint16_t)((uint32_t)UnitID << 8U) | (uint16_t)InterfaceNum;
 8006d0e:	7c3b      	ldrb	r3, [r7, #16]
 8006d10:	b29b      	uxth	r3, r3
 8006d12:	021b      	lsls	r3, r3, #8
 8006d14:	b29a      	uxth	r2, r3
 8006d16:	7bfb      	ldrb	r3, [r7, #15]
 8006d18:	b29b      	uxth	r3, r3
 8006d1a:	4313      	orrs	r3, r2
 8006d1c:	82bb      	strh	r3, [r7, #20]
      wValue = (COPY_PROTECT_CONTROL << 8U);
 8006d1e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006d22:	82fb      	strh	r3, [r7, #22]
      AUDIO_Handle->mem[0] = 0x00U;
 8006d24:	68bb      	ldr	r3, [r7, #8]
 8006d26:	2200      	movs	r2, #0
 8006d28:	f8a3 2190 	strh.w	r2, [r3, #400]	; 0x190

      wLength = 1U;
 8006d2c:	2301      	movs	r3, #1
 8006d2e:	827b      	strh	r3, [r7, #18]
      break;
 8006d30:	e035      	b.n	8006d9e <USBH_AC_GetMax+0xf0>
    case UAC_FEATURE_UNIT:
      UnitID = AUDIO_Handle->class_desc.cs_desc.FeatureUnitDesc[feature]->bUnitID;
 8006d32:	78bb      	ldrb	r3, [r7, #2]
 8006d34:	68ba      	ldr	r2, [r7, #8]
 8006d36:	3322      	adds	r3, #34	; 0x22
 8006d38:	009b      	lsls	r3, r3, #2
 8006d3a:	4413      	add	r3, r2
 8006d3c:	689b      	ldr	r3, [r3, #8]
 8006d3e:	78db      	ldrb	r3, [r3, #3]
 8006d40:	743b      	strb	r3, [r7, #16]
      InterfaceNum = 0U; /*Always zero Control Interface */
 8006d42:	2300      	movs	r3, #0
 8006d44:	73fb      	strb	r3, [r7, #15]
      wIndex = (uint16_t)((uint32_t)UnitID << 8U) | (uint16_t)InterfaceNum ;
 8006d46:	7c3b      	ldrb	r3, [r7, #16]
 8006d48:	b29b      	uxth	r3, r3
 8006d4a:	021b      	lsls	r3, r3, #8
 8006d4c:	b29a      	uxth	r2, r3
 8006d4e:	7bfb      	ldrb	r3, [r7, #15]
 8006d50:	b29b      	uxth	r3, r3
 8006d52:	4313      	orrs	r3, r2
 8006d54:	82bb      	strh	r3, [r7, #20]
      /*holds the CS(control selector ) and CN (channel number)*/
      wValue = (uint16_t)((uint32_t)controlSelector << 8U) | (uint16_t)channel;
 8006d56:	787b      	ldrb	r3, [r7, #1]
 8006d58:	b29b      	uxth	r3, r3
 8006d5a:	021b      	lsls	r3, r3, #8
 8006d5c:	b29a      	uxth	r2, r3
 8006d5e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8006d62:	b29b      	uxth	r3, r3
 8006d64:	4313      	orrs	r3, r2
 8006d66:	82fb      	strh	r3, [r7, #22]
      wLength = length;
 8006d68:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006d6a:	827b      	strh	r3, [r7, #18]
      break;
 8006d6c:	e017      	b.n	8006d9e <USBH_AC_GetMax+0xf0>

    case UAC_OUTPUT_TERMINAL:
      UnitID = AUDIO_Handle->class_desc.cs_desc.OutputTerminalDesc[0]->bTerminalID;
 8006d6e:	68bb      	ldr	r3, [r7, #8]
 8006d70:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006d74:	78db      	ldrb	r3, [r3, #3]
 8006d76:	743b      	strb	r3, [r7, #16]
      InterfaceNum = 0U; /*Always zero Control Interface */
 8006d78:	2300      	movs	r3, #0
 8006d7a:	73fb      	strb	r3, [r7, #15]
      wIndex = (uint16_t)((uint32_t)UnitID << 8U) | (uint16_t)InterfaceNum ;
 8006d7c:	7c3b      	ldrb	r3, [r7, #16]
 8006d7e:	b29b      	uxth	r3, r3
 8006d80:	021b      	lsls	r3, r3, #8
 8006d82:	b29a      	uxth	r2, r3
 8006d84:	7bfb      	ldrb	r3, [r7, #15]
 8006d86:	b29b      	uxth	r3, r3
 8006d88:	4313      	orrs	r3, r2
 8006d8a:	82bb      	strh	r3, [r7, #20]
      wValue = (COPY_PROTECT_CONTROL << 8U) ;
 8006d8c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006d90:	82fb      	strh	r3, [r7, #22]
      wLength = 1U;
 8006d92:	2301      	movs	r3, #1
 8006d94:	827b      	strh	r3, [r7, #18]
      break;
 8006d96:	e002      	b.n	8006d9e <USBH_AC_GetMax+0xf0>

    default:
      ret = USBH_FAIL;
 8006d98:	2302      	movs	r3, #2
 8006d9a:	747b      	strb	r3, [r7, #17]
      break;
 8006d9c:	bf00      	nop
  }

  if (ret != USBH_OK)
 8006d9e:	7c7b      	ldrb	r3, [r7, #17]
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d001      	beq.n	8006da8 <USBH_AC_GetMax+0xfa>
  {
    return ret;
 8006da4:	7c7b      	ldrb	r3, [r7, #17]
 8006da6:	e017      	b.n	8006dd8 <USBH_AC_GetMax+0x12a>
  }

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_RECIPIENT_INTERFACE | \
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	22a1      	movs	r2, #161	; 0xa1
 8006dac:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_TYPE_CLASS;

  phost->Control.setup.b.bRequest = UAC_GET_MAX;
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	2283      	movs	r2, #131	; 0x83
 8006db2:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = wValue;
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	8afa      	ldrh	r2, [r7, #22]
 8006db8:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = wIndex;
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	8aba      	ldrh	r2, [r7, #20]
 8006dbe:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = wLength;
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	8a7a      	ldrh	r2, [r7, #18]
 8006dc4:	82da      	strh	r2, [r3, #22]

  return (USBH_CtlReq(phost, (uint8_t *)(void *)(AUDIO_Handle->mem), wLength));
 8006dc6:	68bb      	ldr	r3, [r7, #8]
 8006dc8:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8006dcc:	8a7a      	ldrh	r2, [r7, #18]
 8006dce:	4619      	mov	r1, r3
 8006dd0:	6878      	ldr	r0, [r7, #4]
 8006dd2:	f006 fa3d 	bl	800d250 <USBH_CtlReq>
 8006dd6:	4603      	mov	r3, r0

}
 8006dd8:	4618      	mov	r0, r3
 8006dda:	3718      	adds	r7, #24
 8006ddc:	46bd      	mov	sp, r7
 8006dde:	bd80      	pop	{r7, pc}

08006de0 <USBH_AC_GetRes>:
                                         uint8_t subtype,
                                         uint8_t feature,
                                         uint8_t controlSelector,
                                         uint8_t channel,
                                         uint16_t length)
{
 8006de0:	b580      	push	{r7, lr}
 8006de2:	b086      	sub	sp, #24
 8006de4:	af00      	add	r7, sp, #0
 8006de6:	6078      	str	r0, [r7, #4]
 8006de8:	4608      	mov	r0, r1
 8006dea:	4611      	mov	r1, r2
 8006dec:	461a      	mov	r2, r3
 8006dee:	4603      	mov	r3, r0
 8006df0:	70fb      	strb	r3, [r7, #3]
 8006df2:	460b      	mov	r3, r1
 8006df4:	70bb      	strb	r3, [r7, #2]
 8006df6:	4613      	mov	r3, r2
 8006df8:	707b      	strb	r3, [r7, #1]
  uint16_t wValue = 0U, wIndex = 0U, wLength = 0U;
 8006dfa:	2300      	movs	r3, #0
 8006dfc:	82fb      	strh	r3, [r7, #22]
 8006dfe:	2300      	movs	r3, #0
 8006e00:	82bb      	strh	r3, [r7, #20]
 8006e02:	2300      	movs	r3, #0
 8006e04:	827b      	strh	r3, [r7, #18]
  uint8_t UnitID = 0U, InterfaceNum = 0U;
 8006e06:	2300      	movs	r3, #0
 8006e08:	743b      	strb	r3, [r7, #16]
 8006e0a:	2300      	movs	r3, #0
 8006e0c:	73fb      	strb	r3, [r7, #15]
  AUDIO_HandleTypeDef *AUDIO_Handle;
  AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006e14:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 8006e18:	69db      	ldr	r3, [r3, #28]
 8006e1a:	60bb      	str	r3, [r7, #8]
  USBH_StatusTypeDef ret = USBH_OK;
 8006e1c:	2300      	movs	r3, #0
 8006e1e:	747b      	strb	r3, [r7, #17]

  switch (subtype)
 8006e20:	78fb      	ldrb	r3, [r7, #3]
 8006e22:	2b06      	cmp	r3, #6
 8006e24:	d01e      	beq.n	8006e64 <USBH_AC_GetRes+0x84>
 8006e26:	2b06      	cmp	r3, #6
 8006e28:	dc4f      	bgt.n	8006eca <USBH_AC_GetRes+0xea>
 8006e2a:	2b02      	cmp	r3, #2
 8006e2c:	d002      	beq.n	8006e34 <USBH_AC_GetRes+0x54>
 8006e2e:	2b03      	cmp	r3, #3
 8006e30:	d036      	beq.n	8006ea0 <USBH_AC_GetRes+0xc0>
 8006e32:	e04a      	b.n	8006eca <USBH_AC_GetRes+0xea>
  {
    case UAC_INPUT_TERMINAL:
      UnitID = AUDIO_Handle->class_desc.cs_desc.InputTerminalDesc[0]->bTerminalID;
 8006e34:	68bb      	ldr	r3, [r7, #8]
 8006e36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e38:	78db      	ldrb	r3, [r3, #3]
 8006e3a:	743b      	strb	r3, [r7, #16]
      InterfaceNum = 0U; /*Always zero Control Interface */
 8006e3c:	2300      	movs	r3, #0
 8006e3e:	73fb      	strb	r3, [r7, #15]
      wIndex = (uint16_t)((uint32_t)UnitID << 8U) | (uint16_t)InterfaceNum;
 8006e40:	7c3b      	ldrb	r3, [r7, #16]
 8006e42:	b29b      	uxth	r3, r3
 8006e44:	021b      	lsls	r3, r3, #8
 8006e46:	b29a      	uxth	r2, r3
 8006e48:	7bfb      	ldrb	r3, [r7, #15]
 8006e4a:	b29b      	uxth	r3, r3
 8006e4c:	4313      	orrs	r3, r2
 8006e4e:	82bb      	strh	r3, [r7, #20]
      wValue = (COPY_PROTECT_CONTROL << 8U) ;
 8006e50:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006e54:	82fb      	strh	r3, [r7, #22]
      AUDIO_Handle->mem[0] = 0x00U;
 8006e56:	68bb      	ldr	r3, [r7, #8]
 8006e58:	2200      	movs	r2, #0
 8006e5a:	f8a3 2190 	strh.w	r2, [r3, #400]	; 0x190

      wLength = 1U;
 8006e5e:	2301      	movs	r3, #1
 8006e60:	827b      	strh	r3, [r7, #18]
      break;
 8006e62:	e035      	b.n	8006ed0 <USBH_AC_GetRes+0xf0>
    case UAC_FEATURE_UNIT:
      UnitID = AUDIO_Handle->class_desc.cs_desc.FeatureUnitDesc[feature]->bUnitID;
 8006e64:	78bb      	ldrb	r3, [r7, #2]
 8006e66:	68ba      	ldr	r2, [r7, #8]
 8006e68:	3322      	adds	r3, #34	; 0x22
 8006e6a:	009b      	lsls	r3, r3, #2
 8006e6c:	4413      	add	r3, r2
 8006e6e:	689b      	ldr	r3, [r3, #8]
 8006e70:	78db      	ldrb	r3, [r3, #3]
 8006e72:	743b      	strb	r3, [r7, #16]
      InterfaceNum = 0U; /*Always zero Control Interface */
 8006e74:	2300      	movs	r3, #0
 8006e76:	73fb      	strb	r3, [r7, #15]
      wIndex = (uint16_t)((uint32_t)UnitID << 8U) | (uint16_t)InterfaceNum;
 8006e78:	7c3b      	ldrb	r3, [r7, #16]
 8006e7a:	b29b      	uxth	r3, r3
 8006e7c:	021b      	lsls	r3, r3, #8
 8006e7e:	b29a      	uxth	r2, r3
 8006e80:	7bfb      	ldrb	r3, [r7, #15]
 8006e82:	b29b      	uxth	r3, r3
 8006e84:	4313      	orrs	r3, r2
 8006e86:	82bb      	strh	r3, [r7, #20]
      /*holds the CS(control selector ) and CN (channel number)*/
      wValue = (uint16_t)((uint32_t)controlSelector << 8U) | (uint16_t)channel;
 8006e88:	787b      	ldrb	r3, [r7, #1]
 8006e8a:	b29b      	uxth	r3, r3
 8006e8c:	021b      	lsls	r3, r3, #8
 8006e8e:	b29a      	uxth	r2, r3
 8006e90:	f897 3020 	ldrb.w	r3, [r7, #32]
 8006e94:	b29b      	uxth	r3, r3
 8006e96:	4313      	orrs	r3, r2
 8006e98:	82fb      	strh	r3, [r7, #22]
      wLength = length;
 8006e9a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006e9c:	827b      	strh	r3, [r7, #18]
      break;
 8006e9e:	e017      	b.n	8006ed0 <USBH_AC_GetRes+0xf0>

    case UAC_OUTPUT_TERMINAL:
      UnitID = AUDIO_Handle->class_desc.cs_desc.OutputTerminalDesc[0]->bTerminalID;
 8006ea0:	68bb      	ldr	r3, [r7, #8]
 8006ea2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006ea6:	78db      	ldrb	r3, [r3, #3]
 8006ea8:	743b      	strb	r3, [r7, #16]
      InterfaceNum = 0U; /*Always zero Control Interface */
 8006eaa:	2300      	movs	r3, #0
 8006eac:	73fb      	strb	r3, [r7, #15]
      wIndex = (uint16_t)((uint32_t)UnitID << 8U) | (uint16_t)InterfaceNum;
 8006eae:	7c3b      	ldrb	r3, [r7, #16]
 8006eb0:	b29b      	uxth	r3, r3
 8006eb2:	021b      	lsls	r3, r3, #8
 8006eb4:	b29a      	uxth	r2, r3
 8006eb6:	7bfb      	ldrb	r3, [r7, #15]
 8006eb8:	b29b      	uxth	r3, r3
 8006eba:	4313      	orrs	r3, r2
 8006ebc:	82bb      	strh	r3, [r7, #20]
      wValue = (COPY_PROTECT_CONTROL << 8U) ;
 8006ebe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006ec2:	82fb      	strh	r3, [r7, #22]
      wLength = 1U;
 8006ec4:	2301      	movs	r3, #1
 8006ec6:	827b      	strh	r3, [r7, #18]
      break;
 8006ec8:	e002      	b.n	8006ed0 <USBH_AC_GetRes+0xf0>

    default:
      ret = USBH_FAIL;
 8006eca:	2302      	movs	r3, #2
 8006ecc:	747b      	strb	r3, [r7, #17]
      break;
 8006ece:	bf00      	nop
  }

  if (ret != USBH_OK)
 8006ed0:	7c7b      	ldrb	r3, [r7, #17]
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d001      	beq.n	8006eda <USBH_AC_GetRes+0xfa>
  {
    return ret;
 8006ed6:	7c7b      	ldrb	r3, [r7, #17]
 8006ed8:	e017      	b.n	8006f0a <USBH_AC_GetRes+0x12a>
  }

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_RECIPIENT_INTERFACE
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	22a1      	movs	r2, #161	; 0xa1
 8006ede:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_TYPE_CLASS;

  phost->Control.setup.b.bRequest = UAC_GET_RES;
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	2284      	movs	r2, #132	; 0x84
 8006ee4:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = wValue;
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	8afa      	ldrh	r2, [r7, #22]
 8006eea:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = wIndex;
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	8aba      	ldrh	r2, [r7, #20]
 8006ef0:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = wLength;
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	8a7a      	ldrh	r2, [r7, #18]
 8006ef6:	82da      	strh	r2, [r3, #22]

  return (USBH_CtlReq(phost, (uint8_t *)(void *)(AUDIO_Handle->mem), wLength));
 8006ef8:	68bb      	ldr	r3, [r7, #8]
 8006efa:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8006efe:	8a7a      	ldrh	r2, [r7, #18]
 8006f00:	4619      	mov	r1, r3
 8006f02:	6878      	ldr	r0, [r7, #4]
 8006f04:	f006 f9a4 	bl	800d250 <USBH_CtlReq>
 8006f08:	4603      	mov	r3, r0

}
 8006f0a:	4618      	mov	r0, r3
 8006f0c:	3718      	adds	r7, #24
 8006f0e:	46bd      	mov	sp, r7
 8006f10:	bd80      	pop	{r7, pc}

08006f12 <USBH_AC_GetMin>:
                                         uint8_t subtype,
                                         uint8_t feature,
                                         uint8_t controlSelector,
                                         uint8_t channel,
                                         uint16_t length)
{
 8006f12:	b580      	push	{r7, lr}
 8006f14:	b086      	sub	sp, #24
 8006f16:	af00      	add	r7, sp, #0
 8006f18:	6078      	str	r0, [r7, #4]
 8006f1a:	4608      	mov	r0, r1
 8006f1c:	4611      	mov	r1, r2
 8006f1e:	461a      	mov	r2, r3
 8006f20:	4603      	mov	r3, r0
 8006f22:	70fb      	strb	r3, [r7, #3]
 8006f24:	460b      	mov	r3, r1
 8006f26:	70bb      	strb	r3, [r7, #2]
 8006f28:	4613      	mov	r3, r2
 8006f2a:	707b      	strb	r3, [r7, #1]
  uint16_t wValue = 0U, wIndex = 0U, wLength = 0U;
 8006f2c:	2300      	movs	r3, #0
 8006f2e:	82fb      	strh	r3, [r7, #22]
 8006f30:	2300      	movs	r3, #0
 8006f32:	82bb      	strh	r3, [r7, #20]
 8006f34:	2300      	movs	r3, #0
 8006f36:	827b      	strh	r3, [r7, #18]
  uint8_t UnitID = 0U, InterfaceNum = 0U;
 8006f38:	2300      	movs	r3, #0
 8006f3a:	743b      	strb	r3, [r7, #16]
 8006f3c:	2300      	movs	r3, #0
 8006f3e:	73fb      	strb	r3, [r7, #15]
  AUDIO_HandleTypeDef *AUDIO_Handle;
  AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006f46:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 8006f4a:	69db      	ldr	r3, [r3, #28]
 8006f4c:	60bb      	str	r3, [r7, #8]
  USBH_StatusTypeDef ret = USBH_OK;
 8006f4e:	2300      	movs	r3, #0
 8006f50:	747b      	strb	r3, [r7, #17]

  switch (subtype)
 8006f52:	78fb      	ldrb	r3, [r7, #3]
 8006f54:	2b06      	cmp	r3, #6
 8006f56:	d01e      	beq.n	8006f96 <USBH_AC_GetMin+0x84>
 8006f58:	2b06      	cmp	r3, #6
 8006f5a:	dc4f      	bgt.n	8006ffc <USBH_AC_GetMin+0xea>
 8006f5c:	2b02      	cmp	r3, #2
 8006f5e:	d002      	beq.n	8006f66 <USBH_AC_GetMin+0x54>
 8006f60:	2b03      	cmp	r3, #3
 8006f62:	d036      	beq.n	8006fd2 <USBH_AC_GetMin+0xc0>
 8006f64:	e04a      	b.n	8006ffc <USBH_AC_GetMin+0xea>
  {
    case UAC_INPUT_TERMINAL:
      UnitID = AUDIO_Handle->class_desc.cs_desc.InputTerminalDesc[0]->bTerminalID;
 8006f66:	68bb      	ldr	r3, [r7, #8]
 8006f68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f6a:	78db      	ldrb	r3, [r3, #3]
 8006f6c:	743b      	strb	r3, [r7, #16]
      InterfaceNum = 0U; /*Always zero Control Interface */
 8006f6e:	2300      	movs	r3, #0
 8006f70:	73fb      	strb	r3, [r7, #15]
      wIndex = (uint16_t)((uint32_t)UnitID << 8U) | (uint16_t)InterfaceNum;
 8006f72:	7c3b      	ldrb	r3, [r7, #16]
 8006f74:	b29b      	uxth	r3, r3
 8006f76:	021b      	lsls	r3, r3, #8
 8006f78:	b29a      	uxth	r2, r3
 8006f7a:	7bfb      	ldrb	r3, [r7, #15]
 8006f7c:	b29b      	uxth	r3, r3
 8006f7e:	4313      	orrs	r3, r2
 8006f80:	82bb      	strh	r3, [r7, #20]
      wValue = (COPY_PROTECT_CONTROL << 8U);
 8006f82:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006f86:	82fb      	strh	r3, [r7, #22]
      AUDIO_Handle->mem[0] = 0x00U;
 8006f88:	68bb      	ldr	r3, [r7, #8]
 8006f8a:	2200      	movs	r2, #0
 8006f8c:	f8a3 2190 	strh.w	r2, [r3, #400]	; 0x190

      wLength = 1U;
 8006f90:	2301      	movs	r3, #1
 8006f92:	827b      	strh	r3, [r7, #18]
      break;
 8006f94:	e035      	b.n	8007002 <USBH_AC_GetMin+0xf0>
    case UAC_FEATURE_UNIT:
      UnitID = AUDIO_Handle->class_desc.cs_desc.FeatureUnitDesc[feature]->bUnitID;
 8006f96:	78bb      	ldrb	r3, [r7, #2]
 8006f98:	68ba      	ldr	r2, [r7, #8]
 8006f9a:	3322      	adds	r3, #34	; 0x22
 8006f9c:	009b      	lsls	r3, r3, #2
 8006f9e:	4413      	add	r3, r2
 8006fa0:	689b      	ldr	r3, [r3, #8]
 8006fa2:	78db      	ldrb	r3, [r3, #3]
 8006fa4:	743b      	strb	r3, [r7, #16]
      InterfaceNum = 0U; /*Always zero Control Interface */
 8006fa6:	2300      	movs	r3, #0
 8006fa8:	73fb      	strb	r3, [r7, #15]
      wIndex = (uint16_t)((uint32_t)UnitID << 8U) | (uint16_t)InterfaceNum;
 8006faa:	7c3b      	ldrb	r3, [r7, #16]
 8006fac:	b29b      	uxth	r3, r3
 8006fae:	021b      	lsls	r3, r3, #8
 8006fb0:	b29a      	uxth	r2, r3
 8006fb2:	7bfb      	ldrb	r3, [r7, #15]
 8006fb4:	b29b      	uxth	r3, r3
 8006fb6:	4313      	orrs	r3, r2
 8006fb8:	82bb      	strh	r3, [r7, #20]
      /*holds the CS(control selector ) and CN (channel number)*/
      wValue = (uint16_t)((uint32_t)controlSelector << 8U) | (uint16_t)channel;
 8006fba:	787b      	ldrb	r3, [r7, #1]
 8006fbc:	b29b      	uxth	r3, r3
 8006fbe:	021b      	lsls	r3, r3, #8
 8006fc0:	b29a      	uxth	r2, r3
 8006fc2:	f897 3020 	ldrb.w	r3, [r7, #32]
 8006fc6:	b29b      	uxth	r3, r3
 8006fc8:	4313      	orrs	r3, r2
 8006fca:	82fb      	strh	r3, [r7, #22]
      wLength = length;
 8006fcc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006fce:	827b      	strh	r3, [r7, #18]
      break;
 8006fd0:	e017      	b.n	8007002 <USBH_AC_GetMin+0xf0>

    case UAC_OUTPUT_TERMINAL:
      UnitID = AUDIO_Handle->class_desc.cs_desc.OutputTerminalDesc[0]->bTerminalID;
 8006fd2:	68bb      	ldr	r3, [r7, #8]
 8006fd4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006fd8:	78db      	ldrb	r3, [r3, #3]
 8006fda:	743b      	strb	r3, [r7, #16]
      InterfaceNum = 0U; /*Always zero Control Interface */
 8006fdc:	2300      	movs	r3, #0
 8006fde:	73fb      	strb	r3, [r7, #15]
      wIndex = (uint16_t)((uint32_t)UnitID << 8U) | (uint16_t)InterfaceNum;
 8006fe0:	7c3b      	ldrb	r3, [r7, #16]
 8006fe2:	b29b      	uxth	r3, r3
 8006fe4:	021b      	lsls	r3, r3, #8
 8006fe6:	b29a      	uxth	r2, r3
 8006fe8:	7bfb      	ldrb	r3, [r7, #15]
 8006fea:	b29b      	uxth	r3, r3
 8006fec:	4313      	orrs	r3, r2
 8006fee:	82bb      	strh	r3, [r7, #20]
      wValue = (COPY_PROTECT_CONTROL << 8U);
 8006ff0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006ff4:	82fb      	strh	r3, [r7, #22]
      wLength = 1U;
 8006ff6:	2301      	movs	r3, #1
 8006ff8:	827b      	strh	r3, [r7, #18]
      break;
 8006ffa:	e002      	b.n	8007002 <USBH_AC_GetMin+0xf0>

    default:
      ret = USBH_FAIL;
 8006ffc:	2302      	movs	r3, #2
 8006ffe:	747b      	strb	r3, [r7, #17]
      break;
 8007000:	bf00      	nop
  }

  if (ret != USBH_OK)
 8007002:	7c7b      	ldrb	r3, [r7, #17]
 8007004:	2b00      	cmp	r3, #0
 8007006:	d001      	beq.n	800700c <USBH_AC_GetMin+0xfa>
  {
    return ret;
 8007008:	7c7b      	ldrb	r3, [r7, #17]
 800700a:	e017      	b.n	800703c <USBH_AC_GetMin+0x12a>
  }

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_RECIPIENT_INTERFACE | \
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	22a1      	movs	r2, #161	; 0xa1
 8007010:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_TYPE_CLASS;

  phost->Control.setup.b.bRequest = UAC_GET_MIN;
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	2282      	movs	r2, #130	; 0x82
 8007016:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = wValue;
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	8afa      	ldrh	r2, [r7, #22]
 800701c:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = wIndex;
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	8aba      	ldrh	r2, [r7, #20]
 8007022:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = wLength;
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	8a7a      	ldrh	r2, [r7, #18]
 8007028:	82da      	strh	r2, [r3, #22]

  return (USBH_CtlReq(phost, (uint8_t *)(void *)(AUDIO_Handle->mem), wLength));
 800702a:	68bb      	ldr	r3, [r7, #8]
 800702c:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8007030:	8a7a      	ldrh	r2, [r7, #18]
 8007032:	4619      	mov	r1, r3
 8007034:	6878      	ldr	r0, [r7, #4]
 8007036:	f006 f90b 	bl	800d250 <USBH_CtlReq>
 800703a:	4603      	mov	r3, r0

}
 800703c:	4618      	mov	r0, r3
 800703e:	3718      	adds	r7, #24
 8007040:	46bd      	mov	sp, r7
 8007042:	bd80      	pop	{r7, pc}

08007044 <USBH_AUDIO_SetEndpointControls>:
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_SetEndpointControls(USBH_HandleTypeDef *phost,
                                                         uint8_t  Ep,
                                                         uint8_t *buff)
{
 8007044:	b580      	push	{r7, lr}
 8007046:	b086      	sub	sp, #24
 8007048:	af00      	add	r7, sp, #0
 800704a:	60f8      	str	r0, [r7, #12]
 800704c:	460b      	mov	r3, r1
 800704e:	607a      	str	r2, [r7, #4]
 8007050:	72fb      	strb	r3, [r7, #11]
  uint16_t wValue, wIndex, wLength;

  wValue = SAMPLING_FREQ_CONTROL << 8U;
 8007052:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007056:	82fb      	strh	r3, [r7, #22]
  wIndex = Ep;
 8007058:	7afb      	ldrb	r3, [r7, #11]
 800705a:	82bb      	strh	r3, [r7, #20]
  wLength = 3U; /*length of the frequency parameter*/
 800705c:	2303      	movs	r3, #3
 800705e:	827b      	strh	r3, [r7, #18]

  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT | \
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	2222      	movs	r2, #34	; 0x22
 8007064:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_TYPE_CLASS;

  phost->Control.setup.b.bRequest = UAC_SET_CUR;
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	2201      	movs	r2, #1
 800706a:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = wValue;
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	8afa      	ldrh	r2, [r7, #22]
 8007070:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = wIndex;
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	8aba      	ldrh	r2, [r7, #20]
 8007076:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = wLength;
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	8a7a      	ldrh	r2, [r7, #18]
 800707c:	82da      	strh	r2, [r3, #22]

  return (USBH_CtlReq(phost, (uint8_t *)buff, wLength));
 800707e:	8a7b      	ldrh	r3, [r7, #18]
 8007080:	461a      	mov	r2, r3
 8007082:	6879      	ldr	r1, [r7, #4]
 8007084:	68f8      	ldr	r0, [r7, #12]
 8007086:	f006 f8e3 	bl	800d250 <USBH_CtlReq>
 800708a:	4603      	mov	r3, r0

}
 800708c:	4618      	mov	r0, r3
 800708e:	3718      	adds	r7, #24
 8007090:	46bd      	mov	sp, r7
 8007092:	bd80      	pop	{r7, pc}

08007094 <USBH_AUDIO_InputStream>:
  * @brief  Handle Input stream process
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_InputStream(USBH_HandleTypeDef *phost)
{
 8007094:	b480      	push	{r7}
 8007096:	b085      	sub	sp, #20
 8007098:	af00      	add	r7, sp, #0
 800709a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  USBH_StatusTypeDef status = USBH_BUSY;
 800709c:	2301      	movs	r3, #1
 800709e:	73fb      	strb	r3, [r7, #15]

  return status;
 80070a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80070a2:	4618      	mov	r0, r3
 80070a4:	3714      	adds	r7, #20
 80070a6:	46bd      	mov	sp, r7
 80070a8:	bc80      	pop	{r7}
 80070aa:	4770      	bx	lr

080070ac <USBH_AUDIO_Control>:
  * @brief  Handle HID Control process
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_Control(USBH_HandleTypeDef *phost)
{
 80070ac:	b580      	push	{r7, lr}
 80070ae:	b086      	sub	sp, #24
 80070b0:	af00      	add	r7, sp, #0
 80070b2:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY ;
 80070b4:	2301      	movs	r3, #1
 80070b6:	75fb      	strb	r3, [r7, #23]
  AUDIO_HandleTypeDef *AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80070be:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 80070c2:	69db      	ldr	r3, [r3, #28]
 80070c4:	613b      	str	r3, [r7, #16]
  uint16_t attribute  = 0U;
 80070c6:	2300      	movs	r3, #0
 80070c8:	81fb      	strh	r3, [r7, #14]

  switch (AUDIO_Handle->control_state)
 80070ca:	693b      	ldr	r3, [r7, #16]
 80070cc:	78db      	ldrb	r3, [r3, #3]
 80070ce:	3b01      	subs	r3, #1
 80070d0:	2b04      	cmp	r3, #4
 80070d2:	f200 8099 	bhi.w	8007208 <USBH_AUDIO_Control+0x15c>
 80070d6:	a201      	add	r2, pc, #4	; (adr r2, 80070dc <USBH_AUDIO_Control+0x30>)
 80070d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070dc:	080070f1 	.word	0x080070f1
 80070e0:	0800714f 	.word	0x0800714f
 80070e4:	08007209 	.word	0x08007209
 80070e8:	080071d5 	.word	0x080071d5
 80070ec:	080071ef 	.word	0x080071ef
  {
    case AUDIO_CONTROL_INIT:
      if ((phost->Timer & 1U) == 0U)
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80070f6:	f8d3 3164 	ldr.w	r3, [r3, #356]	; 0x164
 80070fa:	f003 0301 	and.w	r3, r3, #1
 80070fe:	2b00      	cmp	r3, #0
 8007100:	f040 8084 	bne.w	800720c <USBH_AUDIO_Control+0x160>
      {
        AUDIO_Handle->control.timer = phost->Timer;
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800710a:	f8d3 2164 	ldr.w	r2, [r3, #356]	; 0x164
 800710e:	693b      	ldr	r3, [r7, #16]
 8007110:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
        USBH_InterruptReceiveData(phost,
                                  (uint8_t *)(void *)(AUDIO_Handle->mem),
 8007114:	693b      	ldr	r3, [r7, #16]
 8007116:	f503 71c8 	add.w	r1, r3, #400	; 0x190
                                  (uint8_t)AUDIO_Handle->control.EpSize,
 800711a:	693b      	ldr	r3, [r7, #16]
 800711c:	f8b3 3186 	ldrh.w	r3, [r3, #390]	; 0x186
        USBH_InterruptReceiveData(phost,
 8007120:	b2da      	uxtb	r2, r3
 8007122:	693b      	ldr	r3, [r7, #16]
 8007124:	f893 318a 	ldrb.w	r3, [r3, #394]	; 0x18a
 8007128:	6878      	ldr	r0, [r7, #4]
 800712a:	f006 fafb 	bl	800d724 <USBH_InterruptReceiveData>
                                  AUDIO_Handle->control.Pipe);

        AUDIO_Handle->temp_feature  = AUDIO_Handle->headphone.asociated_feature;
 800712e:	693b      	ldr	r3, [r7, #16]
 8007130:	f893 2107 	ldrb.w	r2, [r3, #263]	; 0x107
 8007134:	693b      	ldr	r3, [r7, #16]
 8007136:	f883 21a0 	strb.w	r2, [r3, #416]	; 0x1a0
        AUDIO_Handle->temp_channels = AUDIO_Handle->headphone.asociated_channels;
 800713a:	693b      	ldr	r3, [r7, #16]
 800713c:	f893 2109 	ldrb.w	r2, [r3, #265]	; 0x109
 8007140:	693b      	ldr	r3, [r7, #16]
 8007142:	f883 21a1 	strb.w	r2, [r3, #417]	; 0x1a1

        AUDIO_Handle->control_state = AUDIO_CONTROL_CHANGE ;
 8007146:	693b      	ldr	r3, [r7, #16]
 8007148:	2202      	movs	r2, #2
 800714a:	70da      	strb	r2, [r3, #3]
      }
      break;
 800714c:	e05e      	b.n	800720c <USBH_AUDIO_Control+0x160>

    case AUDIO_CONTROL_CHANGE:
      if (USBH_LL_GetURBState(phost, AUDIO_Handle->control.Pipe) == USBH_URB_DONE)
 800714e:	693b      	ldr	r3, [r7, #16]
 8007150:	f893 318a 	ldrb.w	r3, [r3, #394]	; 0x18a
 8007154:	4619      	mov	r1, r3
 8007156:	6878      	ldr	r0, [r7, #4]
 8007158:	f006 fe4a 	bl	800ddf0 <USBH_LL_GetURBState>
 800715c:	4603      	mov	r3, r0
 800715e:	2b01      	cmp	r3, #1
 8007160:	d114      	bne.n	800718c <USBH_AUDIO_Control+0xe0>
      {
        attribute = LE16(&AUDIO_Handle->mem[0]);
 8007162:	693b      	ldr	r3, [r7, #16]
 8007164:	f8b3 2190 	ldrh.w	r2, [r3, #400]	; 0x190
 8007168:	693b      	ldr	r3, [r7, #16]
 800716a:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800716e:	3302      	adds	r3, #2
 8007170:	881b      	ldrh	r3, [r3, #0]
 8007172:	021b      	lsls	r3, r3, #8
 8007174:	b29b      	uxth	r3, r3
 8007176:	4313      	orrs	r3, r2
 8007178:	81fb      	strh	r3, [r7, #14]
        if (USBH_AUDIO_SetControlAttribute(phost, (uint8_t)attribute) == USBH_BUSY)
 800717a:	89fb      	ldrh	r3, [r7, #14]
 800717c:	b2db      	uxtb	r3, r3
 800717e:	4619      	mov	r1, r3
 8007180:	6878      	ldr	r0, [r7, #4]
 8007182:	f000 f989 	bl	8007498 <USBH_AUDIO_SetControlAttribute>
 8007186:	4603      	mov	r3, r0
 8007188:	2b01      	cmp	r3, #1
 800718a:	d041      	beq.n	8007210 <USBH_AUDIO_Control+0x164>
        {
          break;
        }
      }

      if ((phost->Timer - AUDIO_Handle->control.timer) >= AUDIO_Handle->control.Poll)
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007192:	f8d3 2164 	ldr.w	r2, [r3, #356]	; 0x164
 8007196:	693b      	ldr	r3, [r7, #16]
 8007198:	f8d3 318c 	ldr.w	r3, [r3, #396]	; 0x18c
 800719c:	1ad3      	subs	r3, r2, r3
 800719e:	693a      	ldr	r2, [r7, #16]
 80071a0:	f892 218b 	ldrb.w	r2, [r2, #395]	; 0x18b
 80071a4:	4293      	cmp	r3, r2
 80071a6:	d335      	bcc.n	8007214 <USBH_AUDIO_Control+0x168>
      {
        AUDIO_Handle->control.timer = phost->Timer;
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80071ae:	f8d3 2164 	ldr.w	r2, [r3, #356]	; 0x164
 80071b2:	693b      	ldr	r3, [r7, #16]
 80071b4:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c

        USBH_InterruptReceiveData(phost,
                                  (uint8_t *)(void *)(AUDIO_Handle->mem),
 80071b8:	693b      	ldr	r3, [r7, #16]
 80071ba:	f503 71c8 	add.w	r1, r3, #400	; 0x190
                                  (uint8_t)AUDIO_Handle->control.EpSize,
 80071be:	693b      	ldr	r3, [r7, #16]
 80071c0:	f8b3 3186 	ldrh.w	r3, [r3, #390]	; 0x186
        USBH_InterruptReceiveData(phost,
 80071c4:	b2da      	uxtb	r2, r3
 80071c6:	693b      	ldr	r3, [r7, #16]
 80071c8:	f893 318a 	ldrb.w	r3, [r3, #394]	; 0x18a
 80071cc:	6878      	ldr	r0, [r7, #4]
 80071ce:	f006 faa9 	bl	800d724 <USBH_InterruptReceiveData>
                                  AUDIO_Handle->control.Pipe);

      }
      break;
 80071d2:	e01f      	b.n	8007214 <USBH_AUDIO_Control+0x168>

    case AUDIO_CONTROL_VOLUME_UP:
      if (USBH_AUDIO_SetControlAttribute(phost, 1U) == USBH_OK)
 80071d4:	2101      	movs	r1, #1
 80071d6:	6878      	ldr	r0, [r7, #4]
 80071d8:	f000 f95e 	bl	8007498 <USBH_AUDIO_SetControlAttribute>
 80071dc:	4603      	mov	r3, r0
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d11a      	bne.n	8007218 <USBH_AUDIO_Control+0x16c>
      {
        AUDIO_Handle->control_state = AUDIO_CONTROL_INIT;
 80071e2:	693b      	ldr	r3, [r7, #16]
 80071e4:	2201      	movs	r2, #1
 80071e6:	70da      	strb	r2, [r3, #3]
        status = USBH_OK;
 80071e8:	2300      	movs	r3, #0
 80071ea:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80071ec:	e014      	b.n	8007218 <USBH_AUDIO_Control+0x16c>

    case AUDIO_CONTROL_VOLUME_DOWN:
      if (USBH_AUDIO_SetControlAttribute(phost, 2U) == USBH_OK)
 80071ee:	2102      	movs	r1, #2
 80071f0:	6878      	ldr	r0, [r7, #4]
 80071f2:	f000 f951 	bl	8007498 <USBH_AUDIO_SetControlAttribute>
 80071f6:	4603      	mov	r3, r0
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d10f      	bne.n	800721c <USBH_AUDIO_Control+0x170>
      {
        AUDIO_Handle->control_state = AUDIO_CONTROL_INIT;
 80071fc:	693b      	ldr	r3, [r7, #16]
 80071fe:	2201      	movs	r2, #1
 8007200:	70da      	strb	r2, [r3, #3]
        status = USBH_OK;
 8007202:	2300      	movs	r3, #0
 8007204:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8007206:	e009      	b.n	800721c <USBH_AUDIO_Control+0x170>

    case AUDIO_CONTROL_IDLE:
    default:
      break;
 8007208:	bf00      	nop
 800720a:	e008      	b.n	800721e <USBH_AUDIO_Control+0x172>
      break;
 800720c:	bf00      	nop
 800720e:	e006      	b.n	800721e <USBH_AUDIO_Control+0x172>
          break;
 8007210:	bf00      	nop
 8007212:	e004      	b.n	800721e <USBH_AUDIO_Control+0x172>
      break;
 8007214:	bf00      	nop
 8007216:	e002      	b.n	800721e <USBH_AUDIO_Control+0x172>
      break;
 8007218:	bf00      	nop
 800721a:	e000      	b.n	800721e <USBH_AUDIO_Control+0x172>
      break;
 800721c:	bf00      	nop
  }

  return status;
 800721e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007220:	4618      	mov	r0, r3
 8007222:	3718      	adds	r7, #24
 8007224:	46bd      	mov	sp, r7
 8007226:	bd80      	pop	{r7, pc}

08007228 <USBH_AUDIO_OutputStream>:
  * @brief  Handle Output stream process
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_OutputStream(USBH_HandleTypeDef *phost)
{
 8007228:	b580      	push	{r7, lr}
 800722a:	b086      	sub	sp, #24
 800722c:	af00      	add	r7, sp, #0
 800722e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY ;
 8007230:	2301      	movs	r3, #1
 8007232:	75fb      	strb	r3, [r7, #23]
  AUDIO_HandleTypeDef *AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800723a:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 800723e:	69db      	ldr	r3, [r3, #28]
 8007240:	613b      	str	r3, [r7, #16]
  uint8_t *buff;


  switch (AUDIO_Handle->play_state)
 8007242:	693b      	ldr	r3, [r7, #16]
 8007244:	789b      	ldrb	r3, [r3, #2]
 8007246:	3b01      	subs	r3, #1
 8007248:	2b04      	cmp	r3, #4
 800724a:	d85c      	bhi.n	8007306 <USBH_AUDIO_OutputStream+0xde>
 800724c:	a201      	add	r2, pc, #4	; (adr r2, 8007254 <USBH_AUDIO_OutputStream+0x2c>)
 800724e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007252:	bf00      	nop
 8007254:	08007269 	.word	0x08007269
 8007258:	080072c5 	.word	0x080072c5
 800725c:	0800728f 	.word	0x0800728f
 8007260:	080072fb 	.word	0x080072fb
 8007264:	080072f5 	.word	0x080072f5
  {
    case AUDIO_PLAYBACK_INIT:

      if (AUDIO_Handle->class_desc.as_desc[AUDIO_Handle->headphone.asociated_as].FormatTypeDesc->bSamFreqType == 0U)
 8007268:	693b      	ldr	r3, [r7, #16]
 800726a:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800726e:	693a      	ldr	r2, [r7, #16]
 8007270:	3317      	adds	r3, #23
 8007272:	00db      	lsls	r3, r3, #3
 8007274:	4413      	add	r3, r2
 8007276:	68db      	ldr	r3, [r3, #12]
 8007278:	79db      	ldrb	r3, [r3, #7]
 800727a:	2b00      	cmp	r3, #0
 800727c:	d103      	bne.n	8007286 <USBH_AUDIO_OutputStream+0x5e>
      {
        AUDIO_Handle->play_state = AUDIO_PLAYBACK_SET_EP_FREQ;
 800727e:	693b      	ldr	r3, [r7, #16]
 8007280:	2203      	movs	r2, #3
 8007282:	709a      	strb	r2, [r3, #2]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007284:	e044      	b.n	8007310 <USBH_AUDIO_OutputStream+0xe8>
        AUDIO_Handle->play_state = AUDIO_PLAYBACK_SET_EP;
 8007286:	693b      	ldr	r3, [r7, #16]
 8007288:	2202      	movs	r2, #2
 800728a:	709a      	strb	r2, [r3, #2]
      break;
 800728c:	e040      	b.n	8007310 <USBH_AUDIO_OutputStream+0xe8>

    case AUDIO_PLAYBACK_SET_EP_FREQ:

      buff = (uint8_t *)AUDIO_Handle->class_desc.as_desc[AUDIO_Handle->headphone.asociated_as].FormatTypeDesc->tSamFreq[0];
 800728e:	693b      	ldr	r3, [r7, #16]
 8007290:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 8007294:	693a      	ldr	r2, [r7, #16]
 8007296:	3317      	adds	r3, #23
 8007298:	00db      	lsls	r3, r3, #3
 800729a:	4413      	add	r3, r2
 800729c:	68db      	ldr	r3, [r3, #12]
 800729e:	3308      	adds	r3, #8
 80072a0:	60fb      	str	r3, [r7, #12]

      status = USBH_AUDIO_SetEndpointControls(phost, AUDIO_Handle->headphone.Ep, buff);
 80072a2:	693b      	ldr	r3, [r7, #16]
 80072a4:	f893 30f4 	ldrb.w	r3, [r3, #244]	; 0xf4
 80072a8:	68fa      	ldr	r2, [r7, #12]
 80072aa:	4619      	mov	r1, r3
 80072ac:	6878      	ldr	r0, [r7, #4]
 80072ae:	f7ff fec9 	bl	8007044 <USBH_AUDIO_SetEndpointControls>
 80072b2:	4603      	mov	r3, r0
 80072b4:	75fb      	strb	r3, [r7, #23]
      if (status == USBH_OK)
 80072b6:	7dfb      	ldrb	r3, [r7, #23]
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d126      	bne.n	800730a <USBH_AUDIO_OutputStream+0xe2>
      {
        AUDIO_Handle->play_state = AUDIO_PLAYBACK_IDLE;
 80072bc:	693b      	ldr	r3, [r7, #16]
 80072be:	2205      	movs	r2, #5
 80072c0:	709a      	strb	r2, [r3, #2]
      }
      break;
 80072c2:	e022      	b.n	800730a <USBH_AUDIO_OutputStream+0xe2>

    case AUDIO_PLAYBACK_SET_EP:
      buff = (uint8_t *)(void *)&AUDIO_Handle->headphone.frequency;
 80072c4:	693b      	ldr	r3, [r7, #16]
 80072c6:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 80072ca:	60fb      	str	r3, [r7, #12]
      status = USBH_AUDIO_SetEndpointControls(phost, AUDIO_Handle->headphone.Ep, buff);
 80072cc:	693b      	ldr	r3, [r7, #16]
 80072ce:	f893 30f4 	ldrb.w	r3, [r3, #244]	; 0xf4
 80072d2:	68fa      	ldr	r2, [r7, #12]
 80072d4:	4619      	mov	r1, r3
 80072d6:	6878      	ldr	r0, [r7, #4]
 80072d8:	f7ff feb4 	bl	8007044 <USBH_AUDIO_SetEndpointControls>
 80072dc:	4603      	mov	r3, r0
 80072de:	75fb      	strb	r3, [r7, #23]
      if (status == USBH_OK)
 80072e0:	7dfb      	ldrb	r3, [r7, #23]
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d113      	bne.n	800730e <USBH_AUDIO_OutputStream+0xe6>
      {
        AUDIO_Handle->play_state = AUDIO_PLAYBACK_IDLE;
 80072e6:	693b      	ldr	r3, [r7, #16]
 80072e8:	2205      	movs	r2, #5
 80072ea:	709a      	strb	r2, [r3, #2]
        USBH_AUDIO_FrequencySet(phost);
 80072ec:	6878      	ldr	r0, [r7, #4]
 80072ee:	f000 f97c 	bl	80075ea <USBH_AUDIO_FrequencySet>
      }
      break;
 80072f2:	e00c      	b.n	800730e <USBH_AUDIO_OutputStream+0xe6>

    case AUDIO_PLAYBACK_IDLE:
      status = USBH_OK;
 80072f4:	2300      	movs	r3, #0
 80072f6:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80072f8:	e00a      	b.n	8007310 <USBH_AUDIO_OutputStream+0xe8>

    case AUDIO_PLAYBACK_PLAY:
      USBH_AUDIO_Transmit(phost);
 80072fa:	6878      	ldr	r0, [r7, #4]
 80072fc:	f000 f80e 	bl	800731c <USBH_AUDIO_Transmit>
      status = USBH_OK;
 8007300:	2300      	movs	r3, #0
 8007302:	75fb      	strb	r3, [r7, #23]
      break;
 8007304:	e004      	b.n	8007310 <USBH_AUDIO_OutputStream+0xe8>

    default:
      break;
 8007306:	bf00      	nop
 8007308:	e002      	b.n	8007310 <USBH_AUDIO_OutputStream+0xe8>
      break;
 800730a:	bf00      	nop
 800730c:	e000      	b.n	8007310 <USBH_AUDIO_OutputStream+0xe8>
      break;
 800730e:	bf00      	nop
  }

  return status;
 8007310:	7dfb      	ldrb	r3, [r7, #23]
}
 8007312:	4618      	mov	r0, r3
 8007314:	3718      	adds	r7, #24
 8007316:	46bd      	mov	sp, r7
 8007318:	bd80      	pop	{r7, pc}
 800731a:	bf00      	nop

0800731c <USBH_AUDIO_Transmit>:
  * @brief  Handle Transmission process
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_Transmit(USBH_HandleTypeDef *phost)
{
 800731c:	b580      	push	{r7, lr}
 800731e:	b084      	sub	sp, #16
 8007320:	af00      	add	r7, sp, #0
 8007322:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY ;
 8007324:	2301      	movs	r3, #1
 8007326:	73fb      	strb	r3, [r7, #15]
  AUDIO_HandleTypeDef *AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800732e:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 8007332:	69db      	ldr	r3, [r3, #28]
 8007334:	60bb      	str	r3, [r7, #8]

  switch (AUDIO_Handle->processing_state)
 8007336:	68bb      	ldr	r3, [r7, #8]
 8007338:	791b      	ldrb	r3, [r3, #4]
 800733a:	2b01      	cmp	r3, #1
 800733c:	d002      	beq.n	8007344 <USBH_AUDIO_Transmit+0x28>
 800733e:	2b02      	cmp	r3, #2
 8007340:	d037      	beq.n	80073b2 <USBH_AUDIO_Transmit+0x96>
 8007342:	e09e      	b.n	8007482 <USBH_AUDIO_Transmit+0x166>
  {
    case AUDIO_DATA_START_OUT:
      /* Sync with start of Even Frame */
      if ((phost->Timer & 1U) == 0U)
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800734a:	f8d3 3164 	ldr.w	r3, [r3, #356]	; 0x164
 800734e:	f003 0301 	and.w	r3, r3, #1
 8007352:	2b00      	cmp	r3, #0
 8007354:	f040 8098 	bne.w	8007488 <USBH_AUDIO_Transmit+0x16c>
      {
        AUDIO_Handle->headphone.timer = phost->Timer;
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800735e:	f8d3 2164 	ldr.w	r2, [r3, #356]	; 0x164
 8007362:	68bb      	ldr	r3, [r7, #8]
 8007364:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
        AUDIO_Handle->processing_state = AUDIO_DATA_OUT;
 8007368:	68bb      	ldr	r3, [r7, #8]
 800736a:	2202      	movs	r2, #2
 800736c:	711a      	strb	r2, [r3, #4]
        USBH_IsocSendData(phost,
 800736e:	68bb      	ldr	r3, [r7, #8]
 8007370:	f8d3 1110 	ldr.w	r1, [r3, #272]	; 0x110
                          AUDIO_Handle->headphone.buf,
                          (uint32_t)AUDIO_Handle->headphone.frame_length,
 8007374:	68bb      	ldr	r3, [r7, #8]
 8007376:	f8b3 3120 	ldrh.w	r3, [r3, #288]	; 0x120
        USBH_IsocSendData(phost,
 800737a:	461a      	mov	r2, r3
 800737c:	68bb      	ldr	r3, [r7, #8]
 800737e:	f893 30fb 	ldrb.w	r3, [r3, #251]	; 0xfb
 8007382:	6878      	ldr	r0, [r7, #4]
 8007384:	f006 f9ed 	bl	800d762 <USBH_IsocSendData>
                          AUDIO_Handle->headphone.Pipe);

        AUDIO_Handle->headphone.partial_ptr = AUDIO_Handle->headphone.frame_length;
 8007388:	68bb      	ldr	r3, [r7, #8]
 800738a:	f8b3 3120 	ldrh.w	r3, [r3, #288]	; 0x120
 800738e:	461a      	mov	r2, r3
 8007390:	68bb      	ldr	r3, [r7, #8]
 8007392:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
        AUDIO_Handle->headphone.global_ptr = AUDIO_Handle->headphone.frame_length;
 8007396:	68bb      	ldr	r3, [r7, #8]
 8007398:	f8b3 3120 	ldrh.w	r3, [r3, #288]	; 0x120
 800739c:	461a      	mov	r2, r3
 800739e:	68bb      	ldr	r3, [r7, #8]
 80073a0:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
        AUDIO_Handle->headphone.cbuf = AUDIO_Handle->headphone.buf;
 80073a4:	68bb      	ldr	r3, [r7, #8]
 80073a6:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
 80073aa:	68bb      	ldr	r3, [r7, #8]
 80073ac:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 80073b0:	e06a      	b.n	8007488 <USBH_AUDIO_Transmit+0x16c>

    case AUDIO_DATA_OUT:
      if ((USBH_LL_GetURBState(phost, AUDIO_Handle->headphone.Pipe) == USBH_URB_DONE) &&
 80073b2:	68bb      	ldr	r3, [r7, #8]
 80073b4:	f893 30fb 	ldrb.w	r3, [r3, #251]	; 0xfb
 80073b8:	4619      	mov	r1, r3
 80073ba:	6878      	ldr	r0, [r7, #4]
 80073bc:	f006 fd18 	bl	800ddf0 <USBH_LL_GetURBState>
 80073c0:	4603      	mov	r3, r0
 80073c2:	2b01      	cmp	r3, #1
 80073c4:	d162      	bne.n	800748c <USBH_AUDIO_Transmit+0x170>
          ((phost->Timer - AUDIO_Handle->headphone.timer) >= AUDIO_Handle->headphone.Poll))
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80073cc:	f8d3 2164 	ldr.w	r2, [r3, #356]	; 0x164
 80073d0:	68bb      	ldr	r3, [r7, #8]
 80073d2:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80073d6:	1ad3      	subs	r3, r2, r3
 80073d8:	68ba      	ldr	r2, [r7, #8]
 80073da:	f892 20fc 	ldrb.w	r2, [r2, #252]	; 0xfc
      if ((USBH_LL_GetURBState(phost, AUDIO_Handle->headphone.Pipe) == USBH_URB_DONE) &&
 80073de:	4293      	cmp	r3, r2
 80073e0:	d354      	bcc.n	800748c <USBH_AUDIO_Transmit+0x170>
      {
        AUDIO_Handle->headphone.timer = phost->Timer;
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80073e8:	f8d3 2164 	ldr.w	r2, [r3, #356]	; 0x164
 80073ec:	68bb      	ldr	r3, [r7, #8]
 80073ee:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100

        if (AUDIO_Handle->control.supported == 1U)
 80073f2:	68bb      	ldr	r3, [r7, #8]
 80073f4:	f893 3189 	ldrb.w	r3, [r3, #393]	; 0x189
 80073f8:	2b01      	cmp	r3, #1
 80073fa:	d102      	bne.n	8007402 <USBH_AUDIO_Transmit+0xe6>
        {
          USBH_AUDIO_Control(phost);
 80073fc:	6878      	ldr	r0, [r7, #4]
 80073fe:	f7ff fe55 	bl	80070ac <USBH_AUDIO_Control>
        }

        if (AUDIO_Handle->headphone.global_ptr <= AUDIO_Handle->headphone.total_length)
 8007402:	68bb      	ldr	r3, [r7, #8]
 8007404:	f8d3 211c 	ldr.w	r2, [r3, #284]	; 0x11c
 8007408:	68bb      	ldr	r3, [r7, #8]
 800740a:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 800740e:	429a      	cmp	r2, r3
 8007410:	d82b      	bhi.n	800746a <USBH_AUDIO_Transmit+0x14e>
        {
          USBH_IsocSendData(phost,
 8007412:	68bb      	ldr	r3, [r7, #8]
 8007414:	f8d3 1114 	ldr.w	r1, [r3, #276]	; 0x114
                            AUDIO_Handle->headphone.cbuf,
                            (uint32_t)AUDIO_Handle->headphone.frame_length,
 8007418:	68bb      	ldr	r3, [r7, #8]
 800741a:	f8b3 3120 	ldrh.w	r3, [r3, #288]	; 0x120
          USBH_IsocSendData(phost,
 800741e:	461a      	mov	r2, r3
 8007420:	68bb      	ldr	r3, [r7, #8]
 8007422:	f893 30fb 	ldrb.w	r3, [r3, #251]	; 0xfb
 8007426:	6878      	ldr	r0, [r7, #4]
 8007428:	f006 f99b 	bl	800d762 <USBH_IsocSendData>
                            AUDIO_Handle->headphone.Pipe);

          AUDIO_Handle->headphone.cbuf += AUDIO_Handle->headphone.frame_length;
 800742c:	68bb      	ldr	r3, [r7, #8]
 800742e:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8007432:	68ba      	ldr	r2, [r7, #8]
 8007434:	f8b2 2120 	ldrh.w	r2, [r2, #288]	; 0x120
 8007438:	441a      	add	r2, r3
 800743a:	68bb      	ldr	r3, [r7, #8]
 800743c:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
          AUDIO_Handle->headphone.partial_ptr += AUDIO_Handle->headphone.frame_length;
 8007440:	68bb      	ldr	r3, [r7, #8]
 8007442:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 8007446:	68ba      	ldr	r2, [r7, #8]
 8007448:	f8b2 2120 	ldrh.w	r2, [r2, #288]	; 0x120
 800744c:	441a      	add	r2, r3
 800744e:	68bb      	ldr	r3, [r7, #8]
 8007450:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
          AUDIO_Handle->headphone.global_ptr += AUDIO_Handle->headphone.frame_length;
 8007454:	68bb      	ldr	r3, [r7, #8]
 8007456:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 800745a:	68ba      	ldr	r2, [r7, #8]
 800745c:	f8b2 2120 	ldrh.w	r2, [r2, #288]	; 0x120
 8007460:	441a      	add	r2, r3
 8007462:	68bb      	ldr	r3, [r7, #8]
 8007464:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
          AUDIO_Handle->headphone.partial_ptr = 0xFFFFFFFFU;
          AUDIO_Handle->play_state = AUDIO_PLAYBACK_IDLE;
          USBH_AUDIO_BufferEmptyCallback(phost);
        }
      }
      break;
 8007468:	e010      	b.n	800748c <USBH_AUDIO_Transmit+0x170>
          AUDIO_Handle->headphone.partial_ptr = 0xFFFFFFFFU;
 800746a:	68bb      	ldr	r3, [r7, #8]
 800746c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007470:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
          AUDIO_Handle->play_state = AUDIO_PLAYBACK_IDLE;
 8007474:	68bb      	ldr	r3, [r7, #8]
 8007476:	2205      	movs	r2, #5
 8007478:	709a      	strb	r2, [r3, #2]
          USBH_AUDIO_BufferEmptyCallback(phost);
 800747a:	6878      	ldr	r0, [r7, #4]
 800747c:	f000 f8be 	bl	80075fc <USBH_AUDIO_BufferEmptyCallback>
      break;
 8007480:	e004      	b.n	800748c <USBH_AUDIO_Transmit+0x170>

    default:
      status = USBH_FAIL;
 8007482:	2302      	movs	r3, #2
 8007484:	73fb      	strb	r3, [r7, #15]
      break;
 8007486:	e002      	b.n	800748e <USBH_AUDIO_Transmit+0x172>
      break;
 8007488:	bf00      	nop
 800748a:	e000      	b.n	800748e <USBH_AUDIO_Transmit+0x172>
      break;
 800748c:	bf00      	nop
  }
  return status;
 800748e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007490:	4618      	mov	r0, r3
 8007492:	3710      	adds	r7, #16
 8007494:	46bd      	mov	sp, r7
 8007496:	bd80      	pop	{r7, pc}

08007498 <USBH_AUDIO_SetControlAttribute>:
  * @param  phost: Host handle
  * @param  attrib: control attribute
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_SetControlAttribute(USBH_HandleTypeDef *phost, uint8_t attrib)
{
 8007498:	b580      	push	{r7, lr}
 800749a:	b084      	sub	sp, #16
 800749c:	af00      	add	r7, sp, #0
 800749e:	6078      	str	r0, [r7, #4]
 80074a0:	460b      	mov	r3, r1
 80074a2:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_BUSY;
 80074a4:	2301      	movs	r3, #1
 80074a6:	73fb      	strb	r3, [r7, #15]
  AUDIO_HandleTypeDef *AUDIO_Handle;


  AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80074ae:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 80074b2:	69db      	ldr	r3, [r3, #28]
 80074b4:	60bb      	str	r3, [r7, #8]

  switch (attrib)
 80074b6:	78fb      	ldrb	r3, [r7, #3]
 80074b8:	2b01      	cmp	r3, #1
 80074ba:	d002      	beq.n	80074c2 <USBH_AUDIO_SetControlAttribute+0x2a>
 80074bc:	2b02      	cmp	r3, #2
 80074be:	d00b      	beq.n	80074d8 <USBH_AUDIO_SetControlAttribute+0x40>
 80074c0:	e015      	b.n	80074ee <USBH_AUDIO_SetControlAttribute+0x56>
  {
    case 0x01:
      AUDIO_Handle->headphone.attribute.volume += AUDIO_Handle->headphone.attribute.resolution;
 80074c2:	68bb      	ldr	r3, [r7, #8]
 80074c4:	f8d3 2134 	ldr.w	r2, [r3, #308]	; 0x134
 80074c8:	68bb      	ldr	r3, [r7, #8]
 80074ca:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 80074ce:	441a      	add	r2, r3
 80074d0:	68bb      	ldr	r3, [r7, #8]
 80074d2:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
      break;
 80074d6:	e00d      	b.n	80074f4 <USBH_AUDIO_SetControlAttribute+0x5c>

    case 0x02:
      AUDIO_Handle->headphone.attribute.volume -= AUDIO_Handle->headphone.attribute.resolution;
 80074d8:	68bb      	ldr	r3, [r7, #8]
 80074da:	f8d3 2134 	ldr.w	r2, [r3, #308]	; 0x134
 80074de:	68bb      	ldr	r3, [r7, #8]
 80074e0:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 80074e4:	1ad2      	subs	r2, r2, r3
 80074e6:	68bb      	ldr	r3, [r7, #8]
 80074e8:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
      break;
 80074ec:	e002      	b.n	80074f4 <USBH_AUDIO_SetControlAttribute+0x5c>

    default :
      status = USBH_FAIL;
 80074ee:	2302      	movs	r3, #2
 80074f0:	73fb      	strb	r3, [r7, #15]
      break;
 80074f2:	bf00      	nop
  }

  if (AUDIO_Handle->headphone.attribute.volume > AUDIO_Handle->headphone.attribute.volumeMax)
 80074f4:	68bb      	ldr	r3, [r7, #8]
 80074f6:	f8d3 2134 	ldr.w	r2, [r3, #308]	; 0x134
 80074fa:	68bb      	ldr	r3, [r7, #8]
 80074fc:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
 8007500:	429a      	cmp	r2, r3
 8007502:	d905      	bls.n	8007510 <USBH_AUDIO_SetControlAttribute+0x78>
  {
    AUDIO_Handle->headphone.attribute.volume = AUDIO_Handle->headphone.attribute.volumeMax;
 8007504:	68bb      	ldr	r3, [r7, #8]
 8007506:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
 800750a:	68bb      	ldr	r3, [r7, #8]
 800750c:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
  }

  if (AUDIO_Handle->headphone.attribute.volume < AUDIO_Handle->headphone.attribute.volumeMin)
 8007510:	68bb      	ldr	r3, [r7, #8]
 8007512:	f8d3 2134 	ldr.w	r2, [r3, #308]	; 0x134
 8007516:	68bb      	ldr	r3, [r7, #8]
 8007518:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 800751c:	429a      	cmp	r2, r3
 800751e:	d205      	bcs.n	800752c <USBH_AUDIO_SetControlAttribute+0x94>
  {
    AUDIO_Handle->headphone.attribute.volume = AUDIO_Handle->headphone.attribute.volumeMin;
 8007520:	68bb      	ldr	r3, [r7, #8]
 8007522:	f8d3 212c 	ldr.w	r2, [r3, #300]	; 0x12c
 8007526:	68bb      	ldr	r3, [r7, #8]
 8007528:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
  }

  if (AUDIO_SetVolume(phost,
 800752c:	68bb      	ldr	r3, [r7, #8]
 800752e:	f893 11a0 	ldrb.w	r1, [r3, #416]	; 0x1a0
                      AUDIO_Handle->temp_feature,
                      (uint8_t)AUDIO_Handle->temp_channels,
 8007532:	68bb      	ldr	r3, [r7, #8]
 8007534:	f893 21a1 	ldrb.w	r2, [r3, #417]	; 0x1a1
                      (uint16_t)AUDIO_Handle->headphone.attribute.volume) != USBH_BUSY)
 8007538:	68bb      	ldr	r3, [r7, #8]
 800753a:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
  if (AUDIO_SetVolume(phost,
 800753e:	b29b      	uxth	r3, r3
 8007540:	6878      	ldr	r0, [r7, #4]
 8007542:	f000 f827 	bl	8007594 <AUDIO_SetVolume>
 8007546:	4603      	mov	r3, r0
 8007548:	2b01      	cmp	r3, #1
 800754a:	d01e      	beq.n	800758a <USBH_AUDIO_SetControlAttribute+0xf2>
  {

    if (AUDIO_Handle->temp_channels == 1U)
 800754c:	68bb      	ldr	r3, [r7, #8]
 800754e:	f893 31a1 	ldrb.w	r3, [r3, #417]	; 0x1a1
 8007552:	2b01      	cmp	r3, #1
 8007554:	d10e      	bne.n	8007574 <USBH_AUDIO_SetControlAttribute+0xdc>
    {
      AUDIO_Handle->temp_feature = AUDIO_Handle->headphone.asociated_feature;
 8007556:	68bb      	ldr	r3, [r7, #8]
 8007558:	f893 2107 	ldrb.w	r2, [r3, #263]	; 0x107
 800755c:	68bb      	ldr	r3, [r7, #8]
 800755e:	f883 21a0 	strb.w	r2, [r3, #416]	; 0x1a0
      AUDIO_Handle->temp_channels = AUDIO_Handle->headphone.asociated_channels;
 8007562:	68bb      	ldr	r3, [r7, #8]
 8007564:	f893 2109 	ldrb.w	r2, [r3, #265]	; 0x109
 8007568:	68bb      	ldr	r3, [r7, #8]
 800756a:	f883 21a1 	strb.w	r2, [r3, #417]	; 0x1a1
      status = USBH_OK;
 800756e:	2300      	movs	r3, #0
 8007570:	73fb      	strb	r3, [r7, #15]
 8007572:	e007      	b.n	8007584 <USBH_AUDIO_SetControlAttribute+0xec>
    }
    else
    {
      AUDIO_Handle->temp_channels--;
 8007574:	68bb      	ldr	r3, [r7, #8]
 8007576:	f893 31a1 	ldrb.w	r3, [r3, #417]	; 0x1a1
 800757a:	3b01      	subs	r3, #1
 800757c:	b2da      	uxtb	r2, r3
 800757e:	68bb      	ldr	r3, [r7, #8]
 8007580:	f883 21a1 	strb.w	r2, [r3, #417]	; 0x1a1
    }
    AUDIO_Handle->cs_req_state = AUDIO_REQ_GET_VOLUME;
 8007584:	68bb      	ldr	r3, [r7, #8]
 8007586:	2206      	movs	r2, #6
 8007588:	705a      	strb	r2, [r3, #1]
  }


  return status;
 800758a:	7bfb      	ldrb	r3, [r7, #15]
}
 800758c:	4618      	mov	r0, r3
 800758e:	3710      	adds	r7, #16
 8007590:	46bd      	mov	sp, r7
 8007592:	bd80      	pop	{r7, pc}

08007594 <AUDIO_SetVolume>:
  * @param  channel: channel index
  * @param  volume: new volume
  * @retval USBH Status
  */
static USBH_StatusTypeDef AUDIO_SetVolume(USBH_HandleTypeDef *phost, uint8_t feature, uint8_t channel, uint16_t volume)
{
 8007594:	b580      	push	{r7, lr}
 8007596:	b086      	sub	sp, #24
 8007598:	af02      	add	r7, sp, #8
 800759a:	6078      	str	r0, [r7, #4]
 800759c:	4608      	mov	r0, r1
 800759e:	4611      	mov	r1, r2
 80075a0:	461a      	mov	r2, r3
 80075a2:	4603      	mov	r3, r0
 80075a4:	70fb      	strb	r3, [r7, #3]
 80075a6:	460b      	mov	r3, r1
 80075a8:	70bb      	strb	r3, [r7, #2]
 80075aa:	4613      	mov	r3, r2
 80075ac:	803b      	strh	r3, [r7, #0]
  USBH_StatusTypeDef status = USBH_BUSY ;
 80075ae:	2301      	movs	r3, #1
 80075b0:	73fb      	strb	r3, [r7, #15]
  AUDIO_HandleTypeDef *AUDIO_Handle;


  AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80075b8:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 80075bc:	69db      	ldr	r3, [r3, #28]
 80075be:	60bb      	str	r3, [r7, #8]

  AUDIO_Handle->mem[0] = volume;
 80075c0:	68bb      	ldr	r3, [r7, #8]
 80075c2:	883a      	ldrh	r2, [r7, #0]
 80075c4:	f8a3 2190 	strh.w	r2, [r3, #400]	; 0x190

  status = USBH_AC_SetCur(phost, UAC_FEATURE_UNIT, feature,
 80075c8:	78fa      	ldrb	r2, [r7, #3]
 80075ca:	2302      	movs	r3, #2
 80075cc:	9301      	str	r3, [sp, #4]
 80075ce:	78bb      	ldrb	r3, [r7, #2]
 80075d0:	9300      	str	r3, [sp, #0]
 80075d2:	2302      	movs	r3, #2
 80075d4:	2106      	movs	r1, #6
 80075d6:	6878      	ldr	r0, [r7, #4]
 80075d8:	f7ff fa54 	bl	8006a84 <USBH_AC_SetCur>
 80075dc:	4603      	mov	r3, r0
 80075de:	73fb      	strb	r3, [r7, #15]
                          VOLUME_CONTROL, channel, 2U);

  return status;
 80075e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80075e2:	4618      	mov	r0, r3
 80075e4:	3710      	adds	r7, #16
 80075e6:	46bd      	mov	sp, r7
 80075e8:	bd80      	pop	{r7, pc}

080075ea <USBH_AUDIO_FrequencySet>:
  * @brief  The function informs user that Settings have been changed
  *  @param  phost: Selected device
  * @retval None
  */
__weak void USBH_AUDIO_FrequencySet(USBH_HandleTypeDef *phost)
{
 80075ea:	b480      	push	{r7}
 80075ec:	b083      	sub	sp, #12
 80075ee:	af00      	add	r7, sp, #0
 80075f0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80075f2:	bf00      	nop
 80075f4:	370c      	adds	r7, #12
 80075f6:	46bd      	mov	sp, r7
 80075f8:	bc80      	pop	{r7}
 80075fa:	4770      	bx	lr

080075fc <USBH_AUDIO_BufferEmptyCallback>:
  * @brief  The function informs user that User data are processed
  *  @param  phost: Selected device
  * @retval None
  */
__weak void  USBH_AUDIO_BufferEmptyCallback(USBH_HandleTypeDef *phost)
{
 80075fc:	b480      	push	{r7}
 80075fe:	b083      	sub	sp, #12
 8007600:	af00      	add	r7, sp, #0
 8007602:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007604:	bf00      	nop
 8007606:	370c      	adds	r7, #12
 8007608:	46bd      	mov	sp, r7
 800760a:	bc80      	pop	{r7}
 800760c:	4770      	bx	lr
	...

08007610 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8007610:	b590      	push	{r4, r7, lr}
 8007612:	b089      	sub	sp, #36	; 0x24
 8007614:	af04      	add	r7, sp, #16
 8007616:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8007618:	2301      	movs	r3, #1
 800761a:	2202      	movs	r2, #2
 800761c:	2102      	movs	r1, #2
 800761e:	6878      	ldr	r0, [r7, #4]
 8007620:	f004 fe1e 	bl	800c260 <USBH_FindInterface>
 8007624:	4603      	mov	r3, r0
 8007626:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8007628:	7bfb      	ldrb	r3, [r7, #15]
 800762a:	2bff      	cmp	r3, #255	; 0xff
 800762c:	d002      	beq.n	8007634 <USBH_CDC_InterfaceInit+0x24>
 800762e:	7bfb      	ldrb	r3, [r7, #15]
 8007630:	2b0e      	cmp	r3, #14
 8007632:	d911      	bls.n	8007658 <USBH_CDC_InterfaceInit+0x48>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
 8007634:	4888      	ldr	r0, [pc, #544]	; (8007858 <USBH_CDC_InterfaceInit+0x248>)
 8007636:	f007 f8b5 	bl	800e7a4 <iprintf>
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007640:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	4619      	mov	r1, r3
 8007648:	4884      	ldr	r0, [pc, #528]	; (800785c <USBH_CDC_InterfaceInit+0x24c>)
 800764a:	f007 f8ab 	bl	800e7a4 <iprintf>
 800764e:	200a      	movs	r0, #10
 8007650:	f007 f8c0 	bl	800e7d4 <putchar>
    return USBH_FAIL;
 8007654:	2302      	movs	r3, #2
 8007656:	e170      	b.n	800793a <USBH_CDC_InterfaceInit+0x32a>
  }

  status = USBH_SelectInterface(phost, interface);
 8007658:	7bfb      	ldrb	r3, [r7, #15]
 800765a:	4619      	mov	r1, r3
 800765c:	6878      	ldr	r0, [r7, #4]
 800765e:	f004 fd95 	bl	800c18c <USBH_SelectInterface>
 8007662:	4603      	mov	r3, r0
 8007664:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8007666:	7bbb      	ldrb	r3, [r7, #14]
 8007668:	2b00      	cmp	r3, #0
 800766a:	d001      	beq.n	8007670 <USBH_CDC_InterfaceInit+0x60>
  {
    return USBH_FAIL;
 800766c:	2302      	movs	r3, #2
 800766e:	e164      	b.n	800793a <USBH_CDC_InterfaceInit+0x32a>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007676:	f8d3 411c 	ldr.w	r4, [r3, #284]	; 0x11c
 800767a:	2050      	movs	r0, #80	; 0x50
 800767c:	f006 fca2 	bl	800dfc4 <malloc>
 8007680:	4603      	mov	r3, r0
 8007682:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800768a:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 800768e:	69db      	ldr	r3, [r3, #28]
 8007690:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8007692:	68bb      	ldr	r3, [r7, #8]
 8007694:	2b00      	cmp	r3, #0
 8007696:	d10a      	bne.n	80076ae <USBH_CDC_InterfaceInit+0x9e>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
 8007698:	486f      	ldr	r0, [pc, #444]	; (8007858 <USBH_CDC_InterfaceInit+0x248>)
 800769a:	f007 f883 	bl	800e7a4 <iprintf>
 800769e:	4870      	ldr	r0, [pc, #448]	; (8007860 <USBH_CDC_InterfaceInit+0x250>)
 80076a0:	f007 f880 	bl	800e7a4 <iprintf>
 80076a4:	200a      	movs	r0, #10
 80076a6:	f007 f895 	bl	800e7d4 <putchar>
    return USBH_FAIL;
 80076aa:	2302      	movs	r3, #2
 80076ac:	e145      	b.n	800793a <USBH_CDC_InterfaceInit+0x32a>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 80076ae:	2250      	movs	r2, #80	; 0x50
 80076b0:	2100      	movs	r1, #0
 80076b2:	68b8      	ldr	r0, [r7, #8]
 80076b4:	f006 fca4 	bl	800e000 <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 80076b8:	7bfa      	ldrb	r2, [r7, #15]
 80076ba:	6879      	ldr	r1, [r7, #4]
 80076bc:	4613      	mov	r3, r2
 80076be:	019b      	lsls	r3, r3, #6
 80076c0:	4413      	add	r3, r2
 80076c2:	005b      	lsls	r3, r3, #1
 80076c4:	440b      	add	r3, r1
 80076c6:	f603 134c 	addw	r3, r3, #2380	; 0x94c
 80076ca:	781b      	ldrb	r3, [r3, #0]
 80076cc:	b25b      	sxtb	r3, r3
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	da17      	bge.n	8007702 <USBH_CDC_InterfaceInit+0xf2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80076d2:	7bfa      	ldrb	r2, [r7, #15]
 80076d4:	6879      	ldr	r1, [r7, #4]
 80076d6:	4613      	mov	r3, r2
 80076d8:	019b      	lsls	r3, r3, #6
 80076da:	4413      	add	r3, r2
 80076dc:	005b      	lsls	r3, r3, #1
 80076de:	440b      	add	r3, r1
 80076e0:	f603 134c 	addw	r3, r3, #2380	; 0x94c
 80076e4:	781a      	ldrb	r2, [r3, #0]
 80076e6:	68bb      	ldr	r3, [r7, #8]
 80076e8:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80076ea:	7bfa      	ldrb	r2, [r7, #15]
 80076ec:	6879      	ldr	r1, [r7, #4]
 80076ee:	4613      	mov	r3, r2
 80076f0:	019b      	lsls	r3, r3, #6
 80076f2:	4413      	add	r3, r2
 80076f4:	005b      	lsls	r3, r3, #1
 80076f6:	440b      	add	r3, r1
 80076f8:	f603 134e 	addw	r3, r3, #2382	; 0x94e
 80076fc:	881a      	ldrh	r2, [r3, #0]
 80076fe:	68bb      	ldr	r3, [r7, #8]
 8007700:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8007702:	68bb      	ldr	r3, [r7, #8]
 8007704:	785b      	ldrb	r3, [r3, #1]
 8007706:	4619      	mov	r1, r3
 8007708:	6878      	ldr	r0, [r7, #4]
 800770a:	f006 f874 	bl	800d7f6 <USBH_AllocPipe>
 800770e:	4603      	mov	r3, r0
 8007710:	461a      	mov	r2, r3
 8007712:	68bb      	ldr	r3, [r7, #8]
 8007714:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8007716:	68bb      	ldr	r3, [r7, #8]
 8007718:	7819      	ldrb	r1, [r3, #0]
 800771a:	68bb      	ldr	r3, [r7, #8]
 800771c:	7858      	ldrb	r0, [r3, #1]
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	f893 491c 	ldrb.w	r4, [r3, #2332]	; 0x91c
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	f893 391d 	ldrb.w	r3, [r3, #2333]	; 0x91d
 800772a:	68ba      	ldr	r2, [r7, #8]
 800772c:	8952      	ldrh	r2, [r2, #10]
 800772e:	9202      	str	r2, [sp, #8]
 8007730:	2203      	movs	r2, #3
 8007732:	9201      	str	r2, [sp, #4]
 8007734:	9300      	str	r3, [sp, #0]
 8007736:	4623      	mov	r3, r4
 8007738:	4602      	mov	r2, r0
 800773a:	6878      	ldr	r0, [r7, #4]
 800773c:	f006 f82c 	bl	800d798 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8007740:	68bb      	ldr	r3, [r7, #8]
 8007742:	781b      	ldrb	r3, [r3, #0]
 8007744:	2200      	movs	r2, #0
 8007746:	4619      	mov	r1, r3
 8007748:	6878      	ldr	r0, [r7, #4]
 800774a:	f006 fb74 	bl	800de36 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 800774e:	2300      	movs	r3, #0
 8007750:	2200      	movs	r2, #0
 8007752:	210a      	movs	r1, #10
 8007754:	6878      	ldr	r0, [r7, #4]
 8007756:	f004 fd83 	bl	800c260 <USBH_FindInterface>
 800775a:	4603      	mov	r3, r0
 800775c:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800775e:	7bfb      	ldrb	r3, [r7, #15]
 8007760:	2bff      	cmp	r3, #255	; 0xff
 8007762:	d002      	beq.n	800776a <USBH_CDC_InterfaceInit+0x15a>
 8007764:	7bfb      	ldrb	r3, [r7, #15]
 8007766:	2b0e      	cmp	r3, #14
 8007768:	d911      	bls.n	800778e <USBH_CDC_InterfaceInit+0x17e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
 800776a:	483b      	ldr	r0, [pc, #236]	; (8007858 <USBH_CDC_InterfaceInit+0x248>)
 800776c:	f007 f81a 	bl	800e7a4 <iprintf>
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007776:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	4619      	mov	r1, r3
 800777e:	4839      	ldr	r0, [pc, #228]	; (8007864 <USBH_CDC_InterfaceInit+0x254>)
 8007780:	f007 f810 	bl	800e7a4 <iprintf>
 8007784:	200a      	movs	r0, #10
 8007786:	f007 f825 	bl	800e7d4 <putchar>
    return USBH_FAIL;
 800778a:	2302      	movs	r3, #2
 800778c:	e0d5      	b.n	800793a <USBH_CDC_InterfaceInit+0x32a>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800778e:	7bfa      	ldrb	r2, [r7, #15]
 8007790:	6879      	ldr	r1, [r7, #4]
 8007792:	4613      	mov	r3, r2
 8007794:	019b      	lsls	r3, r3, #6
 8007796:	4413      	add	r3, r2
 8007798:	005b      	lsls	r3, r3, #1
 800779a:	440b      	add	r3, r1
 800779c:	f603 134c 	addw	r3, r3, #2380	; 0x94c
 80077a0:	781b      	ldrb	r3, [r3, #0]
 80077a2:	b25b      	sxtb	r3, r3
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	da18      	bge.n	80077da <USBH_CDC_InterfaceInit+0x1ca>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80077a8:	7bfa      	ldrb	r2, [r7, #15]
 80077aa:	6879      	ldr	r1, [r7, #4]
 80077ac:	4613      	mov	r3, r2
 80077ae:	019b      	lsls	r3, r3, #6
 80077b0:	4413      	add	r3, r2
 80077b2:	005b      	lsls	r3, r3, #1
 80077b4:	440b      	add	r3, r1
 80077b6:	f603 134c 	addw	r3, r3, #2380	; 0x94c
 80077ba:	781a      	ldrb	r2, [r3, #0]
 80077bc:	68bb      	ldr	r3, [r7, #8]
 80077be:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80077c0:	7bfa      	ldrb	r2, [r7, #15]
 80077c2:	6879      	ldr	r1, [r7, #4]
 80077c4:	4613      	mov	r3, r2
 80077c6:	019b      	lsls	r3, r3, #6
 80077c8:	4413      	add	r3, r2
 80077ca:	005b      	lsls	r3, r3, #1
 80077cc:	440b      	add	r3, r1
 80077ce:	f603 134e 	addw	r3, r3, #2382	; 0x94e
 80077d2:	881a      	ldrh	r2, [r3, #0]
 80077d4:	68bb      	ldr	r3, [r7, #8]
 80077d6:	835a      	strh	r2, [r3, #26]
 80077d8:	e017      	b.n	800780a <USBH_CDC_InterfaceInit+0x1fa>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80077da:	7bfa      	ldrb	r2, [r7, #15]
 80077dc:	6879      	ldr	r1, [r7, #4]
 80077de:	4613      	mov	r3, r2
 80077e0:	019b      	lsls	r3, r3, #6
 80077e2:	4413      	add	r3, r2
 80077e4:	005b      	lsls	r3, r3, #1
 80077e6:	440b      	add	r3, r1
 80077e8:	f603 134c 	addw	r3, r3, #2380	; 0x94c
 80077ec:	781a      	ldrb	r2, [r3, #0]
 80077ee:	68bb      	ldr	r3, [r7, #8]
 80077f0:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80077f2:	7bfa      	ldrb	r2, [r7, #15]
 80077f4:	6879      	ldr	r1, [r7, #4]
 80077f6:	4613      	mov	r3, r2
 80077f8:	019b      	lsls	r3, r3, #6
 80077fa:	4413      	add	r3, r2
 80077fc:	005b      	lsls	r3, r3, #1
 80077fe:	440b      	add	r3, r1
 8007800:	f603 134e 	addw	r3, r3, #2382	; 0x94e
 8007804:	881a      	ldrh	r2, [r3, #0]
 8007806:	68bb      	ldr	r3, [r7, #8]
 8007808:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 800780a:	7bfa      	ldrb	r2, [r7, #15]
 800780c:	6879      	ldr	r1, [r7, #4]
 800780e:	4613      	mov	r3, r2
 8007810:	019b      	lsls	r3, r3, #6
 8007812:	4413      	add	r3, r2
 8007814:	005b      	lsls	r3, r3, #1
 8007816:	440b      	add	r3, r1
 8007818:	f603 1354 	addw	r3, r3, #2388	; 0x954
 800781c:	781b      	ldrb	r3, [r3, #0]
 800781e:	b25b      	sxtb	r3, r3
 8007820:	2b00      	cmp	r3, #0
 8007822:	da21      	bge.n	8007868 <USBH_CDC_InterfaceInit+0x258>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8007824:	7bfa      	ldrb	r2, [r7, #15]
 8007826:	6879      	ldr	r1, [r7, #4]
 8007828:	4613      	mov	r3, r2
 800782a:	019b      	lsls	r3, r3, #6
 800782c:	4413      	add	r3, r2
 800782e:	005b      	lsls	r3, r3, #1
 8007830:	440b      	add	r3, r1
 8007832:	f603 1354 	addw	r3, r3, #2388	; 0x954
 8007836:	781a      	ldrb	r2, [r3, #0]
 8007838:	68bb      	ldr	r3, [r7, #8]
 800783a:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800783c:	7bfa      	ldrb	r2, [r7, #15]
 800783e:	6879      	ldr	r1, [r7, #4]
 8007840:	4613      	mov	r3, r2
 8007842:	019b      	lsls	r3, r3, #6
 8007844:	4413      	add	r3, r2
 8007846:	005b      	lsls	r3, r3, #1
 8007848:	440b      	add	r3, r1
 800784a:	f603 1356 	addw	r3, r3, #2390	; 0x956
 800784e:	881a      	ldrh	r2, [r3, #0]
 8007850:	68bb      	ldr	r3, [r7, #8]
 8007852:	835a      	strh	r2, [r3, #26]
 8007854:	e020      	b.n	8007898 <USBH_CDC_InterfaceInit+0x288>
 8007856:	bf00      	nop
 8007858:	0800f554 	.word	0x0800f554
 800785c:	0800f560 	.word	0x0800f560
 8007860:	0800f5a0 	.word	0x0800f5a0
 8007864:	0800f5c8 	.word	0x0800f5c8
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8007868:	7bfa      	ldrb	r2, [r7, #15]
 800786a:	6879      	ldr	r1, [r7, #4]
 800786c:	4613      	mov	r3, r2
 800786e:	019b      	lsls	r3, r3, #6
 8007870:	4413      	add	r3, r2
 8007872:	005b      	lsls	r3, r3, #1
 8007874:	440b      	add	r3, r1
 8007876:	f603 1354 	addw	r3, r3, #2388	; 0x954
 800787a:	781a      	ldrb	r2, [r3, #0]
 800787c:	68bb      	ldr	r3, [r7, #8]
 800787e:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8007880:	7bfa      	ldrb	r2, [r7, #15]
 8007882:	6879      	ldr	r1, [r7, #4]
 8007884:	4613      	mov	r3, r2
 8007886:	019b      	lsls	r3, r3, #6
 8007888:	4413      	add	r3, r2
 800788a:	005b      	lsls	r3, r3, #1
 800788c:	440b      	add	r3, r1
 800788e:	f603 1356 	addw	r3, r3, #2390	; 0x956
 8007892:	881a      	ldrh	r2, [r3, #0]
 8007894:	68bb      	ldr	r3, [r7, #8]
 8007896:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8007898:	68bb      	ldr	r3, [r7, #8]
 800789a:	7b9b      	ldrb	r3, [r3, #14]
 800789c:	4619      	mov	r1, r3
 800789e:	6878      	ldr	r0, [r7, #4]
 80078a0:	f005 ffa9 	bl	800d7f6 <USBH_AllocPipe>
 80078a4:	4603      	mov	r3, r0
 80078a6:	461a      	mov	r2, r3
 80078a8:	68bb      	ldr	r3, [r7, #8]
 80078aa:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 80078ac:	68bb      	ldr	r3, [r7, #8]
 80078ae:	7bdb      	ldrb	r3, [r3, #15]
 80078b0:	4619      	mov	r1, r3
 80078b2:	6878      	ldr	r0, [r7, #4]
 80078b4:	f005 ff9f 	bl	800d7f6 <USBH_AllocPipe>
 80078b8:	4603      	mov	r3, r0
 80078ba:	461a      	mov	r2, r3
 80078bc:	68bb      	ldr	r3, [r7, #8]
 80078be:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 80078c0:	68bb      	ldr	r3, [r7, #8]
 80078c2:	7b59      	ldrb	r1, [r3, #13]
 80078c4:	68bb      	ldr	r3, [r7, #8]
 80078c6:	7b98      	ldrb	r0, [r3, #14]
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	f893 491c 	ldrb.w	r4, [r3, #2332]	; 0x91c
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	f893 391d 	ldrb.w	r3, [r3, #2333]	; 0x91d
 80078d4:	68ba      	ldr	r2, [r7, #8]
 80078d6:	8b12      	ldrh	r2, [r2, #24]
 80078d8:	9202      	str	r2, [sp, #8]
 80078da:	2202      	movs	r2, #2
 80078dc:	9201      	str	r2, [sp, #4]
 80078de:	9300      	str	r3, [sp, #0]
 80078e0:	4623      	mov	r3, r4
 80078e2:	4602      	mov	r2, r0
 80078e4:	6878      	ldr	r0, [r7, #4]
 80078e6:	f005 ff57 	bl	800d798 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 80078ea:	68bb      	ldr	r3, [r7, #8]
 80078ec:	7b19      	ldrb	r1, [r3, #12]
 80078ee:	68bb      	ldr	r3, [r7, #8]
 80078f0:	7bd8      	ldrb	r0, [r3, #15]
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	f893 491c 	ldrb.w	r4, [r3, #2332]	; 0x91c
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	f893 391d 	ldrb.w	r3, [r3, #2333]	; 0x91d
 80078fe:	68ba      	ldr	r2, [r7, #8]
 8007900:	8b52      	ldrh	r2, [r2, #26]
 8007902:	9202      	str	r2, [sp, #8]
 8007904:	2202      	movs	r2, #2
 8007906:	9201      	str	r2, [sp, #4]
 8007908:	9300      	str	r3, [sp, #0]
 800790a:	4623      	mov	r3, r4
 800790c:	4602      	mov	r2, r0
 800790e:	6878      	ldr	r0, [r7, #4]
 8007910:	f005 ff42 	bl	800d798 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8007914:	68bb      	ldr	r3, [r7, #8]
 8007916:	2200      	movs	r2, #0
 8007918:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 800791c:	68bb      	ldr	r3, [r7, #8]
 800791e:	7b5b      	ldrb	r3, [r3, #13]
 8007920:	2200      	movs	r2, #0
 8007922:	4619      	mov	r1, r3
 8007924:	6878      	ldr	r0, [r7, #4]
 8007926:	f006 fa86 	bl	800de36 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 800792a:	68bb      	ldr	r3, [r7, #8]
 800792c:	7b1b      	ldrb	r3, [r3, #12]
 800792e:	2200      	movs	r2, #0
 8007930:	4619      	mov	r1, r3
 8007932:	6878      	ldr	r0, [r7, #4]
 8007934:	f006 fa7f 	bl	800de36 <USBH_LL_SetToggle>

  return USBH_OK;
 8007938:	2300      	movs	r3, #0
}
 800793a:	4618      	mov	r0, r3
 800793c:	3714      	adds	r7, #20
 800793e:	46bd      	mov	sp, r7
 8007940:	bd90      	pop	{r4, r7, pc}
 8007942:	bf00      	nop

08007944 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8007944:	b580      	push	{r7, lr}
 8007946:	b084      	sub	sp, #16
 8007948:	af00      	add	r7, sp, #0
 800794a:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007952:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 8007956:	69db      	ldr	r3, [r3, #28]
 8007958:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	781b      	ldrb	r3, [r3, #0]
 800795e:	2b00      	cmp	r3, #0
 8007960:	d00e      	beq.n	8007980 <USBH_CDC_InterfaceDeInit+0x3c>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	781b      	ldrb	r3, [r3, #0]
 8007966:	4619      	mov	r1, r3
 8007968:	6878      	ldr	r0, [r7, #4]
 800796a:	f005 ff34 	bl	800d7d6 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	781b      	ldrb	r3, [r3, #0]
 8007972:	4619      	mov	r1, r3
 8007974:	6878      	ldr	r0, [r7, #4]
 8007976:	f005 ff60 	bl	800d83a <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	2200      	movs	r2, #0
 800797e:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	7b1b      	ldrb	r3, [r3, #12]
 8007984:	2b00      	cmp	r3, #0
 8007986:	d00e      	beq.n	80079a6 <USBH_CDC_InterfaceDeInit+0x62>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	7b1b      	ldrb	r3, [r3, #12]
 800798c:	4619      	mov	r1, r3
 800798e:	6878      	ldr	r0, [r7, #4]
 8007990:	f005 ff21 	bl	800d7d6 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	7b1b      	ldrb	r3, [r3, #12]
 8007998:	4619      	mov	r1, r3
 800799a:	6878      	ldr	r0, [r7, #4]
 800799c:	f005 ff4d 	bl	800d83a <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	2200      	movs	r2, #0
 80079a4:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	7b5b      	ldrb	r3, [r3, #13]
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d00e      	beq.n	80079cc <USBH_CDC_InterfaceDeInit+0x88>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	7b5b      	ldrb	r3, [r3, #13]
 80079b2:	4619      	mov	r1, r3
 80079b4:	6878      	ldr	r0, [r7, #4]
 80079b6:	f005 ff0e 	bl	800d7d6 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	7b5b      	ldrb	r3, [r3, #13]
 80079be:	4619      	mov	r1, r3
 80079c0:	6878      	ldr	r0, [r7, #4]
 80079c2:	f005 ff3a 	bl	800d83a <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	2200      	movs	r2, #0
 80079ca:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80079d2:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 80079d6:	69db      	ldr	r3, [r3, #28]
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d00f      	beq.n	80079fc <USBH_CDC_InterfaceDeInit+0xb8>
  {
    USBH_free(phost->pActiveClass->pData);
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80079e2:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 80079e6:	69db      	ldr	r3, [r3, #28]
 80079e8:	4618      	mov	r0, r3
 80079ea:	f006 faf3 	bl	800dfd4 <free>
    phost->pActiveClass->pData = 0U;
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80079f4:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 80079f8:	2200      	movs	r2, #0
 80079fa:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 80079fc:	2300      	movs	r3, #0
}
 80079fe:	4618      	mov	r0, r3
 8007a00:	3710      	adds	r7, #16
 8007a02:	46bd      	mov	sp, r7
 8007a04:	bd80      	pop	{r7, pc}

08007a06 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8007a06:	b580      	push	{r7, lr}
 8007a08:	b084      	sub	sp, #16
 8007a0a:	af00      	add	r7, sp, #0
 8007a0c:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_FAIL ;
 8007a0e:	2302      	movs	r3, #2
 8007a10:	73fb      	strb	r3, [r7, #15]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007a18:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 8007a1c:	69db      	ldr	r3, [r3, #28]
 8007a1e:	60bb      	str	r3, [r7, #8]

  /*Issue the get line coding request*/
  status =   GetLineCoding(phost, &CDC_Handle->LineCoding);
 8007a20:	68bb      	ldr	r3, [r7, #8]
 8007a22:	3340      	adds	r3, #64	; 0x40
 8007a24:	4619      	mov	r1, r3
 8007a26:	6878      	ldr	r0, [r7, #4]
 8007a28:	f000 f8b4 	bl	8007b94 <GetLineCoding>
 8007a2c:	4603      	mov	r3, r0
 8007a2e:	73fb      	strb	r3, [r7, #15]
  if (status == USBH_OK)
 8007a30:	7bfb      	ldrb	r3, [r7, #15]
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d107      	bne.n	8007a46 <USBH_CDC_ClassRequest+0x40>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007a3c:	f8d3 3170 	ldr.w	r3, [r3, #368]	; 0x170
 8007a40:	2102      	movs	r1, #2
 8007a42:	6878      	ldr	r0, [r7, #4]
 8007a44:	4798      	blx	r3
  }
  return status;
 8007a46:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a48:	4618      	mov	r0, r3
 8007a4a:	3710      	adds	r7, #16
 8007a4c:	46bd      	mov	sp, r7
 8007a4e:	bd80      	pop	{r7, pc}

08007a50 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8007a50:	b580      	push	{r7, lr}
 8007a52:	b084      	sub	sp, #16
 8007a54:	af00      	add	r7, sp, #0
 8007a56:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8007a58:	2301      	movs	r3, #1
 8007a5a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8007a5c:	2300      	movs	r3, #0
 8007a5e:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007a66:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 8007a6a:	69db      	ldr	r3, [r3, #28]
 8007a6c:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8007a6e:	68bb      	ldr	r3, [r7, #8]
 8007a70:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8007a74:	2b04      	cmp	r3, #4
 8007a76:	d877      	bhi.n	8007b68 <USBH_CDC_Process+0x118>
 8007a78:	a201      	add	r2, pc, #4	; (adr r2, 8007a80 <USBH_CDC_Process+0x30>)
 8007a7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a7e:	bf00      	nop
 8007a80:	08007a95 	.word	0x08007a95
 8007a84:	08007a9b 	.word	0x08007a9b
 8007a88:	08007acb 	.word	0x08007acb
 8007a8c:	08007b3f 	.word	0x08007b3f
 8007a90:	08007b4d 	.word	0x08007b4d
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8007a94:	2300      	movs	r3, #0
 8007a96:	73fb      	strb	r3, [r7, #15]
      break;
 8007a98:	e06d      	b.n	8007b76 <USBH_CDC_Process+0x126>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8007a9a:	68bb      	ldr	r3, [r7, #8]
 8007a9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007a9e:	4619      	mov	r1, r3
 8007aa0:	6878      	ldr	r0, [r7, #4]
 8007aa2:	f000 f896 	bl	8007bd2 <SetLineCoding>
 8007aa6:	4603      	mov	r3, r0
 8007aa8:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8007aaa:	7bbb      	ldrb	r3, [r7, #14]
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d104      	bne.n	8007aba <USBH_CDC_Process+0x6a>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8007ab0:	68bb      	ldr	r3, [r7, #8]
 8007ab2:	2202      	movs	r2, #2
 8007ab4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8007ab8:	e058      	b.n	8007b6c <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8007aba:	7bbb      	ldrb	r3, [r7, #14]
 8007abc:	2b01      	cmp	r3, #1
 8007abe:	d055      	beq.n	8007b6c <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8007ac0:	68bb      	ldr	r3, [r7, #8]
 8007ac2:	2204      	movs	r2, #4
 8007ac4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8007ac8:	e050      	b.n	8007b6c <USBH_CDC_Process+0x11c>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8007aca:	68bb      	ldr	r3, [r7, #8]
 8007acc:	3340      	adds	r3, #64	; 0x40
 8007ace:	4619      	mov	r1, r3
 8007ad0:	6878      	ldr	r0, [r7, #4]
 8007ad2:	f000 f85f 	bl	8007b94 <GetLineCoding>
 8007ad6:	4603      	mov	r3, r0
 8007ad8:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8007ada:	7bbb      	ldrb	r3, [r7, #14]
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d126      	bne.n	8007b2e <USBH_CDC_Process+0xde>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8007ae0:	68bb      	ldr	r3, [r7, #8]
 8007ae2:	2200      	movs	r2, #0
 8007ae4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8007ae8:	68bb      	ldr	r3, [r7, #8]
 8007aea:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8007aee:	68bb      	ldr	r3, [r7, #8]
 8007af0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007af2:	791b      	ldrb	r3, [r3, #4]
 8007af4:	429a      	cmp	r2, r3
 8007af6:	d13b      	bne.n	8007b70 <USBH_CDC_Process+0x120>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8007af8:	68bb      	ldr	r3, [r7, #8]
 8007afa:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8007afe:	68bb      	ldr	r3, [r7, #8]
 8007b00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007b02:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8007b04:	429a      	cmp	r2, r3
 8007b06:	d133      	bne.n	8007b70 <USBH_CDC_Process+0x120>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8007b08:	68bb      	ldr	r3, [r7, #8]
 8007b0a:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8007b0e:	68bb      	ldr	r3, [r7, #8]
 8007b10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007b12:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8007b14:	429a      	cmp	r2, r3
 8007b16:	d12b      	bne.n	8007b70 <USBH_CDC_Process+0x120>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8007b18:	68bb      	ldr	r3, [r7, #8]
 8007b1a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007b1c:	68bb      	ldr	r3, [r7, #8]
 8007b1e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007b20:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8007b22:	429a      	cmp	r2, r3
 8007b24:	d124      	bne.n	8007b70 <USBH_CDC_Process+0x120>
        {
          USBH_CDC_LineCodingChanged(phost);
 8007b26:	6878      	ldr	r0, [r7, #4]
 8007b28:	f000 f950 	bl	8007dcc <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8007b2c:	e020      	b.n	8007b70 <USBH_CDC_Process+0x120>
        if (req_status != USBH_BUSY)
 8007b2e:	7bbb      	ldrb	r3, [r7, #14]
 8007b30:	2b01      	cmp	r3, #1
 8007b32:	d01d      	beq.n	8007b70 <USBH_CDC_Process+0x120>
          CDC_Handle->state = CDC_ERROR_STATE;
 8007b34:	68bb      	ldr	r3, [r7, #8]
 8007b36:	2204      	movs	r2, #4
 8007b38:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8007b3c:	e018      	b.n	8007b70 <USBH_CDC_Process+0x120>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8007b3e:	6878      	ldr	r0, [r7, #4]
 8007b40:	f000 f866 	bl	8007c10 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8007b44:	6878      	ldr	r0, [r7, #4]
 8007b46:	f000 f8db 	bl	8007d00 <CDC_ProcessReception>
      break;
 8007b4a:	e014      	b.n	8007b76 <USBH_CDC_Process+0x126>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8007b4c:	2100      	movs	r1, #0
 8007b4e:	6878      	ldr	r0, [r7, #4]
 8007b50:	f005 f9a1 	bl	800ce96 <USBH_ClrFeature>
 8007b54:	4603      	mov	r3, r0
 8007b56:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8007b58:	7bbb      	ldrb	r3, [r7, #14]
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d10a      	bne.n	8007b74 <USBH_CDC_Process+0x124>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE ;
 8007b5e:	68bb      	ldr	r3, [r7, #8]
 8007b60:	2200      	movs	r2, #0
 8007b62:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 8007b66:	e005      	b.n	8007b74 <USBH_CDC_Process+0x124>

    default:
      break;
 8007b68:	bf00      	nop
 8007b6a:	e004      	b.n	8007b76 <USBH_CDC_Process+0x126>
      break;
 8007b6c:	bf00      	nop
 8007b6e:	e002      	b.n	8007b76 <USBH_CDC_Process+0x126>
      break;
 8007b70:	bf00      	nop
 8007b72:	e000      	b.n	8007b76 <USBH_CDC_Process+0x126>
      break;
 8007b74:	bf00      	nop

  }

  return status;
 8007b76:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b78:	4618      	mov	r0, r3
 8007b7a:	3710      	adds	r7, #16
 8007b7c:	46bd      	mov	sp, r7
 8007b7e:	bd80      	pop	{r7, pc}

08007b80 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8007b80:	b480      	push	{r7}
 8007b82:	b083      	sub	sp, #12
 8007b84:	af00      	add	r7, sp, #0
 8007b86:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8007b88:	2300      	movs	r3, #0
}
 8007b8a:	4618      	mov	r0, r3
 8007b8c:	370c      	adds	r7, #12
 8007b8e:	46bd      	mov	sp, r7
 8007b90:	bc80      	pop	{r7}
 8007b92:	4770      	bx	lr

08007b94 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8007b94:	b580      	push	{r7, lr}
 8007b96:	b082      	sub	sp, #8
 8007b98:	af00      	add	r7, sp, #0
 8007b9a:	6078      	str	r0, [r7, #4]
 8007b9c:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	22a1      	movs	r2, #161	; 0xa1
 8007ba2:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	2221      	movs	r2, #33	; 0x21
 8007ba8:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	2200      	movs	r2, #0
 8007bae:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	2200      	movs	r2, #0
 8007bb4:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	2207      	movs	r2, #7
 8007bba:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8007bbc:	683b      	ldr	r3, [r7, #0]
 8007bbe:	2207      	movs	r2, #7
 8007bc0:	4619      	mov	r1, r3
 8007bc2:	6878      	ldr	r0, [r7, #4]
 8007bc4:	f005 fb44 	bl	800d250 <USBH_CtlReq>
 8007bc8:	4603      	mov	r3, r0
}
 8007bca:	4618      	mov	r0, r3
 8007bcc:	3708      	adds	r7, #8
 8007bce:	46bd      	mov	sp, r7
 8007bd0:	bd80      	pop	{r7, pc}

08007bd2 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8007bd2:	b580      	push	{r7, lr}
 8007bd4:	b082      	sub	sp, #8
 8007bd6:	af00      	add	r7, sp, #0
 8007bd8:	6078      	str	r0, [r7, #4]
 8007bda:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	2221      	movs	r2, #33	; 0x21
 8007be0:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	2220      	movs	r2, #32
 8007be6:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	2200      	movs	r2, #0
 8007bec:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	2200      	movs	r2, #0
 8007bf2:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	2207      	movs	r2, #7
 8007bf8:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8007bfa:	683b      	ldr	r3, [r7, #0]
 8007bfc:	2207      	movs	r2, #7
 8007bfe:	4619      	mov	r1, r3
 8007c00:	6878      	ldr	r0, [r7, #4]
 8007c02:	f005 fb25 	bl	800d250 <USBH_CtlReq>
 8007c06:	4603      	mov	r3, r0
}
 8007c08:	4618      	mov	r0, r3
 8007c0a:	3708      	adds	r7, #8
 8007c0c:	46bd      	mov	sp, r7
 8007c0e:	bd80      	pop	{r7, pc}

08007c10 <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8007c10:	b580      	push	{r7, lr}
 8007c12:	b086      	sub	sp, #24
 8007c14:	af02      	add	r7, sp, #8
 8007c16:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007c1e:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 8007c22:	69db      	ldr	r3, [r3, #28]
 8007c24:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007c26:	2300      	movs	r3, #0
 8007c28:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8007c30:	2b01      	cmp	r3, #1
 8007c32:	d002      	beq.n	8007c3a <CDC_ProcessTransmission+0x2a>
 8007c34:	2b02      	cmp	r3, #2
 8007c36:	d023      	beq.n	8007c80 <CDC_ProcessTransmission+0x70>
        }
      }
      break;

    default:
      break;
 8007c38:	e05e      	b.n	8007cf8 <CDC_ProcessTransmission+0xe8>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c3e:	68fa      	ldr	r2, [r7, #12]
 8007c40:	8b12      	ldrh	r2, [r2, #24]
 8007c42:	4293      	cmp	r3, r2
 8007c44:	d90b      	bls.n	8007c5e <CDC_ProcessTransmission+0x4e>
        USBH_BulkSendData(phost,
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	69d9      	ldr	r1, [r3, #28]
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	8b1a      	ldrh	r2, [r3, #24]
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	7b5b      	ldrb	r3, [r3, #13]
 8007c52:	2001      	movs	r0, #1
 8007c54:	9000      	str	r0, [sp, #0]
 8007c56:	6878      	ldr	r0, [r7, #4]
 8007c58:	f005 fd21 	bl	800d69e <USBH_BulkSendData>
 8007c5c:	e00b      	b.n	8007c76 <CDC_ProcessTransmission+0x66>
        USBH_BulkSendData(phost,
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 8007c66:	b29a      	uxth	r2, r3
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	7b5b      	ldrb	r3, [r3, #13]
 8007c6c:	2001      	movs	r0, #1
 8007c6e:	9000      	str	r0, [sp, #0]
 8007c70:	6878      	ldr	r0, [r7, #4]
 8007c72:	f005 fd14 	bl	800d69e <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	2202      	movs	r2, #2
 8007c7a:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8007c7e:	e03b      	b.n	8007cf8 <CDC_ProcessTransmission+0xe8>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	7b5b      	ldrb	r3, [r3, #13]
 8007c84:	4619      	mov	r1, r3
 8007c86:	6878      	ldr	r0, [r7, #4]
 8007c88:	f006 f8b2 	bl	800ddf0 <USBH_LL_GetURBState>
 8007c8c:	4603      	mov	r3, r0
 8007c8e:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8007c90:	7afb      	ldrb	r3, [r7, #11]
 8007c92:	2b01      	cmp	r3, #1
 8007c94:	d128      	bne.n	8007ce8 <CDC_ProcessTransmission+0xd8>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c9a:	68fa      	ldr	r2, [r7, #12]
 8007c9c:	8b12      	ldrh	r2, [r2, #24]
 8007c9e:	4293      	cmp	r3, r2
 8007ca0:	d90e      	bls.n	8007cc0 <CDC_ProcessTransmission+0xb0>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ca6:	68fa      	ldr	r2, [r7, #12]
 8007ca8:	8b12      	ldrh	r2, [r2, #24]
 8007caa:	1a9a      	subs	r2, r3, r2
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	69db      	ldr	r3, [r3, #28]
 8007cb4:	68fa      	ldr	r2, [r7, #12]
 8007cb6:	8b12      	ldrh	r2, [r2, #24]
 8007cb8:	441a      	add	r2, r3
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	61da      	str	r2, [r3, #28]
 8007cbe:	e002      	b.n	8007cc6 <CDC_ProcessTransmission+0xb6>
          CDC_Handle->TxDataLength = 0U;
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	2200      	movs	r2, #0
 8007cc4:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d004      	beq.n	8007cd8 <CDC_ProcessTransmission+0xc8>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	2201      	movs	r2, #1
 8007cd2:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8007cd6:	e00e      	b.n	8007cf6 <CDC_ProcessTransmission+0xe6>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	2200      	movs	r2, #0
 8007cdc:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8007ce0:	6878      	ldr	r0, [r7, #4]
 8007ce2:	f000 f86a 	bl	8007dba <USBH_CDC_TransmitCallback>
      break;
 8007ce6:	e006      	b.n	8007cf6 <CDC_ProcessTransmission+0xe6>
        if (URB_Status == USBH_URB_NOTREADY)
 8007ce8:	7afb      	ldrb	r3, [r7, #11]
 8007cea:	2b02      	cmp	r3, #2
 8007cec:	d103      	bne.n	8007cf6 <CDC_ProcessTransmission+0xe6>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	2201      	movs	r2, #1
 8007cf2:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8007cf6:	bf00      	nop
  }
}
 8007cf8:	bf00      	nop
 8007cfa:	3710      	adds	r7, #16
 8007cfc:	46bd      	mov	sp, r7
 8007cfe:	bd80      	pop	{r7, pc}

08007d00 <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8007d00:	b580      	push	{r7, lr}
 8007d02:	b086      	sub	sp, #24
 8007d04:	af00      	add	r7, sp, #0
 8007d06:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007d0e:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 8007d12:	69db      	ldr	r3, [r3, #28]
 8007d14:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007d16:	2300      	movs	r3, #0
 8007d18:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8007d1a:	697b      	ldr	r3, [r7, #20]
 8007d1c:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8007d20:	2b03      	cmp	r3, #3
 8007d22:	d002      	beq.n	8007d2a <CDC_ProcessReception+0x2a>
 8007d24:	2b04      	cmp	r3, #4
 8007d26:	d00e      	beq.n	8007d46 <CDC_ProcessReception+0x46>
#endif
      }
      break;

    default:
      break;
 8007d28:	e043      	b.n	8007db2 <CDC_ProcessReception+0xb2>
      USBH_BulkReceiveData(phost,
 8007d2a:	697b      	ldr	r3, [r7, #20]
 8007d2c:	6a19      	ldr	r1, [r3, #32]
 8007d2e:	697b      	ldr	r3, [r7, #20]
 8007d30:	8b5a      	ldrh	r2, [r3, #26]
 8007d32:	697b      	ldr	r3, [r7, #20]
 8007d34:	7b1b      	ldrb	r3, [r3, #12]
 8007d36:	6878      	ldr	r0, [r7, #4]
 8007d38:	f005 fcd6 	bl	800d6e8 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8007d3c:	697b      	ldr	r3, [r7, #20]
 8007d3e:	2204      	movs	r2, #4
 8007d40:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8007d44:	e035      	b.n	8007db2 <CDC_ProcessReception+0xb2>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8007d46:	697b      	ldr	r3, [r7, #20]
 8007d48:	7b1b      	ldrb	r3, [r3, #12]
 8007d4a:	4619      	mov	r1, r3
 8007d4c:	6878      	ldr	r0, [r7, #4]
 8007d4e:	f006 f84f 	bl	800ddf0 <USBH_LL_GetURBState>
 8007d52:	4603      	mov	r3, r0
 8007d54:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8007d56:	7cfb      	ldrb	r3, [r7, #19]
 8007d58:	2b01      	cmp	r3, #1
 8007d5a:	d129      	bne.n	8007db0 <CDC_ProcessReception+0xb0>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8007d5c:	697b      	ldr	r3, [r7, #20]
 8007d5e:	7b1b      	ldrb	r3, [r3, #12]
 8007d60:	4619      	mov	r1, r3
 8007d62:	6878      	ldr	r0, [r7, #4]
 8007d64:	f005 ffaa 	bl	800dcbc <USBH_LL_GetLastXferSize>
 8007d68:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8007d6a:	697b      	ldr	r3, [r7, #20]
 8007d6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d6e:	68fa      	ldr	r2, [r7, #12]
 8007d70:	429a      	cmp	r2, r3
 8007d72:	d016      	beq.n	8007da2 <CDC_ProcessReception+0xa2>
 8007d74:	697b      	ldr	r3, [r7, #20]
 8007d76:	8b5b      	ldrh	r3, [r3, #26]
 8007d78:	461a      	mov	r2, r3
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	4293      	cmp	r3, r2
 8007d7e:	d910      	bls.n	8007da2 <CDC_ProcessReception+0xa2>
          CDC_Handle->RxDataLength -= length ;
 8007d80:	697b      	ldr	r3, [r7, #20]
 8007d82:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	1ad2      	subs	r2, r2, r3
 8007d88:	697b      	ldr	r3, [r7, #20]
 8007d8a:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 8007d8c:	697b      	ldr	r3, [r7, #20]
 8007d8e:	6a1a      	ldr	r2, [r3, #32]
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	441a      	add	r2, r3
 8007d94:	697b      	ldr	r3, [r7, #20]
 8007d96:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8007d98:	697b      	ldr	r3, [r7, #20]
 8007d9a:	2203      	movs	r2, #3
 8007d9c:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8007da0:	e006      	b.n	8007db0 <CDC_ProcessReception+0xb0>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8007da2:	697b      	ldr	r3, [r7, #20]
 8007da4:	2200      	movs	r2, #0
 8007da6:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8007daa:	6878      	ldr	r0, [r7, #4]
 8007dac:	f005 fd88 	bl	800d8c0 <USBH_CDC_ReceiveCallback>
      break;
 8007db0:	bf00      	nop
  }
}
 8007db2:	bf00      	nop
 8007db4:	3718      	adds	r7, #24
 8007db6:	46bd      	mov	sp, r7
 8007db8:	bd80      	pop	{r7, pc}

08007dba <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8007dba:	b480      	push	{r7}
 8007dbc:	b083      	sub	sp, #12
 8007dbe:	af00      	add	r7, sp, #0
 8007dc0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007dc2:	bf00      	nop
 8007dc4:	370c      	adds	r7, #12
 8007dc6:	46bd      	mov	sp, r7
 8007dc8:	bc80      	pop	{r7}
 8007dca:	4770      	bx	lr

08007dcc <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8007dcc:	b480      	push	{r7}
 8007dce:	b083      	sub	sp, #12
 8007dd0:	af00      	add	r7, sp, #0
 8007dd2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007dd4:	bf00      	nop
 8007dd6:	370c      	adds	r7, #12
 8007dd8:	46bd      	mov	sp, r7
 8007dda:	bc80      	pop	{r7}
 8007ddc:	4770      	bx	lr
	...

08007de0 <USBH_HID_InterfaceInit>:
  *         The function init the HID class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8007de0:	b590      	push	{r4, r7, lr}
 8007de2:	b08b      	sub	sp, #44	; 0x2c
 8007de4:	af04      	add	r7, sp, #16
 8007de6:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  HID_HandleTypeDef *HID_Handle;
  uint8_t max_ep;
  uint8_t num = 0U;
 8007de8:	2300      	movs	r3, #0
 8007dea:	75fb      	strb	r3, [r7, #23]
  uint8_t interface;

  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, HID_BOOT_CODE, 0xFFU);
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007df2:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 8007df6:	7919      	ldrb	r1, [r3, #4]
 8007df8:	23ff      	movs	r3, #255	; 0xff
 8007dfa:	2201      	movs	r2, #1
 8007dfc:	6878      	ldr	r0, [r7, #4]
 8007dfe:	f004 fa2f 	bl	800c260 <USBH_FindInterface>
 8007e02:	4603      	mov	r3, r0
 8007e04:	75bb      	strb	r3, [r7, #22]

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8007e06:	7dbb      	ldrb	r3, [r7, #22]
 8007e08:	2bff      	cmp	r3, #255	; 0xff
 8007e0a:	d002      	beq.n	8007e12 <USBH_HID_InterfaceInit+0x32>
 8007e0c:	7dbb      	ldrb	r3, [r7, #22]
 8007e0e:	2b0e      	cmp	r3, #14
 8007e10:	d911      	bls.n	8007e36 <USBH_HID_InterfaceInit+0x56>
  {
    USBH_DbgLog("Cannot Find the interface for %s class.", phost->pActiveClass->Name);
 8007e12:	48a3      	ldr	r0, [pc, #652]	; (80080a0 <USBH_HID_InterfaceInit+0x2c0>)
 8007e14:	f006 fcc6 	bl	800e7a4 <iprintf>
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007e1e:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	4619      	mov	r1, r3
 8007e26:	489f      	ldr	r0, [pc, #636]	; (80080a4 <USBH_HID_InterfaceInit+0x2c4>)
 8007e28:	f006 fcbc 	bl	800e7a4 <iprintf>
 8007e2c:	200a      	movs	r0, #10
 8007e2e:	f006 fcd1 	bl	800e7d4 <putchar>
    return USBH_FAIL;
 8007e32:	2302      	movs	r3, #2
 8007e34:	e130      	b.n	8008098 <USBH_HID_InterfaceInit+0x2b8>
  }

  status = USBH_SelectInterface(phost, interface);
 8007e36:	7dbb      	ldrb	r3, [r7, #22]
 8007e38:	4619      	mov	r1, r3
 8007e3a:	6878      	ldr	r0, [r7, #4]
 8007e3c:	f004 f9a6 	bl	800c18c <USBH_SelectInterface>
 8007e40:	4603      	mov	r3, r0
 8007e42:	757b      	strb	r3, [r7, #21]

  if (status != USBH_OK)
 8007e44:	7d7b      	ldrb	r3, [r7, #21]
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d001      	beq.n	8007e4e <USBH_HID_InterfaceInit+0x6e>
  {
    return USBH_FAIL;
 8007e4a:	2302      	movs	r3, #2
 8007e4c:	e124      	b.n	8008098 <USBH_HID_InterfaceInit+0x2b8>
  }

  phost->pActiveClass->pData = (HID_HandleTypeDef *)USBH_malloc(sizeof(HID_HandleTypeDef));
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007e54:	f8d3 411c 	ldr.w	r4, [r3, #284]	; 0x11c
 8007e58:	2034      	movs	r0, #52	; 0x34
 8007e5a:	f006 f8b3 	bl	800dfc4 <malloc>
 8007e5e:	4603      	mov	r3, r0
 8007e60:	61e3      	str	r3, [r4, #28]
  HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007e68:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 8007e6c:	69db      	ldr	r3, [r3, #28]
 8007e6e:	613b      	str	r3, [r7, #16]

  if (HID_Handle == NULL)
 8007e70:	693b      	ldr	r3, [r7, #16]
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d10a      	bne.n	8007e8c <USBH_HID_InterfaceInit+0xac>
  {
    USBH_DbgLog("Cannot allocate memory for HID Handle");
 8007e76:	488a      	ldr	r0, [pc, #552]	; (80080a0 <USBH_HID_InterfaceInit+0x2c0>)
 8007e78:	f006 fc94 	bl	800e7a4 <iprintf>
 8007e7c:	488a      	ldr	r0, [pc, #552]	; (80080a8 <USBH_HID_InterfaceInit+0x2c8>)
 8007e7e:	f006 fc91 	bl	800e7a4 <iprintf>
 8007e82:	200a      	movs	r0, #10
 8007e84:	f006 fca6 	bl	800e7d4 <putchar>
    return USBH_FAIL;
 8007e88:	2302      	movs	r3, #2
 8007e8a:	e105      	b.n	8008098 <USBH_HID_InterfaceInit+0x2b8>
  }

  /* Initialize hid handler */
  USBH_memset(HID_Handle, 0, sizeof(HID_HandleTypeDef));
 8007e8c:	2234      	movs	r2, #52	; 0x34
 8007e8e:	2100      	movs	r1, #0
 8007e90:	6938      	ldr	r0, [r7, #16]
 8007e92:	f006 f8b5 	bl	800e000 <memset>

  HID_Handle->state = HID_ERROR;
 8007e96:	693b      	ldr	r3, [r7, #16]
 8007e98:	2207      	movs	r2, #7
 8007e9a:	709a      	strb	r2, [r3, #2]

  /*Decode Bootclass Protocol: Mouse or Keyboard*/
  if (phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol == HID_KEYBRD_BOOT_CODE)
 8007e9c:	7dba      	ldrb	r2, [r7, #22]
 8007e9e:	6879      	ldr	r1, [r7, #4]
 8007ea0:	4613      	mov	r3, r2
 8007ea2:	019b      	lsls	r3, r3, #6
 8007ea4:	4413      	add	r3, r2
 8007ea6:	005b      	lsls	r3, r3, #1
 8007ea8:	440b      	add	r3, r1
 8007eaa:	f603 1347 	addw	r3, r3, #2375	; 0x947
 8007eae:	781b      	ldrb	r3, [r3, #0]
 8007eb0:	2b01      	cmp	r3, #1
 8007eb2:	d109      	bne.n	8007ec8 <USBH_HID_InterfaceInit+0xe8>
  {
    USBH_UsrLog("KeyBoard device found!");
 8007eb4:	487d      	ldr	r0, [pc, #500]	; (80080ac <USBH_HID_InterfaceInit+0x2cc>)
 8007eb6:	f006 fc75 	bl	800e7a4 <iprintf>
 8007eba:	200a      	movs	r0, #10
 8007ebc:	f006 fc8a 	bl	800e7d4 <putchar>
    HID_Handle->Init = USBH_HID_KeybdInit;
 8007ec0:	693b      	ldr	r3, [r7, #16]
 8007ec2:	4a7b      	ldr	r2, [pc, #492]	; (80080b0 <USBH_HID_InterfaceInit+0x2d0>)
 8007ec4:	631a      	str	r2, [r3, #48]	; 0x30
 8007ec6:	e01d      	b.n	8007f04 <USBH_HID_InterfaceInit+0x124>
  }
  else if (phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol  == HID_MOUSE_BOOT_CODE)
 8007ec8:	7dba      	ldrb	r2, [r7, #22]
 8007eca:	6879      	ldr	r1, [r7, #4]
 8007ecc:	4613      	mov	r3, r2
 8007ece:	019b      	lsls	r3, r3, #6
 8007ed0:	4413      	add	r3, r2
 8007ed2:	005b      	lsls	r3, r3, #1
 8007ed4:	440b      	add	r3, r1
 8007ed6:	f603 1347 	addw	r3, r3, #2375	; 0x947
 8007eda:	781b      	ldrb	r3, [r3, #0]
 8007edc:	2b02      	cmp	r3, #2
 8007ede:	d109      	bne.n	8007ef4 <USBH_HID_InterfaceInit+0x114>
  {
    USBH_UsrLog("Mouse device found!");
 8007ee0:	4874      	ldr	r0, [pc, #464]	; (80080b4 <USBH_HID_InterfaceInit+0x2d4>)
 8007ee2:	f006 fc5f 	bl	800e7a4 <iprintf>
 8007ee6:	200a      	movs	r0, #10
 8007ee8:	f006 fc74 	bl	800e7d4 <putchar>
    HID_Handle->Init = USBH_HID_MouseInit;
 8007eec:	693b      	ldr	r3, [r7, #16]
 8007eee:	4a72      	ldr	r2, [pc, #456]	; (80080b8 <USBH_HID_InterfaceInit+0x2d8>)
 8007ef0:	631a      	str	r2, [r3, #48]	; 0x30
 8007ef2:	e007      	b.n	8007f04 <USBH_HID_InterfaceInit+0x124>
  }
  else
  {
    USBH_UsrLog("Protocol not supported.");
 8007ef4:	4871      	ldr	r0, [pc, #452]	; (80080bc <USBH_HID_InterfaceInit+0x2dc>)
 8007ef6:	f006 fc55 	bl	800e7a4 <iprintf>
 8007efa:	200a      	movs	r0, #10
 8007efc:	f006 fc6a 	bl	800e7d4 <putchar>
    return USBH_FAIL;
 8007f00:	2302      	movs	r3, #2
 8007f02:	e0c9      	b.n	8008098 <USBH_HID_InterfaceInit+0x2b8>
  }

  HID_Handle->state     = HID_INIT;
 8007f04:	693b      	ldr	r3, [r7, #16]
 8007f06:	2200      	movs	r2, #0
 8007f08:	709a      	strb	r2, [r3, #2]
  HID_Handle->ctl_state = HID_REQ_INIT;
 8007f0a:	693b      	ldr	r3, [r7, #16]
 8007f0c:	2200      	movs	r2, #0
 8007f0e:	715a      	strb	r2, [r3, #5]
  HID_Handle->ep_addr   = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8007f10:	7dba      	ldrb	r2, [r7, #22]
 8007f12:	6879      	ldr	r1, [r7, #4]
 8007f14:	4613      	mov	r3, r2
 8007f16:	019b      	lsls	r3, r3, #6
 8007f18:	4413      	add	r3, r2
 8007f1a:	005b      	lsls	r3, r3, #1
 8007f1c:	440b      	add	r3, r1
 8007f1e:	f603 134c 	addw	r3, r3, #2380	; 0x94c
 8007f22:	781a      	ldrb	r2, [r3, #0]
 8007f24:	693b      	ldr	r3, [r7, #16]
 8007f26:	769a      	strb	r2, [r3, #26]
  HID_Handle->length    = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007f28:	7dba      	ldrb	r2, [r7, #22]
 8007f2a:	6879      	ldr	r1, [r7, #4]
 8007f2c:	4613      	mov	r3, r2
 8007f2e:	019b      	lsls	r3, r3, #6
 8007f30:	4413      	add	r3, r2
 8007f32:	005b      	lsls	r3, r3, #1
 8007f34:	440b      	add	r3, r1
 8007f36:	f603 134e 	addw	r3, r3, #2382	; 0x94e
 8007f3a:	881a      	ldrh	r2, [r3, #0]
 8007f3c:	693b      	ldr	r3, [r7, #16]
 8007f3e:	831a      	strh	r2, [r3, #24]
  HID_Handle->poll      = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bInterval;
 8007f40:	7dba      	ldrb	r2, [r7, #22]
 8007f42:	6879      	ldr	r1, [r7, #4]
 8007f44:	4613      	mov	r3, r2
 8007f46:	019b      	lsls	r3, r3, #6
 8007f48:	4413      	add	r3, r2
 8007f4a:	005b      	lsls	r3, r3, #1
 8007f4c:	440b      	add	r3, r1
 8007f4e:	f503 6315 	add.w	r3, r3, #2384	; 0x950
 8007f52:	781b      	ldrb	r3, [r3, #0]
 8007f54:	b29a      	uxth	r2, r3
 8007f56:	693b      	ldr	r3, [r7, #16]
 8007f58:	839a      	strh	r2, [r3, #28]

  if (HID_Handle->poll  < HID_MIN_POLL)
 8007f5a:	693b      	ldr	r3, [r7, #16]
 8007f5c:	8b9b      	ldrh	r3, [r3, #28]
 8007f5e:	2b09      	cmp	r3, #9
 8007f60:	d802      	bhi.n	8007f68 <USBH_HID_InterfaceInit+0x188>
  {
    HID_Handle->poll = HID_MIN_POLL;
 8007f62:	693b      	ldr	r3, [r7, #16]
 8007f64:	220a      	movs	r2, #10
 8007f66:	839a      	strh	r2, [r3, #28]
  }

  /* Check fo available number of endpoints */
  /* Find the number of EPs in the Interface Descriptor */
  /* Choose the lower number in order not to overrun the buffer allocated */
  max_ep = ((phost->device.CfgDesc.Itf_Desc[interface].bNumEndpoints <= USBH_MAX_NUM_ENDPOINTS) ?
 8007f68:	7dba      	ldrb	r2, [r7, #22]
 8007f6a:	6879      	ldr	r1, [r7, #4]
 8007f6c:	4613      	mov	r3, r2
 8007f6e:	019b      	lsls	r3, r3, #6
 8007f70:	4413      	add	r3, r2
 8007f72:	005b      	lsls	r3, r3, #1
 8007f74:	440b      	add	r3, r1
 8007f76:	f603 1344 	addw	r3, r3, #2372	; 0x944
 8007f7a:	781b      	ldrb	r3, [r3, #0]
 8007f7c:	2b0f      	cmp	r3, #15
 8007f7e:	bf28      	it	cs
 8007f80:	230f      	movcs	r3, #15
 8007f82:	73fb      	strb	r3, [r7, #15]
             phost->device.CfgDesc.Itf_Desc[interface].bNumEndpoints : USBH_MAX_NUM_ENDPOINTS);


  /* Decode endpoint IN and OUT address from interface descriptor */
  for (num = 0U; num < max_ep; num++)
 8007f84:	2300      	movs	r3, #0
 8007f86:	75fb      	strb	r3, [r7, #23]
 8007f88:	e080      	b.n	800808c <USBH_HID_InterfaceInit+0x2ac>
  {
    if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[num].bEndpointAddress & 0x80U)
 8007f8a:	7dba      	ldrb	r2, [r7, #22]
 8007f8c:	7dfb      	ldrb	r3, [r7, #23]
 8007f8e:	6879      	ldr	r1, [r7, #4]
 8007f90:	3301      	adds	r3, #1
 8007f92:	00d8      	lsls	r0, r3, #3
 8007f94:	4613      	mov	r3, r2
 8007f96:	019b      	lsls	r3, r3, #6
 8007f98:	4413      	add	r3, r2
 8007f9a:	005b      	lsls	r3, r3, #1
 8007f9c:	4403      	add	r3, r0
 8007f9e:	440b      	add	r3, r1
 8007fa0:	f603 1344 	addw	r3, r3, #2372	; 0x944
 8007fa4:	781b      	ldrb	r3, [r3, #0]
 8007fa6:	b25b      	sxtb	r3, r3
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	da36      	bge.n	800801a <USBH_HID_InterfaceInit+0x23a>
    {
      HID_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[num].bEndpointAddress);
 8007fac:	7dba      	ldrb	r2, [r7, #22]
 8007fae:	7dfb      	ldrb	r3, [r7, #23]
 8007fb0:	6879      	ldr	r1, [r7, #4]
 8007fb2:	3301      	adds	r3, #1
 8007fb4:	00d8      	lsls	r0, r3, #3
 8007fb6:	4613      	mov	r3, r2
 8007fb8:	019b      	lsls	r3, r3, #6
 8007fba:	4413      	add	r3, r2
 8007fbc:	005b      	lsls	r3, r3, #1
 8007fbe:	4403      	add	r3, r0
 8007fc0:	440b      	add	r3, r1
 8007fc2:	f603 1344 	addw	r3, r3, #2372	; 0x944
 8007fc6:	781a      	ldrb	r2, [r3, #0]
 8007fc8:	693b      	ldr	r3, [r7, #16]
 8007fca:	711a      	strb	r2, [r3, #4]
      HID_Handle->InPipe = USBH_AllocPipe(phost, HID_Handle->InEp);
 8007fcc:	693b      	ldr	r3, [r7, #16]
 8007fce:	791b      	ldrb	r3, [r3, #4]
 8007fd0:	4619      	mov	r1, r3
 8007fd2:	6878      	ldr	r0, [r7, #4]
 8007fd4:	f005 fc0f 	bl	800d7f6 <USBH_AllocPipe>
 8007fd8:	4603      	mov	r3, r0
 8007fda:	461a      	mov	r2, r3
 8007fdc:	693b      	ldr	r3, [r7, #16]
 8007fde:	705a      	strb	r2, [r3, #1]

      /* Open pipe for IN endpoint */
      USBH_OpenPipe(phost, HID_Handle->InPipe, HID_Handle->InEp, phost->device.address,
 8007fe0:	693b      	ldr	r3, [r7, #16]
 8007fe2:	7859      	ldrb	r1, [r3, #1]
 8007fe4:	693b      	ldr	r3, [r7, #16]
 8007fe6:	7918      	ldrb	r0, [r3, #4]
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	f893 491c 	ldrb.w	r4, [r3, #2332]	; 0x91c
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	f893 391d 	ldrb.w	r3, [r3, #2333]	; 0x91d
 8007ff4:	693a      	ldr	r2, [r7, #16]
 8007ff6:	8b12      	ldrh	r2, [r2, #24]
 8007ff8:	9202      	str	r2, [sp, #8]
 8007ffa:	2203      	movs	r2, #3
 8007ffc:	9201      	str	r2, [sp, #4]
 8007ffe:	9300      	str	r3, [sp, #0]
 8008000:	4623      	mov	r3, r4
 8008002:	4602      	mov	r2, r0
 8008004:	6878      	ldr	r0, [r7, #4]
 8008006:	f005 fbc7 	bl	800d798 <USBH_OpenPipe>
                    phost->device.speed, USB_EP_TYPE_INTR, HID_Handle->length);

      USBH_LL_SetToggle(phost, HID_Handle->InPipe, 0U);
 800800a:	693b      	ldr	r3, [r7, #16]
 800800c:	785b      	ldrb	r3, [r3, #1]
 800800e:	2200      	movs	r2, #0
 8008010:	4619      	mov	r1, r3
 8008012:	6878      	ldr	r0, [r7, #4]
 8008014:	f005 ff0f 	bl	800de36 <USBH_LL_SetToggle>
 8008018:	e035      	b.n	8008086 <USBH_HID_InterfaceInit+0x2a6>
    }
    else
    {
      HID_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[num].bEndpointAddress);
 800801a:	7dba      	ldrb	r2, [r7, #22]
 800801c:	7dfb      	ldrb	r3, [r7, #23]
 800801e:	6879      	ldr	r1, [r7, #4]
 8008020:	3301      	adds	r3, #1
 8008022:	00d8      	lsls	r0, r3, #3
 8008024:	4613      	mov	r3, r2
 8008026:	019b      	lsls	r3, r3, #6
 8008028:	4413      	add	r3, r2
 800802a:	005b      	lsls	r3, r3, #1
 800802c:	4403      	add	r3, r0
 800802e:	440b      	add	r3, r1
 8008030:	f603 1344 	addw	r3, r3, #2372	; 0x944
 8008034:	781a      	ldrb	r2, [r3, #0]
 8008036:	693b      	ldr	r3, [r7, #16]
 8008038:	70da      	strb	r2, [r3, #3]
      HID_Handle->OutPipe  = USBH_AllocPipe(phost, HID_Handle->OutEp);
 800803a:	693b      	ldr	r3, [r7, #16]
 800803c:	78db      	ldrb	r3, [r3, #3]
 800803e:	4619      	mov	r1, r3
 8008040:	6878      	ldr	r0, [r7, #4]
 8008042:	f005 fbd8 	bl	800d7f6 <USBH_AllocPipe>
 8008046:	4603      	mov	r3, r0
 8008048:	461a      	mov	r2, r3
 800804a:	693b      	ldr	r3, [r7, #16]
 800804c:	701a      	strb	r2, [r3, #0]

      /* Open pipe for OUT endpoint */
      USBH_OpenPipe(phost, HID_Handle->OutPipe, HID_Handle->OutEp, phost->device.address,
 800804e:	693b      	ldr	r3, [r7, #16]
 8008050:	7819      	ldrb	r1, [r3, #0]
 8008052:	693b      	ldr	r3, [r7, #16]
 8008054:	78d8      	ldrb	r0, [r3, #3]
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	f893 491c 	ldrb.w	r4, [r3, #2332]	; 0x91c
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	f893 391d 	ldrb.w	r3, [r3, #2333]	; 0x91d
 8008062:	693a      	ldr	r2, [r7, #16]
 8008064:	8b12      	ldrh	r2, [r2, #24]
 8008066:	9202      	str	r2, [sp, #8]
 8008068:	2203      	movs	r2, #3
 800806a:	9201      	str	r2, [sp, #4]
 800806c:	9300      	str	r3, [sp, #0]
 800806e:	4623      	mov	r3, r4
 8008070:	4602      	mov	r2, r0
 8008072:	6878      	ldr	r0, [r7, #4]
 8008074:	f005 fb90 	bl	800d798 <USBH_OpenPipe>
                    phost->device.speed, USB_EP_TYPE_INTR, HID_Handle->length);

      USBH_LL_SetToggle(phost, HID_Handle->OutPipe, 0U);
 8008078:	693b      	ldr	r3, [r7, #16]
 800807a:	781b      	ldrb	r3, [r3, #0]
 800807c:	2200      	movs	r2, #0
 800807e:	4619      	mov	r1, r3
 8008080:	6878      	ldr	r0, [r7, #4]
 8008082:	f005 fed8 	bl	800de36 <USBH_LL_SetToggle>
  for (num = 0U; num < max_ep; num++)
 8008086:	7dfb      	ldrb	r3, [r7, #23]
 8008088:	3301      	adds	r3, #1
 800808a:	75fb      	strb	r3, [r7, #23]
 800808c:	7dfa      	ldrb	r2, [r7, #23]
 800808e:	7bfb      	ldrb	r3, [r7, #15]
 8008090:	429a      	cmp	r2, r3
 8008092:	f4ff af7a 	bcc.w	8007f8a <USBH_HID_InterfaceInit+0x1aa>
    }
  }

  return USBH_OK;
 8008096:	2300      	movs	r3, #0
}
 8008098:	4618      	mov	r0, r3
 800809a:	371c      	adds	r7, #28
 800809c:	46bd      	mov	sp, r7
 800809e:	bd90      	pop	{r4, r7, pc}
 80080a0:	0800f600 	.word	0x0800f600
 80080a4:	0800f60c 	.word	0x0800f60c
 80080a8:	0800f634 	.word	0x0800f634
 80080ac:	0800f65c 	.word	0x0800f65c
 80080b0:	080086ed 	.word	0x080086ed
 80080b4:	0800f674 	.word	0x0800f674
 80080b8:	080087a1 	.word	0x080087a1
 80080bc:	0800f688 	.word	0x0800f688

080080c0 <USBH_HID_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the HID class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 80080c0:	b580      	push	{r7, lr}
 80080c2:	b084      	sub	sp, #16
 80080c4:	af00      	add	r7, sp, #0
 80080c6:	6078      	str	r0, [r7, #4]
  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80080ce:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 80080d2:	69db      	ldr	r3, [r3, #28]
 80080d4:	60fb      	str	r3, [r7, #12]

  if (HID_Handle->InPipe != 0x00U)
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	785b      	ldrb	r3, [r3, #1]
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d00e      	beq.n	80080fc <USBH_HID_InterfaceDeInit+0x3c>
  {
    USBH_ClosePipe(phost, HID_Handle->InPipe);
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	785b      	ldrb	r3, [r3, #1]
 80080e2:	4619      	mov	r1, r3
 80080e4:	6878      	ldr	r0, [r7, #4]
 80080e6:	f005 fb76 	bl	800d7d6 <USBH_ClosePipe>
    USBH_FreePipe(phost, HID_Handle->InPipe);
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	785b      	ldrb	r3, [r3, #1]
 80080ee:	4619      	mov	r1, r3
 80080f0:	6878      	ldr	r0, [r7, #4]
 80080f2:	f005 fba2 	bl	800d83a <USBH_FreePipe>
    HID_Handle->InPipe = 0U;     /* Reset the pipe as Free */
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	2200      	movs	r2, #0
 80080fa:	705a      	strb	r2, [r3, #1]
  }

  if (HID_Handle->OutPipe != 0x00U)
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	781b      	ldrb	r3, [r3, #0]
 8008100:	2b00      	cmp	r3, #0
 8008102:	d00e      	beq.n	8008122 <USBH_HID_InterfaceDeInit+0x62>
  {
    USBH_ClosePipe(phost, HID_Handle->OutPipe);
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	781b      	ldrb	r3, [r3, #0]
 8008108:	4619      	mov	r1, r3
 800810a:	6878      	ldr	r0, [r7, #4]
 800810c:	f005 fb63 	bl	800d7d6 <USBH_ClosePipe>
    USBH_FreePipe(phost, HID_Handle->OutPipe);
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	781b      	ldrb	r3, [r3, #0]
 8008114:	4619      	mov	r1, r3
 8008116:	6878      	ldr	r0, [r7, #4]
 8008118:	f005 fb8f 	bl	800d83a <USBH_FreePipe>
    HID_Handle->OutPipe = 0U;     /* Reset the pipe as Free */
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	2200      	movs	r2, #0
 8008120:	701a      	strb	r2, [r3, #0]
  }

  if (phost->pActiveClass->pData)
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008128:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 800812c:	69db      	ldr	r3, [r3, #28]
 800812e:	2b00      	cmp	r3, #0
 8008130:	d00f      	beq.n	8008152 <USBH_HID_InterfaceDeInit+0x92>
  {
    USBH_free(phost->pActiveClass->pData);
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008138:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 800813c:	69db      	ldr	r3, [r3, #28]
 800813e:	4618      	mov	r0, r3
 8008140:	f005 ff48 	bl	800dfd4 <free>
    phost->pActiveClass->pData = 0U;
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800814a:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 800814e:	2200      	movs	r2, #0
 8008150:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8008152:	2300      	movs	r3, #0
}
 8008154:	4618      	mov	r0, r3
 8008156:	3710      	adds	r7, #16
 8008158:	46bd      	mov	sp, r7
 800815a:	bd80      	pop	{r7, pc}

0800815c <USBH_HID_ClassRequest>:
  *         for HID class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_ClassRequest(USBH_HandleTypeDef *phost)
{
 800815c:	b580      	push	{r7, lr}
 800815e:	b084      	sub	sp, #16
 8008160:	af00      	add	r7, sp, #0
 8008162:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status         = USBH_BUSY;
 8008164:	2301      	movs	r3, #1
 8008166:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef classReqStatus = USBH_BUSY;
 8008168:	2301      	movs	r3, #1
 800816a:	73bb      	strb	r3, [r7, #14]
  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008172:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 8008176:	69db      	ldr	r3, [r3, #28]
 8008178:	60bb      	str	r3, [r7, #8]

  /* Switch HID state machine */
  switch (HID_Handle->ctl_state)
 800817a:	68bb      	ldr	r3, [r7, #8]
 800817c:	795b      	ldrb	r3, [r3, #5]
 800817e:	2b05      	cmp	r3, #5
 8008180:	d85a      	bhi.n	8008238 <USBH_HID_ClassRequest+0xdc>
 8008182:	a201      	add	r2, pc, #4	; (adr r2, 8008188 <USBH_HID_ClassRequest+0x2c>)
 8008184:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008188:	080081a1 	.word	0x080081a1
 800818c:	08008239 	.word	0x08008239
 8008190:	080081cb 	.word	0x080081cb
 8008194:	080081a1 	.word	0x080081a1
 8008198:	080081e5 	.word	0x080081e5
 800819c:	0800820f 	.word	0x0800820f
  {
    case HID_REQ_INIT:
    case HID_REQ_GET_HID_DESC:

      /* Get HID Desc */
      if (USBH_HID_GetHIDDescriptor(phost, USB_HID_DESC_SIZE) == USBH_OK)
 80081a0:	2109      	movs	r1, #9
 80081a2:	6878      	ldr	r0, [r7, #4]
 80081a4:	f000 f95d 	bl	8008462 <USBH_HID_GetHIDDescriptor>
 80081a8:	4603      	mov	r3, r0
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d146      	bne.n	800823c <USBH_HID_ClassRequest+0xe0>
      {

        USBH_HID_ParseHIDDesc(&HID_Handle->HID_Desc, phost->device.Data);
 80081ae:	68bb      	ldr	r3, [r7, #8]
 80081b0:	f103 0226 	add.w	r2, r3, #38	; 0x26
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80081ba:	4619      	mov	r1, r3
 80081bc:	4610      	mov	r0, r2
 80081be:	f000 f9e3 	bl	8008588 <USBH_HID_ParseHIDDesc>
        HID_Handle->ctl_state = HID_REQ_GET_REPORT_DESC;
 80081c2:	68bb      	ldr	r3, [r7, #8]
 80081c4:	2202      	movs	r2, #2
 80081c6:	715a      	strb	r2, [r3, #5]
      }

      break;
 80081c8:	e038      	b.n	800823c <USBH_HID_ClassRequest+0xe0>
    case HID_REQ_GET_REPORT_DESC:


      /* Get Report Desc */
      if (USBH_HID_GetHIDReportDescriptor(phost, HID_Handle->HID_Desc.wItemLength) == USBH_OK)
 80081ca:	68bb      	ldr	r3, [r7, #8]
 80081cc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80081ce:	4619      	mov	r1, r3
 80081d0:	6878      	ldr	r0, [r7, #4]
 80081d2:	f000 f92d 	bl	8008430 <USBH_HID_GetHIDReportDescriptor>
 80081d6:	4603      	mov	r3, r0
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d131      	bne.n	8008240 <USBH_HID_ClassRequest+0xe4>
      {
        /* The descriptor is available in phost->device.Data */

        HID_Handle->ctl_state = HID_REQ_SET_IDLE;
 80081dc:	68bb      	ldr	r3, [r7, #8]
 80081de:	2204      	movs	r2, #4
 80081e0:	715a      	strb	r2, [r3, #5]
      }

      break;
 80081e2:	e02d      	b.n	8008240 <USBH_HID_ClassRequest+0xe4>

    case HID_REQ_SET_IDLE:

      classReqStatus = USBH_HID_SetIdle(phost, 0U, 0U);
 80081e4:	2200      	movs	r2, #0
 80081e6:	2100      	movs	r1, #0
 80081e8:	6878      	ldr	r0, [r7, #4]
 80081ea:	f000 f953 	bl	8008494 <USBH_HID_SetIdle>
 80081ee:	4603      	mov	r3, r0
 80081f0:	73bb      	strb	r3, [r7, #14]

      /* set Idle */
      if (classReqStatus == USBH_OK)
 80081f2:	7bbb      	ldrb	r3, [r7, #14]
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d103      	bne.n	8008200 <USBH_HID_ClassRequest+0xa4>
      {
        HID_Handle->ctl_state = HID_REQ_SET_PROTOCOL;
 80081f8:	68bb      	ldr	r3, [r7, #8]
 80081fa:	2205      	movs	r2, #5
 80081fc:	715a      	strb	r2, [r3, #5]
        if (classReqStatus == USBH_NOT_SUPPORTED)
        {
          HID_Handle->ctl_state = HID_REQ_SET_PROTOCOL;
        }
      }
      break;
 80081fe:	e021      	b.n	8008244 <USBH_HID_ClassRequest+0xe8>
        if (classReqStatus == USBH_NOT_SUPPORTED)
 8008200:	7bbb      	ldrb	r3, [r7, #14]
 8008202:	2b03      	cmp	r3, #3
 8008204:	d11e      	bne.n	8008244 <USBH_HID_ClassRequest+0xe8>
          HID_Handle->ctl_state = HID_REQ_SET_PROTOCOL;
 8008206:	68bb      	ldr	r3, [r7, #8]
 8008208:	2205      	movs	r2, #5
 800820a:	715a      	strb	r2, [r3, #5]
      break;
 800820c:	e01a      	b.n	8008244 <USBH_HID_ClassRequest+0xe8>

    case HID_REQ_SET_PROTOCOL:
      /* set protocol */
      if (USBH_HID_SetProtocol(phost, 0U) == USBH_OK)
 800820e:	2100      	movs	r1, #0
 8008210:	6878      	ldr	r0, [r7, #4]
 8008212:	f000 f993 	bl	800853c <USBH_HID_SetProtocol>
 8008216:	4603      	mov	r3, r0
 8008218:	2b00      	cmp	r3, #0
 800821a:	d115      	bne.n	8008248 <USBH_HID_ClassRequest+0xec>
      {
        HID_Handle->ctl_state = HID_REQ_IDLE;
 800821c:	68bb      	ldr	r3, [r7, #8]
 800821e:	2201      	movs	r2, #1
 8008220:	715a      	strb	r2, [r3, #5]

        /* all requests performed*/
        phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008228:	f8d3 3170 	ldr.w	r3, [r3, #368]	; 0x170
 800822c:	2102      	movs	r1, #2
 800822e:	6878      	ldr	r0, [r7, #4]
 8008230:	4798      	blx	r3
        status = USBH_OK;
 8008232:	2300      	movs	r3, #0
 8008234:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008236:	e007      	b.n	8008248 <USBH_HID_ClassRequest+0xec>

    case HID_REQ_IDLE:
    default:
      break;
 8008238:	bf00      	nop
 800823a:	e006      	b.n	800824a <USBH_HID_ClassRequest+0xee>
      break;
 800823c:	bf00      	nop
 800823e:	e004      	b.n	800824a <USBH_HID_ClassRequest+0xee>
      break;
 8008240:	bf00      	nop
 8008242:	e002      	b.n	800824a <USBH_HID_ClassRequest+0xee>
      break;
 8008244:	bf00      	nop
 8008246:	e000      	b.n	800824a <USBH_HID_ClassRequest+0xee>
      break;
 8008248:	bf00      	nop
  }

  return status;
 800824a:	7bfb      	ldrb	r3, [r7, #15]
}
 800824c:	4618      	mov	r0, r3
 800824e:	3710      	adds	r7, #16
 8008250:	46bd      	mov	sp, r7
 8008252:	bd80      	pop	{r7, pc}

08008254 <USBH_HID_Process>:
  *         The function is for managing state machine for HID data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_Process(USBH_HandleTypeDef *phost)
{
 8008254:	b580      	push	{r7, lr}
 8008256:	b088      	sub	sp, #32
 8008258:	af02      	add	r7, sp, #8
 800825a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 800825c:	2300      	movs	r3, #0
 800825e:	75fb      	strb	r3, [r7, #23]
  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008266:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 800826a:	69db      	ldr	r3, [r3, #28]
 800826c:	613b      	str	r3, [r7, #16]
  uint32_t XferSize;

  switch (HID_Handle->state)
 800826e:	693b      	ldr	r3, [r7, #16]
 8008270:	789b      	ldrb	r3, [r3, #2]
 8008272:	2b06      	cmp	r3, #6
 8008274:	f200 80ad 	bhi.w	80083d2 <USBH_HID_Process+0x17e>
 8008278:	a201      	add	r2, pc, #4	; (adr r2, 8008280 <USBH_HID_Process+0x2c>)
 800827a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800827e:	bf00      	nop
 8008280:	0800829d 	.word	0x0800829d
 8008284:	080082ad 	.word	0x080082ad
 8008288:	080083d3 	.word	0x080083d3
 800828c:	080083d3 	.word	0x080083d3
 8008290:	08008321 	.word	0x08008321
 8008294:	08008307 	.word	0x08008307
 8008298:	08008353 	.word	0x08008353
  {
    case HID_INIT:
      HID_Handle->Init(phost);
 800829c:	693b      	ldr	r3, [r7, #16]
 800829e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082a0:	6878      	ldr	r0, [r7, #4]
 80082a2:	4798      	blx	r3
      HID_Handle->state = HID_IDLE;
 80082a4:	693b      	ldr	r3, [r7, #16]
 80082a6:	2201      	movs	r2, #1
 80082a8:	709a      	strb	r2, [r3, #2]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80082aa:	e097      	b.n	80083dc <USBH_HID_Process+0x188>

    case HID_IDLE:
      status = USBH_HID_GetReport(phost, 0x01U, 0U, HID_Handle->pData, (uint8_t)HID_Handle->length);
 80082ac:	693b      	ldr	r3, [r7, #16]
 80082ae:	695a      	ldr	r2, [r3, #20]
 80082b0:	693b      	ldr	r3, [r7, #16]
 80082b2:	8b1b      	ldrh	r3, [r3, #24]
 80082b4:	b2db      	uxtb	r3, r3
 80082b6:	9300      	str	r3, [sp, #0]
 80082b8:	4613      	mov	r3, r2
 80082ba:	2200      	movs	r2, #0
 80082bc:	2101      	movs	r1, #1
 80082be:	6878      	ldr	r0, [r7, #4]
 80082c0:	f000 f910 	bl	80084e4 <USBH_HID_GetReport>
 80082c4:	4603      	mov	r3, r0
 80082c6:	75fb      	strb	r3, [r7, #23]
      if (status == USBH_OK)
 80082c8:	7dfb      	ldrb	r3, [r7, #23]
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d103      	bne.n	80082d6 <USBH_HID_Process+0x82>
      {
        HID_Handle->state = HID_SYNC;
 80082ce:	693b      	ldr	r3, [r7, #16]
 80082d0:	2205      	movs	r2, #5
 80082d2:	709a      	strb	r2, [r3, #2]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80082d4:	e082      	b.n	80083dc <USBH_HID_Process+0x188>
      else if (status == USBH_BUSY)
 80082d6:	7dfb      	ldrb	r3, [r7, #23]
 80082d8:	2b01      	cmp	r3, #1
 80082da:	d105      	bne.n	80082e8 <USBH_HID_Process+0x94>
        HID_Handle->state = HID_IDLE;
 80082dc:	693b      	ldr	r3, [r7, #16]
 80082de:	2201      	movs	r2, #1
 80082e0:	709a      	strb	r2, [r3, #2]
        status = USBH_OK;
 80082e2:	2300      	movs	r3, #0
 80082e4:	75fb      	strb	r3, [r7, #23]
      break;
 80082e6:	e079      	b.n	80083dc <USBH_HID_Process+0x188>
      else if (status == USBH_NOT_SUPPORTED)
 80082e8:	7dfb      	ldrb	r3, [r7, #23]
 80082ea:	2b03      	cmp	r3, #3
 80082ec:	d105      	bne.n	80082fa <USBH_HID_Process+0xa6>
        HID_Handle->state = HID_SYNC;
 80082ee:	693b      	ldr	r3, [r7, #16]
 80082f0:	2205      	movs	r2, #5
 80082f2:	709a      	strb	r2, [r3, #2]
        status = USBH_OK;
 80082f4:	2300      	movs	r3, #0
 80082f6:	75fb      	strb	r3, [r7, #23]
      break;
 80082f8:	e070      	b.n	80083dc <USBH_HID_Process+0x188>
        HID_Handle->state = HID_ERROR;
 80082fa:	693b      	ldr	r3, [r7, #16]
 80082fc:	2207      	movs	r2, #7
 80082fe:	709a      	strb	r2, [r3, #2]
        status = USBH_FAIL;
 8008300:	2302      	movs	r3, #2
 8008302:	75fb      	strb	r3, [r7, #23]
      break;
 8008304:	e06a      	b.n	80083dc <USBH_HID_Process+0x188>

    case HID_SYNC:
      /* Sync with start of Even Frame */
      if (phost->Timer & 1U)
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800830c:	f8d3 3164 	ldr.w	r3, [r3, #356]	; 0x164
 8008310:	f003 0301 	and.w	r3, r3, #1
 8008314:	2b00      	cmp	r3, #0
 8008316:	d05e      	beq.n	80083d6 <USBH_HID_Process+0x182>
      {
        HID_Handle->state = HID_GET_DATA;
 8008318:	693b      	ldr	r3, [r7, #16]
 800831a:	2204      	movs	r2, #4
 800831c:	709a      	strb	r2, [r3, #2]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800831e:	e05a      	b.n	80083d6 <USBH_HID_Process+0x182>

    case HID_GET_DATA:
      USBH_InterruptReceiveData(phost, HID_Handle->pData,
 8008320:	693b      	ldr	r3, [r7, #16]
 8008322:	6959      	ldr	r1, [r3, #20]
                                (uint8_t)HID_Handle->length,
 8008324:	693b      	ldr	r3, [r7, #16]
 8008326:	8b1b      	ldrh	r3, [r3, #24]
      USBH_InterruptReceiveData(phost, HID_Handle->pData,
 8008328:	b2da      	uxtb	r2, r3
 800832a:	693b      	ldr	r3, [r7, #16]
 800832c:	785b      	ldrb	r3, [r3, #1]
 800832e:	6878      	ldr	r0, [r7, #4]
 8008330:	f005 f9f8 	bl	800d724 <USBH_InterruptReceiveData>
                                HID_Handle->InPipe);

      HID_Handle->state = HID_POLL;
 8008334:	693b      	ldr	r3, [r7, #16]
 8008336:	2206      	movs	r2, #6
 8008338:	709a      	strb	r2, [r3, #2]
      HID_Handle->timer = phost->Timer;
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008340:	f8d3 2164 	ldr.w	r2, [r3, #356]	; 0x164
 8008344:	693b      	ldr	r3, [r7, #16]
 8008346:	621a      	str	r2, [r3, #32]
      HID_Handle->DataReady = 0U;
 8008348:	693b      	ldr	r3, [r7, #16]
 800834a:	2200      	movs	r2, #0
 800834c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      break;
 8008350:	e044      	b.n	80083dc <USBH_HID_Process+0x188>

    case HID_POLL:
      if (USBH_LL_GetURBState(phost, HID_Handle->InPipe) == USBH_URB_DONE)
 8008352:	693b      	ldr	r3, [r7, #16]
 8008354:	785b      	ldrb	r3, [r3, #1]
 8008356:	4619      	mov	r1, r3
 8008358:	6878      	ldr	r0, [r7, #4]
 800835a:	f005 fd49 	bl	800ddf0 <USBH_LL_GetURBState>
 800835e:	4603      	mov	r3, r0
 8008360:	2b01      	cmp	r3, #1
 8008362:	d120      	bne.n	80083a6 <USBH_HID_Process+0x152>
      {
        XferSize = USBH_LL_GetLastXferSize(phost, HID_Handle->InPipe);
 8008364:	693b      	ldr	r3, [r7, #16]
 8008366:	785b      	ldrb	r3, [r3, #1]
 8008368:	4619      	mov	r1, r3
 800836a:	6878      	ldr	r0, [r7, #4]
 800836c:	f005 fca6 	bl	800dcbc <USBH_LL_GetLastXferSize>
 8008370:	60f8      	str	r0, [r7, #12]

        if ((HID_Handle->DataReady == 0U) && (XferSize != 0U))
 8008372:	693b      	ldr	r3, [r7, #16]
 8008374:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8008378:	2b00      	cmp	r3, #0
 800837a:	d12e      	bne.n	80083da <USBH_HID_Process+0x186>
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	2b00      	cmp	r3, #0
 8008380:	d02b      	beq.n	80083da <USBH_HID_Process+0x186>
        {
          USBH_HID_FifoWrite(&HID_Handle->fifo, HID_Handle->pData, HID_Handle->length);
 8008382:	693b      	ldr	r3, [r7, #16]
 8008384:	f103 0008 	add.w	r0, r3, #8
 8008388:	693b      	ldr	r3, [r7, #16]
 800838a:	6959      	ldr	r1, [r3, #20]
 800838c:	693b      	ldr	r3, [r7, #16]
 800838e:	8b1b      	ldrh	r3, [r3, #24]
 8008390:	461a      	mov	r2, r3
 8008392:	f000 f94e 	bl	8008632 <USBH_HID_FifoWrite>
          HID_Handle->DataReady = 1U;
 8008396:	693b      	ldr	r3, [r7, #16]
 8008398:	2201      	movs	r2, #1
 800839a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          USBH_HID_EventCallback(phost);
 800839e:	6878      	ldr	r0, [r7, #4]
 80083a0:	f000 f99a 	bl	80086d8 <USBH_HID_EventCallback>
            /* Change state to issue next IN token */
            HID_Handle->state = HID_GET_DATA;
          }
        }
      }
      break;
 80083a4:	e019      	b.n	80083da <USBH_HID_Process+0x186>
        if (USBH_LL_GetURBState(phost, HID_Handle->InPipe) == USBH_URB_STALL)
 80083a6:	693b      	ldr	r3, [r7, #16]
 80083a8:	785b      	ldrb	r3, [r3, #1]
 80083aa:	4619      	mov	r1, r3
 80083ac:	6878      	ldr	r0, [r7, #4]
 80083ae:	f005 fd1f 	bl	800ddf0 <USBH_LL_GetURBState>
 80083b2:	4603      	mov	r3, r0
 80083b4:	2b05      	cmp	r3, #5
 80083b6:	d110      	bne.n	80083da <USBH_HID_Process+0x186>
          if (USBH_ClrFeature(phost, HID_Handle->ep_addr) == USBH_OK)
 80083b8:	693b      	ldr	r3, [r7, #16]
 80083ba:	7e9b      	ldrb	r3, [r3, #26]
 80083bc:	4619      	mov	r1, r3
 80083be:	6878      	ldr	r0, [r7, #4]
 80083c0:	f004 fd69 	bl	800ce96 <USBH_ClrFeature>
 80083c4:	4603      	mov	r3, r0
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d107      	bne.n	80083da <USBH_HID_Process+0x186>
            HID_Handle->state = HID_GET_DATA;
 80083ca:	693b      	ldr	r3, [r7, #16]
 80083cc:	2204      	movs	r2, #4
 80083ce:	709a      	strb	r2, [r3, #2]
      break;
 80083d0:	e003      	b.n	80083da <USBH_HID_Process+0x186>

    default:
      break;
 80083d2:	bf00      	nop
 80083d4:	e002      	b.n	80083dc <USBH_HID_Process+0x188>
      break;
 80083d6:	bf00      	nop
 80083d8:	e000      	b.n	80083dc <USBH_HID_Process+0x188>
      break;
 80083da:	bf00      	nop
  }

  return status;
 80083dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80083de:	4618      	mov	r0, r3
 80083e0:	3718      	adds	r7, #24
 80083e2:	46bd      	mov	sp, r7
 80083e4:	bd80      	pop	{r7, pc}
 80083e6:	bf00      	nop

080083e8 <USBH_HID_SOFProcess>:
  *         The function is for managing the SOF Process
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_SOFProcess(USBH_HandleTypeDef *phost)
{
 80083e8:	b480      	push	{r7}
 80083ea:	b085      	sub	sp, #20
 80083ec:	af00      	add	r7, sp, #0
 80083ee:	6078      	str	r0, [r7, #4]
  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80083f6:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 80083fa:	69db      	ldr	r3, [r3, #28]
 80083fc:	60fb      	str	r3, [r7, #12]

  if (HID_Handle->state == HID_POLL)
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	789b      	ldrb	r3, [r3, #2]
 8008402:	2b06      	cmp	r3, #6
 8008404:	d10e      	bne.n	8008424 <USBH_HID_SOFProcess+0x3c>
  {
    if ((phost->Timer - HID_Handle->timer) >= HID_Handle->poll)
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800840c:	f8d3 2164 	ldr.w	r2, [r3, #356]	; 0x164
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	6a1b      	ldr	r3, [r3, #32]
 8008414:	1ad3      	subs	r3, r2, r3
 8008416:	68fa      	ldr	r2, [r7, #12]
 8008418:	8b92      	ldrh	r2, [r2, #28]
 800841a:	4293      	cmp	r3, r2
 800841c:	d302      	bcc.n	8008424 <USBH_HID_SOFProcess+0x3c>
    {
      HID_Handle->state = HID_GET_DATA;
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	2204      	movs	r2, #4
 8008422:	709a      	strb	r2, [r3, #2]
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
  }
  return USBH_OK;
 8008424:	2300      	movs	r3, #0
}
 8008426:	4618      	mov	r0, r3
 8008428:	3714      	adds	r7, #20
 800842a:	46bd      	mov	sp, r7
 800842c:	bc80      	pop	{r7}
 800842e:	4770      	bx	lr

08008430 <USBH_HID_GetHIDReportDescriptor>:
  * @param  Length : HID Report Descriptor Length
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_HID_GetHIDReportDescriptor(USBH_HandleTypeDef *phost,
                                                   uint16_t length)
{
 8008430:	b580      	push	{r7, lr}
 8008432:	b086      	sub	sp, #24
 8008434:	af02      	add	r7, sp, #8
 8008436:	6078      	str	r0, [r7, #4]
 8008438:	460b      	mov	r3, r1
 800843a:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_INTERFACE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_HID_REPORT,
                              phost->device.Data,
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8008442:	887b      	ldrh	r3, [r7, #2]
 8008444:	9300      	str	r3, [sp, #0]
 8008446:	4613      	mov	r3, r2
 8008448:	f44f 5208 	mov.w	r2, #8704	; 0x2200
 800844c:	2101      	movs	r1, #1
 800844e:	6878      	ldr	r0, [r7, #4]
 8008450:	f004 fc5a 	bl	800cd08 <USBH_GetDescriptor>
 8008454:	4603      	mov	r3, r0
 8008456:	73fb      	strb	r3, [r7, #15]
  HID report descriptor parsing is not required.
  In case, for supporting Non-Boot Protocol devices and output reports,
  user may parse the report descriptor*/


  return status;
 8008458:	7bfb      	ldrb	r3, [r7, #15]
}
 800845a:	4618      	mov	r0, r3
 800845c:	3710      	adds	r7, #16
 800845e:	46bd      	mov	sp, r7
 8008460:	bd80      	pop	{r7, pc}

08008462 <USBH_HID_GetHIDDescriptor>:
  * @param  Length : HID Descriptor Length
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_HID_GetHIDDescriptor(USBH_HandleTypeDef *phost,
                                             uint16_t length)
{
 8008462:	b580      	push	{r7, lr}
 8008464:	b086      	sub	sp, #24
 8008466:	af02      	add	r7, sp, #8
 8008468:	6078      	str	r0, [r7, #4]
 800846a:	460b      	mov	r3, r1
 800846c:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_INTERFACE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_HID,
                              phost->device.Data,
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8008474:	887b      	ldrh	r3, [r7, #2]
 8008476:	9300      	str	r3, [sp, #0]
 8008478:	4613      	mov	r3, r2
 800847a:	f44f 5204 	mov.w	r2, #8448	; 0x2100
 800847e:	2101      	movs	r1, #1
 8008480:	6878      	ldr	r0, [r7, #4]
 8008482:	f004 fc41 	bl	800cd08 <USBH_GetDescriptor>
 8008486:	4603      	mov	r3, r0
 8008488:	73fb      	strb	r3, [r7, #15]
                              length);

  return status;
 800848a:	7bfb      	ldrb	r3, [r7, #15]
}
 800848c:	4618      	mov	r0, r3
 800848e:	3710      	adds	r7, #16
 8008490:	46bd      	mov	sp, r7
 8008492:	bd80      	pop	{r7, pc}

08008494 <USBH_HID_SetIdle>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_HID_SetIdle(USBH_HandleTypeDef *phost,
                                    uint8_t duration,
                                    uint8_t reportId)
{
 8008494:	b580      	push	{r7, lr}
 8008496:	b082      	sub	sp, #8
 8008498:	af00      	add	r7, sp, #0
 800849a:	6078      	str	r0, [r7, #4]
 800849c:	460b      	mov	r3, r1
 800849e:	70fb      	strb	r3, [r7, #3]
 80084a0:	4613      	mov	r3, r2
 80084a2:	70bb      	strb	r3, [r7, #2]

  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_INTERFACE | \
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	2221      	movs	r2, #33	; 0x21
 80084a8:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_TYPE_CLASS;


  phost->Control.setup.b.bRequest = USB_HID_SET_IDLE;
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	220a      	movs	r2, #10
 80084ae:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = (uint16_t)(((uint32_t)duration << 8U) | (uint32_t)reportId);
 80084b0:	78fb      	ldrb	r3, [r7, #3]
 80084b2:	b29b      	uxth	r3, r3
 80084b4:	021b      	lsls	r3, r3, #8
 80084b6:	b29a      	uxth	r2, r3
 80084b8:	78bb      	ldrb	r3, [r7, #2]
 80084ba:	b29b      	uxth	r3, r3
 80084bc:	4313      	orrs	r3, r2
 80084be:	b29a      	uxth	r2, r3
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	2200      	movs	r2, #0
 80084c8:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 0U;
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	2200      	movs	r2, #0
 80084ce:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, 0U, 0U);
 80084d0:	2200      	movs	r2, #0
 80084d2:	2100      	movs	r1, #0
 80084d4:	6878      	ldr	r0, [r7, #4]
 80084d6:	f004 febb 	bl	800d250 <USBH_CtlReq>
 80084da:	4603      	mov	r3, r0
}
 80084dc:	4618      	mov	r0, r3
 80084de:	3708      	adds	r7, #8
 80084e0:	46bd      	mov	sp, r7
 80084e2:	bd80      	pop	{r7, pc}

080084e4 <USBH_HID_GetReport>:
USBH_StatusTypeDef USBH_HID_GetReport(USBH_HandleTypeDef *phost,
                                      uint8_t reportType,
                                      uint8_t reportId,
                                      uint8_t *reportBuff,
                                      uint8_t reportLen)
{
 80084e4:	b580      	push	{r7, lr}
 80084e6:	b084      	sub	sp, #16
 80084e8:	af00      	add	r7, sp, #0
 80084ea:	60f8      	str	r0, [r7, #12]
 80084ec:	607b      	str	r3, [r7, #4]
 80084ee:	460b      	mov	r3, r1
 80084f0:	72fb      	strb	r3, [r7, #11]
 80084f2:	4613      	mov	r3, r2
 80084f4:	72bb      	strb	r3, [r7, #10]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_RECIPIENT_INTERFACE | \
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	22a1      	movs	r2, #161	; 0xa1
 80084fa:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_TYPE_CLASS;


  phost->Control.setup.b.bRequest = USB_HID_GET_REPORT;
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	2201      	movs	r2, #1
 8008500:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = (uint16_t)(((uint32_t)reportType << 8U) | (uint32_t)reportId);
 8008502:	7afb      	ldrb	r3, [r7, #11]
 8008504:	b29b      	uxth	r3, r3
 8008506:	021b      	lsls	r3, r3, #8
 8008508:	b29a      	uxth	r2, r3
 800850a:	7abb      	ldrb	r3, [r7, #10]
 800850c:	b29b      	uxth	r3, r3
 800850e:	4313      	orrs	r3, r2
 8008510:	b29a      	uxth	r2, r3
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	2200      	movs	r2, #0
 800851a:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = reportLen;
 800851c:	7e3b      	ldrb	r3, [r7, #24]
 800851e:	b29a      	uxth	r2, r3
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, reportBuff, (uint16_t)reportLen);
 8008524:	7e3b      	ldrb	r3, [r7, #24]
 8008526:	b29b      	uxth	r3, r3
 8008528:	461a      	mov	r2, r3
 800852a:	6879      	ldr	r1, [r7, #4]
 800852c:	68f8      	ldr	r0, [r7, #12]
 800852e:	f004 fe8f 	bl	800d250 <USBH_CtlReq>
 8008532:	4603      	mov	r3, r0
}
 8008534:	4618      	mov	r0, r3
 8008536:	3710      	adds	r7, #16
 8008538:	46bd      	mov	sp, r7
 800853a:	bd80      	pop	{r7, pc}

0800853c <USBH_HID_SetProtocol>:
  * @param  protocol : Set Protocol for HID : boot/report protocol
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_HID_SetProtocol(USBH_HandleTypeDef *phost,
                                        uint8_t protocol)
{
 800853c:	b580      	push	{r7, lr}
 800853e:	b082      	sub	sp, #8
 8008540:	af00      	add	r7, sp, #0
 8008542:	6078      	str	r0, [r7, #4]
 8008544:	460b      	mov	r3, r1
 8008546:	70fb      	strb	r3, [r7, #3]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_INTERFACE
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	2221      	movs	r2, #33	; 0x21
 800854c:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_TYPE_CLASS;

  phost->Control.setup.b.bRequest = USB_HID_SET_PROTOCOL;
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	220b      	movs	r2, #11
 8008552:	745a      	strb	r2, [r3, #17]
  if (protocol)
 8008554:	78fb      	ldrb	r3, [r7, #3]
 8008556:	2b00      	cmp	r3, #0
 8008558:	d003      	beq.n	8008562 <USBH_HID_SetProtocol+0x26>
  {
    phost->Control.setup.b.wValue.w = 0U;
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	2200      	movs	r2, #0
 800855e:	825a      	strh	r2, [r3, #18]
 8008560:	e002      	b.n	8008568 <USBH_HID_SetProtocol+0x2c>
  }
  else
  {
    phost->Control.setup.b.wValue.w = 1U;
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	2201      	movs	r2, #1
 8008566:	825a      	strh	r2, [r3, #18]
  }

  phost->Control.setup.b.wIndex.w = 0U;
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	2200      	movs	r2, #0
 800856c:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 0U;
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	2200      	movs	r2, #0
 8008572:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, 0U, 0U);
 8008574:	2200      	movs	r2, #0
 8008576:	2100      	movs	r1, #0
 8008578:	6878      	ldr	r0, [r7, #4]
 800857a:	f004 fe69 	bl	800d250 <USBH_CtlReq>
 800857e:	4603      	mov	r3, r0

}
 8008580:	4618      	mov	r0, r3
 8008582:	3708      	adds	r7, #8
 8008584:	46bd      	mov	sp, r7
 8008586:	bd80      	pop	{r7, pc}

08008588 <USBH_HID_ParseHIDDesc>:
  * @param  desc: HID Descriptor
  * @param  buf: Buffer where the source descriptor is available
  * @retval None
  */
static void  USBH_HID_ParseHIDDesc(HID_DescTypeDef *desc, uint8_t *buf)
{
 8008588:	b480      	push	{r7}
 800858a:	b083      	sub	sp, #12
 800858c:	af00      	add	r7, sp, #0
 800858e:	6078      	str	r0, [r7, #4]
 8008590:	6039      	str	r1, [r7, #0]

  desc->bLength                  = *(uint8_t *)(buf + 0);
 8008592:	683b      	ldr	r3, [r7, #0]
 8008594:	781a      	ldrb	r2, [r3, #0]
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	701a      	strb	r2, [r3, #0]
  desc->bDescriptorType          = *(uint8_t *)(buf + 1);
 800859a:	683b      	ldr	r3, [r7, #0]
 800859c:	785a      	ldrb	r2, [r3, #1]
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	705a      	strb	r2, [r3, #1]
  desc->bcdHID                   =  LE16(buf + 2);
 80085a2:	683b      	ldr	r3, [r7, #0]
 80085a4:	3302      	adds	r3, #2
 80085a6:	781b      	ldrb	r3, [r3, #0]
 80085a8:	b29a      	uxth	r2, r3
 80085aa:	683b      	ldr	r3, [r7, #0]
 80085ac:	3303      	adds	r3, #3
 80085ae:	781b      	ldrb	r3, [r3, #0]
 80085b0:	b29b      	uxth	r3, r3
 80085b2:	021b      	lsls	r3, r3, #8
 80085b4:	b29b      	uxth	r3, r3
 80085b6:	4313      	orrs	r3, r2
 80085b8:	b29a      	uxth	r2, r3
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	805a      	strh	r2, [r3, #2]
  desc->bCountryCode             = *(uint8_t *)(buf + 4);
 80085be:	683b      	ldr	r3, [r7, #0]
 80085c0:	791a      	ldrb	r2, [r3, #4]
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	711a      	strb	r2, [r3, #4]
  desc->bNumDescriptors          = *(uint8_t *)(buf + 5);
 80085c6:	683b      	ldr	r3, [r7, #0]
 80085c8:	795a      	ldrb	r2, [r3, #5]
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	715a      	strb	r2, [r3, #5]
  desc->bReportDescriptorType    = *(uint8_t *)(buf + 6);
 80085ce:	683b      	ldr	r3, [r7, #0]
 80085d0:	799a      	ldrb	r2, [r3, #6]
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	719a      	strb	r2, [r3, #6]
  desc->wItemLength              =  LE16(buf + 7);
 80085d6:	683b      	ldr	r3, [r7, #0]
 80085d8:	3307      	adds	r3, #7
 80085da:	781b      	ldrb	r3, [r3, #0]
 80085dc:	b29a      	uxth	r2, r3
 80085de:	683b      	ldr	r3, [r7, #0]
 80085e0:	3308      	adds	r3, #8
 80085e2:	781b      	ldrb	r3, [r3, #0]
 80085e4:	b29b      	uxth	r3, r3
 80085e6:	021b      	lsls	r3, r3, #8
 80085e8:	b29b      	uxth	r3, r3
 80085ea:	4313      	orrs	r3, r2
 80085ec:	b29a      	uxth	r2, r3
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	811a      	strh	r2, [r3, #8]
}
 80085f2:	bf00      	nop
 80085f4:	370c      	adds	r7, #12
 80085f6:	46bd      	mov	sp, r7
 80085f8:	bc80      	pop	{r7}
 80085fa:	4770      	bx	lr

080085fc <USBH_HID_FifoInit>:
  * @param  buf: Fifo buffer
  * @param  size: Fifo Size
  * @retval none
  */
void USBH_HID_FifoInit(FIFO_TypeDef *f, uint8_t *buf, uint16_t size)
{
 80085fc:	b480      	push	{r7}
 80085fe:	b085      	sub	sp, #20
 8008600:	af00      	add	r7, sp, #0
 8008602:	60f8      	str	r0, [r7, #12]
 8008604:	60b9      	str	r1, [r7, #8]
 8008606:	4613      	mov	r3, r2
 8008608:	80fb      	strh	r3, [r7, #6]
  f->head = 0U;
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	2200      	movs	r2, #0
 800860e:	809a      	strh	r2, [r3, #4]
  f->tail = 0U;
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	2200      	movs	r2, #0
 8008614:	80da      	strh	r2, [r3, #6]
  f->lock = 0U;
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	2200      	movs	r2, #0
 800861a:	729a      	strb	r2, [r3, #10]
  f->size = size;
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	88fa      	ldrh	r2, [r7, #6]
 8008620:	811a      	strh	r2, [r3, #8]
  f->buf = buf;
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	68ba      	ldr	r2, [r7, #8]
 8008626:	601a      	str	r2, [r3, #0]
}
 8008628:	bf00      	nop
 800862a:	3714      	adds	r7, #20
 800862c:	46bd      	mov	sp, r7
 800862e:	bc80      	pop	{r7}
 8008630:	4770      	bx	lr

08008632 <USBH_HID_FifoWrite>:
  * @param  buf: read buffer
  * @param  nbytes: number of item to write
  * @retval number of written items
  */
uint16_t USBH_HID_FifoWrite(FIFO_TypeDef *f, void *buf, uint16_t  nbytes)
{
 8008632:	b480      	push	{r7}
 8008634:	b087      	sub	sp, #28
 8008636:	af00      	add	r7, sp, #0
 8008638:	60f8      	str	r0, [r7, #12]
 800863a:	60b9      	str	r1, [r7, #8]
 800863c:	4613      	mov	r3, r2
 800863e:	80fb      	strh	r3, [r7, #6]
  uint16_t i;
  uint8_t *p;

  p = (uint8_t *) buf;
 8008640:	68bb      	ldr	r3, [r7, #8]
 8008642:	613b      	str	r3, [r7, #16]

  if (f->lock == 0U)
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	7a9b      	ldrb	r3, [r3, #10]
 8008648:	2b00      	cmp	r3, #0
 800864a:	d13c      	bne.n	80086c6 <USBH_HID_FifoWrite+0x94>
  {
    f->lock = 1U;
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	2201      	movs	r2, #1
 8008650:	729a      	strb	r2, [r3, #10]

    for (i = 0U; i < nbytes; i++)
 8008652:	2300      	movs	r3, #0
 8008654:	82fb      	strh	r3, [r7, #22]
 8008656:	e032      	b.n	80086be <USBH_HID_FifoWrite+0x8c>
    {
      if ((f->head + 1U == f->tail) ||
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	889b      	ldrh	r3, [r3, #4]
 800865c:	3301      	adds	r3, #1
 800865e:	68fa      	ldr	r2, [r7, #12]
 8008660:	88d2      	ldrh	r2, [r2, #6]
 8008662:	4293      	cmp	r3, r2
 8008664:	d00a      	beq.n	800867c <USBH_HID_FifoWrite+0x4a>
          ((f->head + 1U == f->size) && (f->tail == 0U)))
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	889b      	ldrh	r3, [r3, #4]
 800866a:	3301      	adds	r3, #1
 800866c:	68fa      	ldr	r2, [r7, #12]
 800866e:	8912      	ldrh	r2, [r2, #8]
      if ((f->head + 1U == f->tail) ||
 8008670:	4293      	cmp	r3, r2
 8008672:	d108      	bne.n	8008686 <USBH_HID_FifoWrite+0x54>
          ((f->head + 1U == f->size) && (f->tail == 0U)))
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	88db      	ldrh	r3, [r3, #6]
 8008678:	2b00      	cmp	r3, #0
 800867a:	d104      	bne.n	8008686 <USBH_HID_FifoWrite+0x54>
      {
        f->lock = 0U;
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	2200      	movs	r2, #0
 8008680:	729a      	strb	r2, [r3, #10]
        return i;
 8008682:	8afb      	ldrh	r3, [r7, #22]
 8008684:	e023      	b.n	80086ce <USBH_HID_FifoWrite+0x9c>
      }
      else
      {
        f->buf[f->head] = *p++;
 8008686:	693b      	ldr	r3, [r7, #16]
 8008688:	1c5a      	adds	r2, r3, #1
 800868a:	613a      	str	r2, [r7, #16]
 800868c:	68fa      	ldr	r2, [r7, #12]
 800868e:	6812      	ldr	r2, [r2, #0]
 8008690:	68f9      	ldr	r1, [r7, #12]
 8008692:	8889      	ldrh	r1, [r1, #4]
 8008694:	440a      	add	r2, r1
 8008696:	781b      	ldrb	r3, [r3, #0]
 8008698:	7013      	strb	r3, [r2, #0]
        f->head++;
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	889b      	ldrh	r3, [r3, #4]
 800869e:	3301      	adds	r3, #1
 80086a0:	b29a      	uxth	r2, r3
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	809a      	strh	r2, [r3, #4]

        if (f->head == f->size)
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	889a      	ldrh	r2, [r3, #4]
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	891b      	ldrh	r3, [r3, #8]
 80086ae:	429a      	cmp	r2, r3
 80086b0:	d102      	bne.n	80086b8 <USBH_HID_FifoWrite+0x86>
        {
          f->head = 0U;
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	2200      	movs	r2, #0
 80086b6:	809a      	strh	r2, [r3, #4]
    for (i = 0U; i < nbytes; i++)
 80086b8:	8afb      	ldrh	r3, [r7, #22]
 80086ba:	3301      	adds	r3, #1
 80086bc:	82fb      	strh	r3, [r7, #22]
 80086be:	8afa      	ldrh	r2, [r7, #22]
 80086c0:	88fb      	ldrh	r3, [r7, #6]
 80086c2:	429a      	cmp	r2, r3
 80086c4:	d3c8      	bcc.n	8008658 <USBH_HID_FifoWrite+0x26>
        }
      }
    }
  }

  f->lock = 0U;
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	2200      	movs	r2, #0
 80086ca:	729a      	strb	r2, [r3, #10]

  return nbytes;
 80086cc:	88fb      	ldrh	r3, [r7, #6]
}
 80086ce:	4618      	mov	r0, r3
 80086d0:	371c      	adds	r7, #28
 80086d2:	46bd      	mov	sp, r7
 80086d4:	bc80      	pop	{r7}
 80086d6:	4770      	bx	lr

080086d8 <USBH_HID_EventCallback>:
* @brief  The function is a callback about HID Data events
*  @param  phost: Selected device
* @retval None
*/
__weak void USBH_HID_EventCallback(USBH_HandleTypeDef *phost)
{
 80086d8:	b480      	push	{r7}
 80086da:	b083      	sub	sp, #12
 80086dc:	af00      	add	r7, sp, #0
 80086de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80086e0:	bf00      	nop
 80086e2:	370c      	adds	r7, #12
 80086e4:	46bd      	mov	sp, r7
 80086e6:	bc80      	pop	{r7}
 80086e8:	4770      	bx	lr
	...

080086ec <USBH_HID_KeybdInit>:
  *         The function init the HID keyboard.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_HID_KeybdInit(USBH_HandleTypeDef *phost)
{
 80086ec:	b580      	push	{r7, lr}
 80086ee:	b084      	sub	sp, #16
 80086f0:	af00      	add	r7, sp, #0
 80086f2:	6078      	str	r0, [r7, #4]
  uint32_t x;
  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80086fa:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 80086fe:	69db      	ldr	r3, [r3, #28]
 8008700:	60bb      	str	r3, [r7, #8]

  keybd_info.lctrl = keybd_info.lshift = 0U;
 8008702:	4b24      	ldr	r3, [pc, #144]	; (8008794 <USBH_HID_KeybdInit+0xa8>)
 8008704:	2200      	movs	r2, #0
 8008706:	709a      	strb	r2, [r3, #2]
 8008708:	4b22      	ldr	r3, [pc, #136]	; (8008794 <USBH_HID_KeybdInit+0xa8>)
 800870a:	789a      	ldrb	r2, [r3, #2]
 800870c:	4b21      	ldr	r3, [pc, #132]	; (8008794 <USBH_HID_KeybdInit+0xa8>)
 800870e:	705a      	strb	r2, [r3, #1]
  keybd_info.lalt = keybd_info.lgui = 0U;
 8008710:	4b20      	ldr	r3, [pc, #128]	; (8008794 <USBH_HID_KeybdInit+0xa8>)
 8008712:	2200      	movs	r2, #0
 8008714:	711a      	strb	r2, [r3, #4]
 8008716:	4b1f      	ldr	r3, [pc, #124]	; (8008794 <USBH_HID_KeybdInit+0xa8>)
 8008718:	791a      	ldrb	r2, [r3, #4]
 800871a:	4b1e      	ldr	r3, [pc, #120]	; (8008794 <USBH_HID_KeybdInit+0xa8>)
 800871c:	70da      	strb	r2, [r3, #3]
  keybd_info.rctrl = keybd_info.rshift = 0U;
 800871e:	4b1d      	ldr	r3, [pc, #116]	; (8008794 <USBH_HID_KeybdInit+0xa8>)
 8008720:	2200      	movs	r2, #0
 8008722:	719a      	strb	r2, [r3, #6]
 8008724:	4b1b      	ldr	r3, [pc, #108]	; (8008794 <USBH_HID_KeybdInit+0xa8>)
 8008726:	799a      	ldrb	r2, [r3, #6]
 8008728:	4b1a      	ldr	r3, [pc, #104]	; (8008794 <USBH_HID_KeybdInit+0xa8>)
 800872a:	715a      	strb	r2, [r3, #5]
  keybd_info.ralt = keybd_info.rgui = 0U;
 800872c:	4b19      	ldr	r3, [pc, #100]	; (8008794 <USBH_HID_KeybdInit+0xa8>)
 800872e:	2200      	movs	r2, #0
 8008730:	721a      	strb	r2, [r3, #8]
 8008732:	4b18      	ldr	r3, [pc, #96]	; (8008794 <USBH_HID_KeybdInit+0xa8>)
 8008734:	7a1a      	ldrb	r2, [r3, #8]
 8008736:	4b17      	ldr	r3, [pc, #92]	; (8008794 <USBH_HID_KeybdInit+0xa8>)
 8008738:	71da      	strb	r2, [r3, #7]


  for (x = 0U; x < (sizeof(keybd_report_data) / sizeof(uint32_t)); x++)
 800873a:	2300      	movs	r3, #0
 800873c:	60fb      	str	r3, [r7, #12]
 800873e:	e00c      	b.n	800875a <USBH_HID_KeybdInit+0x6e>
  {
    keybd_report_data[x] = 0U;
 8008740:	4a15      	ldr	r2, [pc, #84]	; (8008798 <USBH_HID_KeybdInit+0xac>)
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	2100      	movs	r1, #0
 8008746:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    keybd_rx_report_buf[x] = 0U;
 800874a:	4a14      	ldr	r2, [pc, #80]	; (800879c <USBH_HID_KeybdInit+0xb0>)
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	2100      	movs	r1, #0
 8008750:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  for (x = 0U; x < (sizeof(keybd_report_data) / sizeof(uint32_t)); x++)
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	3301      	adds	r3, #1
 8008758:	60fb      	str	r3, [r7, #12]
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	2b01      	cmp	r3, #1
 800875e:	d9ef      	bls.n	8008740 <USBH_HID_KeybdInit+0x54>
  }

  if (HID_Handle->length > (sizeof(keybd_report_data)))
 8008760:	68bb      	ldr	r3, [r7, #8]
 8008762:	8b1b      	ldrh	r3, [r3, #24]
 8008764:	2b08      	cmp	r3, #8
 8008766:	d902      	bls.n	800876e <USBH_HID_KeybdInit+0x82>
  {
    HID_Handle->length = (sizeof(keybd_report_data));
 8008768:	68bb      	ldr	r3, [r7, #8]
 800876a:	2208      	movs	r2, #8
 800876c:	831a      	strh	r2, [r3, #24]
  }
  HID_Handle->pData = (uint8_t *)(void *)keybd_rx_report_buf;
 800876e:	68bb      	ldr	r3, [r7, #8]
 8008770:	4a0a      	ldr	r2, [pc, #40]	; (800879c <USBH_HID_KeybdInit+0xb0>)
 8008772:	615a      	str	r2, [r3, #20]
  USBH_HID_FifoInit(&HID_Handle->fifo, phost->device.Data, HID_QUEUE_SIZE * sizeof(keybd_report_data));
 8008774:	68bb      	ldr	r3, [r7, #8]
 8008776:	f103 0008 	add.w	r0, r3, #8
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8008780:	2250      	movs	r2, #80	; 0x50
 8008782:	4619      	mov	r1, r3
 8008784:	f7ff ff3a 	bl	80085fc <USBH_HID_FifoInit>

  return USBH_OK;
 8008788:	2300      	movs	r3, #0
}
 800878a:	4618      	mov	r0, r3
 800878c:	3710      	adds	r7, #16
 800878e:	46bd      	mov	sp, r7
 8008790:	bd80      	pop	{r7, pc}
 8008792:	bf00      	nop
 8008794:	200001c4 	.word	0x200001c4
 8008798:	200001dc 	.word	0x200001dc
 800879c:	200001d4 	.word	0x200001d4

080087a0 <USBH_HID_MouseInit>:
  *         The function init the HID mouse.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_HID_MouseInit(USBH_HandleTypeDef *phost)
{
 80087a0:	b580      	push	{r7, lr}
 80087a2:	b084      	sub	sp, #16
 80087a4:	af00      	add	r7, sp, #0
 80087a6:	6078      	str	r0, [r7, #4]
  uint32_t i;
  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80087ae:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 80087b2:	69db      	ldr	r3, [r3, #28]
 80087b4:	60bb      	str	r3, [r7, #8]

  mouse_info.x = 0U;
 80087b6:	4b1d      	ldr	r3, [pc, #116]	; (800882c <USBH_HID_MouseInit+0x8c>)
 80087b8:	2200      	movs	r2, #0
 80087ba:	701a      	strb	r2, [r3, #0]
  mouse_info.y = 0U;
 80087bc:	4b1b      	ldr	r3, [pc, #108]	; (800882c <USBH_HID_MouseInit+0x8c>)
 80087be:	2200      	movs	r2, #0
 80087c0:	705a      	strb	r2, [r3, #1]
  mouse_info.buttons[0] = 0U;
 80087c2:	4b1a      	ldr	r3, [pc, #104]	; (800882c <USBH_HID_MouseInit+0x8c>)
 80087c4:	2200      	movs	r2, #0
 80087c6:	709a      	strb	r2, [r3, #2]
  mouse_info.buttons[1] = 0U;
 80087c8:	4b18      	ldr	r3, [pc, #96]	; (800882c <USBH_HID_MouseInit+0x8c>)
 80087ca:	2200      	movs	r2, #0
 80087cc:	70da      	strb	r2, [r3, #3]
  mouse_info.buttons[2] = 0U;
 80087ce:	4b17      	ldr	r3, [pc, #92]	; (800882c <USBH_HID_MouseInit+0x8c>)
 80087d0:	2200      	movs	r2, #0
 80087d2:	711a      	strb	r2, [r3, #4]

  for (i = 0U; i < (sizeof(mouse_report_data) / sizeof(uint32_t)); i++)
 80087d4:	2300      	movs	r3, #0
 80087d6:	60fb      	str	r3, [r7, #12]
 80087d8:	e00c      	b.n	80087f4 <USBH_HID_MouseInit+0x54>
  {
    mouse_report_data[i] = 0U;
 80087da:	4a15      	ldr	r2, [pc, #84]	; (8008830 <USBH_HID_MouseInit+0x90>)
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	2100      	movs	r1, #0
 80087e0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    mouse_rx_report_buf[i] = 0U;
 80087e4:	4a13      	ldr	r2, [pc, #76]	; (8008834 <USBH_HID_MouseInit+0x94>)
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	2100      	movs	r1, #0
 80087ea:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  for (i = 0U; i < (sizeof(mouse_report_data) / sizeof(uint32_t)); i++)
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	3301      	adds	r3, #1
 80087f2:	60fb      	str	r3, [r7, #12]
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	2b01      	cmp	r3, #1
 80087f8:	d9ef      	bls.n	80087da <USBH_HID_MouseInit+0x3a>
  }

  if (HID_Handle->length > sizeof(mouse_report_data))
 80087fa:	68bb      	ldr	r3, [r7, #8]
 80087fc:	8b1b      	ldrh	r3, [r3, #24]
 80087fe:	2b08      	cmp	r3, #8
 8008800:	d902      	bls.n	8008808 <USBH_HID_MouseInit+0x68>
  {
    HID_Handle->length = sizeof(mouse_report_data);
 8008802:	68bb      	ldr	r3, [r7, #8]
 8008804:	2208      	movs	r2, #8
 8008806:	831a      	strh	r2, [r3, #24]
  }
  HID_Handle->pData = (uint8_t *)(void *)mouse_rx_report_buf;
 8008808:	68bb      	ldr	r3, [r7, #8]
 800880a:	4a0a      	ldr	r2, [pc, #40]	; (8008834 <USBH_HID_MouseInit+0x94>)
 800880c:	615a      	str	r2, [r3, #20]
  USBH_HID_FifoInit(&HID_Handle->fifo, phost->device.Data, HID_QUEUE_SIZE * sizeof(mouse_report_data));
 800880e:	68bb      	ldr	r3, [r7, #8]
 8008810:	f103 0008 	add.w	r0, r3, #8
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800881a:	2250      	movs	r2, #80	; 0x50
 800881c:	4619      	mov	r1, r3
 800881e:	f7ff feed 	bl	80085fc <USBH_HID_FifoInit>

  return USBH_OK;
 8008822:	2300      	movs	r3, #0
}
 8008824:	4618      	mov	r0, r3
 8008826:	3710      	adds	r7, #16
 8008828:	46bd      	mov	sp, r7
 800882a:	bd80      	pop	{r7, pc}
 800882c:	200001e4 	.word	0x200001e4
 8008830:	200001ec 	.word	0x200001ec
 8008834:	200001f4 	.word	0x200001f4

08008838 <USBH_MSC_InterfaceInit>:
  *         The function init the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8008838:	b590      	push	{r4, r7, lr}
 800883a:	b089      	sub	sp, #36	; 0x24
 800883c:	af04      	add	r7, sp, #16
 800883e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  uint8_t interface;
  MSC_HandleTypeDef *MSC_Handle;

  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, MSC_TRANSPARENT, MSC_BOT);
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008846:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 800884a:	7919      	ldrb	r1, [r3, #4]
 800884c:	2350      	movs	r3, #80	; 0x50
 800884e:	2206      	movs	r2, #6
 8008850:	6878      	ldr	r0, [r7, #4]
 8008852:	f003 fd05 	bl	800c260 <USBH_FindInterface>
 8008856:	4603      	mov	r3, r0
 8008858:	73fb      	strb	r3, [r7, #15]

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* Not Valid Interface */
 800885a:	7bfb      	ldrb	r3, [r7, #15]
 800885c:	2bff      	cmp	r3, #255	; 0xff
 800885e:	d002      	beq.n	8008866 <USBH_MSC_InterfaceInit+0x2e>
 8008860:	7bfb      	ldrb	r3, [r7, #15]
 8008862:	2b0e      	cmp	r3, #14
 8008864:	d911      	bls.n	800888a <USBH_MSC_InterfaceInit+0x52>
  {
    USBH_DbgLog("Cannot Find the interface for %s class.", phost->pActiveClass->Name);
 8008866:	488e      	ldr	r0, [pc, #568]	; (8008aa0 <USBH_MSC_InterfaceInit+0x268>)
 8008868:	f005 ff9c 	bl	800e7a4 <iprintf>
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008872:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	4619      	mov	r1, r3
 800887a:	488a      	ldr	r0, [pc, #552]	; (8008aa4 <USBH_MSC_InterfaceInit+0x26c>)
 800887c:	f005 ff92 	bl	800e7a4 <iprintf>
 8008880:	200a      	movs	r0, #10
 8008882:	f005 ffa7 	bl	800e7d4 <putchar>
    return USBH_FAIL;
 8008886:	2302      	movs	r3, #2
 8008888:	e106      	b.n	8008a98 <USBH_MSC_InterfaceInit+0x260>
  }

  status = USBH_SelectInterface(phost, interface);
 800888a:	7bfb      	ldrb	r3, [r7, #15]
 800888c:	4619      	mov	r1, r3
 800888e:	6878      	ldr	r0, [r7, #4]
 8008890:	f003 fc7c 	bl	800c18c <USBH_SelectInterface>
 8008894:	4603      	mov	r3, r0
 8008896:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8008898:	7bbb      	ldrb	r3, [r7, #14]
 800889a:	2b00      	cmp	r3, #0
 800889c:	d001      	beq.n	80088a2 <USBH_MSC_InterfaceInit+0x6a>
  {
    return USBH_FAIL;
 800889e:	2302      	movs	r3, #2
 80088a0:	e0fa      	b.n	8008a98 <USBH_MSC_InterfaceInit+0x260>
  }

  phost->pActiveClass->pData = (MSC_HandleTypeDef *)USBH_malloc(sizeof(MSC_HandleTypeDef));
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80088a8:	f8d3 411c 	ldr.w	r4, [r3, #284]	; 0x11c
 80088ac:	f44f 7080 	mov.w	r0, #256	; 0x100
 80088b0:	f005 fb88 	bl	800dfc4 <malloc>
 80088b4:	4603      	mov	r3, r0
 80088b6:	61e3      	str	r3, [r4, #28]
  MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80088be:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 80088c2:	69db      	ldr	r3, [r3, #28]
 80088c4:	60bb      	str	r3, [r7, #8]

  if (MSC_Handle == NULL)
 80088c6:	68bb      	ldr	r3, [r7, #8]
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d10a      	bne.n	80088e2 <USBH_MSC_InterfaceInit+0xaa>
  {
    USBH_DbgLog("Cannot allocate memory for MSC Handle");
 80088cc:	4874      	ldr	r0, [pc, #464]	; (8008aa0 <USBH_MSC_InterfaceInit+0x268>)
 80088ce:	f005 ff69 	bl	800e7a4 <iprintf>
 80088d2:	4875      	ldr	r0, [pc, #468]	; (8008aa8 <USBH_MSC_InterfaceInit+0x270>)
 80088d4:	f005 ff66 	bl	800e7a4 <iprintf>
 80088d8:	200a      	movs	r0, #10
 80088da:	f005 ff7b 	bl	800e7d4 <putchar>
    return USBH_FAIL;
 80088de:	2302      	movs	r3, #2
 80088e0:	e0da      	b.n	8008a98 <USBH_MSC_InterfaceInit+0x260>
  }

  /* Initialize msc handler */
  USBH_memset(MSC_Handle, 0, sizeof(MSC_HandleTypeDef));
 80088e2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80088e6:	2100      	movs	r1, #0
 80088e8:	68b8      	ldr	r0, [r7, #8]
 80088ea:	f005 fb89 	bl	800e000 <memset>

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 80088ee:	7bfa      	ldrb	r2, [r7, #15]
 80088f0:	6879      	ldr	r1, [r7, #4]
 80088f2:	4613      	mov	r3, r2
 80088f4:	019b      	lsls	r3, r3, #6
 80088f6:	4413      	add	r3, r2
 80088f8:	005b      	lsls	r3, r3, #1
 80088fa:	440b      	add	r3, r1
 80088fc:	f603 134c 	addw	r3, r3, #2380	; 0x94c
 8008900:	781b      	ldrb	r3, [r3, #0]
 8008902:	b25b      	sxtb	r3, r3
 8008904:	2b00      	cmp	r3, #0
 8008906:	da18      	bge.n	800893a <USBH_MSC_InterfaceInit+0x102>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 8008908:	7bfa      	ldrb	r2, [r7, #15]
 800890a:	6879      	ldr	r1, [r7, #4]
 800890c:	4613      	mov	r3, r2
 800890e:	019b      	lsls	r3, r3, #6
 8008910:	4413      	add	r3, r2
 8008912:	005b      	lsls	r3, r3, #1
 8008914:	440b      	add	r3, r1
 8008916:	f603 134c 	addw	r3, r3, #2380	; 0x94c
 800891a:	781a      	ldrb	r2, [r3, #0]
 800891c:	68bb      	ldr	r3, [r7, #8]
 800891e:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8008920:	7bfa      	ldrb	r2, [r7, #15]
 8008922:	6879      	ldr	r1, [r7, #4]
 8008924:	4613      	mov	r3, r2
 8008926:	019b      	lsls	r3, r3, #6
 8008928:	4413      	add	r3, r2
 800892a:	005b      	lsls	r3, r3, #1
 800892c:	440b      	add	r3, r1
 800892e:	f603 134e 	addw	r3, r3, #2382	; 0x94e
 8008932:	881a      	ldrh	r2, [r3, #0]
 8008934:	68bb      	ldr	r3, [r7, #8]
 8008936:	815a      	strh	r2, [r3, #10]
 8008938:	e017      	b.n	800896a <USBH_MSC_InterfaceInit+0x132>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 800893a:	7bfa      	ldrb	r2, [r7, #15]
 800893c:	6879      	ldr	r1, [r7, #4]
 800893e:	4613      	mov	r3, r2
 8008940:	019b      	lsls	r3, r3, #6
 8008942:	4413      	add	r3, r2
 8008944:	005b      	lsls	r3, r3, #1
 8008946:	440b      	add	r3, r1
 8008948:	f603 134c 	addw	r3, r3, #2380	; 0x94c
 800894c:	781a      	ldrb	r2, [r3, #0]
 800894e:	68bb      	ldr	r3, [r7, #8]
 8008950:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8008952:	7bfa      	ldrb	r2, [r7, #15]
 8008954:	6879      	ldr	r1, [r7, #4]
 8008956:	4613      	mov	r3, r2
 8008958:	019b      	lsls	r3, r3, #6
 800895a:	4413      	add	r3, r2
 800895c:	005b      	lsls	r3, r3, #1
 800895e:	440b      	add	r3, r1
 8008960:	f603 134e 	addw	r3, r3, #2382	; 0x94e
 8008964:	881a      	ldrh	r2, [r3, #0]
 8008966:	68bb      	ldr	r3, [r7, #8]
 8008968:	811a      	strh	r2, [r3, #8]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 800896a:	7bfa      	ldrb	r2, [r7, #15]
 800896c:	6879      	ldr	r1, [r7, #4]
 800896e:	4613      	mov	r3, r2
 8008970:	019b      	lsls	r3, r3, #6
 8008972:	4413      	add	r3, r2
 8008974:	005b      	lsls	r3, r3, #1
 8008976:	440b      	add	r3, r1
 8008978:	f603 1354 	addw	r3, r3, #2388	; 0x954
 800897c:	781b      	ldrb	r3, [r3, #0]
 800897e:	b25b      	sxtb	r3, r3
 8008980:	2b00      	cmp	r3, #0
 8008982:	da18      	bge.n	80089b6 <USBH_MSC_InterfaceInit+0x17e>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 8008984:	7bfa      	ldrb	r2, [r7, #15]
 8008986:	6879      	ldr	r1, [r7, #4]
 8008988:	4613      	mov	r3, r2
 800898a:	019b      	lsls	r3, r3, #6
 800898c:	4413      	add	r3, r2
 800898e:	005b      	lsls	r3, r3, #1
 8008990:	440b      	add	r3, r1
 8008992:	f603 1354 	addw	r3, r3, #2388	; 0x954
 8008996:	781a      	ldrb	r2, [r3, #0]
 8008998:	68bb      	ldr	r3, [r7, #8]
 800899a:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800899c:	7bfa      	ldrb	r2, [r7, #15]
 800899e:	6879      	ldr	r1, [r7, #4]
 80089a0:	4613      	mov	r3, r2
 80089a2:	019b      	lsls	r3, r3, #6
 80089a4:	4413      	add	r3, r2
 80089a6:	005b      	lsls	r3, r3, #1
 80089a8:	440b      	add	r3, r1
 80089aa:	f603 1356 	addw	r3, r3, #2390	; 0x956
 80089ae:	881a      	ldrh	r2, [r3, #0]
 80089b0:	68bb      	ldr	r3, [r7, #8]
 80089b2:	815a      	strh	r2, [r3, #10]
 80089b4:	e017      	b.n	80089e6 <USBH_MSC_InterfaceInit+0x1ae>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 80089b6:	7bfa      	ldrb	r2, [r7, #15]
 80089b8:	6879      	ldr	r1, [r7, #4]
 80089ba:	4613      	mov	r3, r2
 80089bc:	019b      	lsls	r3, r3, #6
 80089be:	4413      	add	r3, r2
 80089c0:	005b      	lsls	r3, r3, #1
 80089c2:	440b      	add	r3, r1
 80089c4:	f603 1354 	addw	r3, r3, #2388	; 0x954
 80089c8:	781a      	ldrb	r2, [r3, #0]
 80089ca:	68bb      	ldr	r3, [r7, #8]
 80089cc:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80089ce:	7bfa      	ldrb	r2, [r7, #15]
 80089d0:	6879      	ldr	r1, [r7, #4]
 80089d2:	4613      	mov	r3, r2
 80089d4:	019b      	lsls	r3, r3, #6
 80089d6:	4413      	add	r3, r2
 80089d8:	005b      	lsls	r3, r3, #1
 80089da:	440b      	add	r3, r1
 80089dc:	f603 1356 	addw	r3, r3, #2390	; 0x956
 80089e0:	881a      	ldrh	r2, [r3, #0]
 80089e2:	68bb      	ldr	r3, [r7, #8]
 80089e4:	811a      	strh	r2, [r3, #8]
  }

  MSC_Handle->state = MSC_INIT;
 80089e6:	68bb      	ldr	r3, [r7, #8]
 80089e8:	2200      	movs	r2, #0
 80089ea:	731a      	strb	r2, [r3, #12]
  MSC_Handle->error = MSC_OK;
 80089ec:	68bb      	ldr	r3, [r7, #8]
 80089ee:	2200      	movs	r2, #0
 80089f0:	735a      	strb	r2, [r3, #13]
  MSC_Handle->req_state = MSC_REQ_IDLE;
 80089f2:	68bb      	ldr	r3, [r7, #8]
 80089f4:	2200      	movs	r2, #0
 80089f6:	739a      	strb	r2, [r3, #14]
  MSC_Handle->OutPipe = USBH_AllocPipe(phost, MSC_Handle->OutEp);
 80089f8:	68bb      	ldr	r3, [r7, #8]
 80089fa:	799b      	ldrb	r3, [r3, #6]
 80089fc:	4619      	mov	r1, r3
 80089fe:	6878      	ldr	r0, [r7, #4]
 8008a00:	f004 fef9 	bl	800d7f6 <USBH_AllocPipe>
 8008a04:	4603      	mov	r3, r0
 8008a06:	461a      	mov	r2, r3
 8008a08:	68bb      	ldr	r3, [r7, #8]
 8008a0a:	715a      	strb	r2, [r3, #5]
  MSC_Handle->InPipe = USBH_AllocPipe(phost, MSC_Handle->InEp);
 8008a0c:	68bb      	ldr	r3, [r7, #8]
 8008a0e:	79db      	ldrb	r3, [r3, #7]
 8008a10:	4619      	mov	r1, r3
 8008a12:	6878      	ldr	r0, [r7, #4]
 8008a14:	f004 feef 	bl	800d7f6 <USBH_AllocPipe>
 8008a18:	4603      	mov	r3, r0
 8008a1a:	461a      	mov	r2, r3
 8008a1c:	68bb      	ldr	r3, [r7, #8]
 8008a1e:	711a      	strb	r2, [r3, #4]

  USBH_MSC_BOT_Init(phost);
 8008a20:	6878      	ldr	r0, [r7, #4]
 8008a22:	f000 fcd7 	bl	80093d4 <USBH_MSC_BOT_Init>

  /* Open the new channels */
  USBH_OpenPipe(phost, MSC_Handle->OutPipe, MSC_Handle->OutEp,
 8008a26:	68bb      	ldr	r3, [r7, #8]
 8008a28:	7959      	ldrb	r1, [r3, #5]
 8008a2a:	68bb      	ldr	r3, [r7, #8]
 8008a2c:	7998      	ldrb	r0, [r3, #6]
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	f893 491c 	ldrb.w	r4, [r3, #2332]	; 0x91c
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	f893 391d 	ldrb.w	r3, [r3, #2333]	; 0x91d
 8008a3a:	68ba      	ldr	r2, [r7, #8]
 8008a3c:	8912      	ldrh	r2, [r2, #8]
 8008a3e:	9202      	str	r2, [sp, #8]
 8008a40:	2202      	movs	r2, #2
 8008a42:	9201      	str	r2, [sp, #4]
 8008a44:	9300      	str	r3, [sp, #0]
 8008a46:	4623      	mov	r3, r4
 8008a48:	4602      	mov	r2, r0
 8008a4a:	6878      	ldr	r0, [r7, #4]
 8008a4c:	f004 fea4 	bl	800d798 <USBH_OpenPipe>
                phost->device.address, phost->device.speed,
                USB_EP_TYPE_BULK, MSC_Handle->OutEpSize);

  USBH_OpenPipe(phost, MSC_Handle->InPipe, MSC_Handle->InEp,
 8008a50:	68bb      	ldr	r3, [r7, #8]
 8008a52:	7919      	ldrb	r1, [r3, #4]
 8008a54:	68bb      	ldr	r3, [r7, #8]
 8008a56:	79d8      	ldrb	r0, [r3, #7]
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	f893 491c 	ldrb.w	r4, [r3, #2332]	; 0x91c
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	f893 391d 	ldrb.w	r3, [r3, #2333]	; 0x91d
 8008a64:	68ba      	ldr	r2, [r7, #8]
 8008a66:	8952      	ldrh	r2, [r2, #10]
 8008a68:	9202      	str	r2, [sp, #8]
 8008a6a:	2202      	movs	r2, #2
 8008a6c:	9201      	str	r2, [sp, #4]
 8008a6e:	9300      	str	r3, [sp, #0]
 8008a70:	4623      	mov	r3, r4
 8008a72:	4602      	mov	r2, r0
 8008a74:	6878      	ldr	r0, [r7, #4]
 8008a76:	f004 fe8f 	bl	800d798 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                MSC_Handle->InEpSize);

  USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 8008a7a:	68bb      	ldr	r3, [r7, #8]
 8008a7c:	791b      	ldrb	r3, [r3, #4]
 8008a7e:	2200      	movs	r2, #0
 8008a80:	4619      	mov	r1, r3
 8008a82:	6878      	ldr	r0, [r7, #4]
 8008a84:	f005 f9d7 	bl	800de36 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 0U);
 8008a88:	68bb      	ldr	r3, [r7, #8]
 8008a8a:	795b      	ldrb	r3, [r3, #5]
 8008a8c:	2200      	movs	r2, #0
 8008a8e:	4619      	mov	r1, r3
 8008a90:	6878      	ldr	r0, [r7, #4]
 8008a92:	f005 f9d0 	bl	800de36 <USBH_LL_SetToggle>

  return USBH_OK;
 8008a96:	2300      	movs	r3, #0
}
 8008a98:	4618      	mov	r0, r3
 8008a9a:	3714      	adds	r7, #20
 8008a9c:	46bd      	mov	sp, r7
 8008a9e:	bd90      	pop	{r4, r7, pc}
 8008aa0:	0800f6a4 	.word	0x0800f6a4
 8008aa4:	0800f6b0 	.word	0x0800f6b0
 8008aa8:	0800f6d8 	.word	0x0800f6d8

08008aac <USBH_MSC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8008aac:	b580      	push	{r7, lr}
 8008aae:	b084      	sub	sp, #16
 8008ab0:	af00      	add	r7, sp, #0
 8008ab2:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008aba:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 8008abe:	69db      	ldr	r3, [r3, #28]
 8008ac0:	60fb      	str	r3, [r7, #12]

  if (MSC_Handle->OutPipe)
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	795b      	ldrb	r3, [r3, #5]
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d00e      	beq.n	8008ae8 <USBH_MSC_InterfaceDeInit+0x3c>
  {
    USBH_ClosePipe(phost, MSC_Handle->OutPipe);
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	795b      	ldrb	r3, [r3, #5]
 8008ace:	4619      	mov	r1, r3
 8008ad0:	6878      	ldr	r0, [r7, #4]
 8008ad2:	f004 fe80 	bl	800d7d6 <USBH_ClosePipe>
    USBH_FreePipe(phost, MSC_Handle->OutPipe);
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	795b      	ldrb	r3, [r3, #5]
 8008ada:	4619      	mov	r1, r3
 8008adc:	6878      	ldr	r0, [r7, #4]
 8008ade:	f004 feac 	bl	800d83a <USBH_FreePipe>
    MSC_Handle->OutPipe = 0U;     /* Reset the Channel as Free */
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	2200      	movs	r2, #0
 8008ae6:	715a      	strb	r2, [r3, #5]
  }

  if (MSC_Handle->InPipe)
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	791b      	ldrb	r3, [r3, #4]
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d00e      	beq.n	8008b0e <USBH_MSC_InterfaceDeInit+0x62>
  {
    USBH_ClosePipe(phost, MSC_Handle->InPipe);
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	791b      	ldrb	r3, [r3, #4]
 8008af4:	4619      	mov	r1, r3
 8008af6:	6878      	ldr	r0, [r7, #4]
 8008af8:	f004 fe6d 	bl	800d7d6 <USBH_ClosePipe>
    USBH_FreePipe(phost, MSC_Handle->InPipe);
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	791b      	ldrb	r3, [r3, #4]
 8008b00:	4619      	mov	r1, r3
 8008b02:	6878      	ldr	r0, [r7, #4]
 8008b04:	f004 fe99 	bl	800d83a <USBH_FreePipe>
    MSC_Handle->InPipe = 0U;     /* Reset the Channel as Free */
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	2200      	movs	r2, #0
 8008b0c:	711a      	strb	r2, [r3, #4]
  }

  if (phost->pActiveClass->pData)
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008b14:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 8008b18:	69db      	ldr	r3, [r3, #28]
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d00f      	beq.n	8008b3e <USBH_MSC_InterfaceDeInit+0x92>
  {
    USBH_free(phost->pActiveClass->pData);
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008b24:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 8008b28:	69db      	ldr	r3, [r3, #28]
 8008b2a:	4618      	mov	r0, r3
 8008b2c:	f005 fa52 	bl	800dfd4 <free>
    phost->pActiveClass->pData = 0U;
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008b36:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 8008b3a:	2200      	movs	r2, #0
 8008b3c:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8008b3e:	2300      	movs	r3, #0
}
 8008b40:	4618      	mov	r0, r3
 8008b42:	3710      	adds	r7, #16
 8008b44:	46bd      	mov	sp, r7
 8008b46:	bd80      	pop	{r7, pc}

08008b48 <USBH_MSC_ClassRequest>:
  *         for MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8008b48:	b580      	push	{r7, lr}
 8008b4a:	b084      	sub	sp, #16
 8008b4c:	af00      	add	r7, sp, #0
 8008b4e:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008b56:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 8008b5a:	69db      	ldr	r3, [r3, #28]
 8008b5c:	60bb      	str	r3, [r7, #8]
  USBH_StatusTypeDef status = USBH_BUSY;
 8008b5e:	2301      	movs	r3, #1
 8008b60:	73fb      	strb	r3, [r7, #15]
  uint8_t i;

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->req_state)
 8008b62:	68bb      	ldr	r3, [r7, #8]
 8008b64:	7b9b      	ldrb	r3, [r3, #14]
 8008b66:	2b03      	cmp	r3, #3
 8008b68:	d04b      	beq.n	8008c02 <USBH_MSC_ClassRequest+0xba>
 8008b6a:	2b03      	cmp	r3, #3
 8008b6c:	dc55      	bgt.n	8008c1a <USBH_MSC_ClassRequest+0xd2>
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d001      	beq.n	8008b76 <USBH_MSC_ClassRequest+0x2e>
 8008b72:	2b02      	cmp	r3, #2
 8008b74:	d151      	bne.n	8008c1a <USBH_MSC_ClassRequest+0xd2>
  {
    case MSC_REQ_IDLE:
    case MSC_REQ_GET_MAX_LUN:
      /* Issue GetMaxLUN request */
      status = USBH_MSC_BOT_REQ_GetMaxLUN(phost, (uint8_t *)&MSC_Handle->max_lun);
 8008b76:	68bb      	ldr	r3, [r7, #8]
 8008b78:	4619      	mov	r1, r3
 8008b7a:	6878      	ldr	r0, [r7, #4]
 8008b7c:	f000 fc0b 	bl	8009396 <USBH_MSC_BOT_REQ_GetMaxLUN>
 8008b80:	4603      	mov	r3, r0
 8008b82:	73fb      	strb	r3, [r7, #15]

      /* When devices do not support the GetMaxLun request, this should
         be considred as only one logical unit is supported */
      if (status == USBH_NOT_SUPPORTED)
 8008b84:	7bfb      	ldrb	r3, [r7, #15]
 8008b86:	2b03      	cmp	r3, #3
 8008b88:	d104      	bne.n	8008b94 <USBH_MSC_ClassRequest+0x4c>
      {
        MSC_Handle->max_lun = 0U;
 8008b8a:	68bb      	ldr	r3, [r7, #8]
 8008b8c:	2200      	movs	r2, #0
 8008b8e:	601a      	str	r2, [r3, #0]
        status = USBH_OK;
 8008b90:	2300      	movs	r3, #0
 8008b92:	73fb      	strb	r3, [r7, #15]
      }

      if (status == USBH_OK)
 8008b94:	7bfb      	ldrb	r3, [r7, #15]
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d141      	bne.n	8008c1e <USBH_MSC_ClassRequest+0xd6>
      {
        MSC_Handle->max_lun = ((MSC_Handle->max_lun & 0xFFU) > MAX_SUPPORTED_LUN) ? MAX_SUPPORTED_LUN : ((MSC_Handle->max_lun & 0xFFU) + 1U);
 8008b9a:	68bb      	ldr	r3, [r7, #8]
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	b2db      	uxtb	r3, r3
 8008ba0:	2b02      	cmp	r3, #2
 8008ba2:	d804      	bhi.n	8008bae <USBH_MSC_ClassRequest+0x66>
 8008ba4:	68bb      	ldr	r3, [r7, #8]
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	b2db      	uxtb	r3, r3
 8008baa:	3301      	adds	r3, #1
 8008bac:	e000      	b.n	8008bb0 <USBH_MSC_ClassRequest+0x68>
 8008bae:	2302      	movs	r3, #2
 8008bb0:	68ba      	ldr	r2, [r7, #8]
 8008bb2:	6013      	str	r3, [r2, #0]
        USBH_UsrLog("Number of supported LUN: %lu", MSC_Handle->max_lun);
 8008bb4:	68bb      	ldr	r3, [r7, #8]
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	4619      	mov	r1, r3
 8008bba:	481d      	ldr	r0, [pc, #116]	; (8008c30 <USBH_MSC_ClassRequest+0xe8>)
 8008bbc:	f005 fdf2 	bl	800e7a4 <iprintf>
 8008bc0:	200a      	movs	r0, #10
 8008bc2:	f005 fe07 	bl	800e7d4 <putchar>

        for (i = 0U; i < MSC_Handle->max_lun; i++)
 8008bc6:	2300      	movs	r3, #0
 8008bc8:	73bb      	strb	r3, [r7, #14]
 8008bca:	e014      	b.n	8008bf6 <USBH_MSC_ClassRequest+0xae>
        {
          MSC_Handle->unit[i].prev_ready_state = USBH_FAIL;
 8008bcc:	7bbb      	ldrb	r3, [r7, #14]
 8008bce:	68ba      	ldr	r2, [r7, #8]
 8008bd0:	2134      	movs	r1, #52	; 0x34
 8008bd2:	fb01 f303 	mul.w	r3, r1, r3
 8008bd6:	4413      	add	r3, r2
 8008bd8:	3392      	adds	r3, #146	; 0x92
 8008bda:	2202      	movs	r2, #2
 8008bdc:	701a      	strb	r2, [r3, #0]
          MSC_Handle->unit[i].state_changed = 0U;
 8008bde:	7bbb      	ldrb	r3, [r7, #14]
 8008be0:	68ba      	ldr	r2, [r7, #8]
 8008be2:	2134      	movs	r1, #52	; 0x34
 8008be4:	fb01 f303 	mul.w	r3, r1, r3
 8008be8:	4413      	add	r3, r2
 8008bea:	33c1      	adds	r3, #193	; 0xc1
 8008bec:	2200      	movs	r2, #0
 8008bee:	701a      	strb	r2, [r3, #0]
        for (i = 0U; i < MSC_Handle->max_lun; i++)
 8008bf0:	7bbb      	ldrb	r3, [r7, #14]
 8008bf2:	3301      	adds	r3, #1
 8008bf4:	73bb      	strb	r3, [r7, #14]
 8008bf6:	7bba      	ldrb	r2, [r7, #14]
 8008bf8:	68bb      	ldr	r3, [r7, #8]
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	429a      	cmp	r2, r3
 8008bfe:	d3e5      	bcc.n	8008bcc <USBH_MSC_ClassRequest+0x84>
        }
      }
      break;
 8008c00:	e00d      	b.n	8008c1e <USBH_MSC_ClassRequest+0xd6>

    case MSC_REQ_ERROR :
      /* a Clear Feature should be issued here */
      if (USBH_ClrFeature(phost, 0x00U) == USBH_OK)
 8008c02:	2100      	movs	r1, #0
 8008c04:	6878      	ldr	r0, [r7, #4]
 8008c06:	f004 f946 	bl	800ce96 <USBH_ClrFeature>
 8008c0a:	4603      	mov	r3, r0
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d108      	bne.n	8008c22 <USBH_MSC_ClassRequest+0xda>
      {
        MSC_Handle->req_state = MSC_Handle->prev_req_state;
 8008c10:	68bb      	ldr	r3, [r7, #8]
 8008c12:	7bda      	ldrb	r2, [r3, #15]
 8008c14:	68bb      	ldr	r3, [r7, #8]
 8008c16:	739a      	strb	r2, [r3, #14]
      }
      break;
 8008c18:	e003      	b.n	8008c22 <USBH_MSC_ClassRequest+0xda>

    default:
      break;
 8008c1a:	bf00      	nop
 8008c1c:	e002      	b.n	8008c24 <USBH_MSC_ClassRequest+0xdc>
      break;
 8008c1e:	bf00      	nop
 8008c20:	e000      	b.n	8008c24 <USBH_MSC_ClassRequest+0xdc>
      break;
 8008c22:	bf00      	nop
  }

  return status;
 8008c24:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c26:	4618      	mov	r0, r3
 8008c28:	3710      	adds	r7, #16
 8008c2a:	46bd      	mov	sp, r7
 8008c2c:	bd80      	pop	{r7, pc}
 8008c2e:	bf00      	nop
 8008c30:	0800f700 	.word	0x0800f700

08008c34 <USBH_MSC_Process>:
  *         The function is for managing state machine for MSC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_Process(USBH_HandleTypeDef *phost)
{
 8008c34:	b580      	push	{r7, lr}
 8008c36:	b086      	sub	sp, #24
 8008c38:	af00      	add	r7, sp, #0
 8008c3a:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008c42:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 8008c46:	69db      	ldr	r3, [r3, #28]
 8008c48:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY;
 8008c4a:	2301      	movs	r3, #1
 8008c4c:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY;
 8008c4e:	2301      	movs	r3, #1
 8008c50:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ready_status = USBH_BUSY;
 8008c52:	2301      	movs	r3, #1
 8008c54:	73bb      	strb	r3, [r7, #14]

  switch (MSC_Handle->state)
 8008c56:	693b      	ldr	r3, [r7, #16]
 8008c58:	7b1b      	ldrb	r3, [r3, #12]
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	d003      	beq.n	8008c66 <USBH_MSC_Process+0x32>
 8008c5e:	2b01      	cmp	r3, #1
 8008c60:	f000 835b 	beq.w	800931a <USBH_MSC_Process+0x6e6>
    case MSC_IDLE:
      error = USBH_OK;
      break;

    default:
      break;
 8008c64:	e35c      	b.n	8009320 <USBH_MSC_Process+0x6ec>
      if (MSC_Handle->current_lun < MSC_Handle->max_lun)
 8008c66:	693b      	ldr	r3, [r7, #16]
 8008c68:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008c6c:	461a      	mov	r2, r3
 8008c6e:	693b      	ldr	r3, [r7, #16]
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	429a      	cmp	r2, r3
 8008c74:	f080 8337 	bcs.w	80092e6 <USBH_MSC_Process+0x6b2>
        MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 8008c78:	693b      	ldr	r3, [r7, #16]
 8008c7a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008c7e:	4619      	mov	r1, r3
 8008c80:	693a      	ldr	r2, [r7, #16]
 8008c82:	2334      	movs	r3, #52	; 0x34
 8008c84:	fb01 f303 	mul.w	r3, r1, r3
 8008c88:	4413      	add	r3, r2
 8008c8a:	3391      	adds	r3, #145	; 0x91
 8008c8c:	2201      	movs	r2, #1
 8008c8e:	701a      	strb	r2, [r3, #0]
        switch (MSC_Handle->unit[MSC_Handle->current_lun].state)
 8008c90:	693b      	ldr	r3, [r7, #16]
 8008c92:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008c96:	4619      	mov	r1, r3
 8008c98:	693a      	ldr	r2, [r7, #16]
 8008c9a:	2334      	movs	r3, #52	; 0x34
 8008c9c:	fb01 f303 	mul.w	r3, r1, r3
 8008ca0:	4413      	add	r3, r2
 8008ca2:	3390      	adds	r3, #144	; 0x90
 8008ca4:	781b      	ldrb	r3, [r3, #0]
 8008ca6:	2b08      	cmp	r3, #8
 8008ca8:	f200 832d 	bhi.w	8009306 <USBH_MSC_Process+0x6d2>
 8008cac:	a201      	add	r2, pc, #4	; (adr r2, 8008cb4 <USBH_MSC_Process+0x80>)
 8008cae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008cb2:	bf00      	nop
 8008cb4:	08008cd9 	.word	0x08008cd9
 8008cb8:	08009307 	.word	0x08009307
 8008cbc:	08008e25 	.word	0x08008e25
 8008cc0:	08008fd9 	.word	0x08008fd9
 8008cc4:	08008d17 	.word	0x08008d17
 8008cc8:	08009145 	.word	0x08009145
 8008ccc:	08009307 	.word	0x08009307
 8008cd0:	08009307 	.word	0x08009307
 8008cd4:	080092d5 	.word	0x080092d5
            USBH_UsrLog("LUN #%d: ", MSC_Handle->current_lun);
 8008cd8:	693b      	ldr	r3, [r7, #16]
 8008cda:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008cde:	4619      	mov	r1, r3
 8008ce0:	48b7      	ldr	r0, [pc, #732]	; (8008fc0 <USBH_MSC_Process+0x38c>)
 8008ce2:	f005 fd5f 	bl	800e7a4 <iprintf>
 8008ce6:	200a      	movs	r0, #10
 8008ce8:	f005 fd74 	bl	800e7d4 <putchar>
            MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_INQUIRY;
 8008cec:	693b      	ldr	r3, [r7, #16]
 8008cee:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008cf2:	4619      	mov	r1, r3
 8008cf4:	693a      	ldr	r2, [r7, #16]
 8008cf6:	2334      	movs	r3, #52	; 0x34
 8008cf8:	fb01 f303 	mul.w	r3, r1, r3
 8008cfc:	4413      	add	r3, r2
 8008cfe:	3390      	adds	r3, #144	; 0x90
 8008d00:	2204      	movs	r2, #4
 8008d02:	701a      	strb	r2, [r3, #0]
            MSC_Handle->timer = phost->Timer;
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008d0a:	f8d3 2164 	ldr.w	r2, [r3, #356]	; 0x164
 8008d0e:	693b      	ldr	r3, [r7, #16]
 8008d10:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
            break;
 8008d14:	e300      	b.n	8009318 <USBH_MSC_Process+0x6e4>
            scsi_status = USBH_MSC_SCSI_Inquiry(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].inquiry);
 8008d16:	693b      	ldr	r3, [r7, #16]
 8008d18:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008d1c:	b2d9      	uxtb	r1, r3
 8008d1e:	693b      	ldr	r3, [r7, #16]
 8008d20:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008d24:	461a      	mov	r2, r3
 8008d26:	2334      	movs	r3, #52	; 0x34
 8008d28:	fb02 f303 	mul.w	r3, r2, r3
 8008d2c:	3398      	adds	r3, #152	; 0x98
 8008d2e:	693a      	ldr	r2, [r7, #16]
 8008d30:	4413      	add	r3, r2
 8008d32:	3307      	adds	r3, #7
 8008d34:	461a      	mov	r2, r3
 8008d36:	6878      	ldr	r0, [r7, #4]
 8008d38:	f000 fe76 	bl	8009a28 <USBH_MSC_SCSI_Inquiry>
 8008d3c:	4603      	mov	r3, r0
 8008d3e:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 8008d40:	7bfb      	ldrb	r3, [r7, #15]
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d141      	bne.n	8008dca <USBH_MSC_Process+0x196>
              USBH_UsrLog("Inquiry Vendor  : %s", MSC_Handle->unit[MSC_Handle->current_lun].inquiry.vendor_id);
 8008d46:	693b      	ldr	r3, [r7, #16]
 8008d48:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008d4c:	461a      	mov	r2, r3
 8008d4e:	2334      	movs	r3, #52	; 0x34
 8008d50:	fb02 f303 	mul.w	r3, r2, r3
 8008d54:	3398      	adds	r3, #152	; 0x98
 8008d56:	693a      	ldr	r2, [r7, #16]
 8008d58:	4413      	add	r3, r2
 8008d5a:	330a      	adds	r3, #10
 8008d5c:	4619      	mov	r1, r3
 8008d5e:	4899      	ldr	r0, [pc, #612]	; (8008fc4 <USBH_MSC_Process+0x390>)
 8008d60:	f005 fd20 	bl	800e7a4 <iprintf>
 8008d64:	200a      	movs	r0, #10
 8008d66:	f005 fd35 	bl	800e7d4 <putchar>
              USBH_UsrLog("Inquiry Product : %s", MSC_Handle->unit[MSC_Handle->current_lun].inquiry.product_id);
 8008d6a:	693b      	ldr	r3, [r7, #16]
 8008d6c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008d70:	461a      	mov	r2, r3
 8008d72:	2334      	movs	r3, #52	; 0x34
 8008d74:	fb02 f303 	mul.w	r3, r2, r3
 8008d78:	33a0      	adds	r3, #160	; 0xa0
 8008d7a:	693a      	ldr	r2, [r7, #16]
 8008d7c:	4413      	add	r3, r2
 8008d7e:	330b      	adds	r3, #11
 8008d80:	4619      	mov	r1, r3
 8008d82:	4891      	ldr	r0, [pc, #580]	; (8008fc8 <USBH_MSC_Process+0x394>)
 8008d84:	f005 fd0e 	bl	800e7a4 <iprintf>
 8008d88:	200a      	movs	r0, #10
 8008d8a:	f005 fd23 	bl	800e7d4 <putchar>
              USBH_UsrLog("Inquiry Version : %s", MSC_Handle->unit[MSC_Handle->current_lun].inquiry.revision_id);
 8008d8e:	693b      	ldr	r3, [r7, #16]
 8008d90:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008d94:	461a      	mov	r2, r3
 8008d96:	2334      	movs	r3, #52	; 0x34
 8008d98:	fb02 f303 	mul.w	r3, r2, r3
 8008d9c:	33b0      	adds	r3, #176	; 0xb0
 8008d9e:	693a      	ldr	r2, [r7, #16]
 8008da0:	4413      	add	r3, r2
 8008da2:	330c      	adds	r3, #12
 8008da4:	4619      	mov	r1, r3
 8008da6:	4889      	ldr	r0, [pc, #548]	; (8008fcc <USBH_MSC_Process+0x398>)
 8008da8:	f005 fcfc 	bl	800e7a4 <iprintf>
 8008dac:	200a      	movs	r0, #10
 8008dae:	f005 fd11 	bl	800e7d4 <putchar>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 8008db2:	693b      	ldr	r3, [r7, #16]
 8008db4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008db8:	4619      	mov	r1, r3
 8008dba:	693a      	ldr	r2, [r7, #16]
 8008dbc:	2334      	movs	r3, #52	; 0x34
 8008dbe:	fb01 f303 	mul.w	r3, r1, r3
 8008dc2:	4413      	add	r3, r2
 8008dc4:	3390      	adds	r3, #144	; 0x90
 8008dc6:	2202      	movs	r2, #2
 8008dc8:	701a      	strb	r2, [r3, #0]
            if (scsi_status == USBH_FAIL)
 8008dca:	7bfb      	ldrb	r3, [r7, #15]
 8008dcc:	2b02      	cmp	r3, #2
 8008dce:	d10c      	bne.n	8008dea <USBH_MSC_Process+0x1b6>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 8008dd0:	693b      	ldr	r3, [r7, #16]
 8008dd2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008dd6:	4619      	mov	r1, r3
 8008dd8:	693a      	ldr	r2, [r7, #16]
 8008dda:	2334      	movs	r3, #52	; 0x34
 8008ddc:	fb01 f303 	mul.w	r3, r1, r3
 8008de0:	4413      	add	r3, r2
 8008de2:	3390      	adds	r3, #144	; 0x90
 8008de4:	2205      	movs	r2, #5
 8008de6:	701a      	strb	r2, [r3, #0]
            break;
 8008de8:	e28f      	b.n	800930a <USBH_MSC_Process+0x6d6>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 8008dea:	7bfb      	ldrb	r3, [r7, #15]
 8008dec:	2b04      	cmp	r3, #4
 8008dee:	f040 828c 	bne.w	800930a <USBH_MSC_Process+0x6d6>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8008df2:	693b      	ldr	r3, [r7, #16]
 8008df4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008df8:	4619      	mov	r1, r3
 8008dfa:	693a      	ldr	r2, [r7, #16]
 8008dfc:	2334      	movs	r3, #52	; 0x34
 8008dfe:	fb01 f303 	mul.w	r3, r1, r3
 8008e02:	4413      	add	r3, r2
 8008e04:	3390      	adds	r3, #144	; 0x90
 8008e06:	2201      	movs	r2, #1
 8008e08:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8008e0a:	693b      	ldr	r3, [r7, #16]
 8008e0c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008e10:	4619      	mov	r1, r3
 8008e12:	693a      	ldr	r2, [r7, #16]
 8008e14:	2334      	movs	r3, #52	; 0x34
 8008e16:	fb01 f303 	mul.w	r3, r1, r3
 8008e1a:	4413      	add	r3, r2
 8008e1c:	3391      	adds	r3, #145	; 0x91
 8008e1e:	2202      	movs	r2, #2
 8008e20:	701a      	strb	r2, [r3, #0]
            break;
 8008e22:	e272      	b.n	800930a <USBH_MSC_Process+0x6d6>
            ready_status = USBH_MSC_SCSI_TestUnitReady(phost, (uint8_t)MSC_Handle->current_lun);
 8008e24:	693b      	ldr	r3, [r7, #16]
 8008e26:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008e2a:	b2db      	uxtb	r3, r3
 8008e2c:	4619      	mov	r1, r3
 8008e2e:	6878      	ldr	r0, [r7, #4]
 8008e30:	f000 fd38 	bl	80098a4 <USBH_MSC_SCSI_TestUnitReady>
 8008e34:	4603      	mov	r3, r0
 8008e36:	73bb      	strb	r3, [r7, #14]
            if (ready_status == USBH_OK)
 8008e38:	7bbb      	ldrb	r3, [r7, #14]
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d14f      	bne.n	8008ede <USBH_MSC_Process+0x2aa>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_OK)
 8008e3e:	693b      	ldr	r3, [r7, #16]
 8008e40:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008e44:	4619      	mov	r1, r3
 8008e46:	693a      	ldr	r2, [r7, #16]
 8008e48:	2334      	movs	r3, #52	; 0x34
 8008e4a:	fb01 f303 	mul.w	r3, r1, r3
 8008e4e:	4413      	add	r3, r2
 8008e50:	3392      	adds	r3, #146	; 0x92
 8008e52:	781b      	ldrb	r3, [r3, #0]
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	d012      	beq.n	8008e7e <USBH_MSC_Process+0x24a>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 8008e58:	693b      	ldr	r3, [r7, #16]
 8008e5a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008e5e:	4619      	mov	r1, r3
 8008e60:	693a      	ldr	r2, [r7, #16]
 8008e62:	2334      	movs	r3, #52	; 0x34
 8008e64:	fb01 f303 	mul.w	r3, r1, r3
 8008e68:	4413      	add	r3, r2
 8008e6a:	33c1      	adds	r3, #193	; 0xc1
 8008e6c:	2201      	movs	r2, #1
 8008e6e:	701a      	strb	r2, [r3, #0]
                USBH_UsrLog("MSC Device ready");
 8008e70:	4857      	ldr	r0, [pc, #348]	; (8008fd0 <USBH_MSC_Process+0x39c>)
 8008e72:	f005 fc97 	bl	800e7a4 <iprintf>
 8008e76:	200a      	movs	r0, #10
 8008e78:	f005 fcac 	bl	800e7d4 <putchar>
 8008e7c:	e00b      	b.n	8008e96 <USBH_MSC_Process+0x262>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 8008e7e:	693b      	ldr	r3, [r7, #16]
 8008e80:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008e84:	4619      	mov	r1, r3
 8008e86:	693a      	ldr	r2, [r7, #16]
 8008e88:	2334      	movs	r3, #52	; 0x34
 8008e8a:	fb01 f303 	mul.w	r3, r1, r3
 8008e8e:	4413      	add	r3, r2
 8008e90:	33c1      	adds	r3, #193	; 0xc1
 8008e92:	2200      	movs	r2, #0
 8008e94:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_CAPACITY10;
 8008e96:	693b      	ldr	r3, [r7, #16]
 8008e98:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008e9c:	4619      	mov	r1, r3
 8008e9e:	693a      	ldr	r2, [r7, #16]
 8008ea0:	2334      	movs	r3, #52	; 0x34
 8008ea2:	fb01 f303 	mul.w	r3, r1, r3
 8008ea6:	4413      	add	r3, r2
 8008ea8:	3390      	adds	r3, #144	; 0x90
 8008eaa:	2203      	movs	r2, #3
 8008eac:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 8008eae:	693b      	ldr	r3, [r7, #16]
 8008eb0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008eb4:	4619      	mov	r1, r3
 8008eb6:	693a      	ldr	r2, [r7, #16]
 8008eb8:	2334      	movs	r3, #52	; 0x34
 8008eba:	fb01 f303 	mul.w	r3, r1, r3
 8008ebe:	4413      	add	r3, r2
 8008ec0:	3391      	adds	r3, #145	; 0x91
 8008ec2:	2200      	movs	r2, #0
 8008ec4:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_OK;
 8008ec6:	693b      	ldr	r3, [r7, #16]
 8008ec8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008ecc:	4619      	mov	r1, r3
 8008ece:	693a      	ldr	r2, [r7, #16]
 8008ed0:	2334      	movs	r3, #52	; 0x34
 8008ed2:	fb01 f303 	mul.w	r3, r1, r3
 8008ed6:	4413      	add	r3, r2
 8008ed8:	3392      	adds	r3, #146	; 0x92
 8008eda:	2200      	movs	r2, #0
 8008edc:	701a      	strb	r2, [r3, #0]
            if (ready_status == USBH_FAIL)
 8008ede:	7bbb      	ldrb	r3, [r7, #14]
 8008ee0:	2b02      	cmp	r3, #2
 8008ee2:	d150      	bne.n	8008f86 <USBH_MSC_Process+0x352>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_FAIL)
 8008ee4:	693b      	ldr	r3, [r7, #16]
 8008ee6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008eea:	4619      	mov	r1, r3
 8008eec:	693a      	ldr	r2, [r7, #16]
 8008eee:	2334      	movs	r3, #52	; 0x34
 8008ef0:	fb01 f303 	mul.w	r3, r1, r3
 8008ef4:	4413      	add	r3, r2
 8008ef6:	3392      	adds	r3, #146	; 0x92
 8008ef8:	781b      	ldrb	r3, [r3, #0]
 8008efa:	2b02      	cmp	r3, #2
 8008efc:	d012      	beq.n	8008f24 <USBH_MSC_Process+0x2f0>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 8008efe:	693b      	ldr	r3, [r7, #16]
 8008f00:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008f04:	4619      	mov	r1, r3
 8008f06:	693a      	ldr	r2, [r7, #16]
 8008f08:	2334      	movs	r3, #52	; 0x34
 8008f0a:	fb01 f303 	mul.w	r3, r1, r3
 8008f0e:	4413      	add	r3, r2
 8008f10:	33c1      	adds	r3, #193	; 0xc1
 8008f12:	2201      	movs	r2, #1
 8008f14:	701a      	strb	r2, [r3, #0]
                USBH_UsrLog("MSC Device NOT ready");
 8008f16:	482f      	ldr	r0, [pc, #188]	; (8008fd4 <USBH_MSC_Process+0x3a0>)
 8008f18:	f005 fc44 	bl	800e7a4 <iprintf>
 8008f1c:	200a      	movs	r0, #10
 8008f1e:	f005 fc59 	bl	800e7d4 <putchar>
 8008f22:	e00b      	b.n	8008f3c <USBH_MSC_Process+0x308>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 8008f24:	693b      	ldr	r3, [r7, #16]
 8008f26:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008f2a:	4619      	mov	r1, r3
 8008f2c:	693a      	ldr	r2, [r7, #16]
 8008f2e:	2334      	movs	r3, #52	; 0x34
 8008f30:	fb01 f303 	mul.w	r3, r1, r3
 8008f34:	4413      	add	r3, r2
 8008f36:	33c1      	adds	r3, #193	; 0xc1
 8008f38:	2200      	movs	r2, #0
 8008f3a:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 8008f3c:	693b      	ldr	r3, [r7, #16]
 8008f3e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008f42:	4619      	mov	r1, r3
 8008f44:	693a      	ldr	r2, [r7, #16]
 8008f46:	2334      	movs	r3, #52	; 0x34
 8008f48:	fb01 f303 	mul.w	r3, r1, r3
 8008f4c:	4413      	add	r3, r2
 8008f4e:	3390      	adds	r3, #144	; 0x90
 8008f50:	2205      	movs	r2, #5
 8008f52:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 8008f54:	693b      	ldr	r3, [r7, #16]
 8008f56:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008f5a:	4619      	mov	r1, r3
 8008f5c:	693a      	ldr	r2, [r7, #16]
 8008f5e:	2334      	movs	r3, #52	; 0x34
 8008f60:	fb01 f303 	mul.w	r3, r1, r3
 8008f64:	4413      	add	r3, r2
 8008f66:	3391      	adds	r3, #145	; 0x91
 8008f68:	2201      	movs	r2, #1
 8008f6a:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_FAIL;
 8008f6c:	693b      	ldr	r3, [r7, #16]
 8008f6e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008f72:	4619      	mov	r1, r3
 8008f74:	693a      	ldr	r2, [r7, #16]
 8008f76:	2334      	movs	r3, #52	; 0x34
 8008f78:	fb01 f303 	mul.w	r3, r1, r3
 8008f7c:	4413      	add	r3, r2
 8008f7e:	3392      	adds	r3, #146	; 0x92
 8008f80:	2202      	movs	r2, #2
 8008f82:	701a      	strb	r2, [r3, #0]
            break;
 8008f84:	e1c3      	b.n	800930e <USBH_MSC_Process+0x6da>
              if (ready_status == USBH_UNRECOVERED_ERROR)
 8008f86:	7bbb      	ldrb	r3, [r7, #14]
 8008f88:	2b04      	cmp	r3, #4
 8008f8a:	f040 81c0 	bne.w	800930e <USBH_MSC_Process+0x6da>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8008f8e:	693b      	ldr	r3, [r7, #16]
 8008f90:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008f94:	4619      	mov	r1, r3
 8008f96:	693a      	ldr	r2, [r7, #16]
 8008f98:	2334      	movs	r3, #52	; 0x34
 8008f9a:	fb01 f303 	mul.w	r3, r1, r3
 8008f9e:	4413      	add	r3, r2
 8008fa0:	3390      	adds	r3, #144	; 0x90
 8008fa2:	2201      	movs	r2, #1
 8008fa4:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8008fa6:	693b      	ldr	r3, [r7, #16]
 8008fa8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008fac:	4619      	mov	r1, r3
 8008fae:	693a      	ldr	r2, [r7, #16]
 8008fb0:	2334      	movs	r3, #52	; 0x34
 8008fb2:	fb01 f303 	mul.w	r3, r1, r3
 8008fb6:	4413      	add	r3, r2
 8008fb8:	3391      	adds	r3, #145	; 0x91
 8008fba:	2202      	movs	r2, #2
 8008fbc:	701a      	strb	r2, [r3, #0]
            break;
 8008fbe:	e1a6      	b.n	800930e <USBH_MSC_Process+0x6da>
 8008fc0:	0800f720 	.word	0x0800f720
 8008fc4:	0800f72c 	.word	0x0800f72c
 8008fc8:	0800f744 	.word	0x0800f744
 8008fcc:	0800f75c 	.word	0x0800f75c
 8008fd0:	0800f774 	.word	0x0800f774
 8008fd4:	0800f788 	.word	0x0800f788
            scsi_status = USBH_MSC_SCSI_ReadCapacity(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].capacity) ;
 8008fd8:	693b      	ldr	r3, [r7, #16]
 8008fda:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008fde:	b2d9      	uxtb	r1, r3
 8008fe0:	693b      	ldr	r3, [r7, #16]
 8008fe2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008fe6:	461a      	mov	r2, r3
 8008fe8:	2334      	movs	r3, #52	; 0x34
 8008fea:	fb02 f303 	mul.w	r3, r2, r3
 8008fee:	3390      	adds	r3, #144	; 0x90
 8008ff0:	693a      	ldr	r2, [r7, #16]
 8008ff2:	4413      	add	r3, r2
 8008ff4:	3304      	adds	r3, #4
 8008ff6:	461a      	mov	r2, r3
 8008ff8:	6878      	ldr	r0, [r7, #4]
 8008ffa:	f000 fc98 	bl	800992e <USBH_MSC_SCSI_ReadCapacity>
 8008ffe:	4603      	mov	r3, r0
 8009000:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 8009002:	7bfb      	ldrb	r3, [r7, #15]
 8009004:	2b00      	cmp	r3, #0
 8009006:	d170      	bne.n	80090ea <USBH_MSC_Process+0x4b6>
              if (MSC_Handle->unit[MSC_Handle->current_lun].state_changed == 1U)
 8009008:	693b      	ldr	r3, [r7, #16]
 800900a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800900e:	4619      	mov	r1, r3
 8009010:	693a      	ldr	r2, [r7, #16]
 8009012:	2334      	movs	r3, #52	; 0x34
 8009014:	fb01 f303 	mul.w	r3, r1, r3
 8009018:	4413      	add	r3, r2
 800901a:	33c1      	adds	r3, #193	; 0xc1
 800901c:	781b      	ldrb	r3, [r3, #0]
 800901e:	2b01      	cmp	r3, #1
 8009020:	d142      	bne.n	80090a8 <USBH_MSC_Process+0x474>
                USBH_UsrLog("MSC Device capacity : %lu Bytes", \
 8009022:	693b      	ldr	r3, [r7, #16]
 8009024:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009028:	4619      	mov	r1, r3
 800902a:	693a      	ldr	r2, [r7, #16]
 800902c:	2334      	movs	r3, #52	; 0x34
 800902e:	fb01 f303 	mul.w	r3, r1, r3
 8009032:	4413      	add	r3, r2
 8009034:	3394      	adds	r3, #148	; 0x94
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	693a      	ldr	r2, [r7, #16]
 800903a:	f8b2 20f8 	ldrh.w	r2, [r2, #248]	; 0xf8
 800903e:	4610      	mov	r0, r2
 8009040:	6939      	ldr	r1, [r7, #16]
 8009042:	2234      	movs	r2, #52	; 0x34
 8009044:	fb00 f202 	mul.w	r2, r0, r2
 8009048:	440a      	add	r2, r1
 800904a:	3298      	adds	r2, #152	; 0x98
 800904c:	8812      	ldrh	r2, [r2, #0]
 800904e:	fb02 f303 	mul.w	r3, r2, r3
 8009052:	4619      	mov	r1, r3
 8009054:	48b5      	ldr	r0, [pc, #724]	; (800932c <USBH_MSC_Process+0x6f8>)
 8009056:	f005 fba5 	bl	800e7a4 <iprintf>
 800905a:	200a      	movs	r0, #10
 800905c:	f005 fbba 	bl	800e7d4 <putchar>
                USBH_UsrLog("Block number : %lu", (int32_t)(MSC_Handle->unit[MSC_Handle->current_lun].capacity.block_nbr));
 8009060:	693b      	ldr	r3, [r7, #16]
 8009062:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009066:	4619      	mov	r1, r3
 8009068:	693a      	ldr	r2, [r7, #16]
 800906a:	2334      	movs	r3, #52	; 0x34
 800906c:	fb01 f303 	mul.w	r3, r1, r3
 8009070:	4413      	add	r3, r2
 8009072:	3394      	adds	r3, #148	; 0x94
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	4619      	mov	r1, r3
 8009078:	48ad      	ldr	r0, [pc, #692]	; (8009330 <USBH_MSC_Process+0x6fc>)
 800907a:	f005 fb93 	bl	800e7a4 <iprintf>
 800907e:	200a      	movs	r0, #10
 8009080:	f005 fba8 	bl	800e7d4 <putchar>
                USBH_UsrLog("Block Size   : %lu", (int32_t)(MSC_Handle->unit[MSC_Handle->current_lun].capacity.block_size));
 8009084:	693b      	ldr	r3, [r7, #16]
 8009086:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800908a:	4619      	mov	r1, r3
 800908c:	693a      	ldr	r2, [r7, #16]
 800908e:	2334      	movs	r3, #52	; 0x34
 8009090:	fb01 f303 	mul.w	r3, r1, r3
 8009094:	4413      	add	r3, r2
 8009096:	3398      	adds	r3, #152	; 0x98
 8009098:	881b      	ldrh	r3, [r3, #0]
 800909a:	4619      	mov	r1, r3
 800909c:	48a5      	ldr	r0, [pc, #660]	; (8009334 <USBH_MSC_Process+0x700>)
 800909e:	f005 fb81 	bl	800e7a4 <iprintf>
 80090a2:	200a      	movs	r0, #10
 80090a4:	f005 fb96 	bl	800e7d4 <putchar>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 80090a8:	693b      	ldr	r3, [r7, #16]
 80090aa:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80090ae:	4619      	mov	r1, r3
 80090b0:	693a      	ldr	r2, [r7, #16]
 80090b2:	2334      	movs	r3, #52	; 0x34
 80090b4:	fb01 f303 	mul.w	r3, r1, r3
 80090b8:	4413      	add	r3, r2
 80090ba:	3390      	adds	r3, #144	; 0x90
 80090bc:	2201      	movs	r2, #1
 80090be:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 80090c0:	693b      	ldr	r3, [r7, #16]
 80090c2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80090c6:	4619      	mov	r1, r3
 80090c8:	693a      	ldr	r2, [r7, #16]
 80090ca:	2334      	movs	r3, #52	; 0x34
 80090cc:	fb01 f303 	mul.w	r3, r1, r3
 80090d0:	4413      	add	r3, r2
 80090d2:	3391      	adds	r3, #145	; 0x91
 80090d4:	2200      	movs	r2, #0
 80090d6:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 80090d8:	693b      	ldr	r3, [r7, #16]
 80090da:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80090de:	3301      	adds	r3, #1
 80090e0:	b29a      	uxth	r2, r3
 80090e2:	693b      	ldr	r3, [r7, #16]
 80090e4:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 80090e8:	e113      	b.n	8009312 <USBH_MSC_Process+0x6de>
            else if (scsi_status == USBH_FAIL)
 80090ea:	7bfb      	ldrb	r3, [r7, #15]
 80090ec:	2b02      	cmp	r3, #2
 80090ee:	d10c      	bne.n	800910a <USBH_MSC_Process+0x4d6>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 80090f0:	693b      	ldr	r3, [r7, #16]
 80090f2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80090f6:	4619      	mov	r1, r3
 80090f8:	693a      	ldr	r2, [r7, #16]
 80090fa:	2334      	movs	r3, #52	; 0x34
 80090fc:	fb01 f303 	mul.w	r3, r1, r3
 8009100:	4413      	add	r3, r2
 8009102:	3390      	adds	r3, #144	; 0x90
 8009104:	2205      	movs	r2, #5
 8009106:	701a      	strb	r2, [r3, #0]
            break;
 8009108:	e103      	b.n	8009312 <USBH_MSC_Process+0x6de>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 800910a:	7bfb      	ldrb	r3, [r7, #15]
 800910c:	2b04      	cmp	r3, #4
 800910e:	f040 8100 	bne.w	8009312 <USBH_MSC_Process+0x6de>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8009112:	693b      	ldr	r3, [r7, #16]
 8009114:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009118:	4619      	mov	r1, r3
 800911a:	693a      	ldr	r2, [r7, #16]
 800911c:	2334      	movs	r3, #52	; 0x34
 800911e:	fb01 f303 	mul.w	r3, r1, r3
 8009122:	4413      	add	r3, r2
 8009124:	3390      	adds	r3, #144	; 0x90
 8009126:	2201      	movs	r2, #1
 8009128:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800912a:	693b      	ldr	r3, [r7, #16]
 800912c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009130:	4619      	mov	r1, r3
 8009132:	693a      	ldr	r2, [r7, #16]
 8009134:	2334      	movs	r3, #52	; 0x34
 8009136:	fb01 f303 	mul.w	r3, r1, r3
 800913a:	4413      	add	r3, r2
 800913c:	3391      	adds	r3, #145	; 0x91
 800913e:	2202      	movs	r2, #2
 8009140:	701a      	strb	r2, [r3, #0]
            break;
 8009142:	e0e6      	b.n	8009312 <USBH_MSC_Process+0x6de>
            scsi_status = USBH_MSC_SCSI_RequestSense(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].sense);
 8009144:	693b      	ldr	r3, [r7, #16]
 8009146:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800914a:	b2d9      	uxtb	r1, r3
 800914c:	693b      	ldr	r3, [r7, #16]
 800914e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009152:	461a      	mov	r2, r3
 8009154:	2334      	movs	r3, #52	; 0x34
 8009156:	fb02 f303 	mul.w	r3, r2, r3
 800915a:	3398      	adds	r3, #152	; 0x98
 800915c:	693a      	ldr	r2, [r7, #16]
 800915e:	4413      	add	r3, r2
 8009160:	3304      	adds	r3, #4
 8009162:	461a      	mov	r2, r3
 8009164:	6878      	ldr	r0, [r7, #4]
 8009166:	f000 fd06 	bl	8009b76 <USBH_MSC_SCSI_RequestSense>
 800916a:	4603      	mov	r3, r0
 800916c:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 800916e:	7bfb      	ldrb	r3, [r7, #15]
 8009170:	2b00      	cmp	r3, #0
 8009172:	d17d      	bne.n	8009270 <USBH_MSC_Process+0x63c>
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 8009174:	693b      	ldr	r3, [r7, #16]
 8009176:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800917a:	4619      	mov	r1, r3
 800917c:	693a      	ldr	r2, [r7, #16]
 800917e:	2334      	movs	r3, #52	; 0x34
 8009180:	fb01 f303 	mul.w	r3, r1, r3
 8009184:	4413      	add	r3, r2
 8009186:	339c      	adds	r3, #156	; 0x9c
 8009188:	781b      	ldrb	r3, [r3, #0]
 800918a:	2b06      	cmp	r3, #6
 800918c:	d00c      	beq.n	80091a8 <USBH_MSC_Process+0x574>
                  (MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_NOT_READY))
 800918e:	693b      	ldr	r3, [r7, #16]
 8009190:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009194:	4619      	mov	r1, r3
 8009196:	693a      	ldr	r2, [r7, #16]
 8009198:	2334      	movs	r3, #52	; 0x34
 800919a:	fb01 f303 	mul.w	r3, r1, r3
 800919e:	4413      	add	r3, r2
 80091a0:	339c      	adds	r3, #156	; 0x9c
 80091a2:	781b      	ldrb	r3, [r3, #0]
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 80091a4:	2b02      	cmp	r3, #2
 80091a6:	d119      	bne.n	80091dc <USBH_MSC_Process+0x5a8>
                if ((phost->Timer - MSC_Handle->timer) < 10000U)
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80091ae:	f8d3 2164 	ldr.w	r2, [r3, #356]	; 0x164
 80091b2:	693b      	ldr	r3, [r7, #16]
 80091b4:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 80091b8:	1ad3      	subs	r3, r2, r3
 80091ba:	f242 720f 	movw	r2, #9999	; 0x270f
 80091be:	4293      	cmp	r3, r2
 80091c0:	d80c      	bhi.n	80091dc <USBH_MSC_Process+0x5a8>
                  MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 80091c2:	693b      	ldr	r3, [r7, #16]
 80091c4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80091c8:	4619      	mov	r1, r3
 80091ca:	693a      	ldr	r2, [r7, #16]
 80091cc:	2334      	movs	r3, #52	; 0x34
 80091ce:	fb01 f303 	mul.w	r3, r1, r3
 80091d2:	4413      	add	r3, r2
 80091d4:	3390      	adds	r3, #144	; 0x90
 80091d6:	2202      	movs	r2, #2
 80091d8:	701a      	strb	r2, [r3, #0]
                  break;
 80091da:	e09d      	b.n	8009318 <USBH_MSC_Process+0x6e4>
              USBH_UsrLog("Sense Key  : %x", MSC_Handle->unit[MSC_Handle->current_lun].sense.key);
 80091dc:	693b      	ldr	r3, [r7, #16]
 80091de:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80091e2:	4619      	mov	r1, r3
 80091e4:	693a      	ldr	r2, [r7, #16]
 80091e6:	2334      	movs	r3, #52	; 0x34
 80091e8:	fb01 f303 	mul.w	r3, r1, r3
 80091ec:	4413      	add	r3, r2
 80091ee:	339c      	adds	r3, #156	; 0x9c
 80091f0:	781b      	ldrb	r3, [r3, #0]
 80091f2:	4619      	mov	r1, r3
 80091f4:	4850      	ldr	r0, [pc, #320]	; (8009338 <USBH_MSC_Process+0x704>)
 80091f6:	f005 fad5 	bl	800e7a4 <iprintf>
 80091fa:	200a      	movs	r0, #10
 80091fc:	f005 faea 	bl	800e7d4 <putchar>
              USBH_UsrLog("Additional Sense Code : %x", MSC_Handle->unit[MSC_Handle->current_lun].sense.asc);
 8009200:	693b      	ldr	r3, [r7, #16]
 8009202:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009206:	4619      	mov	r1, r3
 8009208:	693a      	ldr	r2, [r7, #16]
 800920a:	2334      	movs	r3, #52	; 0x34
 800920c:	fb01 f303 	mul.w	r3, r1, r3
 8009210:	4413      	add	r3, r2
 8009212:	339d      	adds	r3, #157	; 0x9d
 8009214:	781b      	ldrb	r3, [r3, #0]
 8009216:	4619      	mov	r1, r3
 8009218:	4848      	ldr	r0, [pc, #288]	; (800933c <USBH_MSC_Process+0x708>)
 800921a:	f005 fac3 	bl	800e7a4 <iprintf>
 800921e:	200a      	movs	r0, #10
 8009220:	f005 fad8 	bl	800e7d4 <putchar>
              USBH_UsrLog("Additional Sense Code Qualifier: %x", MSC_Handle->unit[MSC_Handle->current_lun].sense.ascq);
 8009224:	693b      	ldr	r3, [r7, #16]
 8009226:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800922a:	4619      	mov	r1, r3
 800922c:	693a      	ldr	r2, [r7, #16]
 800922e:	2334      	movs	r3, #52	; 0x34
 8009230:	fb01 f303 	mul.w	r3, r1, r3
 8009234:	4413      	add	r3, r2
 8009236:	339e      	adds	r3, #158	; 0x9e
 8009238:	781b      	ldrb	r3, [r3, #0]
 800923a:	4619      	mov	r1, r3
 800923c:	4840      	ldr	r0, [pc, #256]	; (8009340 <USBH_MSC_Process+0x70c>)
 800923e:	f005 fab1 	bl	800e7a4 <iprintf>
 8009242:	200a      	movs	r0, #10
 8009244:	f005 fac6 	bl	800e7d4 <putchar>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8009248:	693b      	ldr	r3, [r7, #16]
 800924a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800924e:	4619      	mov	r1, r3
 8009250:	693a      	ldr	r2, [r7, #16]
 8009252:	2334      	movs	r3, #52	; 0x34
 8009254:	fb01 f303 	mul.w	r3, r1, r3
 8009258:	4413      	add	r3, r2
 800925a:	3390      	adds	r3, #144	; 0x90
 800925c:	2201      	movs	r2, #1
 800925e:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 8009260:	693b      	ldr	r3, [r7, #16]
 8009262:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009266:	3301      	adds	r3, #1
 8009268:	b29a      	uxth	r2, r3
 800926a:	693b      	ldr	r3, [r7, #16]
 800926c:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            if (scsi_status == USBH_FAIL)
 8009270:	7bfb      	ldrb	r3, [r7, #15]
 8009272:	2b02      	cmp	r3, #2
 8009274:	d112      	bne.n	800929c <USBH_MSC_Process+0x668>
              USBH_UsrLog("MSC Device NOT ready");
 8009276:	4833      	ldr	r0, [pc, #204]	; (8009344 <USBH_MSC_Process+0x710>)
 8009278:	f005 fa94 	bl	800e7a4 <iprintf>
 800927c:	200a      	movs	r0, #10
 800927e:	f005 faa9 	bl	800e7d4 <putchar>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_UNRECOVERED_ERROR;
 8009282:	693b      	ldr	r3, [r7, #16]
 8009284:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009288:	4619      	mov	r1, r3
 800928a:	693a      	ldr	r2, [r7, #16]
 800928c:	2334      	movs	r3, #52	; 0x34
 800928e:	fb01 f303 	mul.w	r3, r1, r3
 8009292:	4413      	add	r3, r2
 8009294:	3390      	adds	r3, #144	; 0x90
 8009296:	2208      	movs	r2, #8
 8009298:	701a      	strb	r2, [r3, #0]
            break;
 800929a:	e03c      	b.n	8009316 <USBH_MSC_Process+0x6e2>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 800929c:	7bfb      	ldrb	r3, [r7, #15]
 800929e:	2b04      	cmp	r3, #4
 80092a0:	d139      	bne.n	8009316 <USBH_MSC_Process+0x6e2>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 80092a2:	693b      	ldr	r3, [r7, #16]
 80092a4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80092a8:	4619      	mov	r1, r3
 80092aa:	693a      	ldr	r2, [r7, #16]
 80092ac:	2334      	movs	r3, #52	; 0x34
 80092ae:	fb01 f303 	mul.w	r3, r1, r3
 80092b2:	4413      	add	r3, r2
 80092b4:	3390      	adds	r3, #144	; 0x90
 80092b6:	2201      	movs	r2, #1
 80092b8:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 80092ba:	693b      	ldr	r3, [r7, #16]
 80092bc:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80092c0:	4619      	mov	r1, r3
 80092c2:	693a      	ldr	r2, [r7, #16]
 80092c4:	2334      	movs	r3, #52	; 0x34
 80092c6:	fb01 f303 	mul.w	r3, r1, r3
 80092ca:	4413      	add	r3, r2
 80092cc:	3391      	adds	r3, #145	; 0x91
 80092ce:	2202      	movs	r2, #2
 80092d0:	701a      	strb	r2, [r3, #0]
            break;
 80092d2:	e020      	b.n	8009316 <USBH_MSC_Process+0x6e2>
            MSC_Handle->current_lun++;
 80092d4:	693b      	ldr	r3, [r7, #16]
 80092d6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80092da:	3301      	adds	r3, #1
 80092dc:	b29a      	uxth	r2, r3
 80092de:	693b      	ldr	r3, [r7, #16]
 80092e0:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 80092e4:	e018      	b.n	8009318 <USBH_MSC_Process+0x6e4>
        MSC_Handle->current_lun = 0U;
 80092e6:	693b      	ldr	r3, [r7, #16]
 80092e8:	2200      	movs	r2, #0
 80092ea:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
        MSC_Handle->state = MSC_IDLE;
 80092ee:	693b      	ldr	r3, [r7, #16]
 80092f0:	2201      	movs	r2, #1
 80092f2:	731a      	strb	r2, [r3, #12]
        phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80092fa:	f8d3 3170 	ldr.w	r3, [r3, #368]	; 0x170
 80092fe:	2102      	movs	r1, #2
 8009300:	6878      	ldr	r0, [r7, #4]
 8009302:	4798      	blx	r3
      break;
 8009304:	e00c      	b.n	8009320 <USBH_MSC_Process+0x6ec>
            break;
 8009306:	bf00      	nop
 8009308:	e00a      	b.n	8009320 <USBH_MSC_Process+0x6ec>
            break;
 800930a:	bf00      	nop
 800930c:	e008      	b.n	8009320 <USBH_MSC_Process+0x6ec>
            break;
 800930e:	bf00      	nop
 8009310:	e006      	b.n	8009320 <USBH_MSC_Process+0x6ec>
            break;
 8009312:	bf00      	nop
 8009314:	e004      	b.n	8009320 <USBH_MSC_Process+0x6ec>
            break;
 8009316:	bf00      	nop
      break;
 8009318:	e002      	b.n	8009320 <USBH_MSC_Process+0x6ec>
      error = USBH_OK;
 800931a:	2300      	movs	r3, #0
 800931c:	75fb      	strb	r3, [r7, #23]
      break;
 800931e:	bf00      	nop
  }
  return error;
 8009320:	7dfb      	ldrb	r3, [r7, #23]
}
 8009322:	4618      	mov	r0, r3
 8009324:	3718      	adds	r7, #24
 8009326:	46bd      	mov	sp, r7
 8009328:	bd80      	pop	{r7, pc}
 800932a:	bf00      	nop
 800932c:	0800f7a0 	.word	0x0800f7a0
 8009330:	0800f7c0 	.word	0x0800f7c0
 8009334:	0800f7d4 	.word	0x0800f7d4
 8009338:	0800f7e8 	.word	0x0800f7e8
 800933c:	0800f7f8 	.word	0x0800f7f8
 8009340:	0800f814 	.word	0x0800f814
 8009344:	0800f788 	.word	0x0800f788

08009348 <USBH_MSC_SOFProcess>:
  *         The function is for SOF state
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8009348:	b480      	push	{r7}
 800934a:	b083      	sub	sp, #12
 800934c:	af00      	add	r7, sp, #0
 800934e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8009350:	2300      	movs	r3, #0
}
 8009352:	4618      	mov	r0, r3
 8009354:	370c      	adds	r7, #12
 8009356:	46bd      	mov	sp, r7
 8009358:	bc80      	pop	{r7}
 800935a:	4770      	bx	lr

0800935c <USBH_MSC_BOT_REQ_Reset>:
  *         The function the MSC BOT Reset request.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_Reset(USBH_HandleTypeDef *phost)
{
 800935c:	b580      	push	{r7, lr}
 800935e:	b082      	sub	sp, #8
 8009360:	af00      	add	r7, sp, #0
 8009362:	6078      	str	r0, [r7, #4]

  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	2221      	movs	r2, #33	; 0x21
 8009368:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_BOT_RESET;
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	22ff      	movs	r2, #255	; 0xff
 800936e:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	2200      	movs	r2, #0
 8009374:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	2200      	movs	r2, #0
 800937a:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 0U;
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	2200      	movs	r2, #0
 8009380:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, 0U, 0U);
 8009382:	2200      	movs	r2, #0
 8009384:	2100      	movs	r1, #0
 8009386:	6878      	ldr	r0, [r7, #4]
 8009388:	f003 ff62 	bl	800d250 <USBH_CtlReq>
 800938c:	4603      	mov	r3, r0
}
 800938e:	4618      	mov	r0, r3
 8009390:	3708      	adds	r7, #8
 8009392:	46bd      	mov	sp, r7
 8009394:	bd80      	pop	{r7, pc}

08009396 <USBH_MSC_BOT_REQ_GetMaxLUN>:
  * @param  phost: Host handle
  * @param  Maxlun: pointer to Maxlun variable
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_GetMaxLUN(USBH_HandleTypeDef *phost, uint8_t *Maxlun)
{
 8009396:	b580      	push	{r7, lr}
 8009398:	b082      	sub	sp, #8
 800939a:	af00      	add	r7, sp, #0
 800939c:	6078      	str	r0, [r7, #4]
 800939e:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	22a1      	movs	r2, #161	; 0xa1
 80093a4:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_GET_MAX_LUN;
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	22fe      	movs	r2, #254	; 0xfe
 80093aa:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	2200      	movs	r2, #0
 80093b0:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	2200      	movs	r2, #0
 80093b6:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 1U;
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	2201      	movs	r2, #1
 80093bc:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, Maxlun, 1U);
 80093be:	2201      	movs	r2, #1
 80093c0:	6839      	ldr	r1, [r7, #0]
 80093c2:	6878      	ldr	r0, [r7, #4]
 80093c4:	f003 ff44 	bl	800d250 <USBH_CtlReq>
 80093c8:	4603      	mov	r3, r0
}
 80093ca:	4618      	mov	r0, r3
 80093cc:	3708      	adds	r7, #8
 80093ce:	46bd      	mov	sp, r7
 80093d0:	bd80      	pop	{r7, pc}
	...

080093d4 <USBH_MSC_BOT_Init>:
  *         The function Initializes the BOT protocol.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Init(USBH_HandleTypeDef *phost)
{
 80093d4:	b480      	push	{r7}
 80093d6:	b085      	sub	sp, #20
 80093d8:	af00      	add	r7, sp, #0
 80093da:	6078      	str	r0, [r7, #4]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80093e2:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 80093e6:	69db      	ldr	r3, [r3, #28]
 80093e8:	60fb      	str	r3, [r7, #12]

  MSC_Handle->hbot.cbw.field.Signature = BOT_CBW_SIGNATURE;
 80093ea:	68fb      	ldr	r3, [r7, #12]
 80093ec:	4a09      	ldr	r2, [pc, #36]	; (8009414 <USBH_MSC_BOT_Init+0x40>)
 80093ee:	655a      	str	r2, [r3, #84]	; 0x54
  MSC_Handle->hbot.cbw.field.Tag = BOT_CBW_TAG;
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	4a09      	ldr	r2, [pc, #36]	; (8009418 <USBH_MSC_BOT_Init+0x44>)
 80093f4:	659a      	str	r2, [r3, #88]	; 0x58
  MSC_Handle->hbot.state = BOT_SEND_CBW;
 80093f6:	68fb      	ldr	r3, [r7, #12]
 80093f8:	2201      	movs	r2, #1
 80093fa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 80093fe:	68fb      	ldr	r3, [r7, #12]
 8009400:	2201      	movs	r2, #1
 8009402:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52

  return USBH_OK;
 8009406:	2300      	movs	r3, #0
}
 8009408:	4618      	mov	r0, r3
 800940a:	3714      	adds	r7, #20
 800940c:	46bd      	mov	sp, r7
 800940e:	bc80      	pop	{r7}
 8009410:	4770      	bx	lr
 8009412:	bf00      	nop
 8009414:	43425355 	.word	0x43425355
 8009418:	20304050 	.word	0x20304050

0800941c <USBH_MSC_BOT_Process>:
  * @param  phost: Host handle
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Process(USBH_HandleTypeDef *phost, uint8_t lun)
{
 800941c:	b580      	push	{r7, lr}
 800941e:	b088      	sub	sp, #32
 8009420:	af02      	add	r7, sp, #8
 8009422:	6078      	str	r0, [r7, #4]
 8009424:	460b      	mov	r3, r1
 8009426:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef   status = USBH_BUSY;
 8009428:	2301      	movs	r3, #1
 800942a:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef   error  = USBH_BUSY;
 800942c:	2301      	movs	r3, #1
 800942e:	75bb      	strb	r3, [r7, #22]
  BOT_CSWStatusTypeDef CSW_Status = BOT_CSW_CMD_FAILED;
 8009430:	2301      	movs	r3, #1
 8009432:	757b      	strb	r3, [r7, #21]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8009434:	2300      	movs	r3, #0
 8009436:	753b      	strb	r3, [r7, #20]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800943e:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 8009442:	69db      	ldr	r3, [r3, #28]
 8009444:	613b      	str	r3, [r7, #16]
  uint8_t toggle = 0U;
 8009446:	2300      	movs	r3, #0
 8009448:	73fb      	strb	r3, [r7, #15]

  switch (MSC_Handle->hbot.state)
 800944a:	693b      	ldr	r3, [r7, #16]
 800944c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8009450:	3b01      	subs	r3, #1
 8009452:	2b0a      	cmp	r3, #10
 8009454:	f200 819e 	bhi.w	8009794 <USBH_MSC_BOT_Process+0x378>
 8009458:	a201      	add	r2, pc, #4	; (adr r2, 8009460 <USBH_MSC_BOT_Process+0x44>)
 800945a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800945e:	bf00      	nop
 8009460:	0800948d 	.word	0x0800948d
 8009464:	080094b5 	.word	0x080094b5
 8009468:	0800951f 	.word	0x0800951f
 800946c:	0800953d 	.word	0x0800953d
 8009470:	080095c1 	.word	0x080095c1
 8009474:	080095e3 	.word	0x080095e3
 8009478:	0800967b 	.word	0x0800967b
 800947c:	08009697 	.word	0x08009697
 8009480:	080096e9 	.word	0x080096e9
 8009484:	08009719 	.word	0x08009719
 8009488:	0800977b 	.word	0x0800977b
  {
    case BOT_SEND_CBW:
      MSC_Handle->hbot.cbw.field.LUN = lun;
 800948c:	693b      	ldr	r3, [r7, #16]
 800948e:	78fa      	ldrb	r2, [r7, #3]
 8009490:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
      MSC_Handle->hbot.state = BOT_SEND_CBW_WAIT;
 8009494:	693b      	ldr	r3, [r7, #16]
 8009496:	2202      	movs	r2, #2
 8009498:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      USBH_BulkSendData(phost, MSC_Handle->hbot.cbw.data,
 800949c:	693b      	ldr	r3, [r7, #16]
 800949e:	f103 0154 	add.w	r1, r3, #84	; 0x54
 80094a2:	693b      	ldr	r3, [r7, #16]
 80094a4:	795b      	ldrb	r3, [r3, #5]
 80094a6:	2201      	movs	r2, #1
 80094a8:	9200      	str	r2, [sp, #0]
 80094aa:	221f      	movs	r2, #31
 80094ac:	6878      	ldr	r0, [r7, #4]
 80094ae:	f004 f8f6 	bl	800d69e <USBH_BulkSendData>
                        BOT_CBW_LENGTH, MSC_Handle->OutPipe, 1U);

      break;
 80094b2:	e17e      	b.n	80097b2 <USBH_MSC_BOT_Process+0x396>

    case BOT_SEND_CBW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 80094b4:	693b      	ldr	r3, [r7, #16]
 80094b6:	795b      	ldrb	r3, [r3, #5]
 80094b8:	4619      	mov	r1, r3
 80094ba:	6878      	ldr	r0, [r7, #4]
 80094bc:	f004 fc98 	bl	800ddf0 <USBH_LL_GetURBState>
 80094c0:	4603      	mov	r3, r0
 80094c2:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 80094c4:	7d3b      	ldrb	r3, [r7, #20]
 80094c6:	2b01      	cmp	r3, #1
 80094c8:	d118      	bne.n	80094fc <USBH_MSC_BOT_Process+0xe0>
      {
        if (MSC_Handle->hbot.cbw.field.DataTransferLength != 0U)
 80094ca:	693b      	ldr	r3, [r7, #16]
 80094cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	d00f      	beq.n	80094f2 <USBH_MSC_BOT_Process+0xd6>
        {
          /* If there is Data Transfer Stage */
          if (((MSC_Handle->hbot.cbw.field.Flags) & USB_REQ_DIR_MASK) == USB_D2H)
 80094d2:	693b      	ldr	r3, [r7, #16]
 80094d4:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 80094d8:	b25b      	sxtb	r3, r3
 80094da:	2b00      	cmp	r3, #0
 80094dc:	da04      	bge.n	80094e8 <USBH_MSC_BOT_Process+0xcc>
          {
            /* Data Direction is IN */
            MSC_Handle->hbot.state = BOT_DATA_IN;
 80094de:	693b      	ldr	r3, [r7, #16]
 80094e0:	2203      	movs	r2, #3
 80094e2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 80094e6:	e157      	b.n	8009798 <USBH_MSC_BOT_Process+0x37c>
            MSC_Handle->hbot.state = BOT_DATA_OUT;
 80094e8:	693b      	ldr	r3, [r7, #16]
 80094ea:	2205      	movs	r2, #5
 80094ec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 80094f0:	e152      	b.n	8009798 <USBH_MSC_BOT_Process+0x37c>
          MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 80094f2:	693b      	ldr	r3, [r7, #16]
 80094f4:	2207      	movs	r2, #7
 80094f6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 80094fa:	e14d      	b.n	8009798 <USBH_MSC_BOT_Process+0x37c>
      else if (URB_Status == USBH_URB_NOTREADY)
 80094fc:	7d3b      	ldrb	r3, [r7, #20]
 80094fe:	2b02      	cmp	r3, #2
 8009500:	d104      	bne.n	800950c <USBH_MSC_BOT_Process+0xf0>
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 8009502:	693b      	ldr	r3, [r7, #16]
 8009504:	2201      	movs	r2, #1
 8009506:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800950a:	e145      	b.n	8009798 <USBH_MSC_BOT_Process+0x37c>
        if (URB_Status == USBH_URB_STALL)
 800950c:	7d3b      	ldrb	r3, [r7, #20]
 800950e:	2b05      	cmp	r3, #5
 8009510:	f040 8142 	bne.w	8009798 <USBH_MSC_BOT_Process+0x37c>
          MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 8009514:	693b      	ldr	r3, [r7, #16]
 8009516:	220a      	movs	r2, #10
 8009518:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800951c:	e13c      	b.n	8009798 <USBH_MSC_BOT_Process+0x37c>

    case BOT_DATA_IN:
      /* Send first packet */
      USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 800951e:	693b      	ldr	r3, [r7, #16]
 8009520:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8009524:	693b      	ldr	r3, [r7, #16]
 8009526:	895a      	ldrh	r2, [r3, #10]
 8009528:	693b      	ldr	r3, [r7, #16]
 800952a:	791b      	ldrb	r3, [r3, #4]
 800952c:	6878      	ldr	r0, [r7, #4]
 800952e:	f004 f8db 	bl	800d6e8 <USBH_BulkReceiveData>
                           MSC_Handle->InEpSize, MSC_Handle->InPipe);

      MSC_Handle->hbot.state = BOT_DATA_IN_WAIT;
 8009532:	693b      	ldr	r3, [r7, #16]
 8009534:	2204      	movs	r2, #4
 8009536:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      break;
 800953a:	e13a      	b.n	80097b2 <USBH_MSC_BOT_Process+0x396>

    case BOT_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 800953c:	693b      	ldr	r3, [r7, #16]
 800953e:	791b      	ldrb	r3, [r3, #4]
 8009540:	4619      	mov	r1, r3
 8009542:	6878      	ldr	r0, [r7, #4]
 8009544:	f004 fc54 	bl	800ddf0 <USBH_LL_GetURBState>
 8009548:	4603      	mov	r3, r0
 800954a:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 800954c:	7d3b      	ldrb	r3, [r7, #20]
 800954e:	2b01      	cmp	r3, #1
 8009550:	d12d      	bne.n	80095ae <USBH_MSC_BOT_Process+0x192>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->InEpSize)
 8009552:	693b      	ldr	r3, [r7, #16]
 8009554:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009556:	693a      	ldr	r2, [r7, #16]
 8009558:	8952      	ldrh	r2, [r2, #10]
 800955a:	4293      	cmp	r3, r2
 800955c:	d910      	bls.n	8009580 <USBH_MSC_BOT_Process+0x164>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->InEpSize;
 800955e:	693b      	ldr	r3, [r7, #16]
 8009560:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009564:	693a      	ldr	r2, [r7, #16]
 8009566:	8952      	ldrh	r2, [r2, #10]
 8009568:	441a      	add	r2, r3
 800956a:	693b      	ldr	r3, [r7, #16]
 800956c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->InEpSize;
 8009570:	693b      	ldr	r3, [r7, #16]
 8009572:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009574:	693a      	ldr	r2, [r7, #16]
 8009576:	8952      	ldrh	r2, [r2, #10]
 8009578:	1a9a      	subs	r2, r3, r2
 800957a:	693b      	ldr	r3, [r7, #16]
 800957c:	65da      	str	r2, [r3, #92]	; 0x5c
 800957e:	e002      	b.n	8009586 <USBH_MSC_BOT_Process+0x16a>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 8009580:	693b      	ldr	r3, [r7, #16]
 8009582:	2200      	movs	r2, #0
 8009584:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Received */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 8009586:	693b      	ldr	r3, [r7, #16]
 8009588:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800958a:	2b00      	cmp	r3, #0
 800958c:	d00a      	beq.n	80095a4 <USBH_MSC_BOT_Process+0x188>
        {
          /* Send next packet */
          USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 800958e:	693b      	ldr	r3, [r7, #16]
 8009590:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8009594:	693b      	ldr	r3, [r7, #16]
 8009596:	895a      	ldrh	r2, [r3, #10]
 8009598:	693b      	ldr	r3, [r7, #16]
 800959a:	791b      	ldrb	r3, [r3, #4]
 800959c:	6878      	ldr	r0, [r7, #4]
 800959e:	f004 f8a3 	bl	800d6e8 <USBH_BulkReceiveData>
#endif
      }
      else
      {
      }
      break;
 80095a2:	e0fb      	b.n	800979c <USBH_MSC_BOT_Process+0x380>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 80095a4:	693b      	ldr	r3, [r7, #16]
 80095a6:	2207      	movs	r2, #7
 80095a8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 80095ac:	e0f6      	b.n	800979c <USBH_MSC_BOT_Process+0x380>
      else if (URB_Status == USBH_URB_STALL)
 80095ae:	7d3b      	ldrb	r3, [r7, #20]
 80095b0:	2b05      	cmp	r3, #5
 80095b2:	f040 80f3 	bne.w	800979c <USBH_MSC_BOT_Process+0x380>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 80095b6:	693b      	ldr	r3, [r7, #16]
 80095b8:	2209      	movs	r2, #9
 80095ba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 80095be:	e0ed      	b.n	800979c <USBH_MSC_BOT_Process+0x380>

    case BOT_DATA_OUT:

      USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 80095c0:	693b      	ldr	r3, [r7, #16]
 80095c2:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 80095c6:	693b      	ldr	r3, [r7, #16]
 80095c8:	891a      	ldrh	r2, [r3, #8]
 80095ca:	693b      	ldr	r3, [r7, #16]
 80095cc:	795b      	ldrb	r3, [r3, #5]
 80095ce:	2001      	movs	r0, #1
 80095d0:	9000      	str	r0, [sp, #0]
 80095d2:	6878      	ldr	r0, [r7, #4]
 80095d4:	f004 f863 	bl	800d69e <USBH_BulkSendData>
                        MSC_Handle->OutEpSize, MSC_Handle->OutPipe, 1U);

      MSC_Handle->hbot.state  = BOT_DATA_OUT_WAIT;
 80095d8:	693b      	ldr	r3, [r7, #16]
 80095da:	2206      	movs	r2, #6
 80095dc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 80095e0:	e0e7      	b.n	80097b2 <USBH_MSC_BOT_Process+0x396>

    case BOT_DATA_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 80095e2:	693b      	ldr	r3, [r7, #16]
 80095e4:	795b      	ldrb	r3, [r3, #5]
 80095e6:	4619      	mov	r1, r3
 80095e8:	6878      	ldr	r0, [r7, #4]
 80095ea:	f004 fc01 	bl	800ddf0 <USBH_LL_GetURBState>
 80095ee:	4603      	mov	r3, r0
 80095f0:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 80095f2:	7d3b      	ldrb	r3, [r7, #20]
 80095f4:	2b01      	cmp	r3, #1
 80095f6:	d12f      	bne.n	8009658 <USBH_MSC_BOT_Process+0x23c>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->OutEpSize)
 80095f8:	693b      	ldr	r3, [r7, #16]
 80095fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80095fc:	693a      	ldr	r2, [r7, #16]
 80095fe:	8912      	ldrh	r2, [r2, #8]
 8009600:	4293      	cmp	r3, r2
 8009602:	d910      	bls.n	8009626 <USBH_MSC_BOT_Process+0x20a>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->OutEpSize;
 8009604:	693b      	ldr	r3, [r7, #16]
 8009606:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800960a:	693a      	ldr	r2, [r7, #16]
 800960c:	8912      	ldrh	r2, [r2, #8]
 800960e:	441a      	add	r2, r3
 8009610:	693b      	ldr	r3, [r7, #16]
 8009612:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->OutEpSize;
 8009616:	693b      	ldr	r3, [r7, #16]
 8009618:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800961a:	693a      	ldr	r2, [r7, #16]
 800961c:	8912      	ldrh	r2, [r2, #8]
 800961e:	1a9a      	subs	r2, r3, r2
 8009620:	693b      	ldr	r3, [r7, #16]
 8009622:	65da      	str	r2, [r3, #92]	; 0x5c
 8009624:	e002      	b.n	800962c <USBH_MSC_BOT_Process+0x210>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 8009626:	693b      	ldr	r3, [r7, #16]
 8009628:	2200      	movs	r2, #0
 800962a:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Sent */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 800962c:	693b      	ldr	r3, [r7, #16]
 800962e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009630:	2b00      	cmp	r3, #0
 8009632:	d00c      	beq.n	800964e <USBH_MSC_BOT_Process+0x232>
        {
          USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 8009634:	693b      	ldr	r3, [r7, #16]
 8009636:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800963a:	693b      	ldr	r3, [r7, #16]
 800963c:	891a      	ldrh	r2, [r3, #8]
 800963e:	693b      	ldr	r3, [r7, #16]
 8009640:	795b      	ldrb	r3, [r3, #5]
 8009642:	2001      	movs	r0, #1
 8009644:	9000      	str	r0, [sp, #0]
 8009646:	6878      	ldr	r0, [r7, #4]
 8009648:	f004 f829 	bl	800d69e <USBH_BulkSendData>
#endif
      }
      else
      {
      }
      break;
 800964c:	e0a8      	b.n	80097a0 <USBH_MSC_BOT_Process+0x384>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 800964e:	693b      	ldr	r3, [r7, #16]
 8009650:	2207      	movs	r2, #7
 8009652:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009656:	e0a3      	b.n	80097a0 <USBH_MSC_BOT_Process+0x384>
      else if (URB_Status == USBH_URB_NOTREADY)
 8009658:	7d3b      	ldrb	r3, [r7, #20]
 800965a:	2b02      	cmp	r3, #2
 800965c:	d104      	bne.n	8009668 <USBH_MSC_BOT_Process+0x24c>
        MSC_Handle->hbot.state  = BOT_DATA_OUT;
 800965e:	693b      	ldr	r3, [r7, #16]
 8009660:	2205      	movs	r2, #5
 8009662:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009666:	e09b      	b.n	80097a0 <USBH_MSC_BOT_Process+0x384>
      else if (URB_Status == USBH_URB_STALL)
 8009668:	7d3b      	ldrb	r3, [r7, #20]
 800966a:	2b05      	cmp	r3, #5
 800966c:	f040 8098 	bne.w	80097a0 <USBH_MSC_BOT_Process+0x384>
        MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 8009670:	693b      	ldr	r3, [r7, #16]
 8009672:	220a      	movs	r2, #10
 8009674:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009678:	e092      	b.n	80097a0 <USBH_MSC_BOT_Process+0x384>

    case BOT_RECEIVE_CSW:

      USBH_BulkReceiveData(phost, MSC_Handle->hbot.csw.data,
 800967a:	693b      	ldr	r3, [r7, #16]
 800967c:	f103 0178 	add.w	r1, r3, #120	; 0x78
 8009680:	693b      	ldr	r3, [r7, #16]
 8009682:	791b      	ldrb	r3, [r3, #4]
 8009684:	220d      	movs	r2, #13
 8009686:	6878      	ldr	r0, [r7, #4]
 8009688:	f004 f82e 	bl	800d6e8 <USBH_BulkReceiveData>
                           BOT_CSW_LENGTH, MSC_Handle->InPipe);

      MSC_Handle->hbot.state  = BOT_RECEIVE_CSW_WAIT;
 800968c:	693b      	ldr	r3, [r7, #16]
 800968e:	2208      	movs	r2, #8
 8009690:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009694:	e08d      	b.n	80097b2 <USBH_MSC_BOT_Process+0x396>

    case BOT_RECEIVE_CSW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 8009696:	693b      	ldr	r3, [r7, #16]
 8009698:	791b      	ldrb	r3, [r3, #4]
 800969a:	4619      	mov	r1, r3
 800969c:	6878      	ldr	r0, [r7, #4]
 800969e:	f004 fba7 	bl	800ddf0 <USBH_LL_GetURBState>
 80096a2:	4603      	mov	r3, r0
 80096a4:	753b      	strb	r3, [r7, #20]

      /* Decode CSW */
      if (URB_Status == USBH_URB_DONE)
 80096a6:	7d3b      	ldrb	r3, [r7, #20]
 80096a8:	2b01      	cmp	r3, #1
 80096aa:	d115      	bne.n	80096d8 <USBH_MSC_BOT_Process+0x2bc>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 80096ac:	693b      	ldr	r3, [r7, #16]
 80096ae:	2201      	movs	r2, #1
 80096b0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 80096b4:	693b      	ldr	r3, [r7, #16]
 80096b6:	2201      	movs	r2, #1
 80096b8:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        CSW_Status = USBH_MSC_DecodeCSW(phost);
 80096bc:	6878      	ldr	r0, [r7, #4]
 80096be:	f000 f8ab 	bl	8009818 <USBH_MSC_DecodeCSW>
 80096c2:	4603      	mov	r3, r0
 80096c4:	757b      	strb	r3, [r7, #21]

        if (CSW_Status == BOT_CSW_CMD_PASSED)
 80096c6:	7d7b      	ldrb	r3, [r7, #21]
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	d102      	bne.n	80096d2 <USBH_MSC_BOT_Process+0x2b6>
        {
          status = USBH_OK;
 80096cc:	2300      	movs	r3, #0
 80096ce:	75fb      	strb	r3, [r7, #23]
#endif
      }
      else
      {
      }
      break;
 80096d0:	e068      	b.n	80097a4 <USBH_MSC_BOT_Process+0x388>
          status = USBH_FAIL;
 80096d2:	2302      	movs	r3, #2
 80096d4:	75fb      	strb	r3, [r7, #23]
      break;
 80096d6:	e065      	b.n	80097a4 <USBH_MSC_BOT_Process+0x388>
      else if (URB_Status == USBH_URB_STALL)
 80096d8:	7d3b      	ldrb	r3, [r7, #20]
 80096da:	2b05      	cmp	r3, #5
 80096dc:	d162      	bne.n	80097a4 <USBH_MSC_BOT_Process+0x388>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 80096de:	693b      	ldr	r3, [r7, #16]
 80096e0:	2209      	movs	r2, #9
 80096e2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 80096e6:	e05d      	b.n	80097a4 <USBH_MSC_BOT_Process+0x388>

    case BOT_ERROR_IN:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_IN);
 80096e8:	78fb      	ldrb	r3, [r7, #3]
 80096ea:	2200      	movs	r2, #0
 80096ec:	4619      	mov	r1, r3
 80096ee:	6878      	ldr	r0, [r7, #4]
 80096f0:	f000 f864 	bl	80097bc <USBH_MSC_BOT_Abort>
 80096f4:	4603      	mov	r3, r0
 80096f6:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 80096f8:	7dbb      	ldrb	r3, [r7, #22]
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	d104      	bne.n	8009708 <USBH_MSC_BOT_Process+0x2ec>
      {
        MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 80096fe:	693b      	ldr	r3, [r7, #16]
 8009700:	2207      	movs	r2, #7
 8009702:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
      }
      else
      {
      }
      break;
 8009706:	e04f      	b.n	80097a8 <USBH_MSC_BOT_Process+0x38c>
      else if (error == USBH_UNRECOVERED_ERROR)
 8009708:	7dbb      	ldrb	r3, [r7, #22]
 800970a:	2b04      	cmp	r3, #4
 800970c:	d14c      	bne.n	80097a8 <USBH_MSC_BOT_Process+0x38c>
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 800970e:	693b      	ldr	r3, [r7, #16]
 8009710:	220b      	movs	r2, #11
 8009712:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009716:	e047      	b.n	80097a8 <USBH_MSC_BOT_Process+0x38c>

    case BOT_ERROR_OUT:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_OUT);
 8009718:	78fb      	ldrb	r3, [r7, #3]
 800971a:	2201      	movs	r2, #1
 800971c:	4619      	mov	r1, r3
 800971e:	6878      	ldr	r0, [r7, #4]
 8009720:	f000 f84c 	bl	80097bc <USBH_MSC_BOT_Abort>
 8009724:	4603      	mov	r3, r0
 8009726:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 8009728:	7dbb      	ldrb	r3, [r7, #22]
 800972a:	2b00      	cmp	r3, #0
 800972c:	d11d      	bne.n	800976a <USBH_MSC_BOT_Process+0x34e>
      {

        toggle = USBH_LL_GetToggle(phost, MSC_Handle->OutPipe);
 800972e:	693b      	ldr	r3, [r7, #16]
 8009730:	795b      	ldrb	r3, [r3, #5]
 8009732:	4619      	mov	r1, r3
 8009734:	6878      	ldr	r0, [r7, #4]
 8009736:	f004 fbaf 	bl	800de98 <USBH_LL_GetToggle>
 800973a:	4603      	mov	r3, r0
 800973c:	73fb      	strb	r3, [r7, #15]
        USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 1U - toggle);
 800973e:	693b      	ldr	r3, [r7, #16]
 8009740:	7959      	ldrb	r1, [r3, #5]
 8009742:	7bfb      	ldrb	r3, [r7, #15]
 8009744:	f1c3 0301 	rsb	r3, r3, #1
 8009748:	b2db      	uxtb	r3, r3
 800974a:	461a      	mov	r2, r3
 800974c:	6878      	ldr	r0, [r7, #4]
 800974e:	f004 fb72 	bl	800de36 <USBH_LL_SetToggle>
        USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 8009752:	693b      	ldr	r3, [r7, #16]
 8009754:	791b      	ldrb	r3, [r3, #4]
 8009756:	2200      	movs	r2, #0
 8009758:	4619      	mov	r1, r3
 800975a:	6878      	ldr	r0, [r7, #4]
 800975c:	f004 fb6b 	bl	800de36 <USBH_LL_SetToggle>
        MSC_Handle->hbot.state = BOT_ERROR_IN;
 8009760:	693b      	ldr	r3, [r7, #16]
 8009762:	2209      	movs	r2, #9
 8009764:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        if (error == USBH_UNRECOVERED_ERROR)
        {
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
        }
      }
      break;
 8009768:	e020      	b.n	80097ac <USBH_MSC_BOT_Process+0x390>
        if (error == USBH_UNRECOVERED_ERROR)
 800976a:	7dbb      	ldrb	r3, [r7, #22]
 800976c:	2b04      	cmp	r3, #4
 800976e:	d11d      	bne.n	80097ac <USBH_MSC_BOT_Process+0x390>
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 8009770:	693b      	ldr	r3, [r7, #16]
 8009772:	220b      	movs	r2, #11
 8009774:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009778:	e018      	b.n	80097ac <USBH_MSC_BOT_Process+0x390>


    case BOT_UNRECOVERED_ERROR:
      status = USBH_MSC_BOT_REQ_Reset(phost);
 800977a:	6878      	ldr	r0, [r7, #4]
 800977c:	f7ff fdee 	bl	800935c <USBH_MSC_BOT_REQ_Reset>
 8009780:	4603      	mov	r3, r0
 8009782:	75fb      	strb	r3, [r7, #23]
      if (status == USBH_OK)
 8009784:	7dfb      	ldrb	r3, [r7, #23]
 8009786:	2b00      	cmp	r3, #0
 8009788:	d112      	bne.n	80097b0 <USBH_MSC_BOT_Process+0x394>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 800978a:	693b      	ldr	r3, [r7, #16]
 800978c:	2201      	movs	r2, #1
 800978e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      }
      break;
 8009792:	e00d      	b.n	80097b0 <USBH_MSC_BOT_Process+0x394>

    default:
      break;
 8009794:	bf00      	nop
 8009796:	e00c      	b.n	80097b2 <USBH_MSC_BOT_Process+0x396>
      break;
 8009798:	bf00      	nop
 800979a:	e00a      	b.n	80097b2 <USBH_MSC_BOT_Process+0x396>
      break;
 800979c:	bf00      	nop
 800979e:	e008      	b.n	80097b2 <USBH_MSC_BOT_Process+0x396>
      break;
 80097a0:	bf00      	nop
 80097a2:	e006      	b.n	80097b2 <USBH_MSC_BOT_Process+0x396>
      break;
 80097a4:	bf00      	nop
 80097a6:	e004      	b.n	80097b2 <USBH_MSC_BOT_Process+0x396>
      break;
 80097a8:	bf00      	nop
 80097aa:	e002      	b.n	80097b2 <USBH_MSC_BOT_Process+0x396>
      break;
 80097ac:	bf00      	nop
 80097ae:	e000      	b.n	80097b2 <USBH_MSC_BOT_Process+0x396>
      break;
 80097b0:	bf00      	nop
  }
  return status;
 80097b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80097b4:	4618      	mov	r0, r3
 80097b6:	3718      	adds	r7, #24
 80097b8:	46bd      	mov	sp, r7
 80097ba:	bd80      	pop	{r7, pc}

080097bc <USBH_MSC_BOT_Abort>:
  * @param  lun: Logical Unit Number
  * @param  dir: direction (0: out / 1 : in)
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_BOT_Abort(USBH_HandleTypeDef *phost, uint8_t lun, uint8_t dir)
{
 80097bc:	b580      	push	{r7, lr}
 80097be:	b084      	sub	sp, #16
 80097c0:	af00      	add	r7, sp, #0
 80097c2:	6078      	str	r0, [r7, #4]
 80097c4:	460b      	mov	r3, r1
 80097c6:	70fb      	strb	r3, [r7, #3]
 80097c8:	4613      	mov	r3, r2
 80097ca:	70bb      	strb	r3, [r7, #2]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(lun);

  USBH_StatusTypeDef status = USBH_FAIL;
 80097cc:	2302      	movs	r3, #2
 80097ce:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80097d6:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 80097da:	69db      	ldr	r3, [r3, #28]
 80097dc:	60bb      	str	r3, [r7, #8]

  switch (dir)
 80097de:	78bb      	ldrb	r3, [r7, #2]
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	d002      	beq.n	80097ea <USBH_MSC_BOT_Abort+0x2e>
 80097e4:	2b01      	cmp	r3, #1
 80097e6:	d009      	beq.n	80097fc <USBH_MSC_BOT_Abort+0x40>
      /*send ClrFeature on Bulk OUT endpoint */
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
      break;

    default:
      break;
 80097e8:	e011      	b.n	800980e <USBH_MSC_BOT_Abort+0x52>
      status = USBH_ClrFeature(phost, MSC_Handle->InEp);
 80097ea:	68bb      	ldr	r3, [r7, #8]
 80097ec:	79db      	ldrb	r3, [r3, #7]
 80097ee:	4619      	mov	r1, r3
 80097f0:	6878      	ldr	r0, [r7, #4]
 80097f2:	f003 fb50 	bl	800ce96 <USBH_ClrFeature>
 80097f6:	4603      	mov	r3, r0
 80097f8:	73fb      	strb	r3, [r7, #15]
      break;
 80097fa:	e008      	b.n	800980e <USBH_MSC_BOT_Abort+0x52>
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
 80097fc:	68bb      	ldr	r3, [r7, #8]
 80097fe:	799b      	ldrb	r3, [r3, #6]
 8009800:	4619      	mov	r1, r3
 8009802:	6878      	ldr	r0, [r7, #4]
 8009804:	f003 fb47 	bl	800ce96 <USBH_ClrFeature>
 8009808:	4603      	mov	r3, r0
 800980a:	73fb      	strb	r3, [r7, #15]
      break;
 800980c:	bf00      	nop
  }
  return status;
 800980e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009810:	4618      	mov	r0, r3
 8009812:	3710      	adds	r7, #16
 8009814:	46bd      	mov	sp, r7
 8009816:	bd80      	pop	{r7, pc}

08009818 <USBH_MSC_DecodeCSW>:
  *     2. the CSW is 13 (Dh) bytes in length,
  *     3. dCSWTag matches the dCBWTag from the corresponding CBW.
  */

static BOT_CSWStatusTypeDef USBH_MSC_DecodeCSW(USBH_HandleTypeDef *phost)
{
 8009818:	b580      	push	{r7, lr}
 800981a:	b084      	sub	sp, #16
 800981c:	af00      	add	r7, sp, #0
 800981e:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009826:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 800982a:	69db      	ldr	r3, [r3, #28]
 800982c:	60bb      	str	r3, [r7, #8]
  BOT_CSWStatusTypeDef status = BOT_CSW_CMD_FAILED;
 800982e:	2301      	movs	r3, #1
 8009830:	73fb      	strb	r3, [r7, #15]

  /*Checking if the transfer length is different than 13*/
  if (USBH_LL_GetLastXferSize(phost, MSC_Handle->InPipe) != BOT_CSW_LENGTH)
 8009832:	68bb      	ldr	r3, [r7, #8]
 8009834:	791b      	ldrb	r3, [r3, #4]
 8009836:	4619      	mov	r1, r3
 8009838:	6878      	ldr	r0, [r7, #4]
 800983a:	f004 fa3f 	bl	800dcbc <USBH_LL_GetLastXferSize>
 800983e:	4603      	mov	r3, r0
 8009840:	2b0d      	cmp	r3, #13
 8009842:	d002      	beq.n	800984a <USBH_MSC_DecodeCSW+0x32>
    Device intends to transfer no data)
    (11) Ho > Do  (Host expects to send data to the device,
    Device intends to receive data from the host)*/


    status = BOT_CSW_PHASE_ERROR;
 8009844:	2302      	movs	r3, #2
 8009846:	73fb      	strb	r3, [r7, #15]
 8009848:	e024      	b.n	8009894 <USBH_MSC_DecodeCSW+0x7c>
  else
  {
    /* CSW length is Correct */

    /* Check validity of the CSW Signature and CSWStatus */
    if (MSC_Handle->hbot.csw.field.Signature == BOT_CSW_SIGNATURE)
 800984a:	68bb      	ldr	r3, [r7, #8]
 800984c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800984e:	4a14      	ldr	r2, [pc, #80]	; (80098a0 <USBH_MSC_DecodeCSW+0x88>)
 8009850:	4293      	cmp	r3, r2
 8009852:	d11d      	bne.n	8009890 <USBH_MSC_DecodeCSW+0x78>
    {
      /* Check Condition 1. dCSWSignature is equal to 53425355h */

      if (MSC_Handle->hbot.csw.field.Tag == MSC_Handle->hbot.cbw.field.Tag)
 8009854:	68bb      	ldr	r3, [r7, #8]
 8009856:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8009858:	68bb      	ldr	r3, [r7, #8]
 800985a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800985c:	429a      	cmp	r2, r3
 800985e:	d119      	bne.n	8009894 <USBH_MSC_DecodeCSW+0x7c>
      {
        /* Check Condition 3. dCSWTag matches the dCBWTag from the
        corresponding CBW */

        if (MSC_Handle->hbot.csw.field.Status == 0U)
 8009860:	68bb      	ldr	r3, [r7, #8]
 8009862:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8009866:	2b00      	cmp	r3, #0
 8009868:	d102      	bne.n	8009870 <USBH_MSC_DecodeCSW+0x58>
          (12) Ho = Do (Host expects to send data to the device,
          Device intends to receive data from the host)

          */

          status = BOT_CSW_CMD_PASSED;
 800986a:	2300      	movs	r3, #0
 800986c:	73fb      	strb	r3, [r7, #15]
 800986e:	e011      	b.n	8009894 <USBH_MSC_DecodeCSW+0x7c>
        }
        else if (MSC_Handle->hbot.csw.field.Status == 1U)
 8009870:	68bb      	ldr	r3, [r7, #8]
 8009872:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8009876:	2b01      	cmp	r3, #1
 8009878:	d102      	bne.n	8009880 <USBH_MSC_DecodeCSW+0x68>
        {
          status = BOT_CSW_CMD_FAILED;
 800987a:	2301      	movs	r3, #1
 800987c:	73fb      	strb	r3, [r7, #15]
 800987e:	e009      	b.n	8009894 <USBH_MSC_DecodeCSW+0x7c>
        }

        else if (MSC_Handle->hbot.csw.field.Status == 2U)
 8009880:	68bb      	ldr	r3, [r7, #8]
 8009882:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8009886:	2b02      	cmp	r3, #2
 8009888:	d104      	bne.n	8009894 <USBH_MSC_DecodeCSW+0x7c>
          Di Device intends to send data to the host)
          (13) Ho < Do (Host expects to send data to the device,
          Device intends to receive data from the host)
          */

          status = BOT_CSW_PHASE_ERROR;
 800988a:	2302      	movs	r3, #2
 800988c:	73fb      	strb	r3, [r7, #15]
 800988e:	e001      	b.n	8009894 <USBH_MSC_DecodeCSW+0x7c>
    else
    {
      /* If the CSW Signature is not valid, We sall return the Phase Error to
      Upper Layers for Reset Recovery */

      status = BOT_CSW_PHASE_ERROR;
 8009890:	2302      	movs	r3, #2
 8009892:	73fb      	strb	r3, [r7, #15]
    }
  } /* CSW Length Check*/

  return status;
 8009894:	7bfb      	ldrb	r3, [r7, #15]
}
 8009896:	4618      	mov	r0, r3
 8009898:	3710      	adds	r7, #16
 800989a:	46bd      	mov	sp, r7
 800989c:	bd80      	pop	{r7, pc}
 800989e:	bf00      	nop
 80098a0:	53425355 	.word	0x53425355

080098a4 <USBH_MSC_SCSI_TestUnitReady>:
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_TestUnitReady(USBH_HandleTypeDef *phost,
                                               uint8_t lun)
{
 80098a4:	b580      	push	{r7, lr}
 80098a6:	b084      	sub	sp, #16
 80098a8:	af00      	add	r7, sp, #0
 80098aa:	6078      	str	r0, [r7, #4]
 80098ac:	460b      	mov	r3, r1
 80098ae:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 80098b0:	2302      	movs	r3, #2
 80098b2:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80098ba:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 80098be:	69db      	ldr	r3, [r3, #28]
 80098c0:	60bb      	str	r3, [r7, #8]

  switch (MSC_Handle->hbot.cmd_state)
 80098c2:	68bb      	ldr	r3, [r7, #8]
 80098c4:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 80098c8:	2b01      	cmp	r3, #1
 80098ca:	d002      	beq.n	80098d2 <USBH_MSC_SCSI_TestUnitReady+0x2e>
 80098cc:	2b02      	cmp	r3, #2
 80098ce:	d021      	beq.n	8009914 <USBH_MSC_SCSI_TestUnitReady+0x70>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 80098d0:	e028      	b.n	8009924 <USBH_MSC_SCSI_TestUnitReady+0x80>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_MODE_TEST_UNIT_READY;
 80098d2:	68bb      	ldr	r3, [r7, #8]
 80098d4:	2200      	movs	r2, #0
 80098d6:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 80098d8:	68bb      	ldr	r3, [r7, #8]
 80098da:	2200      	movs	r2, #0
 80098dc:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 80098e0:	68bb      	ldr	r3, [r7, #8]
 80098e2:	220a      	movs	r2, #10
 80098e4:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 80098e8:	68bb      	ldr	r3, [r7, #8]
 80098ea:	3363      	adds	r3, #99	; 0x63
 80098ec:	2210      	movs	r2, #16
 80098ee:	2100      	movs	r1, #0
 80098f0:	4618      	mov	r0, r3
 80098f2:	f004 fb85 	bl	800e000 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_TEST_UNIT_READY;
 80098f6:	68bb      	ldr	r3, [r7, #8]
 80098f8:	2200      	movs	r2, #0
 80098fa:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 80098fe:	68bb      	ldr	r3, [r7, #8]
 8009900:	2201      	movs	r2, #1
 8009902:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8009906:	68bb      	ldr	r3, [r7, #8]
 8009908:	2202      	movs	r2, #2
 800990a:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      error = USBH_BUSY;
 800990e:	2301      	movs	r3, #1
 8009910:	73fb      	strb	r3, [r7, #15]
      break;
 8009912:	e007      	b.n	8009924 <USBH_MSC_SCSI_TestUnitReady+0x80>
      error = USBH_MSC_BOT_Process(phost, lun);
 8009914:	78fb      	ldrb	r3, [r7, #3]
 8009916:	4619      	mov	r1, r3
 8009918:	6878      	ldr	r0, [r7, #4]
 800991a:	f7ff fd7f 	bl	800941c <USBH_MSC_BOT_Process>
 800991e:	4603      	mov	r3, r0
 8009920:	73fb      	strb	r3, [r7, #15]
      break;
 8009922:	bf00      	nop
  }

  return error;
 8009924:	7bfb      	ldrb	r3, [r7, #15]
}
 8009926:	4618      	mov	r0, r3
 8009928:	3710      	adds	r7, #16
 800992a:	46bd      	mov	sp, r7
 800992c:	bd80      	pop	{r7, pc}

0800992e <USBH_MSC_SCSI_ReadCapacity>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_ReadCapacity(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_CapacityTypeDef *capacity)
{
 800992e:	b580      	push	{r7, lr}
 8009930:	b086      	sub	sp, #24
 8009932:	af00      	add	r7, sp, #0
 8009934:	60f8      	str	r0, [r7, #12]
 8009936:	460b      	mov	r3, r1
 8009938:	607a      	str	r2, [r7, #4]
 800993a:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_BUSY ;
 800993c:	2301      	movs	r3, #1
 800993e:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009940:	68fb      	ldr	r3, [r7, #12]
 8009942:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009946:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 800994a:	69db      	ldr	r3, [r3, #28]
 800994c:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800994e:	693b      	ldr	r3, [r7, #16]
 8009950:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8009954:	2b01      	cmp	r3, #1
 8009956:	d002      	beq.n	800995e <USBH_MSC_SCSI_ReadCapacity+0x30>
 8009958:	2b02      	cmp	r3, #2
 800995a:	d027      	beq.n	80099ac <USBH_MSC_SCSI_ReadCapacity+0x7e>
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
      }
      break;

    default:
      break;
 800995c:	e05f      	b.n	8009a1e <USBH_MSC_SCSI_ReadCapacity+0xf0>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_READ_CAPACITY10;
 800995e:	693b      	ldr	r3, [r7, #16]
 8009960:	2208      	movs	r2, #8
 8009962:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8009964:	693b      	ldr	r3, [r7, #16]
 8009966:	2280      	movs	r2, #128	; 0x80
 8009968:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800996c:	693b      	ldr	r3, [r7, #16]
 800996e:	220a      	movs	r2, #10
 8009970:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8009974:	693b      	ldr	r3, [r7, #16]
 8009976:	3363      	adds	r3, #99	; 0x63
 8009978:	2210      	movs	r2, #16
 800997a:	2100      	movs	r1, #0
 800997c:	4618      	mov	r0, r3
 800997e:	f004 fb3f 	bl	800e000 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ_CAPACITY10;
 8009982:	693b      	ldr	r3, [r7, #16]
 8009984:	2225      	movs	r2, #37	; 0x25
 8009986:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800998a:	693b      	ldr	r3, [r7, #16]
 800998c:	2201      	movs	r2, #1
 800998e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8009992:	693b      	ldr	r3, [r7, #16]
 8009994:	2202      	movs	r2, #2
 8009996:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 800999a:	693b      	ldr	r3, [r7, #16]
 800999c:	f103 0210 	add.w	r2, r3, #16
 80099a0:	693b      	ldr	r3, [r7, #16]
 80099a2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 80099a6:	2301      	movs	r3, #1
 80099a8:	75fb      	strb	r3, [r7, #23]
      break;
 80099aa:	e038      	b.n	8009a1e <USBH_MSC_SCSI_ReadCapacity+0xf0>
      error = USBH_MSC_BOT_Process(phost, lun);
 80099ac:	7afb      	ldrb	r3, [r7, #11]
 80099ae:	4619      	mov	r1, r3
 80099b0:	68f8      	ldr	r0, [r7, #12]
 80099b2:	f7ff fd33 	bl	800941c <USBH_MSC_BOT_Process>
 80099b6:	4603      	mov	r3, r0
 80099b8:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 80099ba:	7dfb      	ldrb	r3, [r7, #23]
 80099bc:	2b00      	cmp	r3, #0
 80099be:	d12d      	bne.n	8009a1c <USBH_MSC_SCSI_ReadCapacity+0xee>
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 80099c0:	693b      	ldr	r3, [r7, #16]
 80099c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80099c6:	3303      	adds	r3, #3
 80099c8:	781b      	ldrb	r3, [r3, #0]
 80099ca:	461a      	mov	r2, r3
 80099cc:	693b      	ldr	r3, [r7, #16]
 80099ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80099d2:	3302      	adds	r3, #2
 80099d4:	781b      	ldrb	r3, [r3, #0]
 80099d6:	021b      	lsls	r3, r3, #8
 80099d8:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 80099da:	693b      	ldr	r3, [r7, #16]
 80099dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80099e0:	3301      	adds	r3, #1
 80099e2:	781b      	ldrb	r3, [r3, #0]
 80099e4:	041b      	lsls	r3, r3, #16
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 80099e6:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 80099e8:	693b      	ldr	r3, [r7, #16]
 80099ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80099ee:	781b      	ldrb	r3, [r3, #0]
 80099f0:	061b      	lsls	r3, r3, #24
 80099f2:	431a      	orrs	r2, r3
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	601a      	str	r2, [r3, #0]
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
 80099f8:	693b      	ldr	r3, [r7, #16]
 80099fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80099fe:	3307      	adds	r3, #7
 8009a00:	781b      	ldrb	r3, [r3, #0]
 8009a02:	b29a      	uxth	r2, r3
 8009a04:	693b      	ldr	r3, [r7, #16]
 8009a06:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009a0a:	3306      	adds	r3, #6
 8009a0c:	781b      	ldrb	r3, [r3, #0]
 8009a0e:	b29b      	uxth	r3, r3
 8009a10:	021b      	lsls	r3, r3, #8
 8009a12:	b29b      	uxth	r3, r3
 8009a14:	4313      	orrs	r3, r2
 8009a16:	b29a      	uxth	r2, r3
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	809a      	strh	r2, [r3, #4]
      break;
 8009a1c:	bf00      	nop
  }

  return error;
 8009a1e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009a20:	4618      	mov	r0, r3
 8009a22:	3718      	adds	r7, #24
 8009a24:	46bd      	mov	sp, r7
 8009a26:	bd80      	pop	{r7, pc}

08009a28 <USBH_MSC_SCSI_Inquiry>:
  * @param  capacity: pointer to the inquiry structure
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_Inquiry(USBH_HandleTypeDef *phost, uint8_t lun,
                                         SCSI_StdInquiryDataTypeDef *inquiry)
{
 8009a28:	b580      	push	{r7, lr}
 8009a2a:	b086      	sub	sp, #24
 8009a2c:	af00      	add	r7, sp, #0
 8009a2e:	60f8      	str	r0, [r7, #12]
 8009a30:	460b      	mov	r3, r1
 8009a32:	607a      	str	r2, [r7, #4]
 8009a34:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef error = USBH_FAIL;
 8009a36:	2302      	movs	r3, #2
 8009a38:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009a3a:	68fb      	ldr	r3, [r7, #12]
 8009a3c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009a40:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 8009a44:	69db      	ldr	r3, [r3, #28]
 8009a46:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 8009a48:	693b      	ldr	r3, [r7, #16]
 8009a4a:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8009a4e:	2b01      	cmp	r3, #1
 8009a50:	d002      	beq.n	8009a58 <USBH_MSC_SCSI_Inquiry+0x30>
 8009a52:	2b02      	cmp	r3, #2
 8009a54:	d03d      	beq.n	8009ad2 <USBH_MSC_SCSI_Inquiry+0xaa>
        USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
      }
      break;

    default:
      break;
 8009a56:	e089      	b.n	8009b6c <USBH_MSC_SCSI_Inquiry+0x144>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_INQUIRY;
 8009a58:	693b      	ldr	r3, [r7, #16]
 8009a5a:	2224      	movs	r2, #36	; 0x24
 8009a5c:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8009a5e:	693b      	ldr	r3, [r7, #16]
 8009a60:	2280      	movs	r2, #128	; 0x80
 8009a62:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8009a66:	693b      	ldr	r3, [r7, #16]
 8009a68:	220a      	movs	r2, #10
 8009a6a:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_LENGTH);
 8009a6e:	693b      	ldr	r3, [r7, #16]
 8009a70:	3363      	adds	r3, #99	; 0x63
 8009a72:	220a      	movs	r2, #10
 8009a74:	2100      	movs	r1, #0
 8009a76:	4618      	mov	r0, r3
 8009a78:	f004 fac2 	bl	800e000 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_INQUIRY;
 8009a7c:	693b      	ldr	r3, [r7, #16]
 8009a7e:	2212      	movs	r2, #18
 8009a80:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 8009a84:	7afb      	ldrb	r3, [r7, #11]
 8009a86:	015b      	lsls	r3, r3, #5
 8009a88:	b2da      	uxtb	r2, r3
 8009a8a:	693b      	ldr	r3, [r7, #16]
 8009a8c:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 8009a90:	693b      	ldr	r3, [r7, #16]
 8009a92:	2200      	movs	r2, #0
 8009a94:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 8009a98:	693b      	ldr	r3, [r7, #16]
 8009a9a:	2200      	movs	r2, #0
 8009a9c:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = 0x24U;
 8009aa0:	693b      	ldr	r3, [r7, #16]
 8009aa2:	2224      	movs	r2, #36	; 0x24
 8009aa4:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 8009aa8:	693b      	ldr	r3, [r7, #16]
 8009aaa:	2200      	movs	r2, #0
 8009aac:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8009ab0:	693b      	ldr	r3, [r7, #16]
 8009ab2:	2201      	movs	r2, #1
 8009ab4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8009ab8:	693b      	ldr	r3, [r7, #16]
 8009aba:	2202      	movs	r2, #2
 8009abc:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 8009ac0:	693b      	ldr	r3, [r7, #16]
 8009ac2:	f103 0210 	add.w	r2, r3, #16
 8009ac6:	693b      	ldr	r3, [r7, #16]
 8009ac8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 8009acc:	2301      	movs	r3, #1
 8009ace:	75fb      	strb	r3, [r7, #23]
      break;
 8009ad0:	e04c      	b.n	8009b6c <USBH_MSC_SCSI_Inquiry+0x144>
      error = USBH_MSC_BOT_Process(phost, lun);
 8009ad2:	7afb      	ldrb	r3, [r7, #11]
 8009ad4:	4619      	mov	r1, r3
 8009ad6:	68f8      	ldr	r0, [r7, #12]
 8009ad8:	f7ff fca0 	bl	800941c <USBH_MSC_BOT_Process>
 8009adc:	4603      	mov	r3, r0
 8009ade:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 8009ae0:	7dfb      	ldrb	r3, [r7, #23]
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	d141      	bne.n	8009b6a <USBH_MSC_SCSI_Inquiry+0x142>
        USBH_memset(inquiry, 0, sizeof(SCSI_StdInquiryDataTypeDef));
 8009ae6:	2222      	movs	r2, #34	; 0x22
 8009ae8:	2100      	movs	r1, #0
 8009aea:	6878      	ldr	r0, [r7, #4]
 8009aec:	f004 fa88 	bl	800e000 <memset>
        inquiry->DeviceType = MSC_Handle->hbot.pbuf[0] & 0x1FU;
 8009af0:	693b      	ldr	r3, [r7, #16]
 8009af2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009af6:	781b      	ldrb	r3, [r3, #0]
 8009af8:	f003 031f 	and.w	r3, r3, #31
 8009afc:	b2da      	uxtb	r2, r3
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	705a      	strb	r2, [r3, #1]
        inquiry->PeripheralQualifier = MSC_Handle->hbot.pbuf[0] >> 5U;
 8009b02:	693b      	ldr	r3, [r7, #16]
 8009b04:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009b08:	781b      	ldrb	r3, [r3, #0]
 8009b0a:	095b      	lsrs	r3, r3, #5
 8009b0c:	b2da      	uxtb	r2, r3
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	701a      	strb	r2, [r3, #0]
        if (((uint32_t)MSC_Handle->hbot.pbuf[1] & 0x80U) == 0x80U)
 8009b12:	693b      	ldr	r3, [r7, #16]
 8009b14:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009b18:	3301      	adds	r3, #1
 8009b1a:	781b      	ldrb	r3, [r3, #0]
 8009b1c:	b25b      	sxtb	r3, r3
 8009b1e:	2b00      	cmp	r3, #0
 8009b20:	da03      	bge.n	8009b2a <USBH_MSC_SCSI_Inquiry+0x102>
          inquiry->RemovableMedia = 1U;
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	2201      	movs	r2, #1
 8009b26:	709a      	strb	r2, [r3, #2]
 8009b28:	e002      	b.n	8009b30 <USBH_MSC_SCSI_Inquiry+0x108>
          inquiry->RemovableMedia = 0U;
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	2200      	movs	r2, #0
 8009b2e:	709a      	strb	r2, [r3, #2]
        USBH_memcpy(inquiry->vendor_id, &MSC_Handle->hbot.pbuf[8], 8U);
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	1cd8      	adds	r0, r3, #3
 8009b34:	693b      	ldr	r3, [r7, #16]
 8009b36:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009b3a:	3308      	adds	r3, #8
 8009b3c:	2208      	movs	r2, #8
 8009b3e:	4619      	mov	r1, r3
 8009b40:	f004 fa50 	bl	800dfe4 <memcpy>
        USBH_memcpy(inquiry->product_id, &MSC_Handle->hbot.pbuf[16], 16U);
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	f103 000c 	add.w	r0, r3, #12
 8009b4a:	693b      	ldr	r3, [r7, #16]
 8009b4c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009b50:	3310      	adds	r3, #16
 8009b52:	2210      	movs	r2, #16
 8009b54:	4619      	mov	r1, r3
 8009b56:	f004 fa45 	bl	800dfe4 <memcpy>
        USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	331d      	adds	r3, #29
 8009b5e:	693a      	ldr	r2, [r7, #16]
 8009b60:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
 8009b64:	3220      	adds	r2, #32
 8009b66:	6812      	ldr	r2, [r2, #0]
 8009b68:	601a      	str	r2, [r3, #0]
      break;
 8009b6a:	bf00      	nop
  }

  return error;
 8009b6c:	7dfb      	ldrb	r3, [r7, #23]
}
 8009b6e:	4618      	mov	r0, r3
 8009b70:	3718      	adds	r7, #24
 8009b72:	46bd      	mov	sp, r7
 8009b74:	bd80      	pop	{r7, pc}

08009b76 <USBH_MSC_SCSI_RequestSense>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_RequestSense(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_SenseTypeDef *sense_data)
{
 8009b76:	b580      	push	{r7, lr}
 8009b78:	b086      	sub	sp, #24
 8009b7a:	af00      	add	r7, sp, #0
 8009b7c:	60f8      	str	r0, [r7, #12]
 8009b7e:	460b      	mov	r3, r1
 8009b80:	607a      	str	r2, [r7, #4]
 8009b82:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 8009b84:	2302      	movs	r3, #2
 8009b86:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009b88:	68fb      	ldr	r3, [r7, #12]
 8009b8a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009b8e:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 8009b92:	69db      	ldr	r3, [r3, #28]
 8009b94:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 8009b96:	693b      	ldr	r3, [r7, #16]
 8009b98:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8009b9c:	2b01      	cmp	r3, #1
 8009b9e:	d002      	beq.n	8009ba6 <USBH_MSC_SCSI_RequestSense+0x30>
 8009ba0:	2b02      	cmp	r3, #2
 8009ba2:	d03d      	beq.n	8009c20 <USBH_MSC_SCSI_RequestSense+0xaa>
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
      }
      break;

    default:
      break;
 8009ba4:	e05d      	b.n	8009c62 <USBH_MSC_SCSI_RequestSense+0xec>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_REQUEST_SENSE;
 8009ba6:	693b      	ldr	r3, [r7, #16]
 8009ba8:	220e      	movs	r2, #14
 8009baa:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8009bac:	693b      	ldr	r3, [r7, #16]
 8009bae:	2280      	movs	r2, #128	; 0x80
 8009bb0:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8009bb4:	693b      	ldr	r3, [r7, #16]
 8009bb6:	220a      	movs	r2, #10
 8009bb8:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8009bbc:	693b      	ldr	r3, [r7, #16]
 8009bbe:	3363      	adds	r3, #99	; 0x63
 8009bc0:	2210      	movs	r2, #16
 8009bc2:	2100      	movs	r1, #0
 8009bc4:	4618      	mov	r0, r3
 8009bc6:	f004 fa1b 	bl	800e000 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_REQUEST_SENSE;
 8009bca:	693b      	ldr	r3, [r7, #16]
 8009bcc:	2203      	movs	r2, #3
 8009bce:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 8009bd2:	7afb      	ldrb	r3, [r7, #11]
 8009bd4:	015b      	lsls	r3, r3, #5
 8009bd6:	b2da      	uxtb	r2, r3
 8009bd8:	693b      	ldr	r3, [r7, #16]
 8009bda:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 8009bde:	693b      	ldr	r3, [r7, #16]
 8009be0:	2200      	movs	r2, #0
 8009be2:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 8009be6:	693b      	ldr	r3, [r7, #16]
 8009be8:	2200      	movs	r2, #0
 8009bea:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = DATA_LEN_REQUEST_SENSE;
 8009bee:	693b      	ldr	r3, [r7, #16]
 8009bf0:	220e      	movs	r2, #14
 8009bf2:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 8009bf6:	693b      	ldr	r3, [r7, #16]
 8009bf8:	2200      	movs	r2, #0
 8009bfa:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8009bfe:	693b      	ldr	r3, [r7, #16]
 8009c00:	2201      	movs	r2, #1
 8009c02:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8009c06:	693b      	ldr	r3, [r7, #16]
 8009c08:	2202      	movs	r2, #2
 8009c0a:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 8009c0e:	693b      	ldr	r3, [r7, #16]
 8009c10:	f103 0210 	add.w	r2, r3, #16
 8009c14:	693b      	ldr	r3, [r7, #16]
 8009c16:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 8009c1a:	2301      	movs	r3, #1
 8009c1c:	75fb      	strb	r3, [r7, #23]
      break;
 8009c1e:	e020      	b.n	8009c62 <USBH_MSC_SCSI_RequestSense+0xec>
      error = USBH_MSC_BOT_Process(phost, lun);
 8009c20:	7afb      	ldrb	r3, [r7, #11]
 8009c22:	4619      	mov	r1, r3
 8009c24:	68f8      	ldr	r0, [r7, #12]
 8009c26:	f7ff fbf9 	bl	800941c <USBH_MSC_BOT_Process>
 8009c2a:	4603      	mov	r3, r0
 8009c2c:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 8009c2e:	7dfb      	ldrb	r3, [r7, #23]
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	d115      	bne.n	8009c60 <USBH_MSC_SCSI_RequestSense+0xea>
        sense_data->key  = MSC_Handle->hbot.pbuf[2] & 0x0FU;
 8009c34:	693b      	ldr	r3, [r7, #16]
 8009c36:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009c3a:	3302      	adds	r3, #2
 8009c3c:	781b      	ldrb	r3, [r3, #0]
 8009c3e:	f003 030f 	and.w	r3, r3, #15
 8009c42:	b2da      	uxtb	r2, r3
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	701a      	strb	r2, [r3, #0]
        sense_data->asc  = MSC_Handle->hbot.pbuf[12];
 8009c48:	693b      	ldr	r3, [r7, #16]
 8009c4a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009c4e:	7b1a      	ldrb	r2, [r3, #12]
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	705a      	strb	r2, [r3, #1]
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
 8009c54:	693b      	ldr	r3, [r7, #16]
 8009c56:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009c5a:	7b5a      	ldrb	r2, [r3, #13]
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	709a      	strb	r2, [r3, #2]
      break;
 8009c60:	bf00      	nop
  }

  return error;
 8009c62:	7dfb      	ldrb	r3, [r7, #23]
}
 8009c64:	4618      	mov	r0, r3
 8009c66:	3718      	adds	r7, #24
 8009c68:	46bd      	mov	sp, r7
 8009c6a:	bd80      	pop	{r7, pc}

08009c6c <USBH_MTP_InterfaceInit>:
  *         The function init the MTP class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MTP_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8009c6c:	b590      	push	{r4, r7, lr}
 8009c6e:	b089      	sub	sp, #36	; 0x24
 8009c70:	af04      	add	r7, sp, #16
 8009c72:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  uint8_t interface, endpoint;
  MTP_HandleTypeDef *MTP_Handle;

  interface = USBH_FindInterface(phost, USB_MTP_CLASS, 1U, 1U);
 8009c74:	2301      	movs	r3, #1
 8009c76:	2201      	movs	r2, #1
 8009c78:	2106      	movs	r1, #6
 8009c7a:	6878      	ldr	r0, [r7, #4]
 8009c7c:	f002 faf0 	bl	800c260 <USBH_FindInterface>
 8009c80:	4603      	mov	r3, r0
 8009c82:	73fb      	strb	r3, [r7, #15]
  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8009c84:	7bfb      	ldrb	r3, [r7, #15]
 8009c86:	2bff      	cmp	r3, #255	; 0xff
 8009c88:	d002      	beq.n	8009c90 <USBH_MTP_InterfaceInit+0x24>
 8009c8a:	7bfb      	ldrb	r3, [r7, #15]
 8009c8c:	2b0e      	cmp	r3, #14
 8009c8e:	d90a      	bls.n	8009ca6 <USBH_MTP_InterfaceInit+0x3a>
  {
    USBH_DbgLog("Cannot Find the interface for Still Image Class.");
 8009c90:	48a9      	ldr	r0, [pc, #676]	; (8009f38 <USBH_MTP_InterfaceInit+0x2cc>)
 8009c92:	f004 fd87 	bl	800e7a4 <iprintf>
 8009c96:	48a9      	ldr	r0, [pc, #676]	; (8009f3c <USBH_MTP_InterfaceInit+0x2d0>)
 8009c98:	f004 fd84 	bl	800e7a4 <iprintf>
 8009c9c:	200a      	movs	r0, #10
 8009c9e:	f004 fd99 	bl	800e7d4 <putchar>
    return USBH_FAIL;
 8009ca2:	2302      	movs	r3, #2
 8009ca4:	e1c9      	b.n	800a03a <USBH_MTP_InterfaceInit+0x3ce>
  }

  USBH_SelectInterface(phost, interface);
 8009ca6:	7bfb      	ldrb	r3, [r7, #15]
 8009ca8:	4619      	mov	r1, r3
 8009caa:	6878      	ldr	r0, [r7, #4]
 8009cac:	f002 fa6e 	bl	800c18c <USBH_SelectInterface>

  status = USBH_SelectInterface(phost, interface);
 8009cb0:	7bfb      	ldrb	r3, [r7, #15]
 8009cb2:	4619      	mov	r1, r3
 8009cb4:	6878      	ldr	r0, [r7, #4]
 8009cb6:	f002 fa69 	bl	800c18c <USBH_SelectInterface>
 8009cba:	4603      	mov	r3, r0
 8009cbc:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8009cbe:	7bbb      	ldrb	r3, [r7, #14]
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	d001      	beq.n	8009cc8 <USBH_MTP_InterfaceInit+0x5c>
  {
    return USBH_FAIL;
 8009cc4:	2302      	movs	r3, #2
 8009cc6:	e1b8      	b.n	800a03a <USBH_MTP_InterfaceInit+0x3ce>
  }

  endpoint = MTP_FindCtlEndpoint(phost);
 8009cc8:	6878      	ldr	r0, [r7, #4]
 8009cca:	f000 f9bb 	bl	800a044 <MTP_FindCtlEndpoint>
 8009cce:	4603      	mov	r3, r0
 8009cd0:	737b      	strb	r3, [r7, #13]
  if ((endpoint == 0xFFU) || (endpoint >= USBH_MAX_NUM_ENDPOINTS))
 8009cd2:	7b7b      	ldrb	r3, [r7, #13]
 8009cd4:	2bff      	cmp	r3, #255	; 0xff
 8009cd6:	d002      	beq.n	8009cde <USBH_MTP_InterfaceInit+0x72>
 8009cd8:	7b7b      	ldrb	r3, [r7, #13]
 8009cda:	2b0e      	cmp	r3, #14
 8009cdc:	d90a      	bls.n	8009cf4 <USBH_MTP_InterfaceInit+0x88>
  {
    USBH_DbgLog("Invalid Control endpoint number");
 8009cde:	4896      	ldr	r0, [pc, #600]	; (8009f38 <USBH_MTP_InterfaceInit+0x2cc>)
 8009ce0:	f004 fd60 	bl	800e7a4 <iprintf>
 8009ce4:	4896      	ldr	r0, [pc, #600]	; (8009f40 <USBH_MTP_InterfaceInit+0x2d4>)
 8009ce6:	f004 fd5d 	bl	800e7a4 <iprintf>
 8009cea:	200a      	movs	r0, #10
 8009cec:	f004 fd72 	bl	800e7d4 <putchar>
    return USBH_FAIL;
 8009cf0:	2302      	movs	r3, #2
 8009cf2:	e1a2      	b.n	800a03a <USBH_MTP_InterfaceInit+0x3ce>
  }

  phost->pActiveClass->pData = (MTP_HandleTypeDef *)USBH_malloc(sizeof(MTP_HandleTypeDef));
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009cfa:	f8d3 411c 	ldr.w	r4, [r3, #284]	; 0x11c
 8009cfe:	f242 10d0 	movw	r0, #8656	; 0x21d0
 8009d02:	f004 f95f 	bl	800dfc4 <malloc>
 8009d06:	4603      	mov	r3, r0
 8009d08:	61e3      	str	r3, [r4, #28]
  MTP_Handle = (MTP_HandleTypeDef *)phost->pActiveClass->pData;
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009d10:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 8009d14:	69db      	ldr	r3, [r3, #28]
 8009d16:	60bb      	str	r3, [r7, #8]

  if (MTP_Handle == NULL)
 8009d18:	68bb      	ldr	r3, [r7, #8]
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	d10a      	bne.n	8009d34 <USBH_MTP_InterfaceInit+0xc8>
  {
    USBH_DbgLog("Cannot allocate memory for MTP Handle");
 8009d1e:	4886      	ldr	r0, [pc, #536]	; (8009f38 <USBH_MTP_InterfaceInit+0x2cc>)
 8009d20:	f004 fd40 	bl	800e7a4 <iprintf>
 8009d24:	4887      	ldr	r0, [pc, #540]	; (8009f44 <USBH_MTP_InterfaceInit+0x2d8>)
 8009d26:	f004 fd3d 	bl	800e7a4 <iprintf>
 8009d2a:	200a      	movs	r0, #10
 8009d2c:	f004 fd52 	bl	800e7d4 <putchar>
    return USBH_FAIL;
 8009d30:	2302      	movs	r3, #2
 8009d32:	e182      	b.n	800a03a <USBH_MTP_InterfaceInit+0x3ce>
  }

  /* Initialize mtp handler */
  USBH_memset(MTP_Handle, 0, sizeof(MTP_HandleTypeDef));
 8009d34:	f242 12d0 	movw	r2, #8656	; 0x21d0
 8009d38:	2100      	movs	r1, #0
 8009d3a:	68b8      	ldr	r0, [r7, #8]
 8009d3c:	f004 f960 	bl	800e000 <memset>

  /*Collect the control endpoint address and length*/
  MTP_Handle->NotificationEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[endpoint].bEndpointAddress;
 8009d40:	7bfa      	ldrb	r2, [r7, #15]
 8009d42:	7b7b      	ldrb	r3, [r7, #13]
 8009d44:	6879      	ldr	r1, [r7, #4]
 8009d46:	3301      	adds	r3, #1
 8009d48:	00d8      	lsls	r0, r3, #3
 8009d4a:	4613      	mov	r3, r2
 8009d4c:	019b      	lsls	r3, r3, #6
 8009d4e:	4413      	add	r3, r2
 8009d50:	005b      	lsls	r3, r3, #1
 8009d52:	4403      	add	r3, r0
 8009d54:	440b      	add	r3, r1
 8009d56:	f603 1344 	addw	r3, r3, #2372	; 0x944
 8009d5a:	781a      	ldrb	r2, [r3, #0]
 8009d5c:	68bb      	ldr	r3, [r7, #8]
 8009d5e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009d62:	f883 2d31 	strb.w	r2, [r3, #3377]	; 0xd31
  MTP_Handle->NotificationEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[endpoint].wMaxPacketSize;
 8009d66:	7bfa      	ldrb	r2, [r7, #15]
 8009d68:	7b7b      	ldrb	r3, [r7, #13]
 8009d6a:	6879      	ldr	r1, [r7, #4]
 8009d6c:	3301      	adds	r3, #1
 8009d6e:	00d8      	lsls	r0, r3, #3
 8009d70:	4613      	mov	r3, r2
 8009d72:	019b      	lsls	r3, r3, #6
 8009d74:	4413      	add	r3, r2
 8009d76:	005b      	lsls	r3, r3, #1
 8009d78:	4403      	add	r3, r0
 8009d7a:	440b      	add	r3, r1
 8009d7c:	f603 1346 	addw	r3, r3, #2374	; 0x946
 8009d80:	881a      	ldrh	r2, [r3, #0]
 8009d82:	68bb      	ldr	r3, [r7, #8]
 8009d84:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009d88:	f8a3 2d36 	strh.w	r2, [r3, #3382]	; 0xd36
  MTP_Handle->NotificationPipe = USBH_AllocPipe(phost, MTP_Handle->NotificationEp);
 8009d8c:	68bb      	ldr	r3, [r7, #8]
 8009d8e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009d92:	f893 3d31 	ldrb.w	r3, [r3, #3377]	; 0xd31
 8009d96:	4619      	mov	r1, r3
 8009d98:	6878      	ldr	r0, [r7, #4]
 8009d9a:	f003 fd2c 	bl	800d7f6 <USBH_AllocPipe>
 8009d9e:	4603      	mov	r3, r0
 8009da0:	461a      	mov	r2, r3
 8009da2:	68bb      	ldr	r3, [r7, #8]
 8009da4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009da8:	f883 2d2e 	strb.w	r2, [r3, #3374]	; 0xd2e
  MTP_Handle->events.poll = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[endpoint].bInterval;
 8009dac:	7bfa      	ldrb	r2, [r7, #15]
 8009dae:	7b7b      	ldrb	r3, [r7, #13]
 8009db0:	6879      	ldr	r1, [r7, #4]
 8009db2:	3301      	adds	r3, #1
 8009db4:	00d8      	lsls	r0, r3, #3
 8009db6:	4613      	mov	r3, r2
 8009db8:	019b      	lsls	r3, r3, #6
 8009dba:	4413      	add	r3, r2
 8009dbc:	005b      	lsls	r3, r3, #1
 8009dbe:	4403      	add	r3, r0
 8009dc0:	440b      	add	r3, r1
 8009dc2:	f603 1348 	addw	r3, r3, #2376	; 0x948
 8009dc6:	781b      	ldrb	r3, [r3, #0]
 8009dc8:	b29a      	uxth	r2, r3
 8009dca:	68bb      	ldr	r3, [r7, #8]
 8009dcc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009dd0:	f8a3 2d44 	strh.w	r2, [r3, #3396]	; 0xd44

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, MTP_Handle->NotificationPipe,MTP_Handle->NotificationEp,
 8009dd4:	68bb      	ldr	r3, [r7, #8]
 8009dd6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009dda:	f893 1d2e 	ldrb.w	r1, [r3, #3374]	; 0xd2e
 8009dde:	68bb      	ldr	r3, [r7, #8]
 8009de0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009de4:	f893 0d31 	ldrb.w	r0, [r3, #3377]	; 0xd31
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	f893 491c 	ldrb.w	r4, [r3, #2332]	; 0x91c
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	f893 391d 	ldrb.w	r3, [r3, #2333]	; 0x91d
 8009df4:	68ba      	ldr	r2, [r7, #8]
 8009df6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8009dfa:	f8b2 2d36 	ldrh.w	r2, [r2, #3382]	; 0xd36
 8009dfe:	9202      	str	r2, [sp, #8]
 8009e00:	2203      	movs	r2, #3
 8009e02:	9201      	str	r2, [sp, #4]
 8009e04:	9300      	str	r3, [sp, #0]
 8009e06:	4623      	mov	r3, r4
 8009e08:	4602      	mov	r2, r0
 8009e0a:	6878      	ldr	r0, [r7, #4]
 8009e0c:	f003 fcc4 	bl	800d798 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                MTP_Handle->NotificationEpSize);

  USBH_LL_SetToggle(phost, MTP_Handle->NotificationPipe, 0U);
 8009e10:	68bb      	ldr	r3, [r7, #8]
 8009e12:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009e16:	f893 3d2e 	ldrb.w	r3, [r3, #3374]	; 0xd2e
 8009e1a:	2200      	movs	r2, #0
 8009e1c:	4619      	mov	r1, r3
 8009e1e:	6878      	ldr	r0, [r7, #4]
 8009e20:	f004 f809 	bl	800de36 <USBH_LL_SetToggle>

  endpoint = MTP_FindDataInEndpoint(phost);
 8009e24:	6878      	ldr	r0, [r7, #4]
 8009e26:	f000 f9c7 	bl	800a1b8 <MTP_FindDataInEndpoint>
 8009e2a:	4603      	mov	r3, r0
 8009e2c:	737b      	strb	r3, [r7, #13]
  if ((endpoint == 0xFFU) || (endpoint >= USBH_MAX_NUM_ENDPOINTS))
 8009e2e:	7b7b      	ldrb	r3, [r7, #13]
 8009e30:	2bff      	cmp	r3, #255	; 0xff
 8009e32:	d002      	beq.n	8009e3a <USBH_MTP_InterfaceInit+0x1ce>
 8009e34:	7b7b      	ldrb	r3, [r7, #13]
 8009e36:	2b0e      	cmp	r3, #14
 8009e38:	d90a      	bls.n	8009e50 <USBH_MTP_InterfaceInit+0x1e4>
  {
    USBH_DbgLog("Invalid Data IN endpoint number");
 8009e3a:	483f      	ldr	r0, [pc, #252]	; (8009f38 <USBH_MTP_InterfaceInit+0x2cc>)
 8009e3c:	f004 fcb2 	bl	800e7a4 <iprintf>
 8009e40:	4841      	ldr	r0, [pc, #260]	; (8009f48 <USBH_MTP_InterfaceInit+0x2dc>)
 8009e42:	f004 fcaf 	bl	800e7a4 <iprintf>
 8009e46:	200a      	movs	r0, #10
 8009e48:	f004 fcc4 	bl	800e7d4 <putchar>
    return USBH_FAIL;
 8009e4c:	2302      	movs	r3, #2
 8009e4e:	e0f4      	b.n	800a03a <USBH_MTP_InterfaceInit+0x3ce>
  }

  /*Collect the control endpoint address and length*/
  MTP_Handle->DataInEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[endpoint].bEndpointAddress;
 8009e50:	7bfa      	ldrb	r2, [r7, #15]
 8009e52:	7b7b      	ldrb	r3, [r7, #13]
 8009e54:	6879      	ldr	r1, [r7, #4]
 8009e56:	3301      	adds	r3, #1
 8009e58:	00d8      	lsls	r0, r3, #3
 8009e5a:	4613      	mov	r3, r2
 8009e5c:	019b      	lsls	r3, r3, #6
 8009e5e:	4413      	add	r3, r2
 8009e60:	005b      	lsls	r3, r3, #1
 8009e62:	4403      	add	r3, r0
 8009e64:	440b      	add	r3, r1
 8009e66:	f603 1344 	addw	r3, r3, #2372	; 0x944
 8009e6a:	781a      	ldrb	r2, [r3, #0]
 8009e6c:	68bb      	ldr	r3, [r7, #8]
 8009e6e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009e72:	f883 2d30 	strb.w	r2, [r3, #3376]	; 0xd30
  MTP_Handle->DataInEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[endpoint].wMaxPacketSize;
 8009e76:	7bfa      	ldrb	r2, [r7, #15]
 8009e78:	7b7b      	ldrb	r3, [r7, #13]
 8009e7a:	6879      	ldr	r1, [r7, #4]
 8009e7c:	3301      	adds	r3, #1
 8009e7e:	00d8      	lsls	r0, r3, #3
 8009e80:	4613      	mov	r3, r2
 8009e82:	019b      	lsls	r3, r3, #6
 8009e84:	4413      	add	r3, r2
 8009e86:	005b      	lsls	r3, r3, #1
 8009e88:	4403      	add	r3, r0
 8009e8a:	440b      	add	r3, r1
 8009e8c:	f603 1346 	addw	r3, r3, #2374	; 0x946
 8009e90:	881a      	ldrh	r2, [r3, #0]
 8009e92:	68bb      	ldr	r3, [r7, #8]
 8009e94:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009e98:	f8a3 2d34 	strh.w	r2, [r3, #3380]	; 0xd34
  MTP_Handle->DataInPipe = USBH_AllocPipe(phost, MTP_Handle->DataInEp);
 8009e9c:	68bb      	ldr	r3, [r7, #8]
 8009e9e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009ea2:	f893 3d30 	ldrb.w	r3, [r3, #3376]	; 0xd30
 8009ea6:	4619      	mov	r1, r3
 8009ea8:	6878      	ldr	r0, [r7, #4]
 8009eaa:	f003 fca4 	bl	800d7f6 <USBH_AllocPipe>
 8009eae:	4603      	mov	r3, r0
 8009eb0:	461a      	mov	r2, r3
 8009eb2:	68bb      	ldr	r3, [r7, #8]
 8009eb4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009eb8:	f883 2d2c 	strb.w	r2, [r3, #3372]	; 0xd2c

  /* Open pipe for DATA IN endpoint */
  USBH_OpenPipe(phost, MTP_Handle->DataInPipe, MTP_Handle->DataInEp,
 8009ebc:	68bb      	ldr	r3, [r7, #8]
 8009ebe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009ec2:	f893 1d2c 	ldrb.w	r1, [r3, #3372]	; 0xd2c
 8009ec6:	68bb      	ldr	r3, [r7, #8]
 8009ec8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009ecc:	f893 0d30 	ldrb.w	r0, [r3, #3376]	; 0xd30
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	f893 491c 	ldrb.w	r4, [r3, #2332]	; 0x91c
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	f893 391d 	ldrb.w	r3, [r3, #2333]	; 0x91d
 8009edc:	68ba      	ldr	r2, [r7, #8]
 8009ede:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8009ee2:	f8b2 2d34 	ldrh.w	r2, [r2, #3380]	; 0xd34
 8009ee6:	9202      	str	r2, [sp, #8]
 8009ee8:	2202      	movs	r2, #2
 8009eea:	9201      	str	r2, [sp, #4]
 8009eec:	9300      	str	r3, [sp, #0]
 8009eee:	4623      	mov	r3, r4
 8009ef0:	4602      	mov	r2, r0
 8009ef2:	6878      	ldr	r0, [r7, #4]
 8009ef4:	f003 fc50 	bl	800d798 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                MTP_Handle->DataInEpSize);

  USBH_LL_SetToggle(phost, MTP_Handle->DataInPipe, 0U);
 8009ef8:	68bb      	ldr	r3, [r7, #8]
 8009efa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009efe:	f893 3d2c 	ldrb.w	r3, [r3, #3372]	; 0xd2c
 8009f02:	2200      	movs	r2, #0
 8009f04:	4619      	mov	r1, r3
 8009f06:	6878      	ldr	r0, [r7, #4]
 8009f08:	f003 ff95 	bl	800de36 <USBH_LL_SetToggle>

  endpoint = MTP_FindDataOutEndpoint(phost);
 8009f0c:	6878      	ldr	r0, [r7, #4]
 8009f0e:	f000 f8f6 	bl	800a0fe <MTP_FindDataOutEndpoint>
 8009f12:	4603      	mov	r3, r0
 8009f14:	737b      	strb	r3, [r7, #13]
  if ((endpoint == 0xFFU) || (endpoint >= USBH_MAX_NUM_ENDPOINTS))
 8009f16:	7b7b      	ldrb	r3, [r7, #13]
 8009f18:	2bff      	cmp	r3, #255	; 0xff
 8009f1a:	d002      	beq.n	8009f22 <USBH_MTP_InterfaceInit+0x2b6>
 8009f1c:	7b7b      	ldrb	r3, [r7, #13]
 8009f1e:	2b0e      	cmp	r3, #14
 8009f20:	d916      	bls.n	8009f50 <USBH_MTP_InterfaceInit+0x2e4>
  {
    USBH_DbgLog("Invalid Data OUT endpoint number");
 8009f22:	4805      	ldr	r0, [pc, #20]	; (8009f38 <USBH_MTP_InterfaceInit+0x2cc>)
 8009f24:	f004 fc3e 	bl	800e7a4 <iprintf>
 8009f28:	4808      	ldr	r0, [pc, #32]	; (8009f4c <USBH_MTP_InterfaceInit+0x2e0>)
 8009f2a:	f004 fc3b 	bl	800e7a4 <iprintf>
 8009f2e:	200a      	movs	r0, #10
 8009f30:	f004 fc50 	bl	800e7d4 <putchar>
    return USBH_FAIL;
 8009f34:	2302      	movs	r3, #2
 8009f36:	e080      	b.n	800a03a <USBH_MTP_InterfaceInit+0x3ce>
 8009f38:	0800f83c 	.word	0x0800f83c
 8009f3c:	0800f848 	.word	0x0800f848
 8009f40:	0800f87c 	.word	0x0800f87c
 8009f44:	0800f89c 	.word	0x0800f89c
 8009f48:	0800f8c4 	.word	0x0800f8c4
 8009f4c:	0800f8e4 	.word	0x0800f8e4
  }

  /*Collect the DATA OUT endpoint address and length*/
  MTP_Handle->DataOutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[endpoint].bEndpointAddress;
 8009f50:	7bfa      	ldrb	r2, [r7, #15]
 8009f52:	7b7b      	ldrb	r3, [r7, #13]
 8009f54:	6879      	ldr	r1, [r7, #4]
 8009f56:	3301      	adds	r3, #1
 8009f58:	00d8      	lsls	r0, r3, #3
 8009f5a:	4613      	mov	r3, r2
 8009f5c:	019b      	lsls	r3, r3, #6
 8009f5e:	4413      	add	r3, r2
 8009f60:	005b      	lsls	r3, r3, #1
 8009f62:	4403      	add	r3, r0
 8009f64:	440b      	add	r3, r1
 8009f66:	f603 1344 	addw	r3, r3, #2372	; 0x944
 8009f6a:	781a      	ldrb	r2, [r3, #0]
 8009f6c:	68bb      	ldr	r3, [r7, #8]
 8009f6e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009f72:	f883 2d2f 	strb.w	r2, [r3, #3375]	; 0xd2f
  MTP_Handle->DataOutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[endpoint].wMaxPacketSize;
 8009f76:	7bfa      	ldrb	r2, [r7, #15]
 8009f78:	7b7b      	ldrb	r3, [r7, #13]
 8009f7a:	6879      	ldr	r1, [r7, #4]
 8009f7c:	3301      	adds	r3, #1
 8009f7e:	00d8      	lsls	r0, r3, #3
 8009f80:	4613      	mov	r3, r2
 8009f82:	019b      	lsls	r3, r3, #6
 8009f84:	4413      	add	r3, r2
 8009f86:	005b      	lsls	r3, r3, #1
 8009f88:	4403      	add	r3, r0
 8009f8a:	440b      	add	r3, r1
 8009f8c:	f603 1346 	addw	r3, r3, #2374	; 0x946
 8009f90:	881a      	ldrh	r2, [r3, #0]
 8009f92:	68bb      	ldr	r3, [r7, #8]
 8009f94:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009f98:	f8a3 2d32 	strh.w	r2, [r3, #3378]	; 0xd32
  MTP_Handle->DataOutPipe = USBH_AllocPipe(phost, MTP_Handle->DataOutEp);
 8009f9c:	68bb      	ldr	r3, [r7, #8]
 8009f9e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009fa2:	f893 3d2f 	ldrb.w	r3, [r3, #3375]	; 0xd2f
 8009fa6:	4619      	mov	r1, r3
 8009fa8:	6878      	ldr	r0, [r7, #4]
 8009faa:	f003 fc24 	bl	800d7f6 <USBH_AllocPipe>
 8009fae:	4603      	mov	r3, r0
 8009fb0:	461a      	mov	r2, r3
 8009fb2:	68bb      	ldr	r3, [r7, #8]
 8009fb4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009fb8:	f883 2d2d 	strb.w	r2, [r3, #3373]	; 0xd2d

  /* Open pipe for DATA OUT endpoint */
  USBH_OpenPipe(phost, MTP_Handle->DataOutPipe, MTP_Handle->DataOutEp,
 8009fbc:	68bb      	ldr	r3, [r7, #8]
 8009fbe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009fc2:	f893 1d2d 	ldrb.w	r1, [r3, #3373]	; 0xd2d
 8009fc6:	68bb      	ldr	r3, [r7, #8]
 8009fc8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009fcc:	f893 0d2f 	ldrb.w	r0, [r3, #3375]	; 0xd2f
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	f893 491c 	ldrb.w	r4, [r3, #2332]	; 0x91c
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	f893 391d 	ldrb.w	r3, [r3, #2333]	; 0x91d
 8009fdc:	68ba      	ldr	r2, [r7, #8]
 8009fde:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8009fe2:	f8b2 2d32 	ldrh.w	r2, [r2, #3378]	; 0xd32
 8009fe6:	9202      	str	r2, [sp, #8]
 8009fe8:	2202      	movs	r2, #2
 8009fea:	9201      	str	r2, [sp, #4]
 8009fec:	9300      	str	r3, [sp, #0]
 8009fee:	4623      	mov	r3, r4
 8009ff0:	4602      	mov	r2, r0
 8009ff2:	6878      	ldr	r0, [r7, #4]
 8009ff4:	f003 fbd0 	bl	800d798 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                MTP_Handle->DataOutEpSize);

  USBH_LL_SetToggle(phost, MTP_Handle->DataOutPipe, 0U);
 8009ff8:	68bb      	ldr	r3, [r7, #8]
 8009ffa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009ffe:	f893 3d2d 	ldrb.w	r3, [r3, #3373]	; 0xd2d
 800a002:	2200      	movs	r2, #0
 800a004:	4619      	mov	r1, r3
 800a006:	6878      	ldr	r0, [r7, #4]
 800a008:	f003 ff15 	bl	800de36 <USBH_LL_SetToggle>

  MTP_Handle->state = MTP_OPENSESSION;
 800a00c:	68bb      	ldr	r3, [r7, #8]
 800a00e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a012:	2202      	movs	r2, #2
 800a014:	f883 2d38 	strb.w	r2, [r3, #3384]	; 0xd38
  MTP_Handle->is_ready = 0U;
 800a018:	68bb      	ldr	r3, [r7, #8]
 800a01a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800a01e:	461a      	mov	r2, r3
 800a020:	2300      	movs	r3, #0
 800a022:	f8c2 31cc 	str.w	r3, [r2, #460]	; 0x1cc
  MTP_Handle->events.state = MTP_EVENTS_INIT;
 800a026:	68bb      	ldr	r3, [r7, #8]
 800a028:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a02c:	2200      	movs	r2, #0
 800a02e:	f883 2d3c 	strb.w	r2, [r3, #3388]	; 0xd3c

  return USBH_PTP_Init(phost);
 800a032:	6878      	ldr	r0, [r7, #4]
 800a034:	f000 fdb1 	bl	800ab9a <USBH_PTP_Init>
 800a038:	4603      	mov	r3, r0
}
 800a03a:	4618      	mov	r0, r3
 800a03c:	3714      	adds	r7, #20
 800a03e:	46bd      	mov	sp, r7
 800a040:	bd90      	pop	{r4, r7, pc}
 800a042:	bf00      	nop

0800a044 <MTP_FindCtlEndpoint>:
  * @brief  Find MTP Ctl interface
  * @param  phost: Host handle
  * @retval USBH Status
  */
static uint8_t MTP_FindCtlEndpoint(USBH_HandleTypeDef *phost)
{
 800a044:	b480      	push	{r7}
 800a046:	b085      	sub	sp, #20
 800a048:	af00      	add	r7, sp, #0
 800a04a:	6078      	str	r0, [r7, #4]
  uint8_t interface, endpoint;

  for (interface = 0U;  interface < USBH_MAX_NUM_INTERFACES ; interface ++)
 800a04c:	2300      	movs	r3, #0
 800a04e:	73fb      	strb	r3, [r7, #15]
 800a050:	e04c      	b.n	800a0ec <MTP_FindCtlEndpoint+0xa8>
  {
    if (phost->device.CfgDesc.Itf_Desc[interface].bInterfaceClass == USB_MTP_CLASS)
 800a052:	7bfa      	ldrb	r2, [r7, #15]
 800a054:	6879      	ldr	r1, [r7, #4]
 800a056:	4613      	mov	r3, r2
 800a058:	019b      	lsls	r3, r3, #6
 800a05a:	4413      	add	r3, r2
 800a05c:	005b      	lsls	r3, r3, #1
 800a05e:	440b      	add	r3, r1
 800a060:	f603 1345 	addw	r3, r3, #2373	; 0x945
 800a064:	781b      	ldrb	r3, [r3, #0]
 800a066:	2b06      	cmp	r3, #6
 800a068:	d13d      	bne.n	800a0e6 <MTP_FindCtlEndpoint+0xa2>
    {
      for (endpoint = 0U;  endpoint < USBH_MAX_NUM_ENDPOINTS ; endpoint ++)
 800a06a:	2300      	movs	r3, #0
 800a06c:	73bb      	strb	r3, [r7, #14]
 800a06e:	e037      	b.n	800a0e0 <MTP_FindCtlEndpoint+0x9c>
      {
        if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[endpoint].bEndpointAddress & 0x80U) &&
 800a070:	7bfa      	ldrb	r2, [r7, #15]
 800a072:	7bbb      	ldrb	r3, [r7, #14]
 800a074:	6879      	ldr	r1, [r7, #4]
 800a076:	3301      	adds	r3, #1
 800a078:	00d8      	lsls	r0, r3, #3
 800a07a:	4613      	mov	r3, r2
 800a07c:	019b      	lsls	r3, r3, #6
 800a07e:	4413      	add	r3, r2
 800a080:	005b      	lsls	r3, r3, #1
 800a082:	4403      	add	r3, r0
 800a084:	440b      	add	r3, r1
 800a086:	f603 1344 	addw	r3, r3, #2372	; 0x944
 800a08a:	781b      	ldrb	r3, [r3, #0]
 800a08c:	b25b      	sxtb	r3, r3
 800a08e:	2b00      	cmp	r3, #0
 800a090:	da23      	bge.n	800a0da <MTP_FindCtlEndpoint+0x96>
            (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[endpoint].wMaxPacketSize > 0U) &&
 800a092:	7bfa      	ldrb	r2, [r7, #15]
 800a094:	7bbb      	ldrb	r3, [r7, #14]
 800a096:	6879      	ldr	r1, [r7, #4]
 800a098:	3301      	adds	r3, #1
 800a09a:	00d8      	lsls	r0, r3, #3
 800a09c:	4613      	mov	r3, r2
 800a09e:	019b      	lsls	r3, r3, #6
 800a0a0:	4413      	add	r3, r2
 800a0a2:	005b      	lsls	r3, r3, #1
 800a0a4:	4403      	add	r3, r0
 800a0a6:	440b      	add	r3, r1
 800a0a8:	f603 1346 	addw	r3, r3, #2374	; 0x946
 800a0ac:	881b      	ldrh	r3, [r3, #0]
        if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[endpoint].bEndpointAddress & 0x80U) &&
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	d013      	beq.n	800a0da <MTP_FindCtlEndpoint+0x96>
            ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[endpoint].bmAttributes & USBH_EP_INTERRUPT) == USBH_EP_INTERRUPT))
 800a0b2:	7bfa      	ldrb	r2, [r7, #15]
 800a0b4:	7bbb      	ldrb	r3, [r7, #14]
 800a0b6:	6879      	ldr	r1, [r7, #4]
 800a0b8:	3301      	adds	r3, #1
 800a0ba:	00d8      	lsls	r0, r3, #3
 800a0bc:	4613      	mov	r3, r2
 800a0be:	019b      	lsls	r3, r3, #6
 800a0c0:	4413      	add	r3, r2
 800a0c2:	005b      	lsls	r3, r3, #1
 800a0c4:	4403      	add	r3, r0
 800a0c6:	440b      	add	r3, r1
 800a0c8:	f603 1345 	addw	r3, r3, #2373	; 0x945
 800a0cc:	781b      	ldrb	r3, [r3, #0]
 800a0ce:	f003 0303 	and.w	r3, r3, #3
            (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[endpoint].wMaxPacketSize > 0U) &&
 800a0d2:	2b03      	cmp	r3, #3
 800a0d4:	d101      	bne.n	800a0da <MTP_FindCtlEndpoint+0x96>
        {
          return endpoint;
 800a0d6:	7bbb      	ldrb	r3, [r7, #14]
 800a0d8:	e00c      	b.n	800a0f4 <MTP_FindCtlEndpoint+0xb0>
      for (endpoint = 0U;  endpoint < USBH_MAX_NUM_ENDPOINTS ; endpoint ++)
 800a0da:	7bbb      	ldrb	r3, [r7, #14]
 800a0dc:	3301      	adds	r3, #1
 800a0de:	73bb      	strb	r3, [r7, #14]
 800a0e0:	7bbb      	ldrb	r3, [r7, #14]
 800a0e2:	2b0e      	cmp	r3, #14
 800a0e4:	d9c4      	bls.n	800a070 <MTP_FindCtlEndpoint+0x2c>
  for (interface = 0U;  interface < USBH_MAX_NUM_INTERFACES ; interface ++)
 800a0e6:	7bfb      	ldrb	r3, [r7, #15]
 800a0e8:	3301      	adds	r3, #1
 800a0ea:	73fb      	strb	r3, [r7, #15]
 800a0ec:	7bfb      	ldrb	r3, [r7, #15]
 800a0ee:	2b0e      	cmp	r3, #14
 800a0f0:	d9af      	bls.n	800a052 <MTP_FindCtlEndpoint+0xe>
        }
      }
    }
  }

  return 0xFFU; /* Invalid Endpoint */
 800a0f2:	23ff      	movs	r3, #255	; 0xff
}
 800a0f4:	4618      	mov	r0, r3
 800a0f6:	3714      	adds	r7, #20
 800a0f8:	46bd      	mov	sp, r7
 800a0fa:	bc80      	pop	{r7}
 800a0fc:	4770      	bx	lr

0800a0fe <MTP_FindDataOutEndpoint>:
  * @brief  Find MTP DATA OUT interface
  * @param  phost: Host handle
  * @retval USBH Status
  */
static uint8_t MTP_FindDataOutEndpoint(USBH_HandleTypeDef *phost)
{
 800a0fe:	b480      	push	{r7}
 800a100:	b085      	sub	sp, #20
 800a102:	af00      	add	r7, sp, #0
 800a104:	6078      	str	r0, [r7, #4]
  uint8_t interface, endpoint;

  for (interface = 0U;  interface < USBH_MAX_NUM_INTERFACES ; interface ++)
 800a106:	2300      	movs	r3, #0
 800a108:	73fb      	strb	r3, [r7, #15]
 800a10a:	e04c      	b.n	800a1a6 <MTP_FindDataOutEndpoint+0xa8>
  {
    if (phost->device.CfgDesc.Itf_Desc[interface].bInterfaceClass == USB_MTP_CLASS)
 800a10c:	7bfa      	ldrb	r2, [r7, #15]
 800a10e:	6879      	ldr	r1, [r7, #4]
 800a110:	4613      	mov	r3, r2
 800a112:	019b      	lsls	r3, r3, #6
 800a114:	4413      	add	r3, r2
 800a116:	005b      	lsls	r3, r3, #1
 800a118:	440b      	add	r3, r1
 800a11a:	f603 1345 	addw	r3, r3, #2373	; 0x945
 800a11e:	781b      	ldrb	r3, [r3, #0]
 800a120:	2b06      	cmp	r3, #6
 800a122:	d13d      	bne.n	800a1a0 <MTP_FindDataOutEndpoint+0xa2>
    {
      for (endpoint = 0U;  endpoint < USBH_MAX_NUM_ENDPOINTS ; endpoint ++)
 800a124:	2300      	movs	r3, #0
 800a126:	73bb      	strb	r3, [r7, #14]
 800a128:	e037      	b.n	800a19a <MTP_FindDataOutEndpoint+0x9c>
      {

        if (((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[endpoint].bEndpointAddress & 0x80U) == 0U) &&
 800a12a:	7bfa      	ldrb	r2, [r7, #15]
 800a12c:	7bbb      	ldrb	r3, [r7, #14]
 800a12e:	6879      	ldr	r1, [r7, #4]
 800a130:	3301      	adds	r3, #1
 800a132:	00d8      	lsls	r0, r3, #3
 800a134:	4613      	mov	r3, r2
 800a136:	019b      	lsls	r3, r3, #6
 800a138:	4413      	add	r3, r2
 800a13a:	005b      	lsls	r3, r3, #1
 800a13c:	4403      	add	r3, r0
 800a13e:	440b      	add	r3, r1
 800a140:	f603 1344 	addw	r3, r3, #2372	; 0x944
 800a144:	781b      	ldrb	r3, [r3, #0]
 800a146:	b25b      	sxtb	r3, r3
 800a148:	2b00      	cmp	r3, #0
 800a14a:	db23      	blt.n	800a194 <MTP_FindDataOutEndpoint+0x96>
            (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[endpoint].wMaxPacketSize > 0U) &&
 800a14c:	7bfa      	ldrb	r2, [r7, #15]
 800a14e:	7bbb      	ldrb	r3, [r7, #14]
 800a150:	6879      	ldr	r1, [r7, #4]
 800a152:	3301      	adds	r3, #1
 800a154:	00d8      	lsls	r0, r3, #3
 800a156:	4613      	mov	r3, r2
 800a158:	019b      	lsls	r3, r3, #6
 800a15a:	4413      	add	r3, r2
 800a15c:	005b      	lsls	r3, r3, #1
 800a15e:	4403      	add	r3, r0
 800a160:	440b      	add	r3, r1
 800a162:	f603 1346 	addw	r3, r3, #2374	; 0x946
 800a166:	881b      	ldrh	r3, [r3, #0]
        if (((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[endpoint].bEndpointAddress & 0x80U) == 0U) &&
 800a168:	2b00      	cmp	r3, #0
 800a16a:	d013      	beq.n	800a194 <MTP_FindDataOutEndpoint+0x96>
            ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[endpoint].bmAttributes & USBH_EP_BULK) == USBH_EP_BULK))
 800a16c:	7bfa      	ldrb	r2, [r7, #15]
 800a16e:	7bbb      	ldrb	r3, [r7, #14]
 800a170:	6879      	ldr	r1, [r7, #4]
 800a172:	3301      	adds	r3, #1
 800a174:	00d8      	lsls	r0, r3, #3
 800a176:	4613      	mov	r3, r2
 800a178:	019b      	lsls	r3, r3, #6
 800a17a:	4413      	add	r3, r2
 800a17c:	005b      	lsls	r3, r3, #1
 800a17e:	4403      	add	r3, r0
 800a180:	440b      	add	r3, r1
 800a182:	f603 1345 	addw	r3, r3, #2373	; 0x945
 800a186:	781b      	ldrb	r3, [r3, #0]
 800a188:	f003 0302 	and.w	r3, r3, #2
            (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[endpoint].wMaxPacketSize > 0U) &&
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	d001      	beq.n	800a194 <MTP_FindDataOutEndpoint+0x96>
        {
          return endpoint;
 800a190:	7bbb      	ldrb	r3, [r7, #14]
 800a192:	e00c      	b.n	800a1ae <MTP_FindDataOutEndpoint+0xb0>
      for (endpoint = 0U;  endpoint < USBH_MAX_NUM_ENDPOINTS ; endpoint ++)
 800a194:	7bbb      	ldrb	r3, [r7, #14]
 800a196:	3301      	adds	r3, #1
 800a198:	73bb      	strb	r3, [r7, #14]
 800a19a:	7bbb      	ldrb	r3, [r7, #14]
 800a19c:	2b0e      	cmp	r3, #14
 800a19e:	d9c4      	bls.n	800a12a <MTP_FindDataOutEndpoint+0x2c>
  for (interface = 0U;  interface < USBH_MAX_NUM_INTERFACES ; interface ++)
 800a1a0:	7bfb      	ldrb	r3, [r7, #15]
 800a1a2:	3301      	adds	r3, #1
 800a1a4:	73fb      	strb	r3, [r7, #15]
 800a1a6:	7bfb      	ldrb	r3, [r7, #15]
 800a1a8:	2b0e      	cmp	r3, #14
 800a1aa:	d9af      	bls.n	800a10c <MTP_FindDataOutEndpoint+0xe>
        }
      }
    }
  }

  return 0xFFU; /* Invalid Endpoint */
 800a1ac:	23ff      	movs	r3, #255	; 0xff
}
 800a1ae:	4618      	mov	r0, r3
 800a1b0:	3714      	adds	r7, #20
 800a1b2:	46bd      	mov	sp, r7
 800a1b4:	bc80      	pop	{r7}
 800a1b6:	4770      	bx	lr

0800a1b8 <MTP_FindDataInEndpoint>:
  * @brief  Find MTP DATA IN interface
  * @param  phost: Host handle
  * @retval USBH Status
  */
static uint8_t MTP_FindDataInEndpoint(USBH_HandleTypeDef *phost)
{
 800a1b8:	b480      	push	{r7}
 800a1ba:	b085      	sub	sp, #20
 800a1bc:	af00      	add	r7, sp, #0
 800a1be:	6078      	str	r0, [r7, #4]
  uint8_t interface, endpoint;

  for (interface = 0U;  interface < USBH_MAX_NUM_INTERFACES; interface ++)
 800a1c0:	2300      	movs	r3, #0
 800a1c2:	73fb      	strb	r3, [r7, #15]
 800a1c4:	e04c      	b.n	800a260 <MTP_FindDataInEndpoint+0xa8>
  {
    if (phost->device.CfgDesc.Itf_Desc[interface].bInterfaceClass == USB_MTP_CLASS)
 800a1c6:	7bfa      	ldrb	r2, [r7, #15]
 800a1c8:	6879      	ldr	r1, [r7, #4]
 800a1ca:	4613      	mov	r3, r2
 800a1cc:	019b      	lsls	r3, r3, #6
 800a1ce:	4413      	add	r3, r2
 800a1d0:	005b      	lsls	r3, r3, #1
 800a1d2:	440b      	add	r3, r1
 800a1d4:	f603 1345 	addw	r3, r3, #2373	; 0x945
 800a1d8:	781b      	ldrb	r3, [r3, #0]
 800a1da:	2b06      	cmp	r3, #6
 800a1dc:	d13d      	bne.n	800a25a <MTP_FindDataInEndpoint+0xa2>
    {
      for (endpoint = 0U;  endpoint < USBH_MAX_NUM_ENDPOINTS; endpoint ++)
 800a1de:	2300      	movs	r3, #0
 800a1e0:	73bb      	strb	r3, [r7, #14]
 800a1e2:	e037      	b.n	800a254 <MTP_FindDataInEndpoint+0x9c>
      {

        if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[endpoint].bEndpointAddress & 0x80U) &&
 800a1e4:	7bfa      	ldrb	r2, [r7, #15]
 800a1e6:	7bbb      	ldrb	r3, [r7, #14]
 800a1e8:	6879      	ldr	r1, [r7, #4]
 800a1ea:	3301      	adds	r3, #1
 800a1ec:	00d8      	lsls	r0, r3, #3
 800a1ee:	4613      	mov	r3, r2
 800a1f0:	019b      	lsls	r3, r3, #6
 800a1f2:	4413      	add	r3, r2
 800a1f4:	005b      	lsls	r3, r3, #1
 800a1f6:	4403      	add	r3, r0
 800a1f8:	440b      	add	r3, r1
 800a1fa:	f603 1344 	addw	r3, r3, #2372	; 0x944
 800a1fe:	781b      	ldrb	r3, [r3, #0]
 800a200:	b25b      	sxtb	r3, r3
 800a202:	2b00      	cmp	r3, #0
 800a204:	da23      	bge.n	800a24e <MTP_FindDataInEndpoint+0x96>
            (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[endpoint].wMaxPacketSize > 0U) &&
 800a206:	7bfa      	ldrb	r2, [r7, #15]
 800a208:	7bbb      	ldrb	r3, [r7, #14]
 800a20a:	6879      	ldr	r1, [r7, #4]
 800a20c:	3301      	adds	r3, #1
 800a20e:	00d8      	lsls	r0, r3, #3
 800a210:	4613      	mov	r3, r2
 800a212:	019b      	lsls	r3, r3, #6
 800a214:	4413      	add	r3, r2
 800a216:	005b      	lsls	r3, r3, #1
 800a218:	4403      	add	r3, r0
 800a21a:	440b      	add	r3, r1
 800a21c:	f603 1346 	addw	r3, r3, #2374	; 0x946
 800a220:	881b      	ldrh	r3, [r3, #0]
        if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[endpoint].bEndpointAddress & 0x80U) &&
 800a222:	2b00      	cmp	r3, #0
 800a224:	d013      	beq.n	800a24e <MTP_FindDataInEndpoint+0x96>
            ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[endpoint].bmAttributes & USBH_EP_BULK) == USBH_EP_BULK))
 800a226:	7bfa      	ldrb	r2, [r7, #15]
 800a228:	7bbb      	ldrb	r3, [r7, #14]
 800a22a:	6879      	ldr	r1, [r7, #4]
 800a22c:	3301      	adds	r3, #1
 800a22e:	00d8      	lsls	r0, r3, #3
 800a230:	4613      	mov	r3, r2
 800a232:	019b      	lsls	r3, r3, #6
 800a234:	4413      	add	r3, r2
 800a236:	005b      	lsls	r3, r3, #1
 800a238:	4403      	add	r3, r0
 800a23a:	440b      	add	r3, r1
 800a23c:	f603 1345 	addw	r3, r3, #2373	; 0x945
 800a240:	781b      	ldrb	r3, [r3, #0]
 800a242:	f003 0302 	and.w	r3, r3, #2
            (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[endpoint].wMaxPacketSize > 0U) &&
 800a246:	2b00      	cmp	r3, #0
 800a248:	d001      	beq.n	800a24e <MTP_FindDataInEndpoint+0x96>
        {
          return endpoint;
 800a24a:	7bbb      	ldrb	r3, [r7, #14]
 800a24c:	e00c      	b.n	800a268 <MTP_FindDataInEndpoint+0xb0>
      for (endpoint = 0U;  endpoint < USBH_MAX_NUM_ENDPOINTS; endpoint ++)
 800a24e:	7bbb      	ldrb	r3, [r7, #14]
 800a250:	3301      	adds	r3, #1
 800a252:	73bb      	strb	r3, [r7, #14]
 800a254:	7bbb      	ldrb	r3, [r7, #14]
 800a256:	2b0e      	cmp	r3, #14
 800a258:	d9c4      	bls.n	800a1e4 <MTP_FindDataInEndpoint+0x2c>
  for (interface = 0U;  interface < USBH_MAX_NUM_INTERFACES; interface ++)
 800a25a:	7bfb      	ldrb	r3, [r7, #15]
 800a25c:	3301      	adds	r3, #1
 800a25e:	73fb      	strb	r3, [r7, #15]
 800a260:	7bfb      	ldrb	r3, [r7, #15]
 800a262:	2b0e      	cmp	r3, #14
 800a264:	d9af      	bls.n	800a1c6 <MTP_FindDataInEndpoint+0xe>
        }
      }
    }
  }

  return 0xFFU; /* Invalid Endpoint */
 800a266:	23ff      	movs	r3, #255	; 0xff
}
 800a268:	4618      	mov	r0, r3
 800a26a:	3714      	adds	r7, #20
 800a26c:	46bd      	mov	sp, r7
 800a26e:	bc80      	pop	{r7}
 800a270:	4770      	bx	lr

0800a272 <USBH_MTP_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the MTP class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MTP_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 800a272:	b580      	push	{r7, lr}
 800a274:	b084      	sub	sp, #16
 800a276:	af00      	add	r7, sp, #0
 800a278:	6078      	str	r0, [r7, #4]
  MTP_HandleTypeDef *MTP_Handle = (MTP_HandleTypeDef *)phost->pActiveClass->pData;
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a280:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 800a284:	69db      	ldr	r3, [r3, #28]
 800a286:	60fb      	str	r3, [r7, #12]

  if (MTP_Handle->DataOutPipe != 0U)
 800a288:	68fb      	ldr	r3, [r7, #12]
 800a28a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a28e:	f893 3d2d 	ldrb.w	r3, [r3, #3373]	; 0xd2d
 800a292:	2b00      	cmp	r3, #0
 800a294:	d017      	beq.n	800a2c6 <USBH_MTP_InterfaceDeInit+0x54>
  {
    USBH_ClosePipe(phost, MTP_Handle->DataOutPipe);
 800a296:	68fb      	ldr	r3, [r7, #12]
 800a298:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a29c:	f893 3d2d 	ldrb.w	r3, [r3, #3373]	; 0xd2d
 800a2a0:	4619      	mov	r1, r3
 800a2a2:	6878      	ldr	r0, [r7, #4]
 800a2a4:	f003 fa97 	bl	800d7d6 <USBH_ClosePipe>
    USBH_FreePipe(phost, MTP_Handle->DataOutPipe);
 800a2a8:	68fb      	ldr	r3, [r7, #12]
 800a2aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a2ae:	f893 3d2d 	ldrb.w	r3, [r3, #3373]	; 0xd2d
 800a2b2:	4619      	mov	r1, r3
 800a2b4:	6878      	ldr	r0, [r7, #4]
 800a2b6:	f003 fac0 	bl	800d83a <USBH_FreePipe>
    MTP_Handle->DataOutPipe = 0U;     /* Reset the Channel as Free */
 800a2ba:	68fb      	ldr	r3, [r7, #12]
 800a2bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a2c0:	2200      	movs	r2, #0
 800a2c2:	f883 2d2d 	strb.w	r2, [r3, #3373]	; 0xd2d
  }

  if (MTP_Handle->DataInPipe != 0U)
 800a2c6:	68fb      	ldr	r3, [r7, #12]
 800a2c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a2cc:	f893 3d2c 	ldrb.w	r3, [r3, #3372]	; 0xd2c
 800a2d0:	2b00      	cmp	r3, #0
 800a2d2:	d017      	beq.n	800a304 <USBH_MTP_InterfaceDeInit+0x92>
  {
    USBH_ClosePipe(phost, MTP_Handle->DataInPipe);
 800a2d4:	68fb      	ldr	r3, [r7, #12]
 800a2d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a2da:	f893 3d2c 	ldrb.w	r3, [r3, #3372]	; 0xd2c
 800a2de:	4619      	mov	r1, r3
 800a2e0:	6878      	ldr	r0, [r7, #4]
 800a2e2:	f003 fa78 	bl	800d7d6 <USBH_ClosePipe>
    USBH_FreePipe(phost, MTP_Handle->DataInPipe);
 800a2e6:	68fb      	ldr	r3, [r7, #12]
 800a2e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a2ec:	f893 3d2c 	ldrb.w	r3, [r3, #3372]	; 0xd2c
 800a2f0:	4619      	mov	r1, r3
 800a2f2:	6878      	ldr	r0, [r7, #4]
 800a2f4:	f003 faa1 	bl	800d83a <USBH_FreePipe>
    MTP_Handle->DataInPipe = 0U;     /* Reset the Channel as Free */
 800a2f8:	68fb      	ldr	r3, [r7, #12]
 800a2fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a2fe:	2200      	movs	r2, #0
 800a300:	f883 2d2c 	strb.w	r2, [r3, #3372]	; 0xd2c
  }

  if (MTP_Handle->NotificationPipe != 0U)
 800a304:	68fb      	ldr	r3, [r7, #12]
 800a306:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a30a:	f893 3d2e 	ldrb.w	r3, [r3, #3374]	; 0xd2e
 800a30e:	2b00      	cmp	r3, #0
 800a310:	d017      	beq.n	800a342 <USBH_MTP_InterfaceDeInit+0xd0>
  {
    USBH_ClosePipe(phost, MTP_Handle->NotificationPipe);
 800a312:	68fb      	ldr	r3, [r7, #12]
 800a314:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a318:	f893 3d2e 	ldrb.w	r3, [r3, #3374]	; 0xd2e
 800a31c:	4619      	mov	r1, r3
 800a31e:	6878      	ldr	r0, [r7, #4]
 800a320:	f003 fa59 	bl	800d7d6 <USBH_ClosePipe>
    USBH_FreePipe(phost, MTP_Handle->NotificationPipe);
 800a324:	68fb      	ldr	r3, [r7, #12]
 800a326:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a32a:	f893 3d2e 	ldrb.w	r3, [r3, #3374]	; 0xd2e
 800a32e:	4619      	mov	r1, r3
 800a330:	6878      	ldr	r0, [r7, #4]
 800a332:	f003 fa82 	bl	800d83a <USBH_FreePipe>
    MTP_Handle->NotificationPipe = 0U;     /* Reset the Channel as Free */
 800a336:	68fb      	ldr	r3, [r7, #12]
 800a338:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a33c:	2200      	movs	r2, #0
 800a33e:	f883 2d2e 	strb.w	r2, [r3, #3374]	; 0xd2e
  }

  if (phost->pActiveClass->pData != NULL)
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a348:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 800a34c:	69db      	ldr	r3, [r3, #28]
 800a34e:	2b00      	cmp	r3, #0
 800a350:	d00f      	beq.n	800a372 <USBH_MTP_InterfaceDeInit+0x100>
  {
    USBH_free(phost->pActiveClass->pData);
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a358:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 800a35c:	69db      	ldr	r3, [r3, #28]
 800a35e:	4618      	mov	r0, r3
 800a360:	f003 fe38 	bl	800dfd4 <free>
    phost->pActiveClass->pData = 0U;
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a36a:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 800a36e:	2200      	movs	r2, #0
 800a370:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800a372:	2300      	movs	r3, #0
}
 800a374:	4618      	mov	r0, r3
 800a376:	3710      	adds	r7, #16
 800a378:	46bd      	mov	sp, r7
 800a37a:	bd80      	pop	{r7, pc}

0800a37c <USBH_MTP_ClassRequest>:
  *         for MTP class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MTP_ClassRequest(USBH_HandleTypeDef *phost)
{
 800a37c:	b480      	push	{r7}
 800a37e:	b083      	sub	sp, #12
 800a380:	af00      	add	r7, sp, #0
 800a382:	6078      	str	r0, [r7, #4]
#else
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
#endif

  return USBH_OK;
 800a384:	2300      	movs	r3, #0
}
 800a386:	4618      	mov	r0, r3
 800a388:	370c      	adds	r7, #12
 800a38a:	46bd      	mov	sp, r7
 800a38c:	bc80      	pop	{r7}
 800a38e:	4770      	bx	lr

0800a390 <USBH_MTP_Process>:
  *         The function is for managing state machine for MTP data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MTP_Process(USBH_HandleTypeDef *phost)
{
 800a390:	b580      	push	{r7, lr}
 800a392:	b086      	sub	sp, #24
 800a394:	af00      	add	r7, sp, #0
 800a396:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 800a398:	2301      	movs	r3, #1
 800a39a:	75fb      	strb	r3, [r7, #23]
  MTP_HandleTypeDef *MTP_Handle = (MTP_HandleTypeDef *)phost->pActiveClass->pData;
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a3a2:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 800a3a6:	69db      	ldr	r3, [r3, #28]
 800a3a8:	60fb      	str	r3, [r7, #12]
  uint32_t idx = 0U;
 800a3aa:	2300      	movs	r3, #0
 800a3ac:	613b      	str	r3, [r7, #16]

  switch (MTP_Handle->state)
 800a3ae:	68fb      	ldr	r3, [r7, #12]
 800a3b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a3b4:	f893 3d38 	ldrb.w	r3, [r3, #3384]	; 0xd38
 800a3b8:	2b05      	cmp	r3, #5
 800a3ba:	f200 81d7 	bhi.w	800a76c <USBH_MTP_Process+0x3dc>
 800a3be:	a201      	add	r2, pc, #4	; (adr r2, 800a3c4 <USBH_MTP_Process+0x34>)
 800a3c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a3c4:	0800a761 	.word	0x0800a761
 800a3c8:	0800a40b 	.word	0x0800a40b
 800a3cc:	0800a3dd 	.word	0x0800a3dd
 800a3d0:	0800a76d 	.word	0x0800a76d
 800a3d4:	0800a555 	.word	0x0800a555
 800a3d8:	0800a5e1 	.word	0x0800a5e1
  {
    case  MTP_OPENSESSION:
      status = USBH_PTP_OpenSession(phost, 1U);  /* Session '0' is not valid */
 800a3dc:	2101      	movs	r1, #1
 800a3de:	6878      	ldr	r0, [r7, #4]
 800a3e0:	f001 fbfa 	bl	800bbd8 <USBH_PTP_OpenSession>
 800a3e4:	4603      	mov	r3, r0
 800a3e6:	75fb      	strb	r3, [r7, #23]

      if (status == USBH_OK)
 800a3e8:	7dfb      	ldrb	r3, [r7, #23]
 800a3ea:	2b00      	cmp	r3, #0
 800a3ec:	f040 81c0 	bne.w	800a770 <USBH_MTP_Process+0x3e0>
      {
        USBH_UsrLog("MTP Session #0 Opened");
 800a3f0:	48c5      	ldr	r0, [pc, #788]	; (800a708 <USBH_MTP_Process+0x378>)
 800a3f2:	f004 f9d7 	bl	800e7a4 <iprintf>
 800a3f6:	200a      	movs	r0, #10
 800a3f8:	f004 f9ec 	bl	800e7d4 <putchar>
        MTP_Handle->state = MTP_GETDEVICEINFO;
 800a3fc:	68fb      	ldr	r3, [r7, #12]
 800a3fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a402:	2201      	movs	r2, #1
 800a404:	f883 2d38 	strb.w	r2, [r3, #3384]	; 0xd38
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800a408:	e1b2      	b.n	800a770 <USBH_MTP_Process+0x3e0>

    case MTP_GETDEVICEINFO:
      status = USBH_PTP_GetDeviceInfo(phost, &(MTP_Handle->info.devinfo));
 800a40a:	68fb      	ldr	r3, [r7, #12]
 800a40c:	4619      	mov	r1, r3
 800a40e:	6878      	ldr	r0, [r7, #4]
 800a410:	f001 fc49 	bl	800bca6 <USBH_PTP_GetDeviceInfo>
 800a414:	4603      	mov	r3, r0
 800a416:	75fb      	strb	r3, [r7, #23]

      if (status == USBH_OK)
 800a418:	7dfb      	ldrb	r3, [r7, #23]
 800a41a:	2b00      	cmp	r3, #0
 800a41c:	f040 81aa 	bne.w	800a774 <USBH_MTP_Process+0x3e4>
      {
        USBH_DbgLog(">>>>> MTP Device Information");
 800a420:	48ba      	ldr	r0, [pc, #744]	; (800a70c <USBH_MTP_Process+0x37c>)
 800a422:	f004 f9bf 	bl	800e7a4 <iprintf>
 800a426:	48ba      	ldr	r0, [pc, #744]	; (800a710 <USBH_MTP_Process+0x380>)
 800a428:	f004 f9bc 	bl	800e7a4 <iprintf>
 800a42c:	200a      	movs	r0, #10
 800a42e:	f004 f9d1 	bl	800e7d4 <putchar>
        USBH_DbgLog("Standard version : %x", MTP_Handle->info.devinfo.StandardVersion);
 800a432:	48b6      	ldr	r0, [pc, #728]	; (800a70c <USBH_MTP_Process+0x37c>)
 800a434:	f004 f9b6 	bl	800e7a4 <iprintf>
 800a438:	68fb      	ldr	r3, [r7, #12]
 800a43a:	881b      	ldrh	r3, [r3, #0]
 800a43c:	4619      	mov	r1, r3
 800a43e:	48b5      	ldr	r0, [pc, #724]	; (800a714 <USBH_MTP_Process+0x384>)
 800a440:	f004 f9b0 	bl	800e7a4 <iprintf>
 800a444:	200a      	movs	r0, #10
 800a446:	f004 f9c5 	bl	800e7d4 <putchar>
        USBH_DbgLog("Vendor ExtID : %s", (MTP_Handle->info.devinfo.VendorExtensionID == 6) ? "MTP" : "NOT SUPPORTED");
 800a44a:	48b0      	ldr	r0, [pc, #704]	; (800a70c <USBH_MTP_Process+0x37c>)
 800a44c:	f004 f9aa 	bl	800e7a4 <iprintf>
 800a450:	68fb      	ldr	r3, [r7, #12]
 800a452:	685b      	ldr	r3, [r3, #4]
 800a454:	2b06      	cmp	r3, #6
 800a456:	d101      	bne.n	800a45c <USBH_MTP_Process+0xcc>
 800a458:	4baf      	ldr	r3, [pc, #700]	; (800a718 <USBH_MTP_Process+0x388>)
 800a45a:	e000      	b.n	800a45e <USBH_MTP_Process+0xce>
 800a45c:	4baf      	ldr	r3, [pc, #700]	; (800a71c <USBH_MTP_Process+0x38c>)
 800a45e:	4619      	mov	r1, r3
 800a460:	48af      	ldr	r0, [pc, #700]	; (800a720 <USBH_MTP_Process+0x390>)
 800a462:	f004 f99f 	bl	800e7a4 <iprintf>
 800a466:	200a      	movs	r0, #10
 800a468:	f004 f9b4 	bl	800e7d4 <putchar>
        USBH_DbgLog("Functional mode : %s", (MTP_Handle->info.devinfo.FunctionalMode == 0U) ? "Standard" : "Vendor");
 800a46c:	48a7      	ldr	r0, [pc, #668]	; (800a70c <USBH_MTP_Process+0x37c>)
 800a46e:	f004 f999 	bl	800e7a4 <iprintf>
 800a472:	68fb      	ldr	r3, [r7, #12]
 800a474:	f8b3 310a 	ldrh.w	r3, [r3, #266]	; 0x10a
 800a478:	2b00      	cmp	r3, #0
 800a47a:	d101      	bne.n	800a480 <USBH_MTP_Process+0xf0>
 800a47c:	4ba9      	ldr	r3, [pc, #676]	; (800a724 <USBH_MTP_Process+0x394>)
 800a47e:	e000      	b.n	800a482 <USBH_MTP_Process+0xf2>
 800a480:	4ba9      	ldr	r3, [pc, #676]	; (800a728 <USBH_MTP_Process+0x398>)
 800a482:	4619      	mov	r1, r3
 800a484:	48a9      	ldr	r0, [pc, #676]	; (800a72c <USBH_MTP_Process+0x39c>)
 800a486:	f004 f98d 	bl	800e7a4 <iprintf>
 800a48a:	200a      	movs	r0, #10
 800a48c:	f004 f9a2 	bl	800e7d4 <putchar>
        USBH_DbgLog("Number of Supported Operation(s) : %d", MTP_Handle->info.devinfo.OperationsSupported_len);
 800a490:	489e      	ldr	r0, [pc, #632]	; (800a70c <USBH_MTP_Process+0x37c>)
 800a492:	f004 f987 	bl	800e7a4 <iprintf>
 800a496:	68fb      	ldr	r3, [r7, #12]
 800a498:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800a49c:	4619      	mov	r1, r3
 800a49e:	48a4      	ldr	r0, [pc, #656]	; (800a730 <USBH_MTP_Process+0x3a0>)
 800a4a0:	f004 f980 	bl	800e7a4 <iprintf>
 800a4a4:	200a      	movs	r0, #10
 800a4a6:	f004 f995 	bl	800e7d4 <putchar>
        USBH_DbgLog("Number of Supported Events(s) : %d", MTP_Handle->info.devinfo.EventsSupported_len);
 800a4aa:	4898      	ldr	r0, [pc, #608]	; (800a70c <USBH_MTP_Process+0x37c>)
 800a4ac:	f004 f97a 	bl	800e7a4 <iprintf>
 800a4b0:	68fb      	ldr	r3, [r7, #12]
 800a4b2:	f8d3 31d8 	ldr.w	r3, [r3, #472]	; 0x1d8
 800a4b6:	4619      	mov	r1, r3
 800a4b8:	489e      	ldr	r0, [pc, #632]	; (800a734 <USBH_MTP_Process+0x3a4>)
 800a4ba:	f004 f973 	bl	800e7a4 <iprintf>
 800a4be:	200a      	movs	r0, #10
 800a4c0:	f004 f988 	bl	800e7d4 <putchar>
        USBH_DbgLog("Number of Supported Proprieties : %d", MTP_Handle->info.devinfo.DevicePropertiesSupported_len);
 800a4c4:	4891      	ldr	r0, [pc, #580]	; (800a70c <USBH_MTP_Process+0x37c>)
 800a4c6:	f004 f96d 	bl	800e7a4 <iprintf>
 800a4ca:	68fb      	ldr	r3, [r7, #12]
 800a4cc:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800a4d0:	4619      	mov	r1, r3
 800a4d2:	4899      	ldr	r0, [pc, #612]	; (800a738 <USBH_MTP_Process+0x3a8>)
 800a4d4:	f004 f966 	bl	800e7a4 <iprintf>
 800a4d8:	200a      	movs	r0, #10
 800a4da:	f004 f97b 	bl	800e7d4 <putchar>
        USBH_DbgLog("Manufacturer : %s", MTP_Handle->info.devinfo.Manufacturer);
 800a4de:	488b      	ldr	r0, [pc, #556]	; (800a70c <USBH_MTP_Process+0x37c>)
 800a4e0:	f004 f960 	bl	800e7a4 <iprintf>
 800a4e4:	68fb      	ldr	r3, [r7, #12]
 800a4e6:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 800a4ea:	4619      	mov	r1, r3
 800a4ec:	4893      	ldr	r0, [pc, #588]	; (800a73c <USBH_MTP_Process+0x3ac>)
 800a4ee:	f004 f959 	bl	800e7a4 <iprintf>
 800a4f2:	200a      	movs	r0, #10
 800a4f4:	f004 f96e 	bl	800e7d4 <putchar>
        USBH_DbgLog("Model : %s", MTP_Handle->info.devinfo.Model);
 800a4f8:	4884      	ldr	r0, [pc, #528]	; (800a70c <USBH_MTP_Process+0x37c>)
 800a4fa:	f004 f953 	bl	800e7a4 <iprintf>
 800a4fe:	68fb      	ldr	r3, [r7, #12]
 800a500:	f203 6307 	addw	r3, r3, #1543	; 0x607
 800a504:	4619      	mov	r1, r3
 800a506:	488e      	ldr	r0, [pc, #568]	; (800a740 <USBH_MTP_Process+0x3b0>)
 800a508:	f004 f94c 	bl	800e7a4 <iprintf>
 800a50c:	200a      	movs	r0, #10
 800a50e:	f004 f961 	bl	800e7d4 <putchar>
        USBH_DbgLog("Device version : %s", MTP_Handle->info.devinfo.DeviceVersion);
 800a512:	487e      	ldr	r0, [pc, #504]	; (800a70c <USBH_MTP_Process+0x37c>)
 800a514:	f004 f946 	bl	800e7a4 <iprintf>
 800a518:	68fb      	ldr	r3, [r7, #12]
 800a51a:	f203 7306 	addw	r3, r3, #1798	; 0x706
 800a51e:	4619      	mov	r1, r3
 800a520:	4888      	ldr	r0, [pc, #544]	; (800a744 <USBH_MTP_Process+0x3b4>)
 800a522:	f004 f93f 	bl	800e7a4 <iprintf>
 800a526:	200a      	movs	r0, #10
 800a528:	f004 f954 	bl	800e7d4 <putchar>
        USBH_DbgLog("Serial number : %s", MTP_Handle->info.devinfo.SerialNumber);
 800a52c:	4877      	ldr	r0, [pc, #476]	; (800a70c <USBH_MTP_Process+0x37c>)
 800a52e:	f004 f939 	bl	800e7a4 <iprintf>
 800a532:	68fb      	ldr	r3, [r7, #12]
 800a534:	f603 0305 	addw	r3, r3, #2053	; 0x805
 800a538:	4619      	mov	r1, r3
 800a53a:	4883      	ldr	r0, [pc, #524]	; (800a748 <USBH_MTP_Process+0x3b8>)
 800a53c:	f004 f932 	bl	800e7a4 <iprintf>
 800a540:	200a      	movs	r0, #10
 800a542:	f004 f947 	bl	800e7d4 <putchar>

        MTP_Handle->state = MTP_GETSTORAGEIDS;
 800a546:	68fb      	ldr	r3, [r7, #12]
 800a548:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a54c:	2204      	movs	r2, #4
 800a54e:	f883 2d38 	strb.w	r2, [r3, #3384]	; 0xd38
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800a552:	e10f      	b.n	800a774 <USBH_MTP_Process+0x3e4>

    case MTP_GETSTORAGEIDS:
      status = USBH_PTP_GetStorageIds(phost, &(MTP_Handle->info.storids));
 800a554:	68fb      	ldr	r3, [r7, #12]
 800a556:	f603 1304 	addw	r3, r3, #2308	; 0x904
 800a55a:	4619      	mov	r1, r3
 800a55c:	6878      	ldr	r0, [r7, #4]
 800a55e:	f001 fc23 	bl	800bda8 <USBH_PTP_GetStorageIds>
 800a562:	4603      	mov	r3, r0
 800a564:	75fb      	strb	r3, [r7, #23]

      if (status == USBH_OK)
 800a566:	7dfb      	ldrb	r3, [r7, #23]
 800a568:	2b00      	cmp	r3, #0
 800a56a:	f040 8105 	bne.w	800a778 <USBH_MTP_Process+0x3e8>
      {
        USBH_DbgLog("Number of storage ID items : %d", MTP_Handle->info.storids.n);
 800a56e:	4867      	ldr	r0, [pc, #412]	; (800a70c <USBH_MTP_Process+0x37c>)
 800a570:	f004 f918 	bl	800e7a4 <iprintf>
 800a574:	68fb      	ldr	r3, [r7, #12]
 800a576:	f8d3 3904 	ldr.w	r3, [r3, #2308]	; 0x904
 800a57a:	4619      	mov	r1, r3
 800a57c:	4873      	ldr	r0, [pc, #460]	; (800a74c <USBH_MTP_Process+0x3bc>)
 800a57e:	f004 f911 	bl	800e7a4 <iprintf>
 800a582:	200a      	movs	r0, #10
 800a584:	f004 f926 	bl	800e7d4 <putchar>
        for (idx  = 0U; idx < MTP_Handle->info.storids.n; idx ++)
 800a588:	2300      	movs	r3, #0
 800a58a:	613b      	str	r3, [r7, #16]
 800a58c:	e014      	b.n	800a5b8 <USBH_MTP_Process+0x228>
        {
          USBH_DbgLog("storage#%d ID : %x", idx, MTP_Handle->info.storids.Storage[idx]);
 800a58e:	485f      	ldr	r0, [pc, #380]	; (800a70c <USBH_MTP_Process+0x37c>)
 800a590:	f004 f908 	bl	800e7a4 <iprintf>
 800a594:	68fa      	ldr	r2, [r7, #12]
 800a596:	693b      	ldr	r3, [r7, #16]
 800a598:	f503 7310 	add.w	r3, r3, #576	; 0x240
 800a59c:	009b      	lsls	r3, r3, #2
 800a59e:	4413      	add	r3, r2
 800a5a0:	689b      	ldr	r3, [r3, #8]
 800a5a2:	461a      	mov	r2, r3
 800a5a4:	6939      	ldr	r1, [r7, #16]
 800a5a6:	486a      	ldr	r0, [pc, #424]	; (800a750 <USBH_MTP_Process+0x3c0>)
 800a5a8:	f004 f8fc 	bl	800e7a4 <iprintf>
 800a5ac:	200a      	movs	r0, #10
 800a5ae:	f004 f911 	bl	800e7d4 <putchar>
        for (idx  = 0U; idx < MTP_Handle->info.storids.n; idx ++)
 800a5b2:	693b      	ldr	r3, [r7, #16]
 800a5b4:	3301      	adds	r3, #1
 800a5b6:	613b      	str	r3, [r7, #16]
 800a5b8:	68fb      	ldr	r3, [r7, #12]
 800a5ba:	f8d3 3904 	ldr.w	r3, [r3, #2308]	; 0x904
 800a5be:	693a      	ldr	r2, [r7, #16]
 800a5c0:	429a      	cmp	r2, r3
 800a5c2:	d3e4      	bcc.n	800a58e <USBH_MTP_Process+0x1fe>
        }

        MTP_Handle->current_storage_unit = 0U;
 800a5c4:	68fb      	ldr	r3, [r7, #12]
 800a5c6:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800a5ca:	461a      	mov	r2, r3
 800a5cc:	2300      	movs	r3, #0
 800a5ce:	f8c2 31c8 	str.w	r3, [r2, #456]	; 0x1c8
        MTP_Handle->state = MTP_GETSTORAGEINFO;
 800a5d2:	68fb      	ldr	r3, [r7, #12]
 800a5d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a5d8:	2205      	movs	r2, #5
 800a5da:	f883 2d38 	strb.w	r2, [r3, #3384]	; 0xd38
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800a5de:	e0cb      	b.n	800a778 <USBH_MTP_Process+0x3e8>

    case MTP_GETSTORAGEINFO:
      status = USBH_PTP_GetStorageInfo(phost,
                                       MTP_Handle->info.storids.Storage[MTP_Handle->current_storage_unit],
 800a5e0:	68fb      	ldr	r3, [r7, #12]
 800a5e2:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800a5e6:	f8d3 31c8 	ldr.w	r3, [r3, #456]	; 0x1c8
      status = USBH_PTP_GetStorageInfo(phost,
 800a5ea:	68fa      	ldr	r2, [r7, #12]
 800a5ec:	f503 7310 	add.w	r3, r3, #576	; 0x240
 800a5f0:	009b      	lsls	r3, r3, #2
 800a5f2:	4413      	add	r3, r2
 800a5f4:	6899      	ldr	r1, [r3, #8]
                                       &((MTP_Handle->info.storinfo)[MTP_Handle->current_storage_unit]));
 800a5f6:	68fb      	ldr	r3, [r7, #12]
 800a5f8:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800a5fc:	f8d3 21c8 	ldr.w	r2, [r3, #456]	; 0x1c8
      status = USBH_PTP_GetStorageInfo(phost,
 800a600:	4613      	mov	r3, r2
 800a602:	011b      	lsls	r3, r3, #4
 800a604:	4413      	add	r3, r2
 800a606:	015b      	lsls	r3, r3, #5
 800a608:	f503 6312 	add.w	r3, r3, #2336	; 0x920
 800a60c:	68fa      	ldr	r2, [r7, #12]
 800a60e:	4413      	add	r3, r2
 800a610:	461a      	mov	r2, r3
 800a612:	6878      	ldr	r0, [r7, #4]
 800a614:	f001 fc49 	bl	800beaa <USBH_PTP_GetStorageInfo>
 800a618:	4603      	mov	r3, r0
 800a61a:	75fb      	strb	r3, [r7, #23]

      if (status == USBH_OK)
 800a61c:	7dfb      	ldrb	r3, [r7, #23]
 800a61e:	2b00      	cmp	r3, #0
 800a620:	f040 80ac 	bne.w	800a77c <USBH_MTP_Process+0x3ec>
      {
        USBH_UsrLog("Volume#%lu: %s   [%s]", MTP_Handle->current_storage_unit,
 800a624:	68fb      	ldr	r3, [r7, #12]
 800a626:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800a62a:	f8d3 11c8 	ldr.w	r1, [r3, #456]	; 0x1c8
 800a62e:	68fb      	ldr	r3, [r7, #12]
 800a630:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800a634:	f8d3 21c8 	ldr.w	r2, [r3, #456]	; 0x1c8
 800a638:	4613      	mov	r3, r2
 800a63a:	011b      	lsls	r3, r3, #4
 800a63c:	4413      	add	r3, r2
 800a63e:	015b      	lsls	r3, r3, #5
 800a640:	f603 1338 	addw	r3, r3, #2360	; 0x938
 800a644:	68fa      	ldr	r2, [r7, #12]
 800a646:	4413      	add	r3, r2
 800a648:	1d18      	adds	r0, r3, #4
 800a64a:	68fb      	ldr	r3, [r7, #12]
 800a64c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800a650:	f8d3 21c8 	ldr.w	r2, [r3, #456]	; 0x1c8
 800a654:	4613      	mov	r3, r2
 800a656:	011b      	lsls	r3, r3, #4
 800a658:	4413      	add	r3, r2
 800a65a:	015b      	lsls	r3, r3, #5
 800a65c:	f603 2338 	addw	r3, r3, #2616	; 0xa38
 800a660:	68fa      	ldr	r2, [r7, #12]
 800a662:	4413      	add	r3, r2
 800a664:	3303      	adds	r3, #3
 800a666:	4602      	mov	r2, r0
 800a668:	483a      	ldr	r0, [pc, #232]	; (800a754 <USBH_MTP_Process+0x3c4>)
 800a66a:	f004 f89b 	bl	800e7a4 <iprintf>
 800a66e:	200a      	movs	r0, #10
 800a670:	f004 f8b0 	bl	800e7d4 <putchar>
                    MTP_Handle->info.storinfo[MTP_Handle->current_storage_unit].StorageDescription,
                    MTP_Handle->info.storinfo[MTP_Handle->current_storage_unit].VolumeLabel);
        if (++MTP_Handle->current_storage_unit >= MTP_Handle->info.storids.n)
 800a674:	68fb      	ldr	r3, [r7, #12]
 800a676:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800a67a:	f8d3 31c8 	ldr.w	r3, [r3, #456]	; 0x1c8
 800a67e:	3301      	adds	r3, #1
 800a680:	68fa      	ldr	r2, [r7, #12]
 800a682:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 800a686:	f8c2 31c8 	str.w	r3, [r2, #456]	; 0x1c8
 800a68a:	68fb      	ldr	r3, [r7, #12]
 800a68c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800a690:	f8d3 21c8 	ldr.w	r2, [r3, #456]	; 0x1c8
 800a694:	68fb      	ldr	r3, [r7, #12]
 800a696:	f8d3 3904 	ldr.w	r3, [r3, #2308]	; 0x904
 800a69a:	429a      	cmp	r2, r3
 800a69c:	d36e      	bcc.n	800a77c <USBH_MTP_Process+0x3ec>
        {
          MTP_Handle->state = MTP_IDLE;
 800a69e:	68fb      	ldr	r3, [r7, #12]
 800a6a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a6a4:	2200      	movs	r2, #0
 800a6a6:	f883 2d38 	strb.w	r2, [r3, #3384]	; 0xd38
          MTP_Handle->is_ready = 1U;
 800a6aa:	68fb      	ldr	r3, [r7, #12]
 800a6ac:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800a6b0:	461a      	mov	r2, r3
 800a6b2:	2301      	movs	r3, #1
 800a6b4:	f8c2 31cc 	str.w	r3, [r2, #460]	; 0x1cc
          MTP_Handle->current_storage_unit = 0U;
 800a6b8:	68fb      	ldr	r3, [r7, #12]
 800a6ba:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800a6be:	461a      	mov	r2, r3
 800a6c0:	2300      	movs	r3, #0
 800a6c2:	f8c2 31c8 	str.w	r3, [r2, #456]	; 0x1c8
          MTP_Handle->params.CurrentStorageId = MTP_Handle->info.storids.Storage[0];
 800a6c6:	68fb      	ldr	r3, [r7, #12]
 800a6c8:	f8d3 3908 	ldr.w	r3, [r3, #2312]	; 0x908
 800a6cc:	68fa      	ldr	r2, [r7, #12]
 800a6ce:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a6d2:	f8c2 3d18 	str.w	r3, [r2, #3352]	; 0xd18

          USBH_UsrLog("MTP Class initialized.");
 800a6d6:	4820      	ldr	r0, [pc, #128]	; (800a758 <USBH_MTP_Process+0x3c8>)
 800a6d8:	f004 f864 	bl	800e7a4 <iprintf>
 800a6dc:	200a      	movs	r0, #10
 800a6de:	f004 f879 	bl	800e7d4 <putchar>
          USBH_UsrLog("%s is default storage unit", MTP_Handle->info.storinfo[0].StorageDescription);
 800a6e2:	68fb      	ldr	r3, [r7, #12]
 800a6e4:	f603 133c 	addw	r3, r3, #2364	; 0x93c
 800a6e8:	4619      	mov	r1, r3
 800a6ea:	481c      	ldr	r0, [pc, #112]	; (800a75c <USBH_MTP_Process+0x3cc>)
 800a6ec:	f004 f85a 	bl	800e7a4 <iprintf>
 800a6f0:	200a      	movs	r0, #10
 800a6f2:	f004 f86f 	bl	800e7d4 <putchar>
          phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a6fc:	f8d3 3170 	ldr.w	r3, [r3, #368]	; 0x170
 800a700:	2102      	movs	r1, #2
 800a702:	6878      	ldr	r0, [r7, #4]
 800a704:	4798      	blx	r3
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800a706:	e039      	b.n	800a77c <USBH_MTP_Process+0x3ec>
 800a708:	0800f908 	.word	0x0800f908
 800a70c:	0800f83c 	.word	0x0800f83c
 800a710:	0800f920 	.word	0x0800f920
 800a714:	0800f940 	.word	0x0800f940
 800a718:	0800f838 	.word	0x0800f838
 800a71c:	0800f958 	.word	0x0800f958
 800a720:	0800f968 	.word	0x0800f968
 800a724:	0800f97c 	.word	0x0800f97c
 800a728:	0800f988 	.word	0x0800f988
 800a72c:	0800f990 	.word	0x0800f990
 800a730:	0800f9a8 	.word	0x0800f9a8
 800a734:	0800f9d0 	.word	0x0800f9d0
 800a738:	0800f9f4 	.word	0x0800f9f4
 800a73c:	0800fa1c 	.word	0x0800fa1c
 800a740:	0800fa30 	.word	0x0800fa30
 800a744:	0800fa3c 	.word	0x0800fa3c
 800a748:	0800fa50 	.word	0x0800fa50
 800a74c:	0800fa64 	.word	0x0800fa64
 800a750:	0800fa84 	.word	0x0800fa84
 800a754:	0800fa98 	.word	0x0800fa98
 800a758:	0800fab0 	.word	0x0800fab0
 800a75c:	0800fac8 	.word	0x0800fac8

    case  MTP_IDLE:
      USBH_MTP_Events(phost);
 800a760:	6878      	ldr	r0, [r7, #4]
 800a762:	f000 f81b 	bl	800a79c <USBH_MTP_Events>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

      status = USBH_OK;
 800a766:	2300      	movs	r3, #0
 800a768:	75fb      	strb	r3, [r7, #23]
      break;
 800a76a:	e008      	b.n	800a77e <USBH_MTP_Process+0x3ee>

    default:
      break;
 800a76c:	bf00      	nop
 800a76e:	e006      	b.n	800a77e <USBH_MTP_Process+0x3ee>
      break;
 800a770:	bf00      	nop
 800a772:	e004      	b.n	800a77e <USBH_MTP_Process+0x3ee>
      break;
 800a774:	bf00      	nop
 800a776:	e002      	b.n	800a77e <USBH_MTP_Process+0x3ee>
      break;
 800a778:	bf00      	nop
 800a77a:	e000      	b.n	800a77e <USBH_MTP_Process+0x3ee>
      break;
 800a77c:	bf00      	nop
  }

  return status;
 800a77e:	7dfb      	ldrb	r3, [r7, #23]
}
 800a780:	4618      	mov	r0, r3
 800a782:	3718      	adds	r7, #24
 800a784:	46bd      	mov	sp, r7
 800a786:	bd80      	pop	{r7, pc}

0800a788 <USBH_MTP_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MTP_SOFProcess(USBH_HandleTypeDef *phost)
{
 800a788:	b480      	push	{r7}
 800a78a:	b083      	sub	sp, #12
 800a78c:	af00      	add	r7, sp, #0
 800a78e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 800a790:	2300      	movs	r3, #0
}
 800a792:	4618      	mov	r0, r3
 800a794:	370c      	adds	r7, #12
 800a796:	46bd      	mov	sp, r7
 800a798:	bc80      	pop	{r7}
 800a79a:	4770      	bx	lr

0800a79c <USBH_MTP_Events>:
 * @brief  Handle HID Control process
 * @param  phost: Host handle
 * @retval USBH Status
 */
static USBH_StatusTypeDef USBH_MTP_Events(USBH_HandleTypeDef *phost)
{
 800a79c:	b580      	push	{r7, lr}
 800a79e:	b084      	sub	sp, #16
 800a7a0:	af00      	add	r7, sp, #0
 800a7a2:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 800a7a4:	2301      	movs	r3, #1
 800a7a6:	73fb      	strb	r3, [r7, #15]
  MTP_HandleTypeDef *MTP_Handle = (MTP_HandleTypeDef *)phost->pActiveClass->pData;
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a7ae:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 800a7b2:	69db      	ldr	r3, [r3, #28]
 800a7b4:	60bb      	str	r3, [r7, #8]

  switch (MTP_Handle->events.state)
 800a7b6:	68bb      	ldr	r3, [r7, #8]
 800a7b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a7bc:	f893 3d3c 	ldrb.w	r3, [r3, #3388]	; 0xd3c
 800a7c0:	2b00      	cmp	r3, #0
 800a7c2:	d002      	beq.n	800a7ca <USBH_MTP_Events+0x2e>
 800a7c4:	2b01      	cmp	r3, #1
 800a7c6:	d02c      	beq.n	800a822 <USBH_MTP_Events+0x86>

      }
      break;

    default:
      break;
 800a7c8:	e06c      	b.n	800a8a4 <USBH_MTP_Events+0x108>
      if ((phost->Timer & 1U) == 0U)
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a7d0:	f8d3 3164 	ldr.w	r3, [r3, #356]	; 0x164
 800a7d4:	f003 0301 	and.w	r3, r3, #1
 800a7d8:	2b00      	cmp	r3, #0
 800a7da:	d160      	bne.n	800a89e <USBH_MTP_Events+0x102>
        MTP_Handle->events.timer = phost->Timer;
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a7e2:	f8d3 3164 	ldr.w	r3, [r3, #356]	; 0x164
 800a7e6:	68ba      	ldr	r2, [r7, #8]
 800a7e8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a7ec:	f8c2 3d40 	str.w	r3, [r2, #3392]	; 0xd40
                                  (uint8_t *)(void *) & (MTP_Handle->events.container),
 800a7f0:	68bb      	ldr	r3, [r7, #8]
 800a7f2:	f503 51ea 	add.w	r1, r3, #7488	; 0x1d40
 800a7f6:	3108      	adds	r1, #8
                                  (uint8_t)MTP_Handle->NotificationEpSize,
 800a7f8:	68bb      	ldr	r3, [r7, #8]
 800a7fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a7fe:	f8b3 3d36 	ldrh.w	r3, [r3, #3382]	; 0xd36
        USBH_InterruptReceiveData(phost,
 800a802:	b2da      	uxtb	r2, r3
 800a804:	68bb      	ldr	r3, [r7, #8]
 800a806:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a80a:	f893 3d2e 	ldrb.w	r3, [r3, #3374]	; 0xd2e
 800a80e:	6878      	ldr	r0, [r7, #4]
 800a810:	f002 ff88 	bl	800d724 <USBH_InterruptReceiveData>
        MTP_Handle->events.state = MTP_EVENTS_GETDATA;
 800a814:	68bb      	ldr	r3, [r7, #8]
 800a816:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a81a:	2201      	movs	r2, #1
 800a81c:	f883 2d3c 	strb.w	r2, [r3, #3388]	; 0xd3c
      break;
 800a820:	e03d      	b.n	800a89e <USBH_MTP_Events+0x102>
      if (USBH_LL_GetURBState(phost, MTP_Handle->NotificationPipe) == USBH_URB_DONE)
 800a822:	68bb      	ldr	r3, [r7, #8]
 800a824:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a828:	f893 3d2e 	ldrb.w	r3, [r3, #3374]	; 0xd2e
 800a82c:	4619      	mov	r1, r3
 800a82e:	6878      	ldr	r0, [r7, #4]
 800a830:	f003 fade 	bl	800ddf0 <USBH_LL_GetURBState>
 800a834:	4603      	mov	r3, r0
 800a836:	2b01      	cmp	r3, #1
 800a838:	d102      	bne.n	800a840 <USBH_MTP_Events+0xa4>
        MTP_DecodeEvent(phost);
 800a83a:	6878      	ldr	r0, [r7, #4]
 800a83c:	f000 f838 	bl	800a8b0 <MTP_DecodeEvent>
      if ((phost->Timer - MTP_Handle->events.timer) >= MTP_Handle->events.poll)
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a846:	f8d3 2164 	ldr.w	r2, [r3, #356]	; 0x164
 800a84a:	68bb      	ldr	r3, [r7, #8]
 800a84c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a850:	f8d3 3d40 	ldr.w	r3, [r3, #3392]	; 0xd40
 800a854:	1ad3      	subs	r3, r2, r3
 800a856:	68ba      	ldr	r2, [r7, #8]
 800a858:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a85c:	f8b2 2d44 	ldrh.w	r2, [r2, #3396]	; 0xd44
 800a860:	4293      	cmp	r3, r2
 800a862:	d31e      	bcc.n	800a8a2 <USBH_MTP_Events+0x106>
        MTP_Handle->events.timer = phost->Timer;
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a86a:	f8d3 3164 	ldr.w	r3, [r3, #356]	; 0x164
 800a86e:	68ba      	ldr	r2, [r7, #8]
 800a870:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a874:	f8c2 3d40 	str.w	r3, [r2, #3392]	; 0xd40
                                  (uint8_t *)(void *) & (MTP_Handle->events.container),
 800a878:	68bb      	ldr	r3, [r7, #8]
 800a87a:	f503 51ea 	add.w	r1, r3, #7488	; 0x1d40
 800a87e:	3108      	adds	r1, #8
                                  (uint8_t)MTP_Handle->NotificationEpSize,
 800a880:	68bb      	ldr	r3, [r7, #8]
 800a882:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a886:	f8b3 3d36 	ldrh.w	r3, [r3, #3382]	; 0xd36
        USBH_InterruptReceiveData(phost,
 800a88a:	b2da      	uxtb	r2, r3
 800a88c:	68bb      	ldr	r3, [r7, #8]
 800a88e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a892:	f893 3d2e 	ldrb.w	r3, [r3, #3374]	; 0xd2e
 800a896:	6878      	ldr	r0, [r7, #4]
 800a898:	f002 ff44 	bl	800d724 <USBH_InterruptReceiveData>
      break;
 800a89c:	e001      	b.n	800a8a2 <USBH_MTP_Events+0x106>
      break;
 800a89e:	bf00      	nop
 800a8a0:	e000      	b.n	800a8a4 <USBH_MTP_Events+0x108>
      break;
 800a8a2:	bf00      	nop
  }

  return status;
 800a8a4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a8a6:	4618      	mov	r0, r3
 800a8a8:	3710      	adds	r7, #16
 800a8aa:	46bd      	mov	sp, r7
 800a8ac:	bd80      	pop	{r7, pc}
	...

0800a8b0 <MTP_DecodeEvent>:
  *         Decode device event sent by responder
  * @param  phost: Host handle
  * @retval None
  */
static void MTP_DecodeEvent(USBH_HandleTypeDef *phost)
{
 800a8b0:	b580      	push	{r7, lr}
 800a8b2:	b086      	sub	sp, #24
 800a8b4:	af00      	add	r7, sp, #0
 800a8b6:	6078      	str	r0, [r7, #4]
  MTP_HandleTypeDef *MTP_Handle = (MTP_HandleTypeDef *)phost->pActiveClass->pData;
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a8be:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 800a8c2:	69db      	ldr	r3, [r3, #28]
 800a8c4:	617b      	str	r3, [r7, #20]

  uint16_t code;
  uint32_t param1;

  /* Process the event */
  code = MTP_Handle->events.container.code;
 800a8c6:	697b      	ldr	r3, [r7, #20]
 800a8c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a8cc:	f8b3 3d4e 	ldrh.w	r3, [r3, #3406]	; 0xd4e
 800a8d0:	827b      	strh	r3, [r7, #18]
  param1 = MTP_Handle->events.container.param1;
 800a8d2:	697b      	ldr	r3, [r7, #20]
 800a8d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a8d8:	f8d3 3d54 	ldr.w	r3, [r3, #3412]	; 0xd54
 800a8dc:	60fb      	str	r3, [r7, #12]

  switch (code)
 800a8de:	8a7b      	ldrh	r3, [r7, #18]
 800a8e0:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800a8e4:	2b0e      	cmp	r3, #14
 800a8e6:	f200 8111 	bhi.w	800ab0c <MTP_DecodeEvent+0x25c>
 800a8ea:	a201      	add	r2, pc, #4	; (adr r2, 800a8f0 <MTP_DecodeEvent+0x40>)
 800a8ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a8f0:	0800a92d 	.word	0x0800a92d
 800a8f4:	0800a94d 	.word	0x0800a94d
 800a8f8:	0800a96d 	.word	0x0800a96d
 800a8fc:	0800a98d 	.word	0x0800a98d
 800a900:	0800a9ad 	.word	0x0800a9ad
 800a904:	0800a9cd 	.word	0x0800a9cd
 800a908:	0800a9ed 	.word	0x0800a9ed
 800a90c:	0800aa0d 	.word	0x0800aa0d
 800a910:	0800aa2d 	.word	0x0800aa2d
 800a914:	0800aa4d 	.word	0x0800aa4d
 800a918:	0800aa6d 	.word	0x0800aa6d
 800a91c:	0800aa8d 	.word	0x0800aa8d
 800a920:	0800aaad 	.word	0x0800aaad
 800a924:	0800aacd 	.word	0x0800aacd
 800a928:	0800aaed 	.word	0x0800aaed
  {
    case PTP_EC_Undefined:
      USBH_DbgLog("EVT: PTP_EC_Undefined in session %u", MTP_Handle->ptp.session_id);
 800a92c:	4884      	ldr	r0, [pc, #528]	; (800ab40 <MTP_DecodeEvent+0x290>)
 800a92e:	f003 ff39 	bl	800e7a4 <iprintf>
 800a932:	697b      	ldr	r3, [r7, #20]
 800a934:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800a938:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
 800a93c:	4619      	mov	r1, r3
 800a93e:	4881      	ldr	r0, [pc, #516]	; (800ab44 <MTP_DecodeEvent+0x294>)
 800a940:	f003 ff30 	bl	800e7a4 <iprintf>
 800a944:	200a      	movs	r0, #10
 800a946:	f003 ff45 	bl	800e7d4 <putchar>
      break;
 800a94a:	e0ef      	b.n	800ab2c <MTP_DecodeEvent+0x27c>

    case PTP_EC_CancelTransaction:
      USBH_DbgLog("EVT: PTP_EC_CancelTransaction in session %u", MTP_Handle->ptp.session_id);
 800a94c:	487c      	ldr	r0, [pc, #496]	; (800ab40 <MTP_DecodeEvent+0x290>)
 800a94e:	f003 ff29 	bl	800e7a4 <iprintf>
 800a952:	697b      	ldr	r3, [r7, #20]
 800a954:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800a958:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
 800a95c:	4619      	mov	r1, r3
 800a95e:	487a      	ldr	r0, [pc, #488]	; (800ab48 <MTP_DecodeEvent+0x298>)
 800a960:	f003 ff20 	bl	800e7a4 <iprintf>
 800a964:	200a      	movs	r0, #10
 800a966:	f003 ff35 	bl	800e7d4 <putchar>
      break;
 800a96a:	e0df      	b.n	800ab2c <MTP_DecodeEvent+0x27c>

    case PTP_EC_ObjectAdded:
      USBH_DbgLog("EVT: PTP_EC_ObjectAdded in session %u", MTP_Handle->ptp.session_id);
 800a96c:	4874      	ldr	r0, [pc, #464]	; (800ab40 <MTP_DecodeEvent+0x290>)
 800a96e:	f003 ff19 	bl	800e7a4 <iprintf>
 800a972:	697b      	ldr	r3, [r7, #20]
 800a974:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800a978:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
 800a97c:	4619      	mov	r1, r3
 800a97e:	4873      	ldr	r0, [pc, #460]	; (800ab4c <MTP_DecodeEvent+0x29c>)
 800a980:	f003 ff10 	bl	800e7a4 <iprintf>
 800a984:	200a      	movs	r0, #10
 800a986:	f003 ff25 	bl	800e7d4 <putchar>
      break;
 800a98a:	e0cf      	b.n	800ab2c <MTP_DecodeEvent+0x27c>

    case PTP_EC_ObjectRemoved:
      USBH_DbgLog("EVT: PTP_EC_ObjectRemoved in session %u", MTP_Handle->ptp.session_id);
 800a98c:	486c      	ldr	r0, [pc, #432]	; (800ab40 <MTP_DecodeEvent+0x290>)
 800a98e:	f003 ff09 	bl	800e7a4 <iprintf>
 800a992:	697b      	ldr	r3, [r7, #20]
 800a994:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800a998:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
 800a99c:	4619      	mov	r1, r3
 800a99e:	486c      	ldr	r0, [pc, #432]	; (800ab50 <MTP_DecodeEvent+0x2a0>)
 800a9a0:	f003 ff00 	bl	800e7a4 <iprintf>
 800a9a4:	200a      	movs	r0, #10
 800a9a6:	f003 ff15 	bl	800e7d4 <putchar>
      break;
 800a9aa:	e0bf      	b.n	800ab2c <MTP_DecodeEvent+0x27c>

    case PTP_EC_StoreAdded:
      USBH_DbgLog("EVT: PTP_EC_StoreAdded in session %u", MTP_Handle->ptp.session_id);
 800a9ac:	4864      	ldr	r0, [pc, #400]	; (800ab40 <MTP_DecodeEvent+0x290>)
 800a9ae:	f003 fef9 	bl	800e7a4 <iprintf>
 800a9b2:	697b      	ldr	r3, [r7, #20]
 800a9b4:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800a9b8:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
 800a9bc:	4619      	mov	r1, r3
 800a9be:	4865      	ldr	r0, [pc, #404]	; (800ab54 <MTP_DecodeEvent+0x2a4>)
 800a9c0:	f003 fef0 	bl	800e7a4 <iprintf>
 800a9c4:	200a      	movs	r0, #10
 800a9c6:	f003 ff05 	bl	800e7d4 <putchar>
      break;
 800a9ca:	e0af      	b.n	800ab2c <MTP_DecodeEvent+0x27c>

    case PTP_EC_StoreRemoved:
      USBH_DbgLog("EVT: PTP_EC_StoreRemoved in session %u", MTP_Handle->ptp.session_id);
 800a9cc:	485c      	ldr	r0, [pc, #368]	; (800ab40 <MTP_DecodeEvent+0x290>)
 800a9ce:	f003 fee9 	bl	800e7a4 <iprintf>
 800a9d2:	697b      	ldr	r3, [r7, #20]
 800a9d4:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800a9d8:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
 800a9dc:	4619      	mov	r1, r3
 800a9de:	485e      	ldr	r0, [pc, #376]	; (800ab58 <MTP_DecodeEvent+0x2a8>)
 800a9e0:	f003 fee0 	bl	800e7a4 <iprintf>
 800a9e4:	200a      	movs	r0, #10
 800a9e6:	f003 fef5 	bl	800e7d4 <putchar>
      break;
 800a9ea:	e09f      	b.n	800ab2c <MTP_DecodeEvent+0x27c>

    case PTP_EC_DevicePropChanged:
      USBH_DbgLog("EVT: PTP_EC_DevicePropChanged in session %u", MTP_Handle->ptp.session_id);
 800a9ec:	4854      	ldr	r0, [pc, #336]	; (800ab40 <MTP_DecodeEvent+0x290>)
 800a9ee:	f003 fed9 	bl	800e7a4 <iprintf>
 800a9f2:	697b      	ldr	r3, [r7, #20]
 800a9f4:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800a9f8:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
 800a9fc:	4619      	mov	r1, r3
 800a9fe:	4857      	ldr	r0, [pc, #348]	; (800ab5c <MTP_DecodeEvent+0x2ac>)
 800aa00:	f003 fed0 	bl	800e7a4 <iprintf>
 800aa04:	200a      	movs	r0, #10
 800aa06:	f003 fee5 	bl	800e7d4 <putchar>
      break;
 800aa0a:	e08f      	b.n	800ab2c <MTP_DecodeEvent+0x27c>

    case PTP_EC_ObjectInfoChanged:
      USBH_DbgLog("EVT: PTP_EC_ObjectInfoChanged in session %u", MTP_Handle->ptp.session_id);
 800aa0c:	484c      	ldr	r0, [pc, #304]	; (800ab40 <MTP_DecodeEvent+0x290>)
 800aa0e:	f003 fec9 	bl	800e7a4 <iprintf>
 800aa12:	697b      	ldr	r3, [r7, #20]
 800aa14:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800aa18:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
 800aa1c:	4619      	mov	r1, r3
 800aa1e:	4850      	ldr	r0, [pc, #320]	; (800ab60 <MTP_DecodeEvent+0x2b0>)
 800aa20:	f003 fec0 	bl	800e7a4 <iprintf>
 800aa24:	200a      	movs	r0, #10
 800aa26:	f003 fed5 	bl	800e7d4 <putchar>
      break;
 800aa2a:	e07f      	b.n	800ab2c <MTP_DecodeEvent+0x27c>

    case PTP_EC_DeviceInfoChanged:
      USBH_DbgLog("EVT: PTP_EC_DeviceInfoChanged in session %u", MTP_Handle->ptp.session_id);
 800aa2c:	4844      	ldr	r0, [pc, #272]	; (800ab40 <MTP_DecodeEvent+0x290>)
 800aa2e:	f003 feb9 	bl	800e7a4 <iprintf>
 800aa32:	697b      	ldr	r3, [r7, #20]
 800aa34:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800aa38:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
 800aa3c:	4619      	mov	r1, r3
 800aa3e:	4849      	ldr	r0, [pc, #292]	; (800ab64 <MTP_DecodeEvent+0x2b4>)
 800aa40:	f003 feb0 	bl	800e7a4 <iprintf>
 800aa44:	200a      	movs	r0, #10
 800aa46:	f003 fec5 	bl	800e7d4 <putchar>
      break;
 800aa4a:	e06f      	b.n	800ab2c <MTP_DecodeEvent+0x27c>

    case PTP_EC_RequestObjectTransfer:
      USBH_DbgLog("EVT: PTP_EC_RequestObjectTransfer in session %u", MTP_Handle->ptp.session_id);
 800aa4c:	483c      	ldr	r0, [pc, #240]	; (800ab40 <MTP_DecodeEvent+0x290>)
 800aa4e:	f003 fea9 	bl	800e7a4 <iprintf>
 800aa52:	697b      	ldr	r3, [r7, #20]
 800aa54:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800aa58:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
 800aa5c:	4619      	mov	r1, r3
 800aa5e:	4842      	ldr	r0, [pc, #264]	; (800ab68 <MTP_DecodeEvent+0x2b8>)
 800aa60:	f003 fea0 	bl	800e7a4 <iprintf>
 800aa64:	200a      	movs	r0, #10
 800aa66:	f003 feb5 	bl	800e7d4 <putchar>
      break;
 800aa6a:	e05f      	b.n	800ab2c <MTP_DecodeEvent+0x27c>

    case PTP_EC_StoreFull:
      USBH_DbgLog("EVT: PTP_EC_StoreFull in session %u", MTP_Handle->ptp.session_id);
 800aa6c:	4834      	ldr	r0, [pc, #208]	; (800ab40 <MTP_DecodeEvent+0x290>)
 800aa6e:	f003 fe99 	bl	800e7a4 <iprintf>
 800aa72:	697b      	ldr	r3, [r7, #20]
 800aa74:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800aa78:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
 800aa7c:	4619      	mov	r1, r3
 800aa7e:	483b      	ldr	r0, [pc, #236]	; (800ab6c <MTP_DecodeEvent+0x2bc>)
 800aa80:	f003 fe90 	bl	800e7a4 <iprintf>
 800aa84:	200a      	movs	r0, #10
 800aa86:	f003 fea5 	bl	800e7d4 <putchar>
      break;
 800aa8a:	e04f      	b.n	800ab2c <MTP_DecodeEvent+0x27c>

    case PTP_EC_DeviceReset:
      USBH_DbgLog("EVT: PTP_EC_DeviceReset in session %u", MTP_Handle->ptp.session_id);
 800aa8c:	482c      	ldr	r0, [pc, #176]	; (800ab40 <MTP_DecodeEvent+0x290>)
 800aa8e:	f003 fe89 	bl	800e7a4 <iprintf>
 800aa92:	697b      	ldr	r3, [r7, #20]
 800aa94:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800aa98:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
 800aa9c:	4619      	mov	r1, r3
 800aa9e:	4834      	ldr	r0, [pc, #208]	; (800ab70 <MTP_DecodeEvent+0x2c0>)
 800aaa0:	f003 fe80 	bl	800e7a4 <iprintf>
 800aaa4:	200a      	movs	r0, #10
 800aaa6:	f003 fe95 	bl	800e7d4 <putchar>
      break;
 800aaaa:	e03f      	b.n	800ab2c <MTP_DecodeEvent+0x27c>

    case PTP_EC_StorageInfoChanged :
      USBH_DbgLog("EVT: PTP_EC_StorageInfoChanged in session %u", MTP_Handle->ptp.session_id);
 800aaac:	4824      	ldr	r0, [pc, #144]	; (800ab40 <MTP_DecodeEvent+0x290>)
 800aaae:	f003 fe79 	bl	800e7a4 <iprintf>
 800aab2:	697b      	ldr	r3, [r7, #20]
 800aab4:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800aab8:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
 800aabc:	4619      	mov	r1, r3
 800aabe:	482d      	ldr	r0, [pc, #180]	; (800ab74 <MTP_DecodeEvent+0x2c4>)
 800aac0:	f003 fe70 	bl	800e7a4 <iprintf>
 800aac4:	200a      	movs	r0, #10
 800aac6:	f003 fe85 	bl	800e7d4 <putchar>
      break;
 800aaca:	e02f      	b.n	800ab2c <MTP_DecodeEvent+0x27c>

    case PTP_EC_CaptureComplete :
      USBH_DbgLog("EVT: PTP_EC_CaptureComplete in session %u", MTP_Handle->ptp.session_id);
 800aacc:	481c      	ldr	r0, [pc, #112]	; (800ab40 <MTP_DecodeEvent+0x290>)
 800aace:	f003 fe69 	bl	800e7a4 <iprintf>
 800aad2:	697b      	ldr	r3, [r7, #20]
 800aad4:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800aad8:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
 800aadc:	4619      	mov	r1, r3
 800aade:	4826      	ldr	r0, [pc, #152]	; (800ab78 <MTP_DecodeEvent+0x2c8>)
 800aae0:	f003 fe60 	bl	800e7a4 <iprintf>
 800aae4:	200a      	movs	r0, #10
 800aae6:	f003 fe75 	bl	800e7d4 <putchar>
      break;
 800aaea:	e01f      	b.n	800ab2c <MTP_DecodeEvent+0x27c>

    case PTP_EC_UnreportedStatus :
      USBH_DbgLog("EVT: PTP_EC_UnreportedStatus in session %u", MTP_Handle->ptp.session_id);
 800aaec:	4814      	ldr	r0, [pc, #80]	; (800ab40 <MTP_DecodeEvent+0x290>)
 800aaee:	f003 fe59 	bl	800e7a4 <iprintf>
 800aaf2:	697b      	ldr	r3, [r7, #20]
 800aaf4:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800aaf8:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
 800aafc:	4619      	mov	r1, r3
 800aafe:	481f      	ldr	r0, [pc, #124]	; (800ab7c <MTP_DecodeEvent+0x2cc>)
 800ab00:	f003 fe50 	bl	800e7a4 <iprintf>
 800ab04:	200a      	movs	r0, #10
 800ab06:	f003 fe65 	bl	800e7d4 <putchar>
      break;
 800ab0a:	e00f      	b.n	800ab2c <MTP_DecodeEvent+0x27c>

    default :
      USBH_DbgLog("Received unknown event in session %u", MTP_Handle->ptp.session_id);
 800ab0c:	480c      	ldr	r0, [pc, #48]	; (800ab40 <MTP_DecodeEvent+0x290>)
 800ab0e:	f003 fe49 	bl	800e7a4 <iprintf>
 800ab12:	697b      	ldr	r3, [r7, #20]
 800ab14:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800ab18:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
 800ab1c:	4619      	mov	r1, r3
 800ab1e:	4818      	ldr	r0, [pc, #96]	; (800ab80 <MTP_DecodeEvent+0x2d0>)
 800ab20:	f003 fe40 	bl	800e7a4 <iprintf>
 800ab24:	200a      	movs	r0, #10
 800ab26:	f003 fe55 	bl	800e7d4 <putchar>
      break;
 800ab2a:	bf00      	nop
  }

  USBH_MTP_EventsCallback(phost, (uint32_t)code, param1);
 800ab2c:	8a7b      	ldrh	r3, [r7, #18]
 800ab2e:	68fa      	ldr	r2, [r7, #12]
 800ab30:	4619      	mov	r1, r3
 800ab32:	6878      	ldr	r0, [r7, #4]
 800ab34:	f000 f826 	bl	800ab84 <USBH_MTP_EventsCallback>
}
 800ab38:	bf00      	nop
 800ab3a:	3718      	adds	r7, #24
 800ab3c:	46bd      	mov	sp, r7
 800ab3e:	bd80      	pop	{r7, pc}
 800ab40:	0800f83c 	.word	0x0800f83c
 800ab44:	0800fae4 	.word	0x0800fae4
 800ab48:	0800fb08 	.word	0x0800fb08
 800ab4c:	0800fb34 	.word	0x0800fb34
 800ab50:	0800fb5c 	.word	0x0800fb5c
 800ab54:	0800fb84 	.word	0x0800fb84
 800ab58:	0800fbac 	.word	0x0800fbac
 800ab5c:	0800fbd4 	.word	0x0800fbd4
 800ab60:	0800fc00 	.word	0x0800fc00
 800ab64:	0800fc2c 	.word	0x0800fc2c
 800ab68:	0800fc58 	.word	0x0800fc58
 800ab6c:	0800fc88 	.word	0x0800fc88
 800ab70:	0800fcac 	.word	0x0800fcac
 800ab74:	0800fcd4 	.word	0x0800fcd4
 800ab78:	0800fd04 	.word	0x0800fd04
 800ab7c:	0800fd30 	.word	0x0800fd30
 800ab80:	0800fd5c 	.word	0x0800fd5c

0800ab84 <USBH_MTP_EventsCallback>:
  * @brief  The function informs that host has received an event
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_MTP_EventsCallback(USBH_HandleTypeDef *phost, uint32_t event, uint32_t param)
{
 800ab84:	b480      	push	{r7}
 800ab86:	b085      	sub	sp, #20
 800ab88:	af00      	add	r7, sp, #0
 800ab8a:	60f8      	str	r0, [r7, #12]
 800ab8c:	60b9      	str	r1, [r7, #8]
 800ab8e:	607a      	str	r2, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
  UNUSED(event);
  UNUSED(param);
}
 800ab90:	bf00      	nop
 800ab92:	3714      	adds	r7, #20
 800ab94:	46bd      	mov	sp, r7
 800ab96:	bc80      	pop	{r7}
 800ab98:	4770      	bx	lr

0800ab9a <USBH_PTP_Init>:
  *         The function Initializes the BOT protocol.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_PTP_Init(USBH_HandleTypeDef *phost)
{
 800ab9a:	b480      	push	{r7}
 800ab9c:	b085      	sub	sp, #20
 800ab9e:	af00      	add	r7, sp, #0
 800aba0:	6078      	str	r0, [r7, #4]
  MTP_HandleTypeDef *MTP_Handle = (MTP_HandleTypeDef *)phost->pActiveClass->pData;
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aba8:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 800abac:	69db      	ldr	r3, [r3, #28]
 800abae:	60fb      	str	r3, [r7, #12]

  /* Set state to idle to be ready for operations */
  MTP_Handle->ptp.state = PTP_IDLE;
 800abb0:	68fb      	ldr	r3, [r7, #12]
 800abb2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800abb6:	2200      	movs	r2, #0
 800abb8:	f883 2d60 	strb.w	r2, [r3, #3424]	; 0xd60
  MTP_Handle->ptp.req_state = PTP_REQ_SEND;
 800abbc:	68fb      	ldr	r3, [r7, #12]
 800abbe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800abc2:	2201      	movs	r2, #1
 800abc4:	f883 2d61 	strb.w	r2, [r3, #3425]	; 0xd61

  return USBH_OK;
 800abc8:	2300      	movs	r3, #0
}
 800abca:	4618      	mov	r0, r3
 800abcc:	3714      	adds	r7, #20
 800abce:	46bd      	mov	sp, r7
 800abd0:	bc80      	pop	{r7}
 800abd2:	4770      	bx	lr

0800abd4 <USBH_PTP_Process>:
  * @param  phost: Host handle
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_PTP_Process(USBH_HandleTypeDef *phost)
{
 800abd4:	b580      	push	{r7, lr}
 800abd6:	b090      	sub	sp, #64	; 0x40
 800abd8:	af02      	add	r7, sp, #8
 800abda:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef   status = USBH_BUSY;
 800abdc:	2301      	movs	r3, #1
 800abde:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800abe2:	2300      	movs	r3, #0
 800abe4:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  MTP_HandleTypeDef    *MTP_Handle = (MTP_HandleTypeDef *)phost->pActiveClass->pData;
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800abee:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 800abf2:	69db      	ldr	r3, [r3, #28]
 800abf4:	633b      	str	r3, [r7, #48]	; 0x30
  PTP_ContainerTypedef  ptp_container;
  uint32_t  len;

  switch (MTP_Handle->ptp.state)
 800abf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abf8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800abfc:	f893 3d60 	ldrb.w	r3, [r3, #3424]	; 0xd60
 800ac00:	2b09      	cmp	r3, #9
 800ac02:	f200 826f 	bhi.w	800b0e4 <USBH_PTP_Process+0x510>
 800ac06:	a201      	add	r2, pc, #4	; (adr r2, 800ac0c <USBH_PTP_Process+0x38>)
 800ac08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac0c:	0800b0e5 	.word	0x0800b0e5
 800ac10:	0800ac35 	.word	0x0800ac35
 800ac14:	0800ac6b 	.word	0x0800ac6b
 800ac18:	0800ad0f 	.word	0x0800ad0f
 800ac1c:	0800ad45 	.word	0x0800ad45
 800ac20:	0800ae9d 	.word	0x0800ae9d
 800ac24:	0800aecf 	.word	0x0800aecf
 800ac28:	0800b047 	.word	0x0800b047
 800ac2c:	0800b06f 	.word	0x0800b06f
 800ac30:	0800b0d7 	.word	0x0800b0d7
      /*Do Nothing */
      break;

    case PTP_OP_REQUEST_STATE:
      USBH_BulkSendData(phost,
                        (uint8_t *)(void *) & (MTP_Handle->ptp.op_container),
 800ac34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac36:	f503 51eb 	add.w	r1, r3, #7520	; 0x1d60
 800ac3a:	3104      	adds	r1, #4
                        (uint16_t)MTP_Handle->ptp.op_container.length,
 800ac3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac3e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ac42:	f8d3 3d64 	ldr.w	r3, [r3, #3428]	; 0xd64
      USBH_BulkSendData(phost,
 800ac46:	b29a      	uxth	r2, r3
 800ac48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac4a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ac4e:	f893 3d2d 	ldrb.w	r3, [r3, #3373]	; 0xd2d
 800ac52:	2001      	movs	r0, #1
 800ac54:	9000      	str	r0, [sp, #0]
 800ac56:	6878      	ldr	r0, [r7, #4]
 800ac58:	f002 fd21 	bl	800d69e <USBH_BulkSendData>
                        MTP_Handle->DataOutPipe,
                        1U);
      MTP_Handle->ptp.state = PTP_OP_REQUEST_WAIT_STATE;
 800ac5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac5e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ac62:	2202      	movs	r2, #2
 800ac64:	f883 2d60 	strb.w	r2, [r3, #3424]	; 0xd60
      break;
 800ac68:	e245      	b.n	800b0f6 <USBH_PTP_Process+0x522>

    case PTP_OP_REQUEST_WAIT_STATE:
      URB_Status = USBH_LL_GetURBState(phost, MTP_Handle->DataOutPipe);
 800ac6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac6c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ac70:	f893 3d2d 	ldrb.w	r3, [r3, #3373]	; 0xd2d
 800ac74:	4619      	mov	r1, r3
 800ac76:	6878      	ldr	r0, [r7, #4]
 800ac78:	f003 f8ba 	bl	800ddf0 <USBH_LL_GetURBState>
 800ac7c:	4603      	mov	r3, r0
 800ac7e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

      if (URB_Status == USBH_URB_DONE)
 800ac82:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800ac86:	2b01      	cmp	r3, #1
 800ac88:	d12a      	bne.n	800ace0 <USBH_PTP_Process+0x10c>
      {
        if (MTP_Handle->ptp.flags == PTP_DP_NODATA)
 800ac8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac8c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800ac90:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
 800ac94:	2b00      	cmp	r3, #0
 800ac96:	d106      	bne.n	800aca6 <USBH_PTP_Process+0xd2>
        {
          MTP_Handle->ptp.state = PTP_RESPONSE_STATE;
 800ac98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac9a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ac9e:	2207      	movs	r2, #7
 800aca0:	f883 2d60 	strb.w	r2, [r3, #3424]	; 0xd60
#endif
      }
      else
      {
      }
      break;
 800aca4:	e220      	b.n	800b0e8 <USBH_PTP_Process+0x514>
        else  if (MTP_Handle->ptp.flags == PTP_DP_SENDDATA)
 800aca6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aca8:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800acac:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
 800acb0:	2b01      	cmp	r3, #1
 800acb2:	d106      	bne.n	800acc2 <USBH_PTP_Process+0xee>
          MTP_Handle->ptp.state = PTP_DATA_OUT_PHASE_STATE;
 800acb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acb6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800acba:	2203      	movs	r2, #3
 800acbc:	f883 2d60 	strb.w	r2, [r3, #3424]	; 0xd60
      break;
 800acc0:	e212      	b.n	800b0e8 <USBH_PTP_Process+0x514>
        else  if (MTP_Handle->ptp.flags == PTP_DP_GETDATA)
 800acc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acc4:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800acc8:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
 800accc:	2b02      	cmp	r3, #2
 800acce:	f040 820b 	bne.w	800b0e8 <USBH_PTP_Process+0x514>
          MTP_Handle->ptp.state = PTP_DATA_IN_PHASE_STATE;
 800acd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acd4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800acd8:	2205      	movs	r2, #5
 800acda:	f883 2d60 	strb.w	r2, [r3, #3424]	; 0xd60
      break;
 800acde:	e203      	b.n	800b0e8 <USBH_PTP_Process+0x514>
      else if (URB_Status == USBH_URB_NOTREADY)
 800ace0:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800ace4:	2b02      	cmp	r3, #2
 800ace6:	d106      	bne.n	800acf6 <USBH_PTP_Process+0x122>
        MTP_Handle->ptp.state = PTP_OP_REQUEST_STATE;
 800ace8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800acee:	2201      	movs	r2, #1
 800acf0:	f883 2d60 	strb.w	r2, [r3, #3424]	; 0xd60
      break;
 800acf4:	e1f8      	b.n	800b0e8 <USBH_PTP_Process+0x514>
      else if (URB_Status == USBH_URB_STALL)
 800acf6:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800acfa:	2b05      	cmp	r3, #5
 800acfc:	f040 81f4 	bne.w	800b0e8 <USBH_PTP_Process+0x514>
        MTP_Handle->ptp.state  = PTP_ERROR;
 800ad00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad02:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ad06:	2209      	movs	r2, #9
 800ad08:	f883 2d60 	strb.w	r2, [r3, #3424]	; 0xd60
      break;
 800ad0c:	e1ec      	b.n	800b0e8 <USBH_PTP_Process+0x514>

    case PTP_DATA_OUT_PHASE_STATE:

      USBH_BulkSendData(phost,
 800ad0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad10:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800ad14:	f8d3 11b0 	ldr.w	r1, [r3, #432]	; 0x1b0
 800ad18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad1a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ad1e:	f8b3 2d32 	ldrh.w	r2, [r3, #3378]	; 0xd32
 800ad22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad24:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ad28:	f893 3d2d 	ldrb.w	r3, [r3, #3373]	; 0xd2d
 800ad2c:	2001      	movs	r0, #1
 800ad2e:	9000      	str	r0, [sp, #0]
 800ad30:	6878      	ldr	r0, [r7, #4]
 800ad32:	f002 fcb4 	bl	800d69e <USBH_BulkSendData>
                        MTP_Handle->DataOutEpSize,
                        MTP_Handle->DataOutPipe,
                        1U);


      MTP_Handle->ptp.state  = PTP_DATA_OUT_PHASE_WAIT_STATE;
 800ad36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad38:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ad3c:	2204      	movs	r2, #4
 800ad3e:	f883 2d60 	strb.w	r2, [r3, #3424]	; 0xd60
      break;
 800ad42:	e1d8      	b.n	800b0f6 <USBH_PTP_Process+0x522>

    case PTP_DATA_OUT_PHASE_WAIT_STATE:
      URB_Status = USBH_LL_GetURBState(phost, MTP_Handle->DataOutPipe);
 800ad44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad46:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ad4a:	f893 3d2d 	ldrb.w	r3, [r3, #3373]	; 0xd2d
 800ad4e:	4619      	mov	r1, r3
 800ad50:	6878      	ldr	r0, [r7, #4]
 800ad52:	f003 f84d 	bl	800ddf0 <USBH_LL_GetURBState>
 800ad56:	4603      	mov	r3, r0
 800ad58:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

      if (URB_Status == USBH_URB_DONE)
 800ad5c:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800ad60:	2b01      	cmp	r3, #1
 800ad62:	f040 8084 	bne.w	800ae6e <USBH_PTP_Process+0x29a>
      {
        /* Adjust Data pointer and data length */
        if (MTP_Handle->ptp.data_length > MTP_Handle->DataOutEpSize)
 800ad66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad68:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800ad6c:	f8d3 31b4 	ldr.w	r3, [r3, #436]	; 0x1b4
 800ad70:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ad72:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800ad76:	f8b2 2d32 	ldrh.w	r2, [r2, #3378]	; 0xd32
 800ad7a:	4293      	cmp	r3, r2
 800ad7c:	d94d      	bls.n	800ae1a <USBH_PTP_Process+0x246>
        {
          MTP_Handle->ptp.data_ptr += MTP_Handle->DataOutEpSize;
 800ad7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad80:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800ad84:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 800ad88:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ad8a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800ad8e:	f8b2 2d32 	ldrh.w	r2, [r2, #3378]	; 0xd32
 800ad92:	4413      	add	r3, r2
 800ad94:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ad96:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 800ad9a:	f8c2 31b0 	str.w	r3, [r2, #432]	; 0x1b0
          MTP_Handle->ptp.data_length -= MTP_Handle->DataOutEpSize;
 800ad9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ada0:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800ada4:	f8d3 31b4 	ldr.w	r3, [r3, #436]	; 0x1b4
 800ada8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800adaa:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800adae:	f8b2 2d32 	ldrh.w	r2, [r2, #3378]	; 0xd32
 800adb2:	1a9b      	subs	r3, r3, r2
 800adb4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800adb6:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 800adba:	f8c2 31b4 	str.w	r3, [r2, #436]	; 0x1b4
          MTP_Handle->ptp.data_packet += MTP_Handle->DataOutEpSize;
 800adbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adc0:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800adc4:	f8d3 31b8 	ldr.w	r3, [r3, #440]	; 0x1b8
 800adc8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800adca:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800adce:	f8b2 2d32 	ldrh.w	r2, [r2, #3378]	; 0xd32
 800add2:	4413      	add	r3, r2
 800add4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800add6:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 800adda:	f8c2 31b8 	str.w	r3, [r2, #440]	; 0x1b8

          if (MTP_Handle->ptp.data_packet >= PTP_USB_BULK_PAYLOAD_LEN_READ)
 800adde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ade0:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800ade4:	f8d3 31b8 	ldr.w	r3, [r3, #440]	; 0x1b8
 800ade8:	f5b3 7f7d 	cmp.w	r3, #1012	; 0x3f4
 800adec:	d31c      	bcc.n	800ae28 <USBH_PTP_Process+0x254>
          {
            PTP_BufferFullCallback(phost);
 800adee:	6878      	ldr	r0, [r7, #4]
 800adf0:	f000 fa32 	bl	800b258 <PTP_BufferFullCallback>
            MTP_Handle->ptp.data_packet = 0U;
 800adf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adf6:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800adfa:	461a      	mov	r2, r3
 800adfc:	2300      	movs	r3, #0
 800adfe:	f8c2 31b8 	str.w	r3, [r2, #440]	; 0x1b8
            MTP_Handle->ptp.iteration++;
 800ae02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae04:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800ae08:	f8d3 31bc 	ldr.w	r3, [r3, #444]	; 0x1bc
 800ae0c:	3301      	adds	r3, #1
 800ae0e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ae10:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 800ae14:	f8c2 31bc 	str.w	r3, [r2, #444]	; 0x1bc
 800ae18:	e006      	b.n	800ae28 <USBH_PTP_Process+0x254>
          }
        }
        else
        {
          MTP_Handle->ptp.data_length = 0U;
 800ae1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae1c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800ae20:	461a      	mov	r2, r3
 800ae22:	2300      	movs	r3, #0
 800ae24:	f8c2 31b4 	str.w	r3, [r2, #436]	; 0x1b4
        }

        /* More Data To be Sent */
        if (MTP_Handle->ptp.data_length > 0U)
 800ae28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae2a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800ae2e:	f8d3 31b4 	ldr.w	r3, [r3, #436]	; 0x1b4
 800ae32:	2b00      	cmp	r3, #0
 800ae34:	d014      	beq.n	800ae60 <USBH_PTP_Process+0x28c>
        {
          USBH_BulkSendData(phost,
 800ae36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae38:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800ae3c:	f8d3 11b0 	ldr.w	r1, [r3, #432]	; 0x1b0
 800ae40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae42:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ae46:	f8b3 2d32 	ldrh.w	r2, [r3, #3378]	; 0xd32
 800ae4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae4c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ae50:	f893 3d2d 	ldrb.w	r3, [r3, #3373]	; 0xd2d
 800ae54:	2001      	movs	r0, #1
 800ae56:	9000      	str	r0, [sp, #0]
 800ae58:	6878      	ldr	r0, [r7, #4]
 800ae5a:	f002 fc20 	bl	800d69e <USBH_BulkSendData>
      }
      else
      {
        /* .. */
      }
      break;
 800ae5e:	e145      	b.n	800b0ec <USBH_PTP_Process+0x518>
          MTP_Handle->ptp.state  = PTP_RESPONSE_STATE;
 800ae60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae62:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ae66:	2207      	movs	r2, #7
 800ae68:	f883 2d60 	strb.w	r2, [r3, #3424]	; 0xd60
      break;
 800ae6c:	e13e      	b.n	800b0ec <USBH_PTP_Process+0x518>
      else if (URB_Status == USBH_URB_NOTREADY)
 800ae6e:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800ae72:	2b02      	cmp	r3, #2
 800ae74:	d106      	bne.n	800ae84 <USBH_PTP_Process+0x2b0>
        MTP_Handle->ptp.state = PTP_DATA_OUT_PHASE_STATE;
 800ae76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae78:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ae7c:	2203      	movs	r2, #3
 800ae7e:	f883 2d60 	strb.w	r2, [r3, #3424]	; 0xd60
      break;
 800ae82:	e133      	b.n	800b0ec <USBH_PTP_Process+0x518>
      else if (URB_Status == USBH_URB_STALL)
 800ae84:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800ae88:	2b05      	cmp	r3, #5
 800ae8a:	f040 812f 	bne.w	800b0ec <USBH_PTP_Process+0x518>
        MTP_Handle->ptp.state  = PTP_ERROR;
 800ae8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae90:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ae94:	2209      	movs	r2, #9
 800ae96:	f883 2d60 	strb.w	r2, [r3, #3424]	; 0xd60
      break;
 800ae9a:	e127      	b.n	800b0ec <USBH_PTP_Process+0x518>

    case PTP_DATA_IN_PHASE_STATE:
      /* Send first packet */
      USBH_BulkReceiveData(phost,
 800ae9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae9e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800aea2:	f8d3 11b0 	ldr.w	r1, [r3, #432]	; 0x1b0
 800aea6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aea8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aeac:	f8b3 2d34 	ldrh.w	r2, [r3, #3380]	; 0xd34
 800aeb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aeb2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aeb6:	f893 3d2c 	ldrb.w	r3, [r3, #3372]	; 0xd2c
 800aeba:	6878      	ldr	r0, [r7, #4]
 800aebc:	f002 fc14 	bl	800d6e8 <USBH_BulkReceiveData>
                           MTP_Handle->ptp.data_ptr,
                           MTP_Handle->DataInEpSize,
                           MTP_Handle->DataInPipe);

      MTP_Handle->ptp.state  = PTP_DATA_IN_PHASE_WAIT_STATE;
 800aec0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aec2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aec6:	2206      	movs	r2, #6
 800aec8:	f883 2d60 	strb.w	r2, [r3, #3424]	; 0xd60
      break;
 800aecc:	e113      	b.n	800b0f6 <USBH_PTP_Process+0x522>

    case PTP_DATA_IN_PHASE_WAIT_STATE:
      URB_Status = USBH_LL_GetURBState(phost, MTP_Handle->DataInPipe);
 800aece:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aed0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aed4:	f893 3d2c 	ldrb.w	r3, [r3, #3372]	; 0xd2c
 800aed8:	4619      	mov	r1, r3
 800aeda:	6878      	ldr	r0, [r7, #4]
 800aedc:	f002 ff88 	bl	800ddf0 <USBH_LL_GetURBState>
 800aee0:	4603      	mov	r3, r0
 800aee2:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

      if (URB_Status == USBH_URB_DONE)
 800aee6:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800aeea:	2b01      	cmp	r3, #1
 800aeec:	f040 80a0 	bne.w	800b030 <USBH_PTP_Process+0x45c>
      {
        len = USBH_LL_GetLastXferSize(phost, MTP_Handle->DataInPipe);
 800aef0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aef2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aef6:	f893 3d2c 	ldrb.w	r3, [r3, #3372]	; 0xd2c
 800aefa:	4619      	mov	r1, r3
 800aefc:	6878      	ldr	r0, [r7, #4]
 800aefe:	f002 fedd 	bl	800dcbc <USBH_LL_GetLastXferSize>
 800af02:	62f8      	str	r0, [r7, #44]	; 0x2c

        if (MTP_Handle->ptp.data_packet_counter++ == 0U)
 800af04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af06:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800af0a:	f8d3 31c0 	ldr.w	r3, [r3, #448]	; 0x1c0
 800af0e:	1c5a      	adds	r2, r3, #1
 800af10:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800af12:	f501 5100 	add.w	r1, r1, #8192	; 0x2000
 800af16:	f8c1 21c0 	str.w	r2, [r1, #448]	; 0x1c0
 800af1a:	2b00      	cmp	r3, #0
 800af1c:	d111      	bne.n	800af42 <USBH_PTP_Process+0x36e>
        {
          /* This is the first packet; so retrieve exact data length from payload */
          MTP_Handle->ptp.data_length = *(uint32_t *)(void *)(MTP_Handle->ptp.data_ptr);
 800af1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af20:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800af24:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 800af28:	681b      	ldr	r3, [r3, #0]
 800af2a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800af2c:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 800af30:	f8c2 31b4 	str.w	r3, [r2, #436]	; 0x1b4
          MTP_Handle->ptp.iteration = 0U;
 800af34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af36:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800af3a:	461a      	mov	r2, r3
 800af3c:	2300      	movs	r3, #0
 800af3e:	f8c2 31bc 	str.w	r3, [r2, #444]	; 0x1bc
        }

        if ((len >=  MTP_Handle->DataInEpSize) && (MTP_Handle->ptp.data_length > 0U))
 800af42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af44:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800af48:	f8b3 3d34 	ldrh.w	r3, [r3, #3380]	; 0xd34
 800af4c:	461a      	mov	r2, r3
 800af4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af50:	4293      	cmp	r3, r2
 800af52:	d35a      	bcc.n	800b00a <USBH_PTP_Process+0x436>
 800af54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af56:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800af5a:	f8d3 31b4 	ldr.w	r3, [r3, #436]	; 0x1b4
 800af5e:	2b00      	cmp	r3, #0
 800af60:	d053      	beq.n	800b00a <USBH_PTP_Process+0x436>
        {
          MTP_Handle->ptp.data_ptr += len;
 800af62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af64:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800af68:	f8d3 21b0 	ldr.w	r2, [r3, #432]	; 0x1b0
 800af6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af6e:	4413      	add	r3, r2
 800af70:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800af72:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 800af76:	f8c2 31b0 	str.w	r3, [r2, #432]	; 0x1b0
          MTP_Handle->ptp.data_length -= len;
 800af7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af7c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800af80:	f8d3 21b4 	ldr.w	r2, [r3, #436]	; 0x1b4
 800af84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af86:	1ad3      	subs	r3, r2, r3
 800af88:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800af8a:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 800af8e:	f8c2 31b4 	str.w	r3, [r2, #436]	; 0x1b4
          MTP_Handle->ptp.data_packet += len;
 800af92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af94:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800af98:	f8d3 21b8 	ldr.w	r2, [r3, #440]	; 0x1b8
 800af9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af9e:	4413      	add	r3, r2
 800afa0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800afa2:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 800afa6:	f8c2 31b8 	str.w	r3, [r2, #440]	; 0x1b8

          if (MTP_Handle->ptp.data_packet >= PTP_USB_BULK_PAYLOAD_LEN_READ)
 800afaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afac:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800afb0:	f8d3 31b8 	ldr.w	r3, [r3, #440]	; 0x1b8
 800afb4:	f5b3 7f7d 	cmp.w	r3, #1012	; 0x3f4
 800afb8:	d314      	bcc.n	800afe4 <USBH_PTP_Process+0x410>
          {
            PTP_BufferFullCallback(phost);
 800afba:	6878      	ldr	r0, [r7, #4]
 800afbc:	f000 f94c 	bl	800b258 <PTP_BufferFullCallback>
            MTP_Handle->ptp.data_packet = 0U;
 800afc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afc2:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800afc6:	461a      	mov	r2, r3
 800afc8:	2300      	movs	r3, #0
 800afca:	f8c2 31b8 	str.w	r3, [r2, #440]	; 0x1b8
            MTP_Handle->ptp.iteration++;
 800afce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afd0:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800afd4:	f8d3 31bc 	ldr.w	r3, [r3, #444]	; 0x1bc
 800afd8:	3301      	adds	r3, #1
 800afda:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800afdc:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 800afe0:	f8c2 31bc 	str.w	r3, [r2, #444]	; 0x1bc
          }

          /* Continue receiving data*/
          USBH_BulkReceiveData(phost,
 800afe4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afe6:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800afea:	f8d3 11b0 	ldr.w	r1, [r3, #432]	; 0x1b0
 800afee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aff0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aff4:	f8b3 2d34 	ldrh.w	r2, [r3, #3380]	; 0xd34
 800aff8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800affa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800affe:	f893 3d2c 	ldrb.w	r3, [r3, #3372]	; 0xd2c
 800b002:	6878      	ldr	r0, [r7, #4]
 800b004:	f002 fb70 	bl	800d6e8 <USBH_BulkReceiveData>
      }
      else
      {
        /* .. */
      }
      break;
 800b008:	e072      	b.n	800b0f0 <USBH_PTP_Process+0x51c>
          MTP_Handle->ptp.data_length -= len;
 800b00a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b00c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800b010:	f8d3 21b4 	ldr.w	r2, [r3, #436]	; 0x1b4
 800b014:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b016:	1ad3      	subs	r3, r2, r3
 800b018:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b01a:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 800b01e:	f8c2 31b4 	str.w	r3, [r2, #436]	; 0x1b4
          MTP_Handle->ptp.state = PTP_RESPONSE_STATE;
 800b022:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b024:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b028:	2207      	movs	r2, #7
 800b02a:	f883 2d60 	strb.w	r2, [r3, #3424]	; 0xd60
      break;
 800b02e:	e05f      	b.n	800b0f0 <USBH_PTP_Process+0x51c>
      else if (URB_Status == USBH_URB_STALL)
 800b030:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800b034:	2b05      	cmp	r3, #5
 800b036:	d15b      	bne.n	800b0f0 <USBH_PTP_Process+0x51c>
        MTP_Handle->ptp.state  = PTP_ERROR;
 800b038:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b03a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b03e:	2209      	movs	r2, #9
 800b040:	f883 2d60 	strb.w	r2, [r3, #3424]	; 0xd60
      break;
 800b044:	e054      	b.n	800b0f0 <USBH_PTP_Process+0x51c>

    case PTP_RESPONSE_STATE:
      USBH_BulkReceiveData(phost,
                           (uint8_t *)(void *) & (MTP_Handle->ptp.resp_container),
 800b046:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b048:	f503 5106 	add.w	r1, r3, #8576	; 0x2180
 800b04c:	3104      	adds	r1, #4
      USBH_BulkReceiveData(phost,
 800b04e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b050:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b054:	f893 3d2c 	ldrb.w	r3, [r3, #3372]	; 0xd2c
 800b058:	223f      	movs	r2, #63	; 0x3f
 800b05a:	6878      	ldr	r0, [r7, #4]
 800b05c:	f002 fb44 	bl	800d6e8 <USBH_BulkReceiveData>
                           PTP_USB_BULK_REQ_RESP_MAX_LEN,
                           MTP_Handle->DataInPipe);

      MTP_Handle->ptp.state  = PTP_RESPONSE_WAIT_STATE;
 800b060:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b062:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b066:	2208      	movs	r2, #8
 800b068:	f883 2d60 	strb.w	r2, [r3, #3424]	; 0xd60
      break;
 800b06c:	e043      	b.n	800b0f6 <USBH_PTP_Process+0x522>

    case PTP_RESPONSE_WAIT_STATE:
      URB_Status = USBH_LL_GetURBState(phost, MTP_Handle->DataInPipe);
 800b06e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b070:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b074:	f893 3d2c 	ldrb.w	r3, [r3, #3372]	; 0xd2c
 800b078:	4619      	mov	r1, r3
 800b07a:	6878      	ldr	r0, [r7, #4]
 800b07c:	f002 feb8 	bl	800ddf0 <USBH_LL_GetURBState>
 800b080:	4603      	mov	r3, r0
 800b082:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

      if (URB_Status == USBH_URB_DONE)
 800b086:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800b08a:	2b01      	cmp	r3, #1
 800b08c:	d118      	bne.n	800b0c0 <USBH_PTP_Process+0x4ec>
      {
        USBH_PTP_GetResponse(phost, &ptp_container);
 800b08e:	f107 0308 	add.w	r3, r7, #8
 800b092:	4619      	mov	r1, r3
 800b094:	6878      	ldr	r0, [r7, #4]
 800b096:	f000 f892 	bl	800b1be <USBH_PTP_GetResponse>

        if (ptp_container.Code == PTP_RC_OK)
 800b09a:	893b      	ldrh	r3, [r7, #8]
 800b09c:	f242 0201 	movw	r2, #8193	; 0x2001
 800b0a0:	4293      	cmp	r3, r2
 800b0a2:	d103      	bne.n	800b0ac <USBH_PTP_Process+0x4d8>
        {
          status = USBH_OK;
 800b0a4:	2300      	movs	r3, #0
 800b0a6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800b0aa:	e002      	b.n	800b0b2 <USBH_PTP_Process+0x4de>
        }
        else
        {
          status = USBH_FAIL;
 800b0ac:	2302      	movs	r3, #2
 800b0ae:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        }
        MTP_Handle->ptp.req_state = PTP_REQ_SEND;
 800b0b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b0b8:	2201      	movs	r2, #1
 800b0ba:	f883 2d61 	strb.w	r2, [r3, #3425]	; 0xd61
      }
      else
      {
        /* .. */
      }
      break;
 800b0be:	e019      	b.n	800b0f4 <USBH_PTP_Process+0x520>
      else if (URB_Status == USBH_URB_STALL)
 800b0c0:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800b0c4:	2b05      	cmp	r3, #5
 800b0c6:	d115      	bne.n	800b0f4 <USBH_PTP_Process+0x520>
        MTP_Handle->ptp.state  = PTP_ERROR;
 800b0c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b0ce:	2209      	movs	r2, #9
 800b0d0:	f883 2d60 	strb.w	r2, [r3, #3424]	; 0xd60
      break;
 800b0d4:	e00e      	b.n	800b0f4 <USBH_PTP_Process+0x520>

    case PTP_ERROR:
      MTP_Handle->ptp.req_state = PTP_REQ_SEND;
 800b0d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b0dc:	2201      	movs	r2, #1
 800b0de:	f883 2d61 	strb.w	r2, [r3, #3425]	; 0xd61
      break;
 800b0e2:	e008      	b.n	800b0f6 <USBH_PTP_Process+0x522>

    default:
      break;
 800b0e4:	bf00      	nop
 800b0e6:	e006      	b.n	800b0f6 <USBH_PTP_Process+0x522>
      break;
 800b0e8:	bf00      	nop
 800b0ea:	e004      	b.n	800b0f6 <USBH_PTP_Process+0x522>
      break;
 800b0ec:	bf00      	nop
 800b0ee:	e002      	b.n	800b0f6 <USBH_PTP_Process+0x522>
      break;
 800b0f0:	bf00      	nop
 800b0f2:	e000      	b.n	800b0f6 <USBH_PTP_Process+0x522>
      break;
 800b0f4:	bf00      	nop
  }
  return status;
 800b0f6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 800b0fa:	4618      	mov	r0, r3
 800b0fc:	3738      	adds	r7, #56	; 0x38
 800b0fe:	46bd      	mov	sp, r7
 800b100:	bd80      	pop	{r7, pc}
 800b102:	bf00      	nop

0800b104 <USBH_PTP_SendRequest>:
  *         Open a new session
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_PTP_SendRequest(USBH_HandleTypeDef *phost, PTP_ContainerTypedef  *req)
{
 800b104:	b580      	push	{r7, lr}
 800b106:	b084      	sub	sp, #16
 800b108:	af00      	add	r7, sp, #0
 800b10a:	6078      	str	r0, [r7, #4]
 800b10c:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800b10e:	2300      	movs	r3, #0
 800b110:	73fb      	strb	r3, [r7, #15]
  MTP_HandleTypeDef *MTP_Handle = (MTP_HandleTypeDef *)phost->pActiveClass->pData;
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b118:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 800b11c:	69db      	ldr	r3, [r3, #28]
 800b11e:	60bb      	str	r3, [r7, #8]

  /* Clear PTP Data container*/
  USBH_memset(&(MTP_Handle->ptp.op_container), 0, sizeof(PTP_OpContainerTypedef));
 800b120:	68bb      	ldr	r3, [r7, #8]
 800b122:	f503 53eb 	add.w	r3, r3, #7520	; 0x1d60
 800b126:	3304      	adds	r3, #4
 800b128:	2220      	movs	r2, #32
 800b12a:	2100      	movs	r1, #0
 800b12c:	4618      	mov	r0, r3
 800b12e:	f002 ff67 	bl	800e000 <memset>

  /* build appropriate USB container */
  MTP_Handle->ptp.op_container.length = PTP_USB_BULK_REQ_LEN - (sizeof(uint32_t) * (5U - req->Nparam));
 800b132:	683b      	ldr	r3, [r7, #0]
 800b134:	f893 3020 	ldrb.w	r3, [r3, #32]
 800b138:	3303      	adds	r3, #3
 800b13a:	009b      	lsls	r3, r3, #2
 800b13c:	68ba      	ldr	r2, [r7, #8]
 800b13e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800b142:	f8c2 3d64 	str.w	r3, [r2, #3428]	; 0xd64
  MTP_Handle->ptp.op_container.type = PTP_USB_CONTAINER_COMMAND;
 800b146:	68bb      	ldr	r3, [r7, #8]
 800b148:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b14c:	2201      	movs	r2, #1
 800b14e:	f8a3 2d68 	strh.w	r2, [r3, #3432]	; 0xd68
  MTP_Handle->ptp.op_container.code = req->Code;
 800b152:	683b      	ldr	r3, [r7, #0]
 800b154:	881a      	ldrh	r2, [r3, #0]
 800b156:	68bb      	ldr	r3, [r7, #8]
 800b158:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b15c:	f8a3 2d6a 	strh.w	r2, [r3, #3434]	; 0xd6a
  MTP_Handle->ptp.op_container.trans_id = req->Transaction_ID;
 800b160:	683b      	ldr	r3, [r7, #0]
 800b162:	689b      	ldr	r3, [r3, #8]
 800b164:	68ba      	ldr	r2, [r7, #8]
 800b166:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800b16a:	f8c2 3d6c 	str.w	r3, [r2, #3436]	; 0xd6c
  MTP_Handle->ptp.op_container.param1 = req->Param1;
 800b16e:	683b      	ldr	r3, [r7, #0]
 800b170:	68db      	ldr	r3, [r3, #12]
 800b172:	68ba      	ldr	r2, [r7, #8]
 800b174:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800b178:	f8c2 3d70 	str.w	r3, [r2, #3440]	; 0xd70
  MTP_Handle->ptp.op_container.param2 = req->Param2;
 800b17c:	683b      	ldr	r3, [r7, #0]
 800b17e:	691b      	ldr	r3, [r3, #16]
 800b180:	68ba      	ldr	r2, [r7, #8]
 800b182:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800b186:	f8c2 3d74 	str.w	r3, [r2, #3444]	; 0xd74
  MTP_Handle->ptp.op_container.param3 = req->Param3;
 800b18a:	683b      	ldr	r3, [r7, #0]
 800b18c:	695b      	ldr	r3, [r3, #20]
 800b18e:	68ba      	ldr	r2, [r7, #8]
 800b190:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800b194:	f8c2 3d78 	str.w	r3, [r2, #3448]	; 0xd78
  MTP_Handle->ptp.op_container.param4 = req->Param4;
 800b198:	683b      	ldr	r3, [r7, #0]
 800b19a:	699b      	ldr	r3, [r3, #24]
 800b19c:	68ba      	ldr	r2, [r7, #8]
 800b19e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800b1a2:	f8c2 3d7c 	str.w	r3, [r2, #3452]	; 0xd7c
  MTP_Handle->ptp.op_container.param5 = req->Param5;
 800b1a6:	683b      	ldr	r3, [r7, #0]
 800b1a8:	69db      	ldr	r3, [r3, #28]
 800b1aa:	68ba      	ldr	r2, [r7, #8]
 800b1ac:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800b1b0:	f8c2 3d80 	str.w	r3, [r2, #3456]	; 0xd80

  return status;
 800b1b4:	7bfb      	ldrb	r3, [r7, #15]
}
 800b1b6:	4618      	mov	r0, r3
 800b1b8:	3710      	adds	r7, #16
 800b1ba:	46bd      	mov	sp, r7
 800b1bc:	bd80      	pop	{r7, pc}

0800b1be <USBH_PTP_GetResponse>:
  *         Open a new session
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_PTP_GetResponse(USBH_HandleTypeDef *phost, PTP_ContainerTypedef  *resp)
{
 800b1be:	b480      	push	{r7}
 800b1c0:	b085      	sub	sp, #20
 800b1c2:	af00      	add	r7, sp, #0
 800b1c4:	6078      	str	r0, [r7, #4]
 800b1c6:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800b1c8:	2300      	movs	r3, #0
 800b1ca:	73fb      	strb	r3, [r7, #15]
  MTP_HandleTypeDef  *MTP_Handle = (MTP_HandleTypeDef *)phost->pActiveClass->pData;
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b1d2:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 800b1d6:	69db      	ldr	r3, [r3, #28]
 800b1d8:	60bb      	str	r3, [r7, #8]

  /* build an appropriate PTPContainer */
  resp->Code = MTP_Handle->ptp.resp_container.code;
 800b1da:	68bb      	ldr	r3, [r7, #8]
 800b1dc:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800b1e0:	f8b3 218a 	ldrh.w	r2, [r3, #394]	; 0x18a
 800b1e4:	683b      	ldr	r3, [r7, #0]
 800b1e6:	801a      	strh	r2, [r3, #0]
  resp->SessionID = MTP_Handle->ptp.session_id;
 800b1e8:	68bb      	ldr	r3, [r7, #8]
 800b1ea:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800b1ee:	f8d3 21a8 	ldr.w	r2, [r3, #424]	; 0x1a8
 800b1f2:	683b      	ldr	r3, [r7, #0]
 800b1f4:	605a      	str	r2, [r3, #4]
  resp->Transaction_ID = MTP_Handle->ptp.resp_container.trans_id;
 800b1f6:	68bb      	ldr	r3, [r7, #8]
 800b1f8:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800b1fc:	f8d3 218c 	ldr.w	r2, [r3, #396]	; 0x18c
 800b200:	683b      	ldr	r3, [r7, #0]
 800b202:	609a      	str	r2, [r3, #8]
  resp->Param1 = MTP_Handle->ptp.resp_container.param1;
 800b204:	68bb      	ldr	r3, [r7, #8]
 800b206:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800b20a:	f8d3 2190 	ldr.w	r2, [r3, #400]	; 0x190
 800b20e:	683b      	ldr	r3, [r7, #0]
 800b210:	60da      	str	r2, [r3, #12]
  resp->Param2 = MTP_Handle->ptp.resp_container.param2;
 800b212:	68bb      	ldr	r3, [r7, #8]
 800b214:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800b218:	f8d3 2194 	ldr.w	r2, [r3, #404]	; 0x194
 800b21c:	683b      	ldr	r3, [r7, #0]
 800b21e:	611a      	str	r2, [r3, #16]
  resp->Param3 = MTP_Handle->ptp.resp_container.param3;
 800b220:	68bb      	ldr	r3, [r7, #8]
 800b222:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800b226:	f8d3 2198 	ldr.w	r2, [r3, #408]	; 0x198
 800b22a:	683b      	ldr	r3, [r7, #0]
 800b22c:	615a      	str	r2, [r3, #20]
  resp->Param4 = MTP_Handle->ptp.resp_container.param4;
 800b22e:	68bb      	ldr	r3, [r7, #8]
 800b230:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800b234:	f8d3 219c 	ldr.w	r2, [r3, #412]	; 0x19c
 800b238:	683b      	ldr	r3, [r7, #0]
 800b23a:	619a      	str	r2, [r3, #24]
  resp->Param5 = MTP_Handle->ptp.resp_container.param5;
 800b23c:	68bb      	ldr	r3, [r7, #8]
 800b23e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800b242:	f8d3 21a0 	ldr.w	r2, [r3, #416]	; 0x1a0
 800b246:	683b      	ldr	r3, [r7, #0]
 800b248:	61da      	str	r2, [r3, #28]

  return status;
 800b24a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b24c:	4618      	mov	r0, r3
 800b24e:	3714      	adds	r7, #20
 800b250:	46bd      	mov	sp, r7
 800b252:	bc80      	pop	{r7}
 800b254:	4770      	bx	lr
	...

0800b258 <PTP_BufferFullCallback>:
  * @brief  The function informs user that data buffer is full
  *  @param  phost: host handle
  * @retval None
  */
static void PTP_BufferFullCallback(USBH_HandleTypeDef *phost)
{
 800b258:	b580      	push	{r7, lr}
 800b25a:	b084      	sub	sp, #16
 800b25c:	af00      	add	r7, sp, #0
 800b25e:	6078      	str	r0, [r7, #4]
  MTP_HandleTypeDef *MTP_Handle = (MTP_HandleTypeDef *)phost->pActiveClass->pData;
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b266:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 800b26a:	69db      	ldr	r3, [r3, #28]
 800b26c:	60fb      	str	r3, [r7, #12]

  switch (MTP_Handle->ptp.data_container.code)
 800b26e:	68fb      	ldr	r3, [r7, #12]
 800b270:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b274:	f8b3 3d8a 	ldrh.w	r3, [r3, #3466]	; 0xd8a
 800b278:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
 800b27c:	3b01      	subs	r3, #1
 800b27e:	2b1a      	cmp	r3, #26
 800b280:	d874      	bhi.n	800b36c <PTP_BufferFullCallback+0x114>
 800b282:	a201      	add	r2, pc, #4	; (adr r2, 800b288 <PTP_BufferFullCallback+0x30>)
 800b284:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b288:	0800b2f5 	.word	0x0800b2f5
 800b28c:	0800b36d 	.word	0x0800b36d
 800b290:	0800b36d 	.word	0x0800b36d
 800b294:	0800b36d 	.word	0x0800b36d
 800b298:	0800b36d 	.word	0x0800b36d
 800b29c:	0800b36d 	.word	0x0800b36d
 800b2a0:	0800b36d 	.word	0x0800b36d
 800b2a4:	0800b36d 	.word	0x0800b36d
 800b2a8:	0800b301 	.word	0x0800b301
 800b2ac:	0800b36d 	.word	0x0800b36d
 800b2b0:	0800b36d 	.word	0x0800b36d
 800b2b4:	0800b36d 	.word	0x0800b36d
 800b2b8:	0800b345 	.word	0x0800b345
 800b2bc:	0800b36d 	.word	0x0800b36d
 800b2c0:	0800b36d 	.word	0x0800b36d
 800b2c4:	0800b36d 	.word	0x0800b36d
 800b2c8:	0800b36d 	.word	0x0800b36d
 800b2cc:	0800b36d 	.word	0x0800b36d
 800b2d0:	0800b36d 	.word	0x0800b36d
 800b2d4:	0800b36d 	.word	0x0800b36d
 800b2d8:	0800b36d 	.word	0x0800b36d
 800b2dc:	0800b36d 	.word	0x0800b36d
 800b2e0:	0800b36d 	.word	0x0800b36d
 800b2e4:	0800b36d 	.word	0x0800b36d
 800b2e8:	0800b36d 	.word	0x0800b36d
 800b2ec:	0800b36d 	.word	0x0800b36d
 800b2f0:	0800b301 	.word	0x0800b301
  {
    case PTP_OC_GetDeviceInfo:
      PTP_DecodeDeviceInfo(phost, &(MTP_Handle->info.devinfo));
 800b2f4:	68fb      	ldr	r3, [r7, #12]
 800b2f6:	4619      	mov	r1, r3
 800b2f8:	6878      	ldr	r0, [r7, #4]
 800b2fa:	f000 f841 	bl	800b380 <PTP_DecodeDeviceInfo>
      break;
 800b2fe:	e03a      	b.n	800b376 <PTP_BufferFullCallback+0x11e>

    case PTP_OC_GetPartialObject:
    case PTP_OC_GetObject:

      /* first packet is in the PTP data payload buffer */
      if (MTP_Handle->ptp.iteration == 0U)
 800b300:	68fb      	ldr	r3, [r7, #12]
 800b302:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800b306:	f8d3 31bc 	ldr.w	r3, [r3, #444]	; 0x1bc
 800b30a:	2b00      	cmp	r3, #0
 800b30c:	d130      	bne.n	800b370 <PTP_BufferFullCallback+0x118>
      {
        /* copy it to object */
        USBH_memcpy(MTP_Handle->ptp.object_ptr, MTP_Handle->ptp.data_container.payload.data, PTP_USB_BULK_PAYLOAD_LEN_READ);
 800b30e:	68fb      	ldr	r3, [r7, #12]
 800b310:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800b314:	f8d3 01c4 	ldr.w	r0, [r3, #452]	; 0x1c4
 800b318:	68fb      	ldr	r3, [r7, #12]
 800b31a:	f503 53ec 	add.w	r3, r3, #7552	; 0x1d80
 800b31e:	3310      	adds	r3, #16
 800b320:	f44f 727d 	mov.w	r2, #1012	; 0x3f4
 800b324:	4619      	mov	r1, r3
 800b326:	f002 fe5d 	bl	800dfe4 <memcpy>

        /* next packet should be directly copied to object */
        MTP_Handle->ptp.data_ptr = (MTP_Handle->ptp.object_ptr + PTP_USB_BULK_PAYLOAD_LEN_READ);
 800b32a:	68fb      	ldr	r3, [r7, #12]
 800b32c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800b330:	f8d3 31c4 	ldr.w	r3, [r3, #452]	; 0x1c4
 800b334:	f503 737d 	add.w	r3, r3, #1012	; 0x3f4
 800b338:	68fa      	ldr	r2, [r7, #12]
 800b33a:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 800b33e:	f8c2 31b0 	str.w	r3, [r2, #432]	; 0x1b0
      }
      break;
 800b342:	e015      	b.n	800b370 <PTP_BufferFullCallback+0x118>

    case PTP_OC_SendObject:
      /* first packet is in the PTP data payload buffer */
      if (MTP_Handle->ptp.iteration == 0U)
 800b344:	68fb      	ldr	r3, [r7, #12]
 800b346:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800b34a:	f8d3 31bc 	ldr.w	r3, [r3, #444]	; 0x1bc
 800b34e:	2b00      	cmp	r3, #0
 800b350:	d110      	bne.n	800b374 <PTP_BufferFullCallback+0x11c>
      {
        /* next packet should be directly copied to object */
        MTP_Handle->ptp.data_ptr = (MTP_Handle->ptp.object_ptr + PTP_USB_BULK_PAYLOAD_LEN_READ);
 800b352:	68fb      	ldr	r3, [r7, #12]
 800b354:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800b358:	f8d3 31c4 	ldr.w	r3, [r3, #452]	; 0x1c4
 800b35c:	f503 737d 	add.w	r3, r3, #1012	; 0x3f4
 800b360:	68fa      	ldr	r2, [r7, #12]
 800b362:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 800b366:	f8c2 31b0 	str.w	r3, [r2, #432]	; 0x1b0
      }
      break;
 800b36a:	e003      	b.n	800b374 <PTP_BufferFullCallback+0x11c>

    default:
      break;
 800b36c:	bf00      	nop
 800b36e:	e002      	b.n	800b376 <PTP_BufferFullCallback+0x11e>
      break;
 800b370:	bf00      	nop
 800b372:	e000      	b.n	800b376 <PTP_BufferFullCallback+0x11e>
      break;
 800b374:	bf00      	nop


  }
}
 800b376:	bf00      	nop
 800b378:	3710      	adds	r7, #16
 800b37a:	46bd      	mov	sp, r7
 800b37c:	bd80      	pop	{r7, pc}
 800b37e:	bf00      	nop

0800b380 <PTP_DecodeDeviceInfo>:
  * @param  phost: Host handle
  * @param  dev_info: Device info structure
  * @retval None
  */
static void PTP_DecodeDeviceInfo(USBH_HandleTypeDef *phost, PTP_DeviceInfoTypedef *dev_info)
{
 800b380:	b580      	push	{r7, lr}
 800b382:	b086      	sub	sp, #24
 800b384:	af00      	add	r7, sp, #0
 800b386:	6078      	str	r0, [r7, #4]
 800b388:	6039      	str	r1, [r7, #0]
  MTP_HandleTypeDef    *MTP_Handle = (MTP_HandleTypeDef *)phost->pActiveClass->pData;
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b390:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 800b394:	69db      	ldr	r3, [r3, #28]
 800b396:	617b      	str	r3, [r7, #20]
  uint8_t *data = MTP_Handle->ptp.data_container.payload.data;
 800b398:	697b      	ldr	r3, [r7, #20]
 800b39a:	f503 53ec 	add.w	r3, r3, #7552	; 0x1d80
 800b39e:	3310      	adds	r3, #16
 800b3a0:	613b      	str	r3, [r7, #16]
  uint32_t totallen;
  uint16_t len;

  /* Max device info is PTP_USB_BULK_HS_MAX_PACKET_LEN_READ */
  USBH_DbgLog(" MTP device info size exceeds internal buffer size.\
 800b3a2:	4888      	ldr	r0, [pc, #544]	; (800b5c4 <PTP_DecodeDeviceInfo+0x244>)
 800b3a4:	f003 f9fe 	bl	800e7a4 <iprintf>
 800b3a8:	4887      	ldr	r0, [pc, #540]	; (800b5c8 <PTP_DecodeDeviceInfo+0x248>)
 800b3aa:	f003 f9fb 	bl	800e7a4 <iprintf>
 800b3ae:	200a      	movs	r0, #10
 800b3b0:	f003 fa10 	bl	800e7d4 <putchar>
               only available data are decoded.");

  if (MTP_Handle->ptp.iteration == 0U)
 800b3b4:	697b      	ldr	r3, [r7, #20]
 800b3b6:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800b3ba:	f8d3 31bc 	ldr.w	r3, [r3, #444]	; 0x1bc
 800b3be:	2b00      	cmp	r3, #0
 800b3c0:	f040 80fc 	bne.w	800b5bc <PTP_DecodeDeviceInfo+0x23c>
  {
    dev_info->StandardVersion = LE16(&data[PTP_di_StandardVersion]);
 800b3c4:	693b      	ldr	r3, [r7, #16]
 800b3c6:	781b      	ldrb	r3, [r3, #0]
 800b3c8:	b29a      	uxth	r2, r3
 800b3ca:	693b      	ldr	r3, [r7, #16]
 800b3cc:	3301      	adds	r3, #1
 800b3ce:	781b      	ldrb	r3, [r3, #0]
 800b3d0:	b29b      	uxth	r3, r3
 800b3d2:	021b      	lsls	r3, r3, #8
 800b3d4:	b29b      	uxth	r3, r3
 800b3d6:	4313      	orrs	r3, r2
 800b3d8:	b29a      	uxth	r2, r3
 800b3da:	683b      	ldr	r3, [r7, #0]
 800b3dc:	801a      	strh	r2, [r3, #0]
    dev_info->VendorExtensionID = LE32(&data[PTP_di_VendorExtensionID]);
 800b3de:	693b      	ldr	r3, [r7, #16]
 800b3e0:	3302      	adds	r3, #2
 800b3e2:	781b      	ldrb	r3, [r3, #0]
 800b3e4:	461a      	mov	r2, r3
 800b3e6:	693b      	ldr	r3, [r7, #16]
 800b3e8:	3303      	adds	r3, #3
 800b3ea:	781b      	ldrb	r3, [r3, #0]
 800b3ec:	021b      	lsls	r3, r3, #8
 800b3ee:	431a      	orrs	r2, r3
 800b3f0:	693b      	ldr	r3, [r7, #16]
 800b3f2:	3304      	adds	r3, #4
 800b3f4:	781b      	ldrb	r3, [r3, #0]
 800b3f6:	041b      	lsls	r3, r3, #16
 800b3f8:	431a      	orrs	r2, r3
 800b3fa:	693b      	ldr	r3, [r7, #16]
 800b3fc:	3305      	adds	r3, #5
 800b3fe:	781b      	ldrb	r3, [r3, #0]
 800b400:	061b      	lsls	r3, r3, #24
 800b402:	431a      	orrs	r2, r3
 800b404:	683b      	ldr	r3, [r7, #0]
 800b406:	605a      	str	r2, [r3, #4]
    dev_info->VendorExtensionVersion = LE16(&data[PTP_di_VendorExtensionVersion]);
 800b408:	693b      	ldr	r3, [r7, #16]
 800b40a:	3306      	adds	r3, #6
 800b40c:	781b      	ldrb	r3, [r3, #0]
 800b40e:	b29a      	uxth	r2, r3
 800b410:	693b      	ldr	r3, [r7, #16]
 800b412:	3307      	adds	r3, #7
 800b414:	781b      	ldrb	r3, [r3, #0]
 800b416:	b29b      	uxth	r3, r3
 800b418:	021b      	lsls	r3, r3, #8
 800b41a:	b29b      	uxth	r3, r3
 800b41c:	4313      	orrs	r3, r2
 800b41e:	b29a      	uxth	r2, r3
 800b420:	683b      	ldr	r3, [r7, #0]
 800b422:	811a      	strh	r2, [r3, #8]
    PTP_GetString(dev_info->VendorExtensionDesc, &data[PTP_di_VendorExtensionDesc], &len);
 800b424:	683b      	ldr	r3, [r7, #0]
 800b426:	f103 000a 	add.w	r0, r3, #10
 800b42a:	693b      	ldr	r3, [r7, #16]
 800b42c:	3308      	adds	r3, #8
 800b42e:	f107 020a 	add.w	r2, r7, #10
 800b432:	4619      	mov	r1, r3
 800b434:	f000 faff 	bl	800ba36 <PTP_GetString>

    totallen = len * 2U + 1U;
 800b438:	897b      	ldrh	r3, [r7, #10]
 800b43a:	005b      	lsls	r3, r3, #1
 800b43c:	3301      	adds	r3, #1
 800b43e:	60fb      	str	r3, [r7, #12]
    dev_info->FunctionalMode = LE16(&data[PTP_di_FunctionalMode + totallen]);
 800b440:	68fb      	ldr	r3, [r7, #12]
 800b442:	3308      	adds	r3, #8
 800b444:	693a      	ldr	r2, [r7, #16]
 800b446:	4413      	add	r3, r2
 800b448:	781b      	ldrb	r3, [r3, #0]
 800b44a:	b29a      	uxth	r2, r3
 800b44c:	68fb      	ldr	r3, [r7, #12]
 800b44e:	3309      	adds	r3, #9
 800b450:	6939      	ldr	r1, [r7, #16]
 800b452:	440b      	add	r3, r1
 800b454:	781b      	ldrb	r3, [r3, #0]
 800b456:	b29b      	uxth	r3, r3
 800b458:	021b      	lsls	r3, r3, #8
 800b45a:	b29b      	uxth	r3, r3
 800b45c:	4313      	orrs	r3, r2
 800b45e:	b29a      	uxth	r2, r3
 800b460:	683b      	ldr	r3, [r7, #0]
 800b462:	f8a3 210a 	strh.w	r2, [r3, #266]	; 0x10a
    dev_info->OperationsSupported_len = PTP_GetArray16((uint16_t *)(void *)&dev_info->OperationsSupported,
 800b466:	683b      	ldr	r3, [r7, #0]
 800b468:	f503 7088 	add.w	r0, r3, #272	; 0x110
 800b46c:	68fb      	ldr	r3, [r7, #12]
 800b46e:	330a      	adds	r3, #10
 800b470:	461a      	mov	r2, r3
 800b472:	6939      	ldr	r1, [r7, #16]
 800b474:	f000 fb0d 	bl	800ba92 <PTP_GetArray16>
 800b478:	4602      	mov	r2, r0
 800b47a:	683b      	ldr	r3, [r7, #0]
 800b47c:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
                                                       data, PTP_di_OperationsSupported + totallen);

    totallen = totallen + dev_info->OperationsSupported_len * sizeof(uint16_t) + sizeof(uint32_t);
 800b480:	683b      	ldr	r3, [r7, #0]
 800b482:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800b486:	005a      	lsls	r2, r3, #1
 800b488:	68fb      	ldr	r3, [r7, #12]
 800b48a:	4413      	add	r3, r2
 800b48c:	3304      	adds	r3, #4
 800b48e:	60fb      	str	r3, [r7, #12]
    dev_info->EventsSupported_len = PTP_GetArray16((uint16_t *)(void *)&dev_info->EventsSupported,
 800b490:	683b      	ldr	r3, [r7, #0]
 800b492:	f503 70ee 	add.w	r0, r3, #476	; 0x1dc
 800b496:	68fb      	ldr	r3, [r7, #12]
 800b498:	330a      	adds	r3, #10
 800b49a:	461a      	mov	r2, r3
 800b49c:	6939      	ldr	r1, [r7, #16]
 800b49e:	f000 faf8 	bl	800ba92 <PTP_GetArray16>
 800b4a2:	4602      	mov	r2, r0
 800b4a4:	683b      	ldr	r3, [r7, #0]
 800b4a6:	f8c3 21d8 	str.w	r2, [r3, #472]	; 0x1d8
                                                   data, PTP_di_OperationsSupported + totallen);

    totallen = totallen + dev_info->EventsSupported_len * sizeof(uint16_t) + sizeof(uint32_t);
 800b4aa:	683b      	ldr	r3, [r7, #0]
 800b4ac:	f8d3 31d8 	ldr.w	r3, [r3, #472]	; 0x1d8
 800b4b0:	005a      	lsls	r2, r3, #1
 800b4b2:	68fb      	ldr	r3, [r7, #12]
 800b4b4:	4413      	add	r3, r2
 800b4b6:	3304      	adds	r3, #4
 800b4b8:	60fb      	str	r3, [r7, #12]
    dev_info->DevicePropertiesSupported_len = PTP_GetArray16((uint16_t *)(void *)&dev_info->DevicePropertiesSupported,
 800b4ba:	683b      	ldr	r3, [r7, #0]
 800b4bc:	f503 702a 	add.w	r0, r3, #680	; 0x2a8
 800b4c0:	68fb      	ldr	r3, [r7, #12]
 800b4c2:	330a      	adds	r3, #10
 800b4c4:	461a      	mov	r2, r3
 800b4c6:	6939      	ldr	r1, [r7, #16]
 800b4c8:	f000 fae3 	bl	800ba92 <PTP_GetArray16>
 800b4cc:	4602      	mov	r2, r0
 800b4ce:	683b      	ldr	r3, [r7, #0]
 800b4d0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
                                                             data, PTP_di_OperationsSupported + totallen);

    totallen = totallen + dev_info->DevicePropertiesSupported_len * sizeof(uint16_t) + sizeof(uint32_t);
 800b4d4:	683b      	ldr	r3, [r7, #0]
 800b4d6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800b4da:	005a      	lsls	r2, r3, #1
 800b4dc:	68fb      	ldr	r3, [r7, #12]
 800b4de:	4413      	add	r3, r2
 800b4e0:	3304      	adds	r3, #4
 800b4e2:	60fb      	str	r3, [r7, #12]

    dev_info->CaptureFormats_len = PTP_GetArray16((uint16_t *)(void *)&dev_info->CaptureFormats,
 800b4e4:	683b      	ldr	r3, [r7, #0]
 800b4e6:	f503 705d 	add.w	r0, r3, #884	; 0x374
 800b4ea:	68fb      	ldr	r3, [r7, #12]
 800b4ec:	330a      	adds	r3, #10
 800b4ee:	461a      	mov	r2, r3
 800b4f0:	6939      	ldr	r1, [r7, #16]
 800b4f2:	f000 face 	bl	800ba92 <PTP_GetArray16>
 800b4f6:	4602      	mov	r2, r0
 800b4f8:	683b      	ldr	r3, [r7, #0]
 800b4fa:	f8c3 2370 	str.w	r2, [r3, #880]	; 0x370
                                                  data, PTP_di_OperationsSupported + totallen);

    totallen = totallen + dev_info->CaptureFormats_len * sizeof(uint16_t) + sizeof(uint32_t);
 800b4fe:	683b      	ldr	r3, [r7, #0]
 800b500:	f8d3 3370 	ldr.w	r3, [r3, #880]	; 0x370
 800b504:	005a      	lsls	r2, r3, #1
 800b506:	68fb      	ldr	r3, [r7, #12]
 800b508:	4413      	add	r3, r2
 800b50a:	3304      	adds	r3, #4
 800b50c:	60fb      	str	r3, [r7, #12]
    dev_info->ImageFormats_len =  PTP_GetArray16((uint16_t *)(void *)&dev_info->ImageFormats,
 800b50e:	683b      	ldr	r3, [r7, #0]
 800b510:	f503 6088 	add.w	r0, r3, #1088	; 0x440
 800b514:	68fb      	ldr	r3, [r7, #12]
 800b516:	330a      	adds	r3, #10
 800b518:	461a      	mov	r2, r3
 800b51a:	6939      	ldr	r1, [r7, #16]
 800b51c:	f000 fab9 	bl	800ba92 <PTP_GetArray16>
 800b520:	4602      	mov	r2, r0
 800b522:	683b      	ldr	r3, [r7, #0]
 800b524:	f8c3 243c 	str.w	r2, [r3, #1084]	; 0x43c
                                                 data, PTP_di_OperationsSupported + totallen);

    totallen = totallen + dev_info->ImageFormats_len * sizeof(uint16_t) + sizeof(uint32_t);
 800b528:	683b      	ldr	r3, [r7, #0]
 800b52a:	f8d3 343c 	ldr.w	r3, [r3, #1084]	; 0x43c
 800b52e:	005a      	lsls	r2, r3, #1
 800b530:	68fb      	ldr	r3, [r7, #12]
 800b532:	4413      	add	r3, r2
 800b534:	3304      	adds	r3, #4
 800b536:	60fb      	str	r3, [r7, #12]
    PTP_GetString(dev_info->Manufacturer, &data[PTP_di_OperationsSupported + totallen], &len);
 800b538:	683b      	ldr	r3, [r7, #0]
 800b53a:	f503 60a1 	add.w	r0, r3, #1288	; 0x508
 800b53e:	68fb      	ldr	r3, [r7, #12]
 800b540:	330a      	adds	r3, #10
 800b542:	693a      	ldr	r2, [r7, #16]
 800b544:	4413      	add	r3, r2
 800b546:	f107 020a 	add.w	r2, r7, #10
 800b54a:	4619      	mov	r1, r3
 800b54c:	f000 fa73 	bl	800ba36 <PTP_GetString>

    totallen += len * 2U + 1U;
 800b550:	897b      	ldrh	r3, [r7, #10]
 800b552:	005a      	lsls	r2, r3, #1
 800b554:	68fb      	ldr	r3, [r7, #12]
 800b556:	4413      	add	r3, r2
 800b558:	3301      	adds	r3, #1
 800b55a:	60fb      	str	r3, [r7, #12]
    PTP_GetString(dev_info->Model, &data[PTP_di_OperationsSupported + totallen], &len);
 800b55c:	683b      	ldr	r3, [r7, #0]
 800b55e:	f203 6007 	addw	r0, r3, #1543	; 0x607
 800b562:	68fb      	ldr	r3, [r7, #12]
 800b564:	330a      	adds	r3, #10
 800b566:	693a      	ldr	r2, [r7, #16]
 800b568:	4413      	add	r3, r2
 800b56a:	f107 020a 	add.w	r2, r7, #10
 800b56e:	4619      	mov	r1, r3
 800b570:	f000 fa61 	bl	800ba36 <PTP_GetString>

    totallen += len * 2U + 1U;
 800b574:	897b      	ldrh	r3, [r7, #10]
 800b576:	005a      	lsls	r2, r3, #1
 800b578:	68fb      	ldr	r3, [r7, #12]
 800b57a:	4413      	add	r3, r2
 800b57c:	3301      	adds	r3, #1
 800b57e:	60fb      	str	r3, [r7, #12]
    PTP_GetString(dev_info->DeviceVersion, &data[PTP_di_OperationsSupported + totallen], &len);
 800b580:	683b      	ldr	r3, [r7, #0]
 800b582:	f203 7006 	addw	r0, r3, #1798	; 0x706
 800b586:	68fb      	ldr	r3, [r7, #12]
 800b588:	330a      	adds	r3, #10
 800b58a:	693a      	ldr	r2, [r7, #16]
 800b58c:	4413      	add	r3, r2
 800b58e:	f107 020a 	add.w	r2, r7, #10
 800b592:	4619      	mov	r1, r3
 800b594:	f000 fa4f 	bl	800ba36 <PTP_GetString>

    totallen += len * 2U + 1U;
 800b598:	897b      	ldrh	r3, [r7, #10]
 800b59a:	005a      	lsls	r2, r3, #1
 800b59c:	68fb      	ldr	r3, [r7, #12]
 800b59e:	4413      	add	r3, r2
 800b5a0:	3301      	adds	r3, #1
 800b5a2:	60fb      	str	r3, [r7, #12]
    PTP_GetString(dev_info->SerialNumber, &data[PTP_di_OperationsSupported + totallen], &len);
 800b5a4:	683b      	ldr	r3, [r7, #0]
 800b5a6:	f603 0005 	addw	r0, r3, #2053	; 0x805
 800b5aa:	68fb      	ldr	r3, [r7, #12]
 800b5ac:	330a      	adds	r3, #10
 800b5ae:	693a      	ldr	r2, [r7, #16]
 800b5b0:	4413      	add	r3, r2
 800b5b2:	f107 020a 	add.w	r2, r7, #10
 800b5b6:	4619      	mov	r1, r3
 800b5b8:	f000 fa3d 	bl	800ba36 <PTP_GetString>
  }
}
 800b5bc:	bf00      	nop
 800b5be:	3718      	adds	r7, #24
 800b5c0:	46bd      	mov	sp, r7
 800b5c2:	bd80      	pop	{r7, pc}
 800b5c4:	0800fd84 	.word	0x0800fd84
 800b5c8:	0800fd90 	.word	0x0800fd90

0800b5cc <PTP_GetStorageIDs>:
  * @param  phost: Host handle
  * @param  stor_ids: Storage IDsstructure
  * @retval None
  */
static void PTP_GetStorageIDs(USBH_HandleTypeDef *phost, PTP_StorageIDsTypedef *stor_ids)
{
 800b5cc:	b580      	push	{r7, lr}
 800b5ce:	b084      	sub	sp, #16
 800b5d0:	af00      	add	r7, sp, #0
 800b5d2:	6078      	str	r0, [r7, #4]
 800b5d4:	6039      	str	r1, [r7, #0]
  MTP_HandleTypeDef    *MTP_Handle = (MTP_HandleTypeDef *)phost->pActiveClass->pData;
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b5dc:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 800b5e0:	69db      	ldr	r3, [r3, #28]
 800b5e2:	60fb      	str	r3, [r7, #12]
  uint8_t *data = MTP_Handle->ptp.data_container.payload.data;
 800b5e4:	68fb      	ldr	r3, [r7, #12]
 800b5e6:	f503 53ec 	add.w	r3, r3, #7552	; 0x1d80
 800b5ea:	3310      	adds	r3, #16
 800b5ec:	60bb      	str	r3, [r7, #8]

  stor_ids->n = PTP_GetArray32(stor_ids->Storage, data, 0U);
 800b5ee:	683b      	ldr	r3, [r7, #0]
 800b5f0:	3304      	adds	r3, #4
 800b5f2:	2200      	movs	r2, #0
 800b5f4:	68b9      	ldr	r1, [r7, #8]
 800b5f6:	4618      	mov	r0, r3
 800b5f8:	f000 fa8b 	bl	800bb12 <PTP_GetArray32>
 800b5fc:	4602      	mov	r2, r0
 800b5fe:	683b      	ldr	r3, [r7, #0]
 800b600:	601a      	str	r2, [r3, #0]
}
 800b602:	bf00      	nop
 800b604:	3710      	adds	r7, #16
 800b606:	46bd      	mov	sp, r7
 800b608:	bd80      	pop	{r7, pc}

0800b60a <PTP_GetStorageInfo>:
  * @param  phost: Host handle
  * @param  stor_ids: Storage IDsstructure
  * @retval None
  */
static void PTP_GetStorageInfo(USBH_HandleTypeDef *phost, uint32_t storage_id, PTP_StorageInfoTypedef *stor_info)
{
 800b60a:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b60e:	b0c2      	sub	sp, #264	; 0x108
 800b610:	af00      	add	r7, sp, #0
 800b612:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
 800b616:	f8c7 10f0 	str.w	r1, [r7, #240]	; 0xf0
 800b61a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
  /* Prevent unused argument(s) compilation warning */
  UNUSED(storage_id);

  MTP_HandleTypeDef    *MTP_Handle = (MTP_HandleTypeDef *)phost->pActiveClass->pData;
 800b61e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b622:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b626:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 800b62a:	69db      	ldr	r3, [r3, #28]
 800b62c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
  uint8_t *data = MTP_Handle->ptp.data_container.payload.data;
 800b630:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b634:	f503 53ec 	add.w	r3, r3, #7552	; 0x1d80
 800b638:	3310      	adds	r3, #16
 800b63a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
  uint16_t len;

  stor_info->StorageType = LE16(&data[PTP_si_StorageType]);
 800b63e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800b642:	781b      	ldrb	r3, [r3, #0]
 800b644:	b29a      	uxth	r2, r3
 800b646:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800b64a:	3301      	adds	r3, #1
 800b64c:	781b      	ldrb	r3, [r3, #0]
 800b64e:	b29b      	uxth	r3, r3
 800b650:	021b      	lsls	r3, r3, #8
 800b652:	b29b      	uxth	r3, r3
 800b654:	4313      	orrs	r3, r2
 800b656:	b29b      	uxth	r3, r3
 800b658:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 800b65c:	8013      	strh	r3, [r2, #0]
  stor_info->FilesystemType = LE16(&data[PTP_si_FilesystemType]);
 800b65e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800b662:	3302      	adds	r3, #2
 800b664:	781b      	ldrb	r3, [r3, #0]
 800b666:	b29a      	uxth	r2, r3
 800b668:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800b66c:	3303      	adds	r3, #3
 800b66e:	781b      	ldrb	r3, [r3, #0]
 800b670:	b29b      	uxth	r3, r3
 800b672:	021b      	lsls	r3, r3, #8
 800b674:	b29b      	uxth	r3, r3
 800b676:	4313      	orrs	r3, r2
 800b678:	b29b      	uxth	r3, r3
 800b67a:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 800b67e:	8053      	strh	r3, [r2, #2]
  stor_info->AccessCapability = LE16(&data[PTP_si_AccessCapability]);
 800b680:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800b684:	3304      	adds	r3, #4
 800b686:	781b      	ldrb	r3, [r3, #0]
 800b688:	b29a      	uxth	r2, r3
 800b68a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800b68e:	3305      	adds	r3, #5
 800b690:	781b      	ldrb	r3, [r3, #0]
 800b692:	b29b      	uxth	r3, r3
 800b694:	021b      	lsls	r3, r3, #8
 800b696:	b29b      	uxth	r3, r3
 800b698:	4313      	orrs	r3, r2
 800b69a:	b29b      	uxth	r3, r3
 800b69c:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 800b6a0:	8093      	strh	r3, [r2, #4]
  stor_info->MaxCapability = LE64(&data[PTP_si_MaxCapability]);
 800b6a2:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800b6a6:	3306      	adds	r3, #6
 800b6a8:	781b      	ldrb	r3, [r3, #0]
 800b6aa:	b2db      	uxtb	r3, r3
 800b6ac:	2200      	movs	r2, #0
 800b6ae:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800b6b2:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
 800b6b6:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800b6ba:	3307      	adds	r3, #7
 800b6bc:	781b      	ldrb	r3, [r3, #0]
 800b6be:	b2db      	uxtb	r3, r3
 800b6c0:	2200      	movs	r2, #0
 800b6c2:	461c      	mov	r4, r3
 800b6c4:	4615      	mov	r5, r2
 800b6c6:	f04f 0200 	mov.w	r2, #0
 800b6ca:	f04f 0300 	mov.w	r3, #0
 800b6ce:	022b      	lsls	r3, r5, #8
 800b6d0:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800b6d4:	0222      	lsls	r2, r4, #8
 800b6d6:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800b6da:	4604      	mov	r4, r0
 800b6dc:	ea44 0a02 	orr.w	sl, r4, r2
 800b6e0:	ea41 0b03 	orr.w	fp, r1, r3
 800b6e4:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800b6e8:	3308      	adds	r3, #8
 800b6ea:	781b      	ldrb	r3, [r3, #0]
 800b6ec:	b2db      	uxtb	r3, r3
 800b6ee:	2200      	movs	r2, #0
 800b6f0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800b6f4:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800b6f8:	f04f 0200 	mov.w	r2, #0
 800b6fc:	f04f 0300 	mov.w	r3, #0
 800b700:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 800b704:	4629      	mov	r1, r5
 800b706:	040b      	lsls	r3, r1, #16
 800b708:	4620      	mov	r0, r4
 800b70a:	4629      	mov	r1, r5
 800b70c:	4604      	mov	r4, r0
 800b70e:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 800b712:	4601      	mov	r1, r0
 800b714:	040a      	lsls	r2, r1, #16
 800b716:	ea4a 0102 	orr.w	r1, sl, r2
 800b71a:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 800b71e:	ea4b 0303 	orr.w	r3, fp, r3
 800b722:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800b726:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800b72a:	3309      	adds	r3, #9
 800b72c:	781b      	ldrb	r3, [r3, #0]
 800b72e:	b2db      	uxtb	r3, r3
 800b730:	2200      	movs	r2, #0
 800b732:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b736:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 800b73a:	e9d7 3432 	ldrd	r3, r4, [r7, #200]	; 0xc8
 800b73e:	461a      	mov	r2, r3
 800b740:	ea4f 2912 	mov.w	r9, r2, lsr #8
 800b744:	ea4f 6803 	mov.w	r8, r3, lsl #24
 800b748:	e9d7 3434 	ldrd	r3, r4, [r7, #208]	; 0xd0
 800b74c:	461a      	mov	r2, r3
 800b74e:	ea42 0208 	orr.w	r2, r2, r8
 800b752:	f8c7 20c0 	str.w	r2, [r7, #192]	; 0xc0
 800b756:	4623      	mov	r3, r4
 800b758:	ea43 0309 	orr.w	r3, r3, r9
 800b75c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b760:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800b764:	330a      	adds	r3, #10
 800b766:	781b      	ldrb	r3, [r3, #0]
 800b768:	b2db      	uxtb	r3, r3
 800b76a:	2200      	movs	r2, #0
 800b76c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b770:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800b774:	f04f 0200 	mov.w	r2, #0
 800b778:	f04f 0300 	mov.w	r3, #0
 800b77c:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 800b780:	000b      	movs	r3, r1
 800b782:	2200      	movs	r2, #0
 800b784:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 800b788:	4604      	mov	r4, r0
 800b78a:	4314      	orrs	r4, r2
 800b78c:	f8c7 40b0 	str.w	r4, [r7, #176]	; 0xb0
 800b790:	4319      	orrs	r1, r3
 800b792:	f8c7 10b4 	str.w	r1, [r7, #180]	; 0xb4
 800b796:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800b79a:	330b      	adds	r3, #11
 800b79c:	781b      	ldrb	r3, [r3, #0]
 800b79e:	b2db      	uxtb	r3, r3
 800b7a0:	2200      	movs	r2, #0
 800b7a2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800b7a6:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800b7aa:	f04f 0200 	mov.w	r2, #0
 800b7ae:	f04f 0300 	mov.w	r3, #0
 800b7b2:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 800b7b6:	020b      	lsls	r3, r1, #8
 800b7b8:	2200      	movs	r2, #0
 800b7ba:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800b7be:	4604      	mov	r4, r0
 800b7c0:	4314      	orrs	r4, r2
 800b7c2:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
 800b7c6:	4319      	orrs	r1, r3
 800b7c8:	f8c7 10a4 	str.w	r1, [r7, #164]	; 0xa4
 800b7cc:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800b7d0:	330c      	adds	r3, #12
 800b7d2:	781b      	ldrb	r3, [r3, #0]
 800b7d4:	b2db      	uxtb	r3, r3
 800b7d6:	2200      	movs	r2, #0
 800b7d8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800b7dc:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 800b7e0:	f04f 0200 	mov.w	r2, #0
 800b7e4:	f04f 0300 	mov.w	r3, #0
 800b7e8:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 800b7ec:	040b      	lsls	r3, r1, #16
 800b7ee:	2200      	movs	r2, #0
 800b7f0:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 800b7f4:	4604      	mov	r4, r0
 800b7f6:	4314      	orrs	r4, r2
 800b7f8:	f8c7 4090 	str.w	r4, [r7, #144]	; 0x90
 800b7fc:	4319      	orrs	r1, r3
 800b7fe:	f8c7 1094 	str.w	r1, [r7, #148]	; 0x94
 800b802:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800b806:	330d      	adds	r3, #13
 800b808:	781b      	ldrb	r3, [r3, #0]
 800b80a:	b2db      	uxtb	r3, r3
 800b80c:	2200      	movs	r2, #0
 800b80e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800b812:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800b816:	f04f 0200 	mov.w	r2, #0
 800b81a:	f04f 0300 	mov.w	r3, #0
 800b81e:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 800b822:	060b      	lsls	r3, r1, #24
 800b824:	2200      	movs	r2, #0
 800b826:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 800b82a:	4604      	mov	r4, r0
 800b82c:	4314      	orrs	r4, r2
 800b82e:	f8c7 4080 	str.w	r4, [r7, #128]	; 0x80
 800b832:	4319      	orrs	r1, r3
 800b834:	f8c7 1084 	str.w	r1, [r7, #132]	; 0x84
 800b838:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800b83c:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800b840:	e9c3 1202 	strd	r1, r2, [r3, #8]
  stor_info->FreeSpaceInBytes = LE64(&data[PTP_si_FreeSpaceInBytes]);
 800b844:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800b848:	330e      	adds	r3, #14
 800b84a:	781b      	ldrb	r3, [r3, #0]
 800b84c:	b2db      	uxtb	r3, r3
 800b84e:	2200      	movs	r2, #0
 800b850:	67bb      	str	r3, [r7, #120]	; 0x78
 800b852:	67fa      	str	r2, [r7, #124]	; 0x7c
 800b854:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800b858:	330f      	adds	r3, #15
 800b85a:	781b      	ldrb	r3, [r3, #0]
 800b85c:	b2db      	uxtb	r3, r3
 800b85e:	2200      	movs	r2, #0
 800b860:	673b      	str	r3, [r7, #112]	; 0x70
 800b862:	677a      	str	r2, [r7, #116]	; 0x74
 800b864:	f04f 0200 	mov.w	r2, #0
 800b868:	f04f 0300 	mov.w	r3, #0
 800b86c:	e9d7 451c 	ldrd	r4, r5, [r7, #112]	; 0x70
 800b870:	4629      	mov	r1, r5
 800b872:	020b      	lsls	r3, r1, #8
 800b874:	4620      	mov	r0, r4
 800b876:	4629      	mov	r1, r5
 800b878:	4604      	mov	r4, r0
 800b87a:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800b87e:	4601      	mov	r1, r0
 800b880:	020a      	lsls	r2, r1, #8
 800b882:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 800b886:	4604      	mov	r4, r0
 800b888:	4314      	orrs	r4, r2
 800b88a:	66bc      	str	r4, [r7, #104]	; 0x68
 800b88c:	4319      	orrs	r1, r3
 800b88e:	66f9      	str	r1, [r7, #108]	; 0x6c
 800b890:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800b894:	3310      	adds	r3, #16
 800b896:	781b      	ldrb	r3, [r3, #0]
 800b898:	b2db      	uxtb	r3, r3
 800b89a:	2200      	movs	r2, #0
 800b89c:	663b      	str	r3, [r7, #96]	; 0x60
 800b89e:	667a      	str	r2, [r7, #100]	; 0x64
 800b8a0:	f04f 0200 	mov.w	r2, #0
 800b8a4:	f04f 0300 	mov.w	r3, #0
 800b8a8:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 800b8ac:	4629      	mov	r1, r5
 800b8ae:	040b      	lsls	r3, r1, #16
 800b8b0:	4620      	mov	r0, r4
 800b8b2:	4629      	mov	r1, r5
 800b8b4:	4604      	mov	r4, r0
 800b8b6:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 800b8ba:	4601      	mov	r1, r0
 800b8bc:	040a      	lsls	r2, r1, #16
 800b8be:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800b8c2:	4604      	mov	r4, r0
 800b8c4:	4314      	orrs	r4, r2
 800b8c6:	65bc      	str	r4, [r7, #88]	; 0x58
 800b8c8:	4319      	orrs	r1, r3
 800b8ca:	65f9      	str	r1, [r7, #92]	; 0x5c
 800b8cc:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800b8d0:	3311      	adds	r3, #17
 800b8d2:	781b      	ldrb	r3, [r3, #0]
 800b8d4:	b2db      	uxtb	r3, r3
 800b8d6:	2200      	movs	r2, #0
 800b8d8:	653b      	str	r3, [r7, #80]	; 0x50
 800b8da:	657a      	str	r2, [r7, #84]	; 0x54
 800b8dc:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800b8e0:	460b      	mov	r3, r1
 800b8e2:	0a1b      	lsrs	r3, r3, #8
 800b8e4:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b8e6:	460b      	mov	r3, r1
 800b8e8:	061b      	lsls	r3, r3, #24
 800b8ea:	64bb      	str	r3, [r7, #72]	; 0x48
 800b8ec:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 800b8f0:	4618      	mov	r0, r3
 800b8f2:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800b8f6:	460d      	mov	r5, r1
 800b8f8:	4328      	orrs	r0, r5
 800b8fa:	6438      	str	r0, [r7, #64]	; 0x40
 800b8fc:	4623      	mov	r3, r4
 800b8fe:	4313      	orrs	r3, r2
 800b900:	647b      	str	r3, [r7, #68]	; 0x44
 800b902:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800b906:	3312      	adds	r3, #18
 800b908:	781b      	ldrb	r3, [r3, #0]
 800b90a:	b2db      	uxtb	r3, r3
 800b90c:	2200      	movs	r2, #0
 800b90e:	63bb      	str	r3, [r7, #56]	; 0x38
 800b910:	63fa      	str	r2, [r7, #60]	; 0x3c
 800b912:	f04f 0200 	mov.w	r2, #0
 800b916:	f04f 0300 	mov.w	r3, #0
 800b91a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800b91c:	000b      	movs	r3, r1
 800b91e:	2200      	movs	r2, #0
 800b920:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800b924:	4604      	mov	r4, r0
 800b926:	4314      	orrs	r4, r2
 800b928:	633c      	str	r4, [r7, #48]	; 0x30
 800b92a:	4319      	orrs	r1, r3
 800b92c:	6379      	str	r1, [r7, #52]	; 0x34
 800b92e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800b932:	3313      	adds	r3, #19
 800b934:	781b      	ldrb	r3, [r3, #0]
 800b936:	b2db      	uxtb	r3, r3
 800b938:	2200      	movs	r2, #0
 800b93a:	62bb      	str	r3, [r7, #40]	; 0x28
 800b93c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b93e:	f04f 0200 	mov.w	r2, #0
 800b942:	f04f 0300 	mov.w	r3, #0
 800b946:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b948:	020b      	lsls	r3, r1, #8
 800b94a:	2200      	movs	r2, #0
 800b94c:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800b950:	4604      	mov	r4, r0
 800b952:	4314      	orrs	r4, r2
 800b954:	623c      	str	r4, [r7, #32]
 800b956:	4319      	orrs	r1, r3
 800b958:	6279      	str	r1, [r7, #36]	; 0x24
 800b95a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800b95e:	3314      	adds	r3, #20
 800b960:	781b      	ldrb	r3, [r3, #0]
 800b962:	b2db      	uxtb	r3, r3
 800b964:	2200      	movs	r2, #0
 800b966:	61bb      	str	r3, [r7, #24]
 800b968:	61fa      	str	r2, [r7, #28]
 800b96a:	f04f 0200 	mov.w	r2, #0
 800b96e:	f04f 0300 	mov.w	r3, #0
 800b972:	69b9      	ldr	r1, [r7, #24]
 800b974:	040b      	lsls	r3, r1, #16
 800b976:	2200      	movs	r2, #0
 800b978:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800b97c:	4604      	mov	r4, r0
 800b97e:	4314      	orrs	r4, r2
 800b980:	613c      	str	r4, [r7, #16]
 800b982:	4319      	orrs	r1, r3
 800b984:	6179      	str	r1, [r7, #20]
 800b986:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800b98a:	3315      	adds	r3, #21
 800b98c:	781b      	ldrb	r3, [r3, #0]
 800b98e:	b2db      	uxtb	r3, r3
 800b990:	2200      	movs	r2, #0
 800b992:	60bb      	str	r3, [r7, #8]
 800b994:	60fa      	str	r2, [r7, #12]
 800b996:	f04f 0200 	mov.w	r2, #0
 800b99a:	f04f 0300 	mov.w	r3, #0
 800b99e:	68b9      	ldr	r1, [r7, #8]
 800b9a0:	060b      	lsls	r3, r1, #24
 800b9a2:	2200      	movs	r2, #0
 800b9a4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800b9a8:	4604      	mov	r4, r0
 800b9aa:	4314      	orrs	r4, r2
 800b9ac:	603c      	str	r4, [r7, #0]
 800b9ae:	4319      	orrs	r1, r3
 800b9b0:	6079      	str	r1, [r7, #4]
 800b9b2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800b9b6:	e9d7 1200 	ldrd	r1, r2, [r7]
 800b9ba:	e9c3 1204 	strd	r1, r2, [r3, #16]
  stor_info->FreeSpaceInImages = LE32(&data[PTP_si_FreeSpaceInImages]);
 800b9be:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800b9c2:	3316      	adds	r3, #22
 800b9c4:	781b      	ldrb	r3, [r3, #0]
 800b9c6:	461a      	mov	r2, r3
 800b9c8:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800b9cc:	3317      	adds	r3, #23
 800b9ce:	781b      	ldrb	r3, [r3, #0]
 800b9d0:	021b      	lsls	r3, r3, #8
 800b9d2:	431a      	orrs	r2, r3
 800b9d4:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800b9d8:	3318      	adds	r3, #24
 800b9da:	781b      	ldrb	r3, [r3, #0]
 800b9dc:	041b      	lsls	r3, r3, #16
 800b9de:	431a      	orrs	r2, r3
 800b9e0:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800b9e4:	3319      	adds	r3, #25
 800b9e6:	781b      	ldrb	r3, [r3, #0]
 800b9e8:	061b      	lsls	r3, r3, #24
 800b9ea:	431a      	orrs	r2, r3
 800b9ec:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800b9f0:	619a      	str	r2, [r3, #24]

  PTP_GetString(stor_info->StorageDescription, &data[PTP_si_StorageDescription], &len);
 800b9f2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800b9f6:	f103 001c 	add.w	r0, r3, #28
 800b9fa:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800b9fe:	331a      	adds	r3, #26
 800ba00:	f107 02fe 	add.w	r2, r7, #254	; 0xfe
 800ba04:	4619      	mov	r1, r3
 800ba06:	f000 f816 	bl	800ba36 <PTP_GetString>
  PTP_GetString(stor_info->VolumeLabel, &data[PTP_si_StorageDescription + len * 2U + 1U], &len);
 800ba0a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800ba0e:	f203 101b 	addw	r0, r3, #283	; 0x11b
 800ba12:	f8b7 30fe 	ldrh.w	r3, [r7, #254]	; 0xfe
 800ba16:	005b      	lsls	r3, r3, #1
 800ba18:	331b      	adds	r3, #27
 800ba1a:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 800ba1e:	4413      	add	r3, r2
 800ba20:	f107 02fe 	add.w	r2, r7, #254	; 0xfe
 800ba24:	4619      	mov	r1, r3
 800ba26:	f000 f806 	bl	800ba36 <PTP_GetString>
}
 800ba2a:	bf00      	nop
 800ba2c:	f507 7784 	add.w	r7, r7, #264	; 0x108
 800ba30:	46bd      	mov	sp, r7
 800ba32:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800ba36 <PTP_GetString>:
  * @param  str: ascii string
  * @param  data: Device info structure
  * @retval None
  */
static void PTP_GetString(uint8_t *str, uint8_t *data, uint16_t *len)
{
 800ba36:	b480      	push	{r7}
 800ba38:	b087      	sub	sp, #28
 800ba3a:	af00      	add	r7, sp, #0
 800ba3c:	60f8      	str	r0, [r7, #12]
 800ba3e:	60b9      	str	r1, [r7, #8]
 800ba40:	607a      	str	r2, [r7, #4]
  uint16_t strlength;
  uint16_t idx;

  *len = data[0];
 800ba42:	68bb      	ldr	r3, [r7, #8]
 800ba44:	781b      	ldrb	r3, [r3, #0]
 800ba46:	b29a      	uxth	r2, r3
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	801a      	strh	r2, [r3, #0]
  strlength = (uint16_t)(2U * (uint32_t)data[0]);
 800ba4c:	68bb      	ldr	r3, [r7, #8]
 800ba4e:	781b      	ldrb	r3, [r3, #0]
 800ba50:	b29b      	uxth	r3, r3
 800ba52:	005b      	lsls	r3, r3, #1
 800ba54:	82bb      	strh	r3, [r7, #20]
  data ++; /* Adjust the offset ignoring the String Len */
 800ba56:	68bb      	ldr	r3, [r7, #8]
 800ba58:	3301      	adds	r3, #1
 800ba5a:	60bb      	str	r3, [r7, #8]

  for (idx = 0U; idx < strlength; idx += 2U)
 800ba5c:	2300      	movs	r3, #0
 800ba5e:	82fb      	strh	r3, [r7, #22]
 800ba60:	e00b      	b.n	800ba7a <PTP_GetString+0x44>
  {
    /* Copy Only the string and ignore the UNICODE ID, hence add the src */
    *str = data[idx];
 800ba62:	8afb      	ldrh	r3, [r7, #22]
 800ba64:	68ba      	ldr	r2, [r7, #8]
 800ba66:	4413      	add	r3, r2
 800ba68:	781a      	ldrb	r2, [r3, #0]
 800ba6a:	68fb      	ldr	r3, [r7, #12]
 800ba6c:	701a      	strb	r2, [r3, #0]
    str++;
 800ba6e:	68fb      	ldr	r3, [r7, #12]
 800ba70:	3301      	adds	r3, #1
 800ba72:	60fb      	str	r3, [r7, #12]
  for (idx = 0U; idx < strlength; idx += 2U)
 800ba74:	8afb      	ldrh	r3, [r7, #22]
 800ba76:	3302      	adds	r3, #2
 800ba78:	82fb      	strh	r3, [r7, #22]
 800ba7a:	8afa      	ldrh	r2, [r7, #22]
 800ba7c:	8abb      	ldrh	r3, [r7, #20]
 800ba7e:	429a      	cmp	r2, r3
 800ba80:	d3ef      	bcc.n	800ba62 <PTP_GetString+0x2c>
  }
  *str = 0U; /* mark end of string */
 800ba82:	68fb      	ldr	r3, [r7, #12]
 800ba84:	2200      	movs	r2, #0
 800ba86:	701a      	strb	r2, [r3, #0]
}
 800ba88:	bf00      	nop
 800ba8a:	371c      	adds	r7, #28
 800ba8c:	46bd      	mov	sp, r7
 800ba8e:	bc80      	pop	{r7}
 800ba90:	4770      	bx	lr

0800ba92 <PTP_GetArray16>:
  * @param  data: Device info structure
  * @retval None
  */

static uint32_t PTP_GetArray16(uint16_t *array, uint8_t *data, uint32_t offset)
{
 800ba92:	b480      	push	{r7}
 800ba94:	b087      	sub	sp, #28
 800ba96:	af00      	add	r7, sp, #0
 800ba98:	60f8      	str	r0, [r7, #12]
 800ba9a:	60b9      	str	r1, [r7, #8]
 800ba9c:	607a      	str	r2, [r7, #4]
  uint32_t size, idx = 0U;
 800ba9e:	2300      	movs	r3, #0
 800baa0:	617b      	str	r3, [r7, #20]

  size = LE32(&data[offset]);
 800baa2:	68ba      	ldr	r2, [r7, #8]
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	4413      	add	r3, r2
 800baa8:	781b      	ldrb	r3, [r3, #0]
 800baaa:	4619      	mov	r1, r3
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	3301      	adds	r3, #1
 800bab0:	68ba      	ldr	r2, [r7, #8]
 800bab2:	4413      	add	r3, r2
 800bab4:	781b      	ldrb	r3, [r3, #0]
 800bab6:	021b      	lsls	r3, r3, #8
 800bab8:	ea41 0203 	orr.w	r2, r1, r3
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	3302      	adds	r3, #2
 800bac0:	68b9      	ldr	r1, [r7, #8]
 800bac2:	440b      	add	r3, r1
 800bac4:	781b      	ldrb	r3, [r3, #0]
 800bac6:	041b      	lsls	r3, r3, #16
 800bac8:	431a      	orrs	r2, r3
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	3303      	adds	r3, #3
 800bace:	68b9      	ldr	r1, [r7, #8]
 800bad0:	440b      	add	r3, r1
 800bad2:	781b      	ldrb	r3, [r3, #0]
 800bad4:	061b      	lsls	r3, r3, #24
 800bad6:	4313      	orrs	r3, r2
 800bad8:	613b      	str	r3, [r7, #16]
  while (size > idx)
 800bada:	e010      	b.n	800bafe <PTP_GetArray16+0x6c>
  {
    array[idx] = (uint16_t)data[offset + (sizeof(uint16_t) * (idx + 2U))];
 800badc:	697b      	ldr	r3, [r7, #20]
 800bade:	3302      	adds	r3, #2
 800bae0:	005a      	lsls	r2, r3, #1
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	4413      	add	r3, r2
 800bae6:	68ba      	ldr	r2, [r7, #8]
 800bae8:	4413      	add	r3, r2
 800baea:	7819      	ldrb	r1, [r3, #0]
 800baec:	697b      	ldr	r3, [r7, #20]
 800baee:	005b      	lsls	r3, r3, #1
 800baf0:	68fa      	ldr	r2, [r7, #12]
 800baf2:	4413      	add	r3, r2
 800baf4:	b28a      	uxth	r2, r1
 800baf6:	801a      	strh	r2, [r3, #0]
    idx++;
 800baf8:	697b      	ldr	r3, [r7, #20]
 800bafa:	3301      	adds	r3, #1
 800bafc:	617b      	str	r3, [r7, #20]
  while (size > idx)
 800bafe:	693a      	ldr	r2, [r7, #16]
 800bb00:	697b      	ldr	r3, [r7, #20]
 800bb02:	429a      	cmp	r2, r3
 800bb04:	d8ea      	bhi.n	800badc <PTP_GetArray16+0x4a>
  }
  return size;
 800bb06:	693b      	ldr	r3, [r7, #16]
}
 800bb08:	4618      	mov	r0, r3
 800bb0a:	371c      	adds	r7, #28
 800bb0c:	46bd      	mov	sp, r7
 800bb0e:	bc80      	pop	{r7}
 800bb10:	4770      	bx	lr

0800bb12 <PTP_GetArray32>:
  * @param  data: Device info structure
  * @retval None
  */

static uint32_t PTP_GetArray32(uint32_t *array, uint8_t *data, uint32_t offset)
{
 800bb12:	b480      	push	{r7}
 800bb14:	b087      	sub	sp, #28
 800bb16:	af00      	add	r7, sp, #0
 800bb18:	60f8      	str	r0, [r7, #12]
 800bb1a:	60b9      	str	r1, [r7, #8]
 800bb1c:	607a      	str	r2, [r7, #4]
  uint32_t size, idx = 0U;
 800bb1e:	2300      	movs	r3, #0
 800bb20:	617b      	str	r3, [r7, #20]

  size = LE32(&data[offset]);
 800bb22:	68ba      	ldr	r2, [r7, #8]
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	4413      	add	r3, r2
 800bb28:	781b      	ldrb	r3, [r3, #0]
 800bb2a:	4619      	mov	r1, r3
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	3301      	adds	r3, #1
 800bb30:	68ba      	ldr	r2, [r7, #8]
 800bb32:	4413      	add	r3, r2
 800bb34:	781b      	ldrb	r3, [r3, #0]
 800bb36:	021b      	lsls	r3, r3, #8
 800bb38:	ea41 0203 	orr.w	r2, r1, r3
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	3302      	adds	r3, #2
 800bb40:	68b9      	ldr	r1, [r7, #8]
 800bb42:	440b      	add	r3, r1
 800bb44:	781b      	ldrb	r3, [r3, #0]
 800bb46:	041b      	lsls	r3, r3, #16
 800bb48:	431a      	orrs	r2, r3
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	3303      	adds	r3, #3
 800bb4e:	68b9      	ldr	r1, [r7, #8]
 800bb50:	440b      	add	r3, r1
 800bb52:	781b      	ldrb	r3, [r3, #0]
 800bb54:	061b      	lsls	r3, r3, #24
 800bb56:	4313      	orrs	r3, r2
 800bb58:	613b      	str	r3, [r7, #16]
  while (size > idx)
 800bb5a:	e033      	b.n	800bbc4 <PTP_GetArray32+0xb2>
  {
    array[idx] = LE32(&data[offset + (sizeof(uint32_t) * (idx + 1U))]);
 800bb5c:	697b      	ldr	r3, [r7, #20]
 800bb5e:	3301      	adds	r3, #1
 800bb60:	009a      	lsls	r2, r3, #2
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	4413      	add	r3, r2
 800bb66:	68ba      	ldr	r2, [r7, #8]
 800bb68:	4413      	add	r3, r2
 800bb6a:	781b      	ldrb	r3, [r3, #0]
 800bb6c:	4619      	mov	r1, r3
 800bb6e:	697b      	ldr	r3, [r7, #20]
 800bb70:	3301      	adds	r3, #1
 800bb72:	009a      	lsls	r2, r3, #2
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	4413      	add	r3, r2
 800bb78:	3301      	adds	r3, #1
 800bb7a:	68ba      	ldr	r2, [r7, #8]
 800bb7c:	4413      	add	r3, r2
 800bb7e:	781b      	ldrb	r3, [r3, #0]
 800bb80:	021b      	lsls	r3, r3, #8
 800bb82:	ea41 0203 	orr.w	r2, r1, r3
 800bb86:	697b      	ldr	r3, [r7, #20]
 800bb88:	3301      	adds	r3, #1
 800bb8a:	0099      	lsls	r1, r3, #2
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	440b      	add	r3, r1
 800bb90:	3302      	adds	r3, #2
 800bb92:	68b9      	ldr	r1, [r7, #8]
 800bb94:	440b      	add	r3, r1
 800bb96:	781b      	ldrb	r3, [r3, #0]
 800bb98:	041b      	lsls	r3, r3, #16
 800bb9a:	ea42 0103 	orr.w	r1, r2, r3
 800bb9e:	697b      	ldr	r3, [r7, #20]
 800bba0:	3301      	adds	r3, #1
 800bba2:	009a      	lsls	r2, r3, #2
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	4413      	add	r3, r2
 800bba8:	3303      	adds	r3, #3
 800bbaa:	68ba      	ldr	r2, [r7, #8]
 800bbac:	4413      	add	r3, r2
 800bbae:	781b      	ldrb	r3, [r3, #0]
 800bbb0:	061a      	lsls	r2, r3, #24
 800bbb2:	697b      	ldr	r3, [r7, #20]
 800bbb4:	009b      	lsls	r3, r3, #2
 800bbb6:	68f8      	ldr	r0, [r7, #12]
 800bbb8:	4403      	add	r3, r0
 800bbba:	430a      	orrs	r2, r1
 800bbbc:	601a      	str	r2, [r3, #0]
    idx++;
 800bbbe:	697b      	ldr	r3, [r7, #20]
 800bbc0:	3301      	adds	r3, #1
 800bbc2:	617b      	str	r3, [r7, #20]
  while (size > idx)
 800bbc4:	693a      	ldr	r2, [r7, #16]
 800bbc6:	697b      	ldr	r3, [r7, #20]
 800bbc8:	429a      	cmp	r2, r3
 800bbca:	d8c7      	bhi.n	800bb5c <PTP_GetArray32+0x4a>
  }
  return size;
 800bbcc:	693b      	ldr	r3, [r7, #16]
}
 800bbce:	4618      	mov	r0, r3
 800bbd0:	371c      	adds	r7, #28
 800bbd2:	46bd      	mov	sp, r7
 800bbd4:	bc80      	pop	{r7}
 800bbd6:	4770      	bx	lr

0800bbd8 <USBH_PTP_OpenSession>:
  * @param  phost: Host handle
  * @param  session: Session ID (MUST BE > 0U)
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_PTP_OpenSession(USBH_HandleTypeDef *phost, uint32_t session)
{
 800bbd8:	b580      	push	{r7, lr}
 800bbda:	b08e      	sub	sp, #56	; 0x38
 800bbdc:	af00      	add	r7, sp, #0
 800bbde:	6078      	str	r0, [r7, #4]
 800bbe0:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef   status = USBH_BUSY;
 800bbe2:	2301      	movs	r3, #1
 800bbe4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  MTP_HandleTypeDef    *MTP_Handle = (MTP_HandleTypeDef *)phost->pActiveClass->pData;
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bbee:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 800bbf2:	69db      	ldr	r3, [r3, #28]
 800bbf4:	633b      	str	r3, [r7, #48]	; 0x30
  PTP_ContainerTypedef  ptp_container;

  switch (MTP_Handle->ptp.req_state)
 800bbf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbf8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bbfc:	f893 3d61 	ldrb.w	r3, [r3, #3425]	; 0xd61
 800bc00:	2b01      	cmp	r3, #1
 800bc02:	d002      	beq.n	800bc0a <USBH_PTP_OpenSession+0x32>
 800bc04:	2b02      	cmp	r3, #2
 800bc06:	d041      	beq.n	800bc8c <USBH_PTP_OpenSession+0xb4>
    case PTP_REQ_WAIT:
      status = USBH_PTP_Process(phost);
      break;

    default:
      break;
 800bc08:	e047      	b.n	800bc9a <USBH_PTP_OpenSession+0xc2>
      MTP_Handle->ptp.transaction_id = 0x00000000U;
 800bc0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc0c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800bc10:	461a      	mov	r2, r3
 800bc12:	2300      	movs	r3, #0
 800bc14:	f8c2 31a4 	str.w	r3, [r2, #420]	; 0x1a4
      MTP_Handle->ptp.session_id = session;
 800bc18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc1a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800bc1e:	461a      	mov	r2, r3
 800bc20:	683b      	ldr	r3, [r7, #0]
 800bc22:	f8c2 31a8 	str.w	r3, [r2, #424]	; 0x1a8
      MTP_Handle->ptp.flags = PTP_DP_NODATA;
 800bc26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc28:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800bc2c:	461a      	mov	r2, r3
 800bc2e:	2300      	movs	r3, #0
 800bc30:	f8c2 31ac 	str.w	r3, [r2, #428]	; 0x1ac
      ptp_container.Code = PTP_OC_OpenSession;
 800bc34:	f241 0302 	movw	r3, #4098	; 0x1002
 800bc38:	81bb      	strh	r3, [r7, #12]
      ptp_container.SessionID = session;
 800bc3a:	683b      	ldr	r3, [r7, #0]
 800bc3c:	613b      	str	r3, [r7, #16]
      ptp_container.Transaction_ID = MTP_Handle->ptp.transaction_id ++;
 800bc3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc40:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800bc44:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 800bc48:	1c5a      	adds	r2, r3, #1
 800bc4a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800bc4c:	f501 5100 	add.w	r1, r1, #8192	; 0x2000
 800bc50:	f8c1 21a4 	str.w	r2, [r1, #420]	; 0x1a4
 800bc54:	617b      	str	r3, [r7, #20]
      ptp_container.Param1 = session;
 800bc56:	683b      	ldr	r3, [r7, #0]
 800bc58:	61bb      	str	r3, [r7, #24]
      ptp_container.Nparam = 1U;
 800bc5a:	2301      	movs	r3, #1
 800bc5c:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
      USBH_PTP_SendRequest(phost, &ptp_container);
 800bc60:	f107 030c 	add.w	r3, r7, #12
 800bc64:	4619      	mov	r1, r3
 800bc66:	6878      	ldr	r0, [r7, #4]
 800bc68:	f7ff fa4c 	bl	800b104 <USBH_PTP_SendRequest>
      MTP_Handle->ptp.state = PTP_OP_REQUEST_STATE;
 800bc6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc6e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bc72:	2201      	movs	r2, #1
 800bc74:	f883 2d60 	strb.w	r2, [r3, #3424]	; 0xd60
      MTP_Handle->ptp.req_state = PTP_REQ_WAIT;
 800bc78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc7a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bc7e:	2202      	movs	r2, #2
 800bc80:	f883 2d61 	strb.w	r2, [r3, #3425]	; 0xd61
      status = USBH_BUSY;
 800bc84:	2301      	movs	r3, #1
 800bc86:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
      break;
 800bc8a:	e006      	b.n	800bc9a <USBH_PTP_OpenSession+0xc2>
      status = USBH_PTP_Process(phost);
 800bc8c:	6878      	ldr	r0, [r7, #4]
 800bc8e:	f7fe ffa1 	bl	800abd4 <USBH_PTP_Process>
 800bc92:	4603      	mov	r3, r0
 800bc94:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
      break;
 800bc98:	bf00      	nop
  }
  return status;
 800bc9a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 800bc9e:	4618      	mov	r0, r3
 800bca0:	3738      	adds	r7, #56	; 0x38
 800bca2:	46bd      	mov	sp, r7
 800bca4:	bd80      	pop	{r7, pc}

0800bca6 <USBH_PTP_GetDeviceInfo>:
  * @param  phost: Host handle
  * @param  dev_info: Device info structure
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_PTP_GetDeviceInfo(USBH_HandleTypeDef *phost, PTP_DeviceInfoTypedef *dev_info)
{
 800bca6:	b580      	push	{r7, lr}
 800bca8:	b08e      	sub	sp, #56	; 0x38
 800bcaa:	af00      	add	r7, sp, #0
 800bcac:	6078      	str	r0, [r7, #4]
 800bcae:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_BUSY;
 800bcb0:	2301      	movs	r3, #1
 800bcb2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  MTP_HandleTypeDef *MTP_Handle = (MTP_HandleTypeDef *)phost->pActiveClass->pData;
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bcbc:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 800bcc0:	69db      	ldr	r3, [r3, #28]
 800bcc2:	633b      	str	r3, [r7, #48]	; 0x30
  PTP_ContainerTypedef ptp_container;

  switch (MTP_Handle->ptp.req_state)
 800bcc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcc6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bcca:	f893 3d61 	ldrb.w	r3, [r3, #3425]	; 0xd61
 800bcce:	2b01      	cmp	r3, #1
 800bcd0:	d002      	beq.n	800bcd8 <USBH_PTP_GetDeviceInfo+0x32>
 800bcd2:	2b02      	cmp	r3, #2
 800bcd4:	d053      	beq.n	800bd7e <USBH_PTP_GetDeviceInfo+0xd8>
        PTP_DecodeDeviceInfo(phost, dev_info);
      }
      break;

    default:
      break;
 800bcd6:	e061      	b.n	800bd9c <USBH_PTP_GetDeviceInfo+0xf6>
      MTP_Handle->ptp.flags = PTP_DP_GETDATA;
 800bcd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcda:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800bcde:	461a      	mov	r2, r3
 800bce0:	2302      	movs	r3, #2
 800bce2:	f8c2 31ac 	str.w	r3, [r2, #428]	; 0x1ac
      MTP_Handle->ptp.data_ptr = (uint8_t *)(void *) &(MTP_Handle->ptp.data_container);
 800bce6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bce8:	f503 53ec 	add.w	r3, r3, #7552	; 0x1d80
 800bcec:	3304      	adds	r3, #4
 800bcee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bcf0:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 800bcf4:	f8c2 31b0 	str.w	r3, [r2, #432]	; 0x1b0
      MTP_Handle->ptp.data_length = 0U;
 800bcf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcfa:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800bcfe:	461a      	mov	r2, r3
 800bd00:	2300      	movs	r3, #0
 800bd02:	f8c2 31b4 	str.w	r3, [r2, #436]	; 0x1b4
      MTP_Handle->ptp.data_packet_counter = 0U;
 800bd06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd08:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800bd0c:	461a      	mov	r2, r3
 800bd0e:	2300      	movs	r3, #0
 800bd10:	f8c2 31c0 	str.w	r3, [r2, #448]	; 0x1c0
      MTP_Handle->ptp.data_packet = 0U;
 800bd14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd16:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800bd1a:	461a      	mov	r2, r3
 800bd1c:	2300      	movs	r3, #0
 800bd1e:	f8c2 31b8 	str.w	r3, [r2, #440]	; 0x1b8
      ptp_container.Code = PTP_OC_GetDeviceInfo;
 800bd22:	f241 0301 	movw	r3, #4097	; 0x1001
 800bd26:	81bb      	strh	r3, [r7, #12]
      ptp_container.SessionID = MTP_Handle->ptp.session_id;
 800bd28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd2a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800bd2e:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
 800bd32:	613b      	str	r3, [r7, #16]
      ptp_container.Transaction_ID = MTP_Handle->ptp.transaction_id++;
 800bd34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd36:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800bd3a:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 800bd3e:	1c5a      	adds	r2, r3, #1
 800bd40:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800bd42:	f501 5100 	add.w	r1, r1, #8192	; 0x2000
 800bd46:	f8c1 21a4 	str.w	r2, [r1, #420]	; 0x1a4
 800bd4a:	617b      	str	r3, [r7, #20]
      ptp_container.Nparam = 0U;
 800bd4c:	2300      	movs	r3, #0
 800bd4e:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
      USBH_PTP_SendRequest(phost, &ptp_container);
 800bd52:	f107 030c 	add.w	r3, r7, #12
 800bd56:	4619      	mov	r1, r3
 800bd58:	6878      	ldr	r0, [r7, #4]
 800bd5a:	f7ff f9d3 	bl	800b104 <USBH_PTP_SendRequest>
      MTP_Handle->ptp.state = PTP_OP_REQUEST_STATE;
 800bd5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd60:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bd64:	2201      	movs	r2, #1
 800bd66:	f883 2d60 	strb.w	r2, [r3, #3424]	; 0xd60
      MTP_Handle->ptp.req_state = PTP_REQ_WAIT;
 800bd6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd6c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bd70:	2202      	movs	r2, #2
 800bd72:	f883 2d61 	strb.w	r2, [r3, #3425]	; 0xd61
      status = USBH_BUSY;
 800bd76:	2301      	movs	r3, #1
 800bd78:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
      break;
 800bd7c:	e00e      	b.n	800bd9c <USBH_PTP_GetDeviceInfo+0xf6>
      status = USBH_PTP_Process(phost);
 800bd7e:	6878      	ldr	r0, [r7, #4]
 800bd80:	f7fe ff28 	bl	800abd4 <USBH_PTP_Process>
 800bd84:	4603      	mov	r3, r0
 800bd86:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
      if (status == USBH_OK)
 800bd8a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800bd8e:	2b00      	cmp	r3, #0
 800bd90:	d103      	bne.n	800bd9a <USBH_PTP_GetDeviceInfo+0xf4>
        PTP_DecodeDeviceInfo(phost, dev_info);
 800bd92:	6839      	ldr	r1, [r7, #0]
 800bd94:	6878      	ldr	r0, [r7, #4]
 800bd96:	f7ff faf3 	bl	800b380 <PTP_DecodeDeviceInfo>
      break;
 800bd9a:	bf00      	nop
  }
  return status;
 800bd9c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 800bda0:	4618      	mov	r0, r3
 800bda2:	3738      	adds	r7, #56	; 0x38
 800bda4:	46bd      	mov	sp, r7
 800bda6:	bd80      	pop	{r7, pc}

0800bda8 <USBH_PTP_GetStorageIds>:
  * @param  phost: Host handle
  * @param  dev_info: Device info structure
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_PTP_GetStorageIds(USBH_HandleTypeDef *phost, PTP_StorageIDsTypedef *storage_ids)
{
 800bda8:	b580      	push	{r7, lr}
 800bdaa:	b08e      	sub	sp, #56	; 0x38
 800bdac:	af00      	add	r7, sp, #0
 800bdae:	6078      	str	r0, [r7, #4]
 800bdb0:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_BUSY;
 800bdb2:	2301      	movs	r3, #1
 800bdb4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  MTP_HandleTypeDef *MTP_Handle = (MTP_HandleTypeDef *)phost->pActiveClass->pData;
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bdbe:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 800bdc2:	69db      	ldr	r3, [r3, #28]
 800bdc4:	633b      	str	r3, [r7, #48]	; 0x30
  PTP_ContainerTypedef ptp_container;

  switch (MTP_Handle->ptp.req_state)
 800bdc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdc8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bdcc:	f893 3d61 	ldrb.w	r3, [r3, #3425]	; 0xd61
 800bdd0:	2b01      	cmp	r3, #1
 800bdd2:	d002      	beq.n	800bdda <USBH_PTP_GetStorageIds+0x32>
 800bdd4:	2b02      	cmp	r3, #2
 800bdd6:	d053      	beq.n	800be80 <USBH_PTP_GetStorageIds+0xd8>
        PTP_GetStorageIDs(phost, storage_ids);
      }
      break;

    default:
      break;
 800bdd8:	e061      	b.n	800be9e <USBH_PTP_GetStorageIds+0xf6>
      MTP_Handle->ptp.flags = PTP_DP_GETDATA;
 800bdda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bddc:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800bde0:	461a      	mov	r2, r3
 800bde2:	2302      	movs	r3, #2
 800bde4:	f8c2 31ac 	str.w	r3, [r2, #428]	; 0x1ac
      MTP_Handle->ptp.data_ptr = (uint8_t *)(void *) &(MTP_Handle->ptp.data_container);
 800bde8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdea:	f503 53ec 	add.w	r3, r3, #7552	; 0x1d80
 800bdee:	3304      	adds	r3, #4
 800bdf0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bdf2:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 800bdf6:	f8c2 31b0 	str.w	r3, [r2, #432]	; 0x1b0
      MTP_Handle->ptp.data_length = 0U;
 800bdfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdfc:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800be00:	461a      	mov	r2, r3
 800be02:	2300      	movs	r3, #0
 800be04:	f8c2 31b4 	str.w	r3, [r2, #436]	; 0x1b4
      MTP_Handle->ptp.data_packet_counter = 0U;
 800be08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be0a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800be0e:	461a      	mov	r2, r3
 800be10:	2300      	movs	r3, #0
 800be12:	f8c2 31c0 	str.w	r3, [r2, #448]	; 0x1c0
      MTP_Handle->ptp.data_packet = 0U;
 800be16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be18:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800be1c:	461a      	mov	r2, r3
 800be1e:	2300      	movs	r3, #0
 800be20:	f8c2 31b8 	str.w	r3, [r2, #440]	; 0x1b8
      ptp_container.Code = PTP_OC_GetStorageIDs;
 800be24:	f241 0304 	movw	r3, #4100	; 0x1004
 800be28:	81bb      	strh	r3, [r7, #12]
      ptp_container.SessionID = MTP_Handle->ptp.session_id;
 800be2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be2c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800be30:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
 800be34:	613b      	str	r3, [r7, #16]
      ptp_container.Transaction_ID = MTP_Handle->ptp.transaction_id++;
 800be36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be38:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800be3c:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 800be40:	1c5a      	adds	r2, r3, #1
 800be42:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800be44:	f501 5100 	add.w	r1, r1, #8192	; 0x2000
 800be48:	f8c1 21a4 	str.w	r2, [r1, #420]	; 0x1a4
 800be4c:	617b      	str	r3, [r7, #20]
      ptp_container.Nparam = 0U;
 800be4e:	2300      	movs	r3, #0
 800be50:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
      USBH_PTP_SendRequest(phost, &ptp_container);
 800be54:	f107 030c 	add.w	r3, r7, #12
 800be58:	4619      	mov	r1, r3
 800be5a:	6878      	ldr	r0, [r7, #4]
 800be5c:	f7ff f952 	bl	800b104 <USBH_PTP_SendRequest>
      MTP_Handle->ptp.state = PTP_OP_REQUEST_STATE;
 800be60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be62:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800be66:	2201      	movs	r2, #1
 800be68:	f883 2d60 	strb.w	r2, [r3, #3424]	; 0xd60
      MTP_Handle->ptp.req_state = PTP_REQ_WAIT;
 800be6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be6e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800be72:	2202      	movs	r2, #2
 800be74:	f883 2d61 	strb.w	r2, [r3, #3425]	; 0xd61
      status = USBH_BUSY;
 800be78:	2301      	movs	r3, #1
 800be7a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
      break;
 800be7e:	e00e      	b.n	800be9e <USBH_PTP_GetStorageIds+0xf6>
      status = USBH_PTP_Process(phost);
 800be80:	6878      	ldr	r0, [r7, #4]
 800be82:	f7fe fea7 	bl	800abd4 <USBH_PTP_Process>
 800be86:	4603      	mov	r3, r0
 800be88:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
      if (status == USBH_OK)
 800be8c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800be90:	2b00      	cmp	r3, #0
 800be92:	d103      	bne.n	800be9c <USBH_PTP_GetStorageIds+0xf4>
        PTP_GetStorageIDs(phost, storage_ids);
 800be94:	6839      	ldr	r1, [r7, #0]
 800be96:	6878      	ldr	r0, [r7, #4]
 800be98:	f7ff fb98 	bl	800b5cc <PTP_GetStorageIDs>
      break;
 800be9c:	bf00      	nop
  }
  return status;
 800be9e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 800bea2:	4618      	mov	r0, r3
 800bea4:	3738      	adds	r7, #56	; 0x38
 800bea6:	46bd      	mov	sp, r7
 800bea8:	bd80      	pop	{r7, pc}

0800beaa <USBH_PTP_GetStorageInfo>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_PTP_GetStorageInfo(USBH_HandleTypeDef *phost,
                                           uint32_t storage_id,
                                           PTP_StorageInfoTypedef *storage_info)
{
 800beaa:	b580      	push	{r7, lr}
 800beac:	b090      	sub	sp, #64	; 0x40
 800beae:	af00      	add	r7, sp, #0
 800beb0:	60f8      	str	r0, [r7, #12]
 800beb2:	60b9      	str	r1, [r7, #8]
 800beb4:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef   status = USBH_BUSY;
 800beb6:	2301      	movs	r3, #1
 800beb8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  MTP_HandleTypeDef    *MTP_Handle = (MTP_HandleTypeDef *)phost->pActiveClass->pData;
 800bebc:	68fb      	ldr	r3, [r7, #12]
 800bebe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bec2:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 800bec6:	69db      	ldr	r3, [r3, #28]
 800bec8:	63bb      	str	r3, [r7, #56]	; 0x38
  PTP_ContainerTypedef  ptp_container;

  switch (MTP_Handle->ptp.req_state)
 800beca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800becc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bed0:	f893 3d61 	ldrb.w	r3, [r3, #3425]	; 0xd61
 800bed4:	2b01      	cmp	r3, #1
 800bed6:	d002      	beq.n	800bede <USBH_PTP_GetStorageInfo+0x34>
 800bed8:	2b02      	cmp	r3, #2
 800beda:	d055      	beq.n	800bf88 <USBH_PTP_GetStorageInfo+0xde>
        PTP_GetStorageInfo(phost, storage_id, storage_info);
      }
      break;

    default:
      break;
 800bedc:	e064      	b.n	800bfa8 <USBH_PTP_GetStorageInfo+0xfe>
      MTP_Handle->ptp.flags = PTP_DP_GETDATA;
 800bede:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bee0:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800bee4:	461a      	mov	r2, r3
 800bee6:	2302      	movs	r3, #2
 800bee8:	f8c2 31ac 	str.w	r3, [r2, #428]	; 0x1ac
      MTP_Handle->ptp.data_ptr = (uint8_t *)(void *) &(MTP_Handle->ptp.data_container);
 800beec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800beee:	f503 53ec 	add.w	r3, r3, #7552	; 0x1d80
 800bef2:	3304      	adds	r3, #4
 800bef4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bef6:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 800befa:	f8c2 31b0 	str.w	r3, [r2, #432]	; 0x1b0
      MTP_Handle->ptp.data_length = 0U;
 800befe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf00:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800bf04:	461a      	mov	r2, r3
 800bf06:	2300      	movs	r3, #0
 800bf08:	f8c2 31b4 	str.w	r3, [r2, #436]	; 0x1b4
      MTP_Handle->ptp.data_packet_counter = 0U;
 800bf0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf0e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800bf12:	461a      	mov	r2, r3
 800bf14:	2300      	movs	r3, #0
 800bf16:	f8c2 31c0 	str.w	r3, [r2, #448]	; 0x1c0
      MTP_Handle->ptp.data_packet = 0U;
 800bf1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf1c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800bf20:	461a      	mov	r2, r3
 800bf22:	2300      	movs	r3, #0
 800bf24:	f8c2 31b8 	str.w	r3, [r2, #440]	; 0x1b8
      ptp_container.Code = PTP_OC_GetStorageInfo;
 800bf28:	f241 0305 	movw	r3, #4101	; 0x1005
 800bf2c:	82bb      	strh	r3, [r7, #20]
      ptp_container.SessionID = MTP_Handle->ptp.session_id;
 800bf2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf30:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800bf34:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
 800bf38:	61bb      	str	r3, [r7, #24]
      ptp_container.Transaction_ID = MTP_Handle->ptp.transaction_id++;
 800bf3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf3c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800bf40:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 800bf44:	1c5a      	adds	r2, r3, #1
 800bf46:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800bf48:	f501 5100 	add.w	r1, r1, #8192	; 0x2000
 800bf4c:	f8c1 21a4 	str.w	r2, [r1, #420]	; 0x1a4
 800bf50:	61fb      	str	r3, [r7, #28]
      ptp_container.Param1 = storage_id;
 800bf52:	68bb      	ldr	r3, [r7, #8]
 800bf54:	623b      	str	r3, [r7, #32]
      ptp_container.Nparam = 1U;
 800bf56:	2301      	movs	r3, #1
 800bf58:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
      USBH_PTP_SendRequest(phost, &ptp_container);
 800bf5c:	f107 0314 	add.w	r3, r7, #20
 800bf60:	4619      	mov	r1, r3
 800bf62:	68f8      	ldr	r0, [r7, #12]
 800bf64:	f7ff f8ce 	bl	800b104 <USBH_PTP_SendRequest>
      MTP_Handle->ptp.state = PTP_OP_REQUEST_STATE;
 800bf68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf6a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bf6e:	2201      	movs	r2, #1
 800bf70:	f883 2d60 	strb.w	r2, [r3, #3424]	; 0xd60
      MTP_Handle->ptp.req_state = PTP_REQ_WAIT;
 800bf74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf76:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bf7a:	2202      	movs	r2, #2
 800bf7c:	f883 2d61 	strb.w	r2, [r3, #3425]	; 0xd61
      status = USBH_BUSY;
 800bf80:	2301      	movs	r3, #1
 800bf82:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
      break;
 800bf86:	e00f      	b.n	800bfa8 <USBH_PTP_GetStorageInfo+0xfe>
      status = USBH_PTP_Process(phost);
 800bf88:	68f8      	ldr	r0, [r7, #12]
 800bf8a:	f7fe fe23 	bl	800abd4 <USBH_PTP_Process>
 800bf8e:	4603      	mov	r3, r0
 800bf90:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
      if (status == USBH_OK)
 800bf94:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800bf98:	2b00      	cmp	r3, #0
 800bf9a:	d104      	bne.n	800bfa6 <USBH_PTP_GetStorageInfo+0xfc>
        PTP_GetStorageInfo(phost, storage_id, storage_info);
 800bf9c:	687a      	ldr	r2, [r7, #4]
 800bf9e:	68b9      	ldr	r1, [r7, #8]
 800bfa0:	68f8      	ldr	r0, [r7, #12]
 800bfa2:	f7ff fb32 	bl	800b60a <PTP_GetStorageInfo>
      break;
 800bfa6:	bf00      	nop
  }
  return status;
 800bfa8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800bfac:	4618      	mov	r0, r3
 800bfae:	3740      	adds	r7, #64	; 0x40
 800bfb0:	46bd      	mov	sp, r7
 800bfb2:	bd80      	pop	{r7, pc}

0800bfb4 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 800bfb4:	b580      	push	{r7, lr}
 800bfb6:	b084      	sub	sp, #16
 800bfb8:	af00      	add	r7, sp, #0
 800bfba:	60f8      	str	r0, [r7, #12]
 800bfbc:	60b9      	str	r1, [r7, #8]
 800bfbe:	4613      	mov	r3, r2
 800bfc0:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800bfc2:	68fb      	ldr	r3, [r7, #12]
 800bfc4:	2b00      	cmp	r3, #0
 800bfc6:	d10a      	bne.n	800bfde <USBH_Init+0x2a>
  {
    USBH_ErrLog("Invalid Host handle");
 800bfc8:	4822      	ldr	r0, [pc, #136]	; (800c054 <USBH_Init+0xa0>)
 800bfca:	f002 fbeb 	bl	800e7a4 <iprintf>
 800bfce:	4822      	ldr	r0, [pc, #136]	; (800c058 <USBH_Init+0xa4>)
 800bfd0:	f002 fbe8 	bl	800e7a4 <iprintf>
 800bfd4:	200a      	movs	r0, #10
 800bfd6:	f002 fbfd 	bl	800e7d4 <putchar>
    return USBH_FAIL;
 800bfda:	2302      	movs	r3, #2
 800bfdc:	e035      	b.n	800c04a <USBH_Init+0x96>
  }

  /* Set DRiver ID */
  phost->id = id;
 800bfde:	68fb      	ldr	r3, [r7, #12]
 800bfe0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bfe4:	461a      	mov	r2, r3
 800bfe6:	79fb      	ldrb	r3, [r7, #7]
 800bfe8:	f882 3168 	strb.w	r3, [r2, #360]	; 0x168

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800bfec:	68fb      	ldr	r3, [r7, #12]
 800bfee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bff2:	461a      	mov	r2, r3
 800bff4:	2300      	movs	r3, #0
 800bff6:	f8c2 311c 	str.w	r3, [r2, #284]	; 0x11c
  phost->ClassNumber = 0U;
 800bffa:	68fb      	ldr	r3, [r7, #12]
 800bffc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c000:	461a      	mov	r2, r3
 800c002:	2300      	movs	r3, #0
 800c004:	f8c2 3120 	str.w	r3, [r2, #288]	; 0x120

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 800c008:	68f8      	ldr	r0, [r7, #12]
 800c00a:	f000 f827 	bl	800c05c <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800c00e:	68fb      	ldr	r3, [r7, #12]
 800c010:	2200      	movs	r2, #0
 800c012:	f883 2921 	strb.w	r2, [r3, #2337]	; 0x921
  phost->device.is_connected = 0U;
 800c016:	68fb      	ldr	r3, [r7, #12]
 800c018:	2200      	movs	r2, #0
 800c01a:	f883 291e 	strb.w	r2, [r3, #2334]	; 0x91e
  phost->device.is_disconnected = 0U;
 800c01e:	68fb      	ldr	r3, [r7, #12]
 800c020:	2200      	movs	r2, #0
 800c022:	f883 291f 	strb.w	r2, [r3, #2335]	; 0x91f
  phost->device.is_ReEnumerated = 0U;
 800c026:	68fb      	ldr	r3, [r7, #12]
 800c028:	2200      	movs	r2, #0
 800c02a:	f883 2920 	strb.w	r2, [r3, #2336]	; 0x920

  /* Assign User process */
  if (pUsrFunc != NULL)
 800c02e:	68bb      	ldr	r3, [r7, #8]
 800c030:	2b00      	cmp	r3, #0
 800c032:	d006      	beq.n	800c042 <USBH_Init+0x8e>
  {
    phost->pUser = pUsrFunc;
 800c034:	68fb      	ldr	r3, [r7, #12]
 800c036:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c03a:	461a      	mov	r2, r3
 800c03c:	68bb      	ldr	r3, [r7, #8]
 800c03e:	f8c2 3170 	str.w	r3, [r2, #368]	; 0x170

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 800c042:	68f8      	ldr	r0, [r7, #12]
 800c044:	f001 fd7c 	bl	800db40 <USBH_LL_Init>

  return USBH_OK;
 800c048:	2300      	movs	r3, #0
}
 800c04a:	4618      	mov	r0, r3
 800c04c:	3710      	adds	r7, #16
 800c04e:	46bd      	mov	sp, r7
 800c050:	bd80      	pop	{r7, pc}
 800c052:	bf00      	nop
 800c054:	0800fdf4 	.word	0x0800fdf4
 800c058:	0800fdfc 	.word	0x0800fdfc

0800c05c <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800c05c:	b480      	push	{r7}
 800c05e:	b085      	sub	sp, #20
 800c060:	af00      	add	r7, sp, #0
 800c062:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800c064:	2300      	movs	r3, #0
 800c066:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800c068:	2300      	movs	r3, #0
 800c06a:	60fb      	str	r3, [r7, #12]
 800c06c:	e00a      	b.n	800c084 <DeInitStateMachine+0x28>
  {
    phost->Pipes[i] = 0U;
 800c06e:	687a      	ldr	r2, [r7, #4]
 800c070:	68fb      	ldr	r3, [r7, #12]
 800c072:	f503 6389 	add.w	r3, r3, #1096	; 0x448
 800c076:	009b      	lsls	r3, r3, #2
 800c078:	4413      	add	r3, r2
 800c07a:	2200      	movs	r2, #0
 800c07c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800c07e:	68fb      	ldr	r3, [r7, #12]
 800c080:	3301      	adds	r3, #1
 800c082:	60fb      	str	r3, [r7, #12]
 800c084:	68fb      	ldr	r3, [r7, #12]
 800c086:	2b0e      	cmp	r3, #14
 800c088:	d9f1      	bls.n	800c06e <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800c08a:	2300      	movs	r3, #0
 800c08c:	60fb      	str	r3, [r7, #12]
 800c08e:	e009      	b.n	800c0a4 <DeInitStateMachine+0x48>
  {
    phost->device.Data[i] = 0U;
 800c090:	687a      	ldr	r2, [r7, #4]
 800c092:	68fb      	ldr	r3, [r7, #12]
 800c094:	4413      	add	r3, r2
 800c096:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800c09a:	2200      	movs	r2, #0
 800c09c:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800c09e:	68fb      	ldr	r3, [r7, #12]
 800c0a0:	3301      	adds	r3, #1
 800c0a2:	60fb      	str	r3, [r7, #12]
 800c0a4:	68fb      	ldr	r3, [r7, #12]
 800c0a6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c0aa:	d3f1      	bcc.n	800c090 <DeInitStateMachine+0x34>
  }

  phost->gState = HOST_IDLE;
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	2200      	movs	r2, #0
 800c0b0:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	2200      	movs	r2, #0
 800c0b6:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	2201      	movs	r2, #1
 800c0bc:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c0c4:	461a      	mov	r2, r3
 800c0c6:	2300      	movs	r3, #0
 800c0c8:	f8c2 3164 	str.w	r3, [r2, #356]	; 0x164

  phost->Control.state = CTRL_SETUP;
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	2201      	movs	r2, #1
 800c0d0:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	2240      	movs	r2, #64	; 0x40
 800c0d6:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	2200      	movs	r2, #0
 800c0dc:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	2200      	movs	r2, #0
 800c0e2:	f883 291c 	strb.w	r2, [r3, #2332]	; 0x91c
  phost->device.speed = USBH_SPEED_FULL;
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	2201      	movs	r2, #1
 800c0ea:	f883 291d 	strb.w	r2, [r3, #2333]	; 0x91d

  return USBH_OK;
 800c0ee:	2300      	movs	r3, #0
}
 800c0f0:	4618      	mov	r0, r3
 800c0f2:	3714      	adds	r7, #20
 800c0f4:	46bd      	mov	sp, r7
 800c0f6:	bc80      	pop	{r7}
 800c0f8:	4770      	bx	lr
	...

0800c0fc <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800c0fc:	b580      	push	{r7, lr}
 800c0fe:	b084      	sub	sp, #16
 800c100:	af00      	add	r7, sp, #0
 800c102:	6078      	str	r0, [r7, #4]
 800c104:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800c106:	2300      	movs	r3, #0
 800c108:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800c10a:	683b      	ldr	r3, [r7, #0]
 800c10c:	2b00      	cmp	r3, #0
 800c10e:	d026      	beq.n	800c15e <USBH_RegisterClass+0x62>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c116:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 800c11a:	2b0e      	cmp	r3, #14
 800c11c:	d813      	bhi.n	800c146 <USBH_RegisterClass+0x4a>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c124:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 800c128:	1c5a      	adds	r2, r3, #1
 800c12a:	6879      	ldr	r1, [r7, #4]
 800c12c:	f501 5180 	add.w	r1, r1, #4096	; 0x1000
 800c130:	f8c1 2120 	str.w	r2, [r1, #288]	; 0x120
 800c134:	687a      	ldr	r2, [r7, #4]
 800c136:	f503 6387 	add.w	r3, r3, #1080	; 0x438
 800c13a:	6839      	ldr	r1, [r7, #0]
 800c13c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800c140:	2300      	movs	r3, #0
 800c142:	73fb      	strb	r3, [r7, #15]
 800c144:	e016      	b.n	800c174 <USBH_RegisterClass+0x78>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
 800c146:	480e      	ldr	r0, [pc, #56]	; (800c180 <USBH_RegisterClass+0x84>)
 800c148:	f002 fb2c 	bl	800e7a4 <iprintf>
 800c14c:	480d      	ldr	r0, [pc, #52]	; (800c184 <USBH_RegisterClass+0x88>)
 800c14e:	f002 fb29 	bl	800e7a4 <iprintf>
 800c152:	200a      	movs	r0, #10
 800c154:	f002 fb3e 	bl	800e7d4 <putchar>
      status = USBH_FAIL;
 800c158:	2302      	movs	r3, #2
 800c15a:	73fb      	strb	r3, [r7, #15]
 800c15c:	e00a      	b.n	800c174 <USBH_RegisterClass+0x78>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
 800c15e:	4808      	ldr	r0, [pc, #32]	; (800c180 <USBH_RegisterClass+0x84>)
 800c160:	f002 fb20 	bl	800e7a4 <iprintf>
 800c164:	4808      	ldr	r0, [pc, #32]	; (800c188 <USBH_RegisterClass+0x8c>)
 800c166:	f002 fb1d 	bl	800e7a4 <iprintf>
 800c16a:	200a      	movs	r0, #10
 800c16c:	f002 fb32 	bl	800e7d4 <putchar>
    status = USBH_FAIL;
 800c170:	2302      	movs	r3, #2
 800c172:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800c174:	7bfb      	ldrb	r3, [r7, #15]
}
 800c176:	4618      	mov	r0, r3
 800c178:	3710      	adds	r7, #16
 800c17a:	46bd      	mov	sp, r7
 800c17c:	bd80      	pop	{r7, pc}
 800c17e:	bf00      	nop
 800c180:	0800fdf4 	.word	0x0800fdf4
 800c184:	0800fe10 	.word	0x0800fe10
 800c188:	0800fe2c 	.word	0x0800fe2c

0800c18c <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800c18c:	b580      	push	{r7, lr}
 800c18e:	b084      	sub	sp, #16
 800c190:	af00      	add	r7, sp, #0
 800c192:	6078      	str	r0, [r7, #4]
 800c194:	460b      	mov	r3, r1
 800c196:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800c198:	2300      	movs	r3, #0
 800c19a:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	f893 393a 	ldrb.w	r3, [r3, #2362]	; 0x93a
 800c1a2:	78fa      	ldrb	r2, [r7, #3]
 800c1a4:	429a      	cmp	r2, r3
 800c1a6:	d23f      	bcs.n	800c228 <USBH_SelectInterface+0x9c>
  {
    phost->device.current_interface = interface;
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	78fa      	ldrb	r2, [r7, #3]
 800c1ac:	f883 2922 	strb.w	r2, [r3, #2338]	; 0x922
    USBH_UsrLog("Switching to Interface (#%d)", interface);
 800c1b0:	78fb      	ldrb	r3, [r7, #3]
 800c1b2:	4619      	mov	r1, r3
 800c1b4:	4824      	ldr	r0, [pc, #144]	; (800c248 <USBH_SelectInterface+0xbc>)
 800c1b6:	f002 faf5 	bl	800e7a4 <iprintf>
 800c1ba:	200a      	movs	r0, #10
 800c1bc:	f002 fb0a 	bl	800e7d4 <putchar>
    USBH_UsrLog("Class    : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceClass);
 800c1c0:	78fa      	ldrb	r2, [r7, #3]
 800c1c2:	6879      	ldr	r1, [r7, #4]
 800c1c4:	4613      	mov	r3, r2
 800c1c6:	019b      	lsls	r3, r3, #6
 800c1c8:	4413      	add	r3, r2
 800c1ca:	005b      	lsls	r3, r3, #1
 800c1cc:	440b      	add	r3, r1
 800c1ce:	f603 1345 	addw	r3, r3, #2373	; 0x945
 800c1d2:	781b      	ldrb	r3, [r3, #0]
 800c1d4:	4619      	mov	r1, r3
 800c1d6:	481d      	ldr	r0, [pc, #116]	; (800c24c <USBH_SelectInterface+0xc0>)
 800c1d8:	f002 fae4 	bl	800e7a4 <iprintf>
 800c1dc:	200a      	movs	r0, #10
 800c1de:	f002 faf9 	bl	800e7d4 <putchar>
    USBH_UsrLog("SubClass : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceSubClass);
 800c1e2:	78fa      	ldrb	r2, [r7, #3]
 800c1e4:	6879      	ldr	r1, [r7, #4]
 800c1e6:	4613      	mov	r3, r2
 800c1e8:	019b      	lsls	r3, r3, #6
 800c1ea:	4413      	add	r3, r2
 800c1ec:	005b      	lsls	r3, r3, #1
 800c1ee:	440b      	add	r3, r1
 800c1f0:	f603 1346 	addw	r3, r3, #2374	; 0x946
 800c1f4:	781b      	ldrb	r3, [r3, #0]
 800c1f6:	4619      	mov	r1, r3
 800c1f8:	4815      	ldr	r0, [pc, #84]	; (800c250 <USBH_SelectInterface+0xc4>)
 800c1fa:	f002 fad3 	bl	800e7a4 <iprintf>
 800c1fe:	200a      	movs	r0, #10
 800c200:	f002 fae8 	bl	800e7d4 <putchar>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
 800c204:	78fa      	ldrb	r2, [r7, #3]
 800c206:	6879      	ldr	r1, [r7, #4]
 800c208:	4613      	mov	r3, r2
 800c20a:	019b      	lsls	r3, r3, #6
 800c20c:	4413      	add	r3, r2
 800c20e:	005b      	lsls	r3, r3, #1
 800c210:	440b      	add	r3, r1
 800c212:	f603 1347 	addw	r3, r3, #2375	; 0x947
 800c216:	781b      	ldrb	r3, [r3, #0]
 800c218:	4619      	mov	r1, r3
 800c21a:	480e      	ldr	r0, [pc, #56]	; (800c254 <USBH_SelectInterface+0xc8>)
 800c21c:	f002 fac2 	bl	800e7a4 <iprintf>
 800c220:	200a      	movs	r0, #10
 800c222:	f002 fad7 	bl	800e7d4 <putchar>
 800c226:	e00a      	b.n	800c23e <USBH_SelectInterface+0xb2>
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
 800c228:	480b      	ldr	r0, [pc, #44]	; (800c258 <USBH_SelectInterface+0xcc>)
 800c22a:	f002 fabb 	bl	800e7a4 <iprintf>
 800c22e:	480b      	ldr	r0, [pc, #44]	; (800c25c <USBH_SelectInterface+0xd0>)
 800c230:	f002 fab8 	bl	800e7a4 <iprintf>
 800c234:	200a      	movs	r0, #10
 800c236:	f002 facd 	bl	800e7d4 <putchar>
    status = USBH_FAIL;
 800c23a:	2302      	movs	r3, #2
 800c23c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800c23e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c240:	4618      	mov	r0, r3
 800c242:	3710      	adds	r7, #16
 800c244:	46bd      	mov	sp, r7
 800c246:	bd80      	pop	{r7, pc}
 800c248:	0800fe44 	.word	0x0800fe44
 800c24c:	0800fe64 	.word	0x0800fe64
 800c250:	0800fe74 	.word	0x0800fe74
 800c254:	0800fe84 	.word	0x0800fe84
 800c258:	0800fdf4 	.word	0x0800fdf4
 800c25c:	0800fe94 	.word	0x0800fe94

0800c260 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800c260:	b480      	push	{r7}
 800c262:	b087      	sub	sp, #28
 800c264:	af00      	add	r7, sp, #0
 800c266:	6078      	str	r0, [r7, #4]
 800c268:	4608      	mov	r0, r1
 800c26a:	4611      	mov	r1, r2
 800c26c:	461a      	mov	r2, r3
 800c26e:	4603      	mov	r3, r0
 800c270:	70fb      	strb	r3, [r7, #3]
 800c272:	460b      	mov	r3, r1
 800c274:	70bb      	strb	r3, [r7, #2]
 800c276:	4613      	mov	r3, r2
 800c278:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800c27a:	2300      	movs	r3, #0
 800c27c:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 800c27e:	2300      	movs	r3, #0
 800c280:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	f603 1336 	addw	r3, r3, #2358	; 0x936
 800c288:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800c28a:	e026      	b.n	800c2da <USBH_FindInterface+0x7a>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800c28c:	7dfa      	ldrb	r2, [r7, #23]
 800c28e:	4613      	mov	r3, r2
 800c290:	019b      	lsls	r3, r3, #6
 800c292:	4413      	add	r3, r2
 800c294:	005b      	lsls	r3, r3, #1
 800c296:	3308      	adds	r3, #8
 800c298:	68fa      	ldr	r2, [r7, #12]
 800c29a:	4413      	add	r3, r2
 800c29c:	3302      	adds	r3, #2
 800c29e:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800c2a0:	693b      	ldr	r3, [r7, #16]
 800c2a2:	795b      	ldrb	r3, [r3, #5]
 800c2a4:	78fa      	ldrb	r2, [r7, #3]
 800c2a6:	429a      	cmp	r2, r3
 800c2a8:	d002      	beq.n	800c2b0 <USBH_FindInterface+0x50>
 800c2aa:	78fb      	ldrb	r3, [r7, #3]
 800c2ac:	2bff      	cmp	r3, #255	; 0xff
 800c2ae:	d111      	bne.n	800c2d4 <USBH_FindInterface+0x74>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800c2b0:	693b      	ldr	r3, [r7, #16]
 800c2b2:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800c2b4:	78ba      	ldrb	r2, [r7, #2]
 800c2b6:	429a      	cmp	r2, r3
 800c2b8:	d002      	beq.n	800c2c0 <USBH_FindInterface+0x60>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800c2ba:	78bb      	ldrb	r3, [r7, #2]
 800c2bc:	2bff      	cmp	r3, #255	; 0xff
 800c2be:	d109      	bne.n	800c2d4 <USBH_FindInterface+0x74>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800c2c0:	693b      	ldr	r3, [r7, #16]
 800c2c2:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800c2c4:	787a      	ldrb	r2, [r7, #1]
 800c2c6:	429a      	cmp	r2, r3
 800c2c8:	d002      	beq.n	800c2d0 <USBH_FindInterface+0x70>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800c2ca:	787b      	ldrb	r3, [r7, #1]
 800c2cc:	2bff      	cmp	r3, #255	; 0xff
 800c2ce:	d101      	bne.n	800c2d4 <USBH_FindInterface+0x74>
    {
      return  if_ix;
 800c2d0:	7dfb      	ldrb	r3, [r7, #23]
 800c2d2:	e006      	b.n	800c2e2 <USBH_FindInterface+0x82>
    }
    if_ix++;
 800c2d4:	7dfb      	ldrb	r3, [r7, #23]
 800c2d6:	3301      	adds	r3, #1
 800c2d8:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800c2da:	7dfb      	ldrb	r3, [r7, #23]
 800c2dc:	2b0e      	cmp	r3, #14
 800c2de:	d9d5      	bls.n	800c28c <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800c2e0:	23ff      	movs	r3, #255	; 0xff
}
 800c2e2:	4618      	mov	r0, r3
 800c2e4:	371c      	adds	r7, #28
 800c2e6:	46bd      	mov	sp, r7
 800c2e8:	bc80      	pop	{r7}
 800c2ea:	4770      	bx	lr

0800c2ec <USBH_FindInterfaceIndex>:
  * @param  alt_settings    : alternate setting number
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterfaceIndex(USBH_HandleTypeDef *phost, uint8_t interface_number, uint8_t alt_settings)
{
 800c2ec:	b480      	push	{r7}
 800c2ee:	b087      	sub	sp, #28
 800c2f0:	af00      	add	r7, sp, #0
 800c2f2:	6078      	str	r0, [r7, #4]
 800c2f4:	460b      	mov	r3, r1
 800c2f6:	70fb      	strb	r3, [r7, #3]
 800c2f8:	4613      	mov	r3, r2
 800c2fa:	70bb      	strb	r3, [r7, #2]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800c2fc:	2300      	movs	r3, #0
 800c2fe:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 800c300:	2300      	movs	r3, #0
 800c302:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800c304:	687b      	ldr	r3, [r7, #4]
 800c306:	f603 1336 	addw	r3, r3, #2358	; 0x936
 800c30a:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800c30c:	e018      	b.n	800c340 <USBH_FindInterfaceIndex+0x54>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800c30e:	7dfa      	ldrb	r2, [r7, #23]
 800c310:	4613      	mov	r3, r2
 800c312:	019b      	lsls	r3, r3, #6
 800c314:	4413      	add	r3, r2
 800c316:	005b      	lsls	r3, r3, #1
 800c318:	3308      	adds	r3, #8
 800c31a:	68fa      	ldr	r2, [r7, #12]
 800c31c:	4413      	add	r3, r2
 800c31e:	3302      	adds	r3, #2
 800c320:	613b      	str	r3, [r7, #16]
    if ((pif->bInterfaceNumber == interface_number) && (pif->bAlternateSetting == alt_settings))
 800c322:	693b      	ldr	r3, [r7, #16]
 800c324:	789b      	ldrb	r3, [r3, #2]
 800c326:	78fa      	ldrb	r2, [r7, #3]
 800c328:	429a      	cmp	r2, r3
 800c32a:	d106      	bne.n	800c33a <USBH_FindInterfaceIndex+0x4e>
 800c32c:	693b      	ldr	r3, [r7, #16]
 800c32e:	78db      	ldrb	r3, [r3, #3]
 800c330:	78ba      	ldrb	r2, [r7, #2]
 800c332:	429a      	cmp	r2, r3
 800c334:	d101      	bne.n	800c33a <USBH_FindInterfaceIndex+0x4e>
    {
      return  if_ix;
 800c336:	7dfb      	ldrb	r3, [r7, #23]
 800c338:	e006      	b.n	800c348 <USBH_FindInterfaceIndex+0x5c>
    }
    if_ix++;
 800c33a:	7dfb      	ldrb	r3, [r7, #23]
 800c33c:	3301      	adds	r3, #1
 800c33e:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800c340:	7dfb      	ldrb	r3, [r7, #23]
 800c342:	2b0e      	cmp	r3, #14
 800c344:	d9e3      	bls.n	800c30e <USBH_FindInterfaceIndex+0x22>
  }
  return 0xFFU;
 800c346:	23ff      	movs	r3, #255	; 0xff
}
 800c348:	4618      	mov	r0, r3
 800c34a:	371c      	adds	r7, #28
 800c34c:	46bd      	mov	sp, r7
 800c34e:	bc80      	pop	{r7}
 800c350:	4770      	bx	lr

0800c352 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 800c352:	b580      	push	{r7, lr}
 800c354:	b082      	sub	sp, #8
 800c356:	af00      	add	r7, sp, #0
 800c358:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 800c35a:	6878      	ldr	r0, [r7, #4]
 800c35c:	f001 fc2e 	bl	800dbbc <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 800c360:	2101      	movs	r1, #1
 800c362:	6878      	ldr	r0, [r7, #4]
 800c364:	f001 fd59 	bl	800de1a <USBH_LL_DriverVBUS>

  return USBH_OK;
 800c368:	2300      	movs	r3, #0
}
 800c36a:	4618      	mov	r0, r3
 800c36c:	3708      	adds	r7, #8
 800c36e:	46bd      	mov	sp, r7
 800c370:	bd80      	pop	{r7, pc}
	...

0800c374 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 800c374:	b580      	push	{r7, lr}
 800c376:	b088      	sub	sp, #32
 800c378:	af04      	add	r7, sp, #16
 800c37a:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800c37c:	2302      	movs	r3, #2
 800c37e:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800c380:	2300      	movs	r3, #0
 800c382:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	f893 391f 	ldrb.w	r3, [r3, #2335]	; 0x91f
 800c38a:	b2db      	uxtb	r3, r3
 800c38c:	2b01      	cmp	r3, #1
 800c38e:	d102      	bne.n	800c396 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	2203      	movs	r2, #3
 800c394:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	781b      	ldrb	r3, [r3, #0]
 800c39a:	b2db      	uxtb	r3, r3
 800c39c:	2b0b      	cmp	r3, #11
 800c39e:	f200 820d 	bhi.w	800c7bc <USBH_Process+0x448>
 800c3a2:	a201      	add	r2, pc, #4	; (adr r2, 800c3a8 <USBH_Process+0x34>)
 800c3a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c3a8:	0800c3d9 	.word	0x0800c3d9
 800c3ac:	0800c407 	.word	0x0800c407
 800c3b0:	0800c427 	.word	0x0800c427
 800c3b4:	0800c735 	.word	0x0800c735
 800c3b8:	0800c7bd 	.word	0x0800c7bd
 800c3bc:	0800c4d3 	.word	0x0800c4d3
 800c3c0:	0800c6c9 	.word	0x0800c6c9
 800c3c4:	0800c51b 	.word	0x0800c51b
 800c3c8:	0800c543 	.word	0x0800c543
 800c3cc:	0800c56f 	.word	0x0800c56f
 800c3d0:	0800c5a9 	.word	0x0800c5a9
 800c3d4:	0800c715 	.word	0x0800c715
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	f893 391e 	ldrb.w	r3, [r3, #2334]	; 0x91e
 800c3de:	b2db      	uxtb	r3, r3
 800c3e0:	2b00      	cmp	r3, #0
 800c3e2:	f000 81ed 	beq.w	800c7c0 <USBH_Process+0x44c>
      {
        USBH_UsrLog("USB Device Connected");
 800c3e6:	48ae      	ldr	r0, [pc, #696]	; (800c6a0 <USBH_Process+0x32c>)
 800c3e8:	f002 f9dc 	bl	800e7a4 <iprintf>
 800c3ec:	200a      	movs	r0, #10
 800c3ee:	f002 f9f1 	bl	800e7d4 <putchar>

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	2201      	movs	r2, #1
 800c3f6:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800c3f8:	20c8      	movs	r0, #200	; 0xc8
 800c3fa:	f001 fd7e 	bl	800defa <USBH_Delay>
        USBH_LL_ResetPort(phost);
 800c3fe:	6878      	ldr	r0, [r7, #4]
 800c400:	f001 fc3f 	bl	800dc82 <USBH_LL_ResetPort>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800c404:	e1dc      	b.n	800c7c0 <USBH_Process+0x44c>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800c406:	687b      	ldr	r3, [r7, #4]
 800c408:	f893 3921 	ldrb.w	r3, [r3, #2337]	; 0x921
 800c40c:	2b01      	cmp	r3, #1
 800c40e:	f040 81d9 	bne.w	800c7c4 <USBH_Process+0x450>
      {
        USBH_UsrLog("USB Device Reset Completed");
 800c412:	48a4      	ldr	r0, [pc, #656]	; (800c6a4 <USBH_Process+0x330>)
 800c414:	f002 f9c6 	bl	800e7a4 <iprintf>
 800c418:	200a      	movs	r0, #10
 800c41a:	f002 f9db 	bl	800e7d4 <putchar>
        phost->gState = HOST_DEV_ATTACHED;
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	2202      	movs	r2, #2
 800c422:	701a      	strb	r2, [r3, #0]
      }
      break;
 800c424:	e1ce      	b.n	800c7c4 <USBH_Process+0x450>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c42c:	f8d3 3170 	ldr.w	r3, [r3, #368]	; 0x170
 800c430:	2b00      	cmp	r3, #0
 800c432:	d007      	beq.n	800c444 <USBH_Process+0xd0>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c43a:	f8d3 3170 	ldr.w	r3, [r3, #368]	; 0x170
 800c43e:	2104      	movs	r1, #4
 800c440:	6878      	ldr	r0, [r7, #4]
 800c442:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800c444:	2064      	movs	r0, #100	; 0x64
 800c446:	f001 fd58 	bl	800defa <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 800c44a:	6878      	ldr	r0, [r7, #4]
 800c44c:	f001 fbf0 	bl	800dc30 <USBH_LL_GetSpeed>
 800c450:	4603      	mov	r3, r0
 800c452:	461a      	mov	r2, r3
 800c454:	687b      	ldr	r3, [r7, #4]
 800c456:	f883 291d 	strb.w	r2, [r3, #2333]	; 0x91d

      phost->gState = HOST_ENUMERATION;
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	2205      	movs	r2, #5
 800c45e:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800c460:	2100      	movs	r1, #0
 800c462:	6878      	ldr	r0, [r7, #4]
 800c464:	f001 f9c7 	bl	800d7f6 <USBH_AllocPipe>
 800c468:	4603      	mov	r3, r0
 800c46a:	461a      	mov	r2, r3
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800c470:	2180      	movs	r1, #128	; 0x80
 800c472:	6878      	ldr	r0, [r7, #4]
 800c474:	f001 f9bf 	bl	800d7f6 <USBH_AllocPipe>
 800c478:	4603      	mov	r3, r0
 800c47a:	461a      	mov	r2, r3
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	711a      	strb	r2, [r3, #4]


      /* Open Control pipes */
      USBH_OpenPipe(phost,
 800c480:	687b      	ldr	r3, [r7, #4]
 800c482:	7919      	ldrb	r1, [r3, #4]
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	f893 091c 	ldrb.w	r0, [r3, #2332]	; 0x91c
 800c48a:	687b      	ldr	r3, [r7, #4]
 800c48c:	f893 391d 	ldrb.w	r3, [r3, #2333]	; 0x91d
                    phost->Control.pipe_in,
                    0x80U,
                    phost->device.address,
                    phost->device.speed,
                    USBH_EP_CONTROL,
                    (uint16_t)phost->Control.pipe_size);
 800c490:	687a      	ldr	r2, [r7, #4]
 800c492:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost,
 800c494:	b292      	uxth	r2, r2
 800c496:	9202      	str	r2, [sp, #8]
 800c498:	2200      	movs	r2, #0
 800c49a:	9201      	str	r2, [sp, #4]
 800c49c:	9300      	str	r3, [sp, #0]
 800c49e:	4603      	mov	r3, r0
 800c4a0:	2280      	movs	r2, #128	; 0x80
 800c4a2:	6878      	ldr	r0, [r7, #4]
 800c4a4:	f001 f978 	bl	800d798 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost,
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	7959      	ldrb	r1, [r3, #5]
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	f893 091c 	ldrb.w	r0, [r3, #2332]	; 0x91c
 800c4b2:	687b      	ldr	r3, [r7, #4]
 800c4b4:	f893 391d 	ldrb.w	r3, [r3, #2333]	; 0x91d
                    phost->Control.pipe_out,
                    0x00U,
                    phost->device.address,
                    phost->device.speed,
                    USBH_EP_CONTROL,
                    (uint16_t)phost->Control.pipe_size);
 800c4b8:	687a      	ldr	r2, [r7, #4]
 800c4ba:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost,
 800c4bc:	b292      	uxth	r2, r2
 800c4be:	9202      	str	r2, [sp, #8]
 800c4c0:	2200      	movs	r2, #0
 800c4c2:	9201      	str	r2, [sp, #4]
 800c4c4:	9300      	str	r3, [sp, #0]
 800c4c6:	4603      	mov	r3, r0
 800c4c8:	2200      	movs	r2, #0
 800c4ca:	6878      	ldr	r0, [r7, #4]
 800c4cc:	f001 f964 	bl	800d798 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800c4d0:	e185      	b.n	800c7de <USBH_Process+0x46a>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      if (USBH_HandleEnum(phost) == USBH_OK)
 800c4d2:	6878      	ldr	r0, [r7, #4]
 800c4d4:	f000 f98e 	bl	800c7f4 <USBH_HandleEnum>
 800c4d8:	4603      	mov	r3, r0
 800c4da:	2b00      	cmp	r3, #0
 800c4dc:	f040 8174 	bne.w	800c7c8 <USBH_Process+0x454>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");
 800c4e0:	4871      	ldr	r0, [pc, #452]	; (800c6a8 <USBH_Process+0x334>)
 800c4e2:	f002 f95f 	bl	800e7a4 <iprintf>
 800c4e6:	200a      	movs	r0, #10
 800c4e8:	f002 f974 	bl	800e7d4 <putchar>

        phost->device.current_interface = 0U;
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	2200      	movs	r2, #0
 800c4f0:	f883 2922 	strb.w	r2, [r3, #2338]	; 0x922

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800c4f4:	687b      	ldr	r3, [r7, #4]
 800c4f6:	f893 3935 	ldrb.w	r3, [r3, #2357]	; 0x935
 800c4fa:	2b01      	cmp	r3, #1
 800c4fc:	d109      	bne.n	800c512 <USBH_Process+0x19e>
        {
          USBH_UsrLog("This device has only 1 configuration.");
 800c4fe:	486b      	ldr	r0, [pc, #428]	; (800c6ac <USBH_Process+0x338>)
 800c500:	f002 f950 	bl	800e7a4 <iprintf>
 800c504:	200a      	movs	r0, #10
 800c506:	f002 f965 	bl	800e7d4 <putchar>
          phost->gState = HOST_SET_CONFIGURATION;
 800c50a:	687b      	ldr	r3, [r7, #4]
 800c50c:	2208      	movs	r2, #8
 800c50e:	701a      	strb	r2, [r3, #0]
        {
          phost->gState = HOST_INPUT;
        }

      }
      break;
 800c510:	e15a      	b.n	800c7c8 <USBH_Process+0x454>
          phost->gState = HOST_INPUT;
 800c512:	687b      	ldr	r3, [r7, #4]
 800c514:	2207      	movs	r2, #7
 800c516:	701a      	strb	r2, [r3, #0]
      break;
 800c518:	e156      	b.n	800c7c8 <USBH_Process+0x454>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c520:	f8d3 3170 	ldr.w	r3, [r3, #368]	; 0x170
 800c524:	2b00      	cmp	r3, #0
 800c526:	f000 8151 	beq.w	800c7cc <USBH_Process+0x458>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800c52a:	687b      	ldr	r3, [r7, #4]
 800c52c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c530:	f8d3 3170 	ldr.w	r3, [r3, #368]	; 0x170
 800c534:	2101      	movs	r1, #1
 800c536:	6878      	ldr	r0, [r7, #4]
 800c538:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	2208      	movs	r2, #8
 800c53e:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 800c540:	e144      	b.n	800c7cc <USBH_Process+0x458>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800c542:	687b      	ldr	r3, [r7, #4]
 800c544:	f893 393b 	ldrb.w	r3, [r3, #2363]	; 0x93b
 800c548:	b29b      	uxth	r3, r3
 800c54a:	4619      	mov	r1, r3
 800c54c:	6878      	ldr	r0, [r7, #4]
 800c54e:	f000 fc34 	bl	800cdba <USBH_SetCfg>
 800c552:	4603      	mov	r3, r0
 800c554:	2b00      	cmp	r3, #0
 800c556:	f040 813b 	bne.w	800c7d0 <USBH_Process+0x45c>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	2209      	movs	r2, #9
 800c55e:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Default configuration set.");
 800c560:	4853      	ldr	r0, [pc, #332]	; (800c6b0 <USBH_Process+0x33c>)
 800c562:	f002 f91f 	bl	800e7a4 <iprintf>
 800c566:	200a      	movs	r0, #10
 800c568:	f002 f934 	bl	800e7d4 <putchar>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800c56c:	e130      	b.n	800c7d0 <USBH_Process+0x45c>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 800c56e:	687b      	ldr	r3, [r7, #4]
 800c570:	f893 393d 	ldrb.w	r3, [r3, #2365]	; 0x93d
 800c574:	f003 0320 	and.w	r3, r3, #32
 800c578:	2b00      	cmp	r3, #0
 800c57a:	d011      	beq.n	800c5a0 <USBH_Process+0x22c>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 800c57c:	2101      	movs	r1, #1
 800c57e:	6878      	ldr	r0, [r7, #4]
 800c580:	f000 fc65 	bl	800ce4e <USBH_SetFeature>
 800c584:	4603      	mov	r3, r0
 800c586:	2b00      	cmp	r3, #0
 800c588:	f040 8124 	bne.w	800c7d4 <USBH_Process+0x460>
        {
          USBH_UsrLog("Device remote wakeup enabled");
 800c58c:	4849      	ldr	r0, [pc, #292]	; (800c6b4 <USBH_Process+0x340>)
 800c58e:	f002 f909 	bl	800e7a4 <iprintf>
 800c592:	200a      	movs	r0, #10
 800c594:	f002 f91e 	bl	800e7d4 <putchar>
          phost->gState = HOST_CHECK_CLASS;
 800c598:	687b      	ldr	r3, [r7, #4]
 800c59a:	220a      	movs	r2, #10
 800c59c:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800c59e:	e119      	b.n	800c7d4 <USBH_Process+0x460>
        phost->gState = HOST_CHECK_CLASS;
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	220a      	movs	r2, #10
 800c5a4:	701a      	strb	r2, [r3, #0]
      break;
 800c5a6:	e115      	b.n	800c7d4 <USBH_Process+0x460>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c5ae:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 800c5b2:	2b00      	cmp	r3, #0
 800c5b4:	d106      	bne.n	800c5c4 <USBH_Process+0x250>
      {
        USBH_UsrLog("No Class has been registered.");
 800c5b6:	4840      	ldr	r0, [pc, #256]	; (800c6b8 <USBH_Process+0x344>)
 800c5b8:	f002 f8f4 	bl	800e7a4 <iprintf>
 800c5bc:	200a      	movs	r0, #10
 800c5be:	f002 f909 	bl	800e7d4 <putchar>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800c5c2:	e10c      	b.n	800c7de <USBH_Process+0x46a>
        phost->pActiveClass = NULL;
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c5ca:	461a      	mov	r2, r3
 800c5cc:	2300      	movs	r3, #0
 800c5ce:	f8c2 311c 	str.w	r3, [r2, #284]	; 0x11c
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800c5d2:	2300      	movs	r3, #0
 800c5d4:	73fb      	strb	r3, [r7, #15]
 800c5d6:	e019      	b.n	800c60c <USBH_Process+0x298>
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800c5d8:	7bfa      	ldrb	r2, [r7, #15]
 800c5da:	687b      	ldr	r3, [r7, #4]
 800c5dc:	f502 6287 	add.w	r2, r2, #1080	; 0x438
 800c5e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c5e4:	791a      	ldrb	r2, [r3, #4]
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	f893 3945 	ldrb.w	r3, [r3, #2373]	; 0x945
 800c5ec:	429a      	cmp	r2, r3
 800c5ee:	d10a      	bne.n	800c606 <USBH_Process+0x292>
            phost->pActiveClass = phost->pClass[idx];
 800c5f0:	7bfa      	ldrb	r2, [r7, #15]
 800c5f2:	687b      	ldr	r3, [r7, #4]
 800c5f4:	f502 6287 	add.w	r2, r2, #1080	; 0x438
 800c5f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c5fc:	687a      	ldr	r2, [r7, #4]
 800c5fe:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800c602:	f8c2 311c 	str.w	r3, [r2, #284]	; 0x11c
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800c606:	7bfb      	ldrb	r3, [r7, #15]
 800c608:	3301      	adds	r3, #1
 800c60a:	73fb      	strb	r3, [r7, #15]
 800c60c:	7bfb      	ldrb	r3, [r7, #15]
 800c60e:	2b0e      	cmp	r3, #14
 800c610:	d9e2      	bls.n	800c5d8 <USBH_Process+0x264>
        if (phost->pActiveClass != NULL)
 800c612:	687b      	ldr	r3, [r7, #4]
 800c614:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c618:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 800c61c:	2b00      	cmp	r3, #0
 800c61e:	d034      	beq.n	800c68a <USBH_Process+0x316>
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c626:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 800c62a:	689b      	ldr	r3, [r3, #8]
 800c62c:	6878      	ldr	r0, [r7, #4]
 800c62e:	4798      	blx	r3
 800c630:	4603      	mov	r3, r0
 800c632:	2b00      	cmp	r3, #0
 800c634:	d118      	bne.n	800c668 <USBH_Process+0x2f4>
            phost->gState = HOST_CLASS_REQUEST;
 800c636:	687b      	ldr	r3, [r7, #4]
 800c638:	2206      	movs	r2, #6
 800c63a:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c642:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 800c646:	681b      	ldr	r3, [r3, #0]
 800c648:	4619      	mov	r1, r3
 800c64a:	481c      	ldr	r0, [pc, #112]	; (800c6bc <USBH_Process+0x348>)
 800c64c:	f002 f8aa 	bl	800e7a4 <iprintf>
 800c650:	200a      	movs	r0, #10
 800c652:	f002 f8bf 	bl	800e7d4 <putchar>
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c65c:	f8d3 3170 	ldr.w	r3, [r3, #368]	; 0x170
 800c660:	2103      	movs	r1, #3
 800c662:	6878      	ldr	r0, [r7, #4]
 800c664:	4798      	blx	r3
      break;
 800c666:	e0ba      	b.n	800c7de <USBH_Process+0x46a>
            phost->gState = HOST_ABORT_STATE;
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	220d      	movs	r2, #13
 800c66c:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("Device not supporting %s class.", phost->pActiveClass->Name);
 800c66e:	687b      	ldr	r3, [r7, #4]
 800c670:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c674:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 800c678:	681b      	ldr	r3, [r3, #0]
 800c67a:	4619      	mov	r1, r3
 800c67c:	4810      	ldr	r0, [pc, #64]	; (800c6c0 <USBH_Process+0x34c>)
 800c67e:	f002 f891 	bl	800e7a4 <iprintf>
 800c682:	200a      	movs	r0, #10
 800c684:	f002 f8a6 	bl	800e7d4 <putchar>
      break;
 800c688:	e0a9      	b.n	800c7de <USBH_Process+0x46a>
          phost->gState = HOST_ABORT_STATE;
 800c68a:	687b      	ldr	r3, [r7, #4]
 800c68c:	220d      	movs	r2, #13
 800c68e:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog("No registered class for this device.");
 800c690:	480c      	ldr	r0, [pc, #48]	; (800c6c4 <USBH_Process+0x350>)
 800c692:	f002 f887 	bl	800e7a4 <iprintf>
 800c696:	200a      	movs	r0, #10
 800c698:	f002 f89c 	bl	800e7d4 <putchar>
      break;
 800c69c:	e09f      	b.n	800c7de <USBH_Process+0x46a>
 800c69e:	bf00      	nop
 800c6a0:	0800feb4 	.word	0x0800feb4
 800c6a4:	0800fecc 	.word	0x0800fecc
 800c6a8:	0800fee8 	.word	0x0800fee8
 800c6ac:	0800fefc 	.word	0x0800fefc
 800c6b0:	0800ff24 	.word	0x0800ff24
 800c6b4:	0800ff40 	.word	0x0800ff40
 800c6b8:	0800ff60 	.word	0x0800ff60
 800c6bc:	0800ff80 	.word	0x0800ff80
 800c6c0:	0800ff94 	.word	0x0800ff94
 800c6c4:	0800ffb4 	.word	0x0800ffb4

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800c6c8:	687b      	ldr	r3, [r7, #4]
 800c6ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c6ce:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 800c6d2:	2b00      	cmp	r3, #0
 800c6d4:	d011      	beq.n	800c6fa <USBH_Process+0x386>
      {
        status = phost->pActiveClass->Requests(phost);
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c6dc:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 800c6e0:	691b      	ldr	r3, [r3, #16]
 800c6e2:	6878      	ldr	r0, [r7, #4]
 800c6e4:	4798      	blx	r3
 800c6e6:	4603      	mov	r3, r0
 800c6e8:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800c6ea:	7bbb      	ldrb	r3, [r7, #14]
 800c6ec:	b2db      	uxtb	r3, r3
 800c6ee:	2b00      	cmp	r3, #0
 800c6f0:	d172      	bne.n	800c7d8 <USBH_Process+0x464>
        {
          phost->gState = HOST_CLASS;
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	220b      	movs	r2, #11
 800c6f6:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800c6f8:	e06e      	b.n	800c7d8 <USBH_Process+0x464>
        phost->gState = HOST_ABORT_STATE;
 800c6fa:	687b      	ldr	r3, [r7, #4]
 800c6fc:	220d      	movs	r2, #13
 800c6fe:	701a      	strb	r2, [r3, #0]
        USBH_ErrLog("Invalid Class Driver.");
 800c700:	4839      	ldr	r0, [pc, #228]	; (800c7e8 <USBH_Process+0x474>)
 800c702:	f002 f84f 	bl	800e7a4 <iprintf>
 800c706:	4839      	ldr	r0, [pc, #228]	; (800c7ec <USBH_Process+0x478>)
 800c708:	f002 f84c 	bl	800e7a4 <iprintf>
 800c70c:	200a      	movs	r0, #10
 800c70e:	f002 f861 	bl	800e7d4 <putchar>
      break;
 800c712:	e061      	b.n	800c7d8 <USBH_Process+0x464>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c71a:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 800c71e:	2b00      	cmp	r3, #0
 800c720:	d05c      	beq.n	800c7dc <USBH_Process+0x468>
      {
        phost->pActiveClass->BgndProcess(phost);
 800c722:	687b      	ldr	r3, [r7, #4]
 800c724:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c728:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 800c72c:	695b      	ldr	r3, [r3, #20]
 800c72e:	6878      	ldr	r0, [r7, #4]
 800c730:	4798      	blx	r3
      }
      break;
 800c732:	e053      	b.n	800c7dc <USBH_Process+0x468>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	2200      	movs	r2, #0
 800c738:	f883 291f 	strb.w	r2, [r3, #2335]	; 0x91f

      DeInitStateMachine(phost);
 800c73c:	6878      	ldr	r0, [r7, #4]
 800c73e:	f7ff fc8d 	bl	800c05c <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c748:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 800c74c:	2b00      	cmp	r3, #0
 800c74e:	d00e      	beq.n	800c76e <USBH_Process+0x3fa>
      {
        phost->pActiveClass->DeInit(phost);
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c756:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 800c75a:	68db      	ldr	r3, [r3, #12]
 800c75c:	6878      	ldr	r0, [r7, #4]
 800c75e:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800c760:	687b      	ldr	r3, [r7, #4]
 800c762:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c766:	461a      	mov	r2, r3
 800c768:	2300      	movs	r3, #0
 800c76a:	f8c2 311c 	str.w	r3, [r2, #284]	; 0x11c
      }

      if (phost->pUser != NULL)
 800c76e:	687b      	ldr	r3, [r7, #4]
 800c770:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c774:	f8d3 3170 	ldr.w	r3, [r3, #368]	; 0x170
 800c778:	2b00      	cmp	r3, #0
 800c77a:	d007      	beq.n	800c78c <USBH_Process+0x418>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c782:	f8d3 3170 	ldr.w	r3, [r3, #368]	; 0x170
 800c786:	2105      	movs	r1, #5
 800c788:	6878      	ldr	r0, [r7, #4]
 800c78a:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");
 800c78c:	4818      	ldr	r0, [pc, #96]	; (800c7f0 <USBH_Process+0x47c>)
 800c78e:	f002 f809 	bl	800e7a4 <iprintf>
 800c792:	200a      	movs	r0, #10
 800c794:	f002 f81e 	bl	800e7d4 <putchar>

      if (phost->device.is_ReEnumerated == 1U)
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	f893 3920 	ldrb.w	r3, [r3, #2336]	; 0x920
 800c79e:	b2db      	uxtb	r3, r3
 800c7a0:	2b01      	cmp	r3, #1
 800c7a2:	d107      	bne.n	800c7b4 <USBH_Process+0x440>
      {
        phost->device.is_ReEnumerated = 0U;
 800c7a4:	687b      	ldr	r3, [r7, #4]
 800c7a6:	2200      	movs	r2, #0
 800c7a8:	f883 2920 	strb.w	r2, [r3, #2336]	; 0x920

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 800c7ac:	6878      	ldr	r0, [r7, #4]
 800c7ae:	f7ff fdd0 	bl	800c352 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800c7b2:	e014      	b.n	800c7de <USBH_Process+0x46a>
        USBH_LL_Start(phost);
 800c7b4:	6878      	ldr	r0, [r7, #4]
 800c7b6:	f001 fa01 	bl	800dbbc <USBH_LL_Start>
      break;
 800c7ba:	e010      	b.n	800c7de <USBH_Process+0x46a>

    case HOST_ABORT_STATE:
    default :
      break;
 800c7bc:	bf00      	nop
 800c7be:	e00e      	b.n	800c7de <USBH_Process+0x46a>
      break;
 800c7c0:	bf00      	nop
 800c7c2:	e00c      	b.n	800c7de <USBH_Process+0x46a>
      break;
 800c7c4:	bf00      	nop
 800c7c6:	e00a      	b.n	800c7de <USBH_Process+0x46a>
      break;
 800c7c8:	bf00      	nop
 800c7ca:	e008      	b.n	800c7de <USBH_Process+0x46a>
    break;
 800c7cc:	bf00      	nop
 800c7ce:	e006      	b.n	800c7de <USBH_Process+0x46a>
      break;
 800c7d0:	bf00      	nop
 800c7d2:	e004      	b.n	800c7de <USBH_Process+0x46a>
      break;
 800c7d4:	bf00      	nop
 800c7d6:	e002      	b.n	800c7de <USBH_Process+0x46a>
      break;
 800c7d8:	bf00      	nop
 800c7da:	e000      	b.n	800c7de <USBH_Process+0x46a>
      break;
 800c7dc:	bf00      	nop
  }
  return USBH_OK;
 800c7de:	2300      	movs	r3, #0
}
 800c7e0:	4618      	mov	r0, r3
 800c7e2:	3710      	adds	r7, #16
 800c7e4:	46bd      	mov	sp, r7
 800c7e6:	bd80      	pop	{r7, pc}
 800c7e8:	0800fdf4 	.word	0x0800fdf4
 800c7ec:	0800ffdc 	.word	0x0800ffdc
 800c7f0:	0800fff4 	.word	0x0800fff4

0800c7f4 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800c7f4:	b580      	push	{r7, lr}
 800c7f6:	b088      	sub	sp, #32
 800c7f8:	af04      	add	r7, sp, #16
 800c7fa:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800c7fc:	2301      	movs	r3, #1
 800c7fe:	73fb      	strb	r3, [r7, #15]

  switch (phost->EnumState)
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	785b      	ldrb	r3, [r3, #1]
 800c804:	2b07      	cmp	r3, #7
 800c806:	f200 8148 	bhi.w	800ca9a <USBH_HandleEnum+0x2a6>
 800c80a:	a201      	add	r2, pc, #4	; (adr r2, 800c810 <USBH_HandleEnum+0x1c>)
 800c80c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c810:	0800c831 	.word	0x0800c831
 800c814:	0800c8a3 	.word	0x0800c8a3
 800c818:	0800c8e3 	.word	0x0800c8e3
 800c81c:	0800c96d 	.word	0x0800c96d
 800c820:	0800c985 	.word	0x0800c985
 800c824:	0800c9a3 	.word	0x0800c9a3
 800c828:	0800c9f7 	.word	0x0800c9f7
 800c82c:	0800ca4b 	.word	0x0800ca4b
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      if (USBH_Get_DevDesc(phost, 8U) == USBH_OK)
 800c830:	2108      	movs	r1, #8
 800c832:	6878      	ldr	r0, [r7, #4]
 800c834:	f000 f9f1 	bl	800cc1a <USBH_Get_DevDesc>
 800c838:	4603      	mov	r3, r0
 800c83a:	2b00      	cmp	r3, #0
 800c83c:	f040 812f 	bne.w	800ca9e <USBH_HandleEnum+0x2aa>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800c840:	687b      	ldr	r3, [r7, #4]
 800c842:	f893 292b 	ldrb.w	r2, [r3, #2347]	; 0x92b
 800c846:	687b      	ldr	r3, [r7, #4]
 800c848:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800c84a:	687b      	ldr	r3, [r7, #4]
 800c84c:	2201      	movs	r2, #1
 800c84e:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost,
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	7919      	ldrb	r1, [r3, #4]
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	f893 091c 	ldrb.w	r0, [r3, #2332]	; 0x91c
 800c85a:	687b      	ldr	r3, [r7, #4]
 800c85c:	f893 391d 	ldrb.w	r3, [r3, #2333]	; 0x91d
                      phost->Control.pipe_in,
                      0x80U,
                      phost->device.address,
                      phost->device.speed,
                      USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800c860:	687a      	ldr	r2, [r7, #4]
 800c862:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost,
 800c864:	b292      	uxth	r2, r2
 800c866:	9202      	str	r2, [sp, #8]
 800c868:	2200      	movs	r2, #0
 800c86a:	9201      	str	r2, [sp, #4]
 800c86c:	9300      	str	r3, [sp, #0]
 800c86e:	4603      	mov	r3, r0
 800c870:	2280      	movs	r2, #128	; 0x80
 800c872:	6878      	ldr	r0, [r7, #4]
 800c874:	f000 ff90 	bl	800d798 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost,
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	7959      	ldrb	r1, [r3, #5]
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	f893 091c 	ldrb.w	r0, [r3, #2332]	; 0x91c
 800c882:	687b      	ldr	r3, [r7, #4]
 800c884:	f893 391d 	ldrb.w	r3, [r3, #2333]	; 0x91d
                      phost->Control.pipe_out,
                      0x00U,
                      phost->device.address,
                      phost->device.speed,
                      USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800c888:	687a      	ldr	r2, [r7, #4]
 800c88a:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost,
 800c88c:	b292      	uxth	r2, r2
 800c88e:	9202      	str	r2, [sp, #8]
 800c890:	2200      	movs	r2, #0
 800c892:	9201      	str	r2, [sp, #4]
 800c894:	9300      	str	r3, [sp, #0]
 800c896:	4603      	mov	r3, r0
 800c898:	2200      	movs	r2, #0
 800c89a:	6878      	ldr	r0, [r7, #4]
 800c89c:	f000 ff7c 	bl	800d798 <USBH_OpenPipe>
      }
      break;
 800c8a0:	e0fd      	b.n	800ca9e <USBH_HandleEnum+0x2aa>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      if (USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE) == USBH_OK)
 800c8a2:	2112      	movs	r1, #18
 800c8a4:	6878      	ldr	r0, [r7, #4]
 800c8a6:	f000 f9b8 	bl	800cc1a <USBH_Get_DevDesc>
 800c8aa:	4603      	mov	r3, r0
 800c8ac:	2b00      	cmp	r3, #0
 800c8ae:	f040 80f8 	bne.w	800caa2 <USBH_HandleEnum+0x2ae>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
 800c8b2:	687b      	ldr	r3, [r7, #4]
 800c8b4:	f8b3 392e 	ldrh.w	r3, [r3, #2350]	; 0x92e
 800c8b8:	4619      	mov	r1, r3
 800c8ba:	4883      	ldr	r0, [pc, #524]	; (800cac8 <USBH_HandleEnum+0x2d4>)
 800c8bc:	f001 ff72 	bl	800e7a4 <iprintf>
 800c8c0:	200a      	movs	r0, #10
 800c8c2:	f001 ff87 	bl	800e7d4 <putchar>
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);
 800c8c6:	687b      	ldr	r3, [r7, #4]
 800c8c8:	f8b3 392c 	ldrh.w	r3, [r3, #2348]	; 0x92c
 800c8cc:	4619      	mov	r1, r3
 800c8ce:	487f      	ldr	r0, [pc, #508]	; (800cacc <USBH_HandleEnum+0x2d8>)
 800c8d0:	f001 ff68 	bl	800e7a4 <iprintf>
 800c8d4:	200a      	movs	r0, #10
 800c8d6:	f001 ff7d 	bl	800e7d4 <putchar>

        phost->EnumState = ENUM_SET_ADDR;
 800c8da:	687b      	ldr	r3, [r7, #4]
 800c8dc:	2202      	movs	r2, #2
 800c8de:	705a      	strb	r2, [r3, #1]

      }
      break;
 800c8e0:	e0df      	b.n	800caa2 <USBH_HandleEnum+0x2ae>

    case ENUM_SET_ADDR:
      /* set address */
      if (USBH_SetAddress(phost, USBH_DEVICE_ADDRESS) == USBH_OK)
 800c8e2:	2101      	movs	r1, #1
 800c8e4:	6878      	ldr	r0, [r7, #4]
 800c8e6:	f000 fa44 	bl	800cd72 <USBH_SetAddress>
 800c8ea:	4603      	mov	r3, r0
 800c8ec:	2b00      	cmp	r3, #0
 800c8ee:	f040 80da 	bne.w	800caa6 <USBH_HandleEnum+0x2b2>
      {
        USBH_Delay(2U);
 800c8f2:	2002      	movs	r0, #2
 800c8f4:	f001 fb01 	bl	800defa <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800c8f8:	687b      	ldr	r3, [r7, #4]
 800c8fa:	2201      	movs	r2, #1
 800c8fc:	f883 291c 	strb.w	r2, [r3, #2332]	; 0x91c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
 800c900:	687b      	ldr	r3, [r7, #4]
 800c902:	f893 391c 	ldrb.w	r3, [r3, #2332]	; 0x91c
 800c906:	4619      	mov	r1, r3
 800c908:	4871      	ldr	r0, [pc, #452]	; (800cad0 <USBH_HandleEnum+0x2dc>)
 800c90a:	f001 ff4b 	bl	800e7a4 <iprintf>
 800c90e:	200a      	movs	r0, #10
 800c910:	f001 ff60 	bl	800e7d4 <putchar>
        phost->EnumState = ENUM_GET_CFG_DESC;
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	2203      	movs	r2, #3
 800c918:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost,
 800c91a:	687b      	ldr	r3, [r7, #4]
 800c91c:	7919      	ldrb	r1, [r3, #4]
 800c91e:	687b      	ldr	r3, [r7, #4]
 800c920:	f893 091c 	ldrb.w	r0, [r3, #2332]	; 0x91c
 800c924:	687b      	ldr	r3, [r7, #4]
 800c926:	f893 391d 	ldrb.w	r3, [r3, #2333]	; 0x91d
                      phost->Control.pipe_in,
                      0x80U,
                      phost->device.address,
                      phost->device.speed,
                      USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800c92a:	687a      	ldr	r2, [r7, #4]
 800c92c:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost,
 800c92e:	b292      	uxth	r2, r2
 800c930:	9202      	str	r2, [sp, #8]
 800c932:	2200      	movs	r2, #0
 800c934:	9201      	str	r2, [sp, #4]
 800c936:	9300      	str	r3, [sp, #0]
 800c938:	4603      	mov	r3, r0
 800c93a:	2280      	movs	r2, #128	; 0x80
 800c93c:	6878      	ldr	r0, [r7, #4]
 800c93e:	f000 ff2b 	bl	800d798 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost,
 800c942:	687b      	ldr	r3, [r7, #4]
 800c944:	7959      	ldrb	r1, [r3, #5]
 800c946:	687b      	ldr	r3, [r7, #4]
 800c948:	f893 091c 	ldrb.w	r0, [r3, #2332]	; 0x91c
 800c94c:	687b      	ldr	r3, [r7, #4]
 800c94e:	f893 391d 	ldrb.w	r3, [r3, #2333]	; 0x91d
                      phost->Control.pipe_out,
                      0x00U,
                      phost->device.address,
                      phost->device.speed,
                      USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800c952:	687a      	ldr	r2, [r7, #4]
 800c954:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost,
 800c956:	b292      	uxth	r2, r2
 800c958:	9202      	str	r2, [sp, #8]
 800c95a:	2200      	movs	r2, #0
 800c95c:	9201      	str	r2, [sp, #4]
 800c95e:	9300      	str	r3, [sp, #0]
 800c960:	4603      	mov	r3, r0
 800c962:	2200      	movs	r2, #0
 800c964:	6878      	ldr	r0, [r7, #4]
 800c966:	f000 ff17 	bl	800d798 <USBH_OpenPipe>
      }
      break;
 800c96a:	e09c      	b.n	800caa6 <USBH_HandleEnum+0x2b2>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      if (USBH_Get_CfgDesc(phost,
 800c96c:	2109      	movs	r1, #9
 800c96e:	6878      	ldr	r0, [r7, #4]
 800c970:	f000 f97b 	bl	800cc6a <USBH_Get_CfgDesc>
 800c974:	4603      	mov	r3, r0
 800c976:	2b00      	cmp	r3, #0
 800c978:	f040 8097 	bne.w	800caaa <USBH_HandleEnum+0x2b6>
                           USB_CONFIGURATION_DESC_SIZE) == USBH_OK)
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800c97c:	687b      	ldr	r3, [r7, #4]
 800c97e:	2204      	movs	r2, #4
 800c980:	705a      	strb	r2, [r3, #1]
      }
      break;
 800c982:	e092      	b.n	800caaa <USBH_HandleEnum+0x2b6>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      if (USBH_Get_CfgDesc(phost,
 800c984:	687b      	ldr	r3, [r7, #4]
 800c986:	f8b3 3938 	ldrh.w	r3, [r3, #2360]	; 0x938
 800c98a:	4619      	mov	r1, r3
 800c98c:	6878      	ldr	r0, [r7, #4]
 800c98e:	f000 f96c 	bl	800cc6a <USBH_Get_CfgDesc>
 800c992:	4603      	mov	r3, r0
 800c994:	2b00      	cmp	r3, #0
 800c996:	f040 808a 	bne.w	800caae <USBH_HandleEnum+0x2ba>
                           phost->device.CfgDesc.wTotalLength) == USBH_OK)
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800c99a:	687b      	ldr	r3, [r7, #4]
 800c99c:	2205      	movs	r2, #5
 800c99e:	705a      	strb	r2, [r3, #1]
      }
      break;
 800c9a0:	e085      	b.n	800caae <USBH_HandleEnum+0x2ba>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800c9a2:	687b      	ldr	r3, [r7, #4]
 800c9a4:	f893 3932 	ldrb.w	r3, [r3, #2354]	; 0x932
 800c9a8:	2b00      	cmp	r3, #0
 800c9aa:	d01a      	beq.n	800c9e2 <USBH_HandleEnum+0x1ee>
      {
        /* Check that Manufacturer String is available */

        if (USBH_Get_StringDesc(phost,
 800c9ac:	687b      	ldr	r3, [r7, #4]
 800c9ae:	f893 1932 	ldrb.w	r1, [r3, #2354]	; 0x932
                                phost->device.DevDesc.iManufacturer,
                                phost->device.Data,
 800c9b2:	687b      	ldr	r3, [r7, #4]
 800c9b4:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        if (USBH_Get_StringDesc(phost,
 800c9b8:	23ff      	movs	r3, #255	; 0xff
 800c9ba:	6878      	ldr	r0, [r7, #4]
 800c9bc:	f000 f979 	bl	800ccb2 <USBH_Get_StringDesc>
 800c9c0:	4603      	mov	r3, r0
 800c9c2:	2b00      	cmp	r3, #0
 800c9c4:	d175      	bne.n	800cab2 <USBH_HandleEnum+0x2be>
                                0xFFU) == USBH_OK)
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
 800c9c6:	687b      	ldr	r3, [r7, #4]
 800c9c8:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800c9cc:	4619      	mov	r1, r3
 800c9ce:	4841      	ldr	r0, [pc, #260]	; (800cad4 <USBH_HandleEnum+0x2e0>)
 800c9d0:	f001 fee8 	bl	800e7a4 <iprintf>
 800c9d4:	200a      	movs	r0, #10
 800c9d6:	f001 fefd 	bl	800e7d4 <putchar>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800c9da:	687b      	ldr	r3, [r7, #4]
 800c9dc:	2206      	movs	r2, #6
 800c9de:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800c9e0:	e067      	b.n	800cab2 <USBH_HandleEnum+0x2be>
        USBH_UsrLog("Manufacturer : N/A");
 800c9e2:	483d      	ldr	r0, [pc, #244]	; (800cad8 <USBH_HandleEnum+0x2e4>)
 800c9e4:	f001 fede 	bl	800e7a4 <iprintf>
 800c9e8:	200a      	movs	r0, #10
 800c9ea:	f001 fef3 	bl	800e7d4 <putchar>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800c9ee:	687b      	ldr	r3, [r7, #4]
 800c9f0:	2206      	movs	r2, #6
 800c9f2:	705a      	strb	r2, [r3, #1]
      break;
 800c9f4:	e05d      	b.n	800cab2 <USBH_HandleEnum+0x2be>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800c9f6:	687b      	ldr	r3, [r7, #4]
 800c9f8:	f893 3933 	ldrb.w	r3, [r3, #2355]	; 0x933
 800c9fc:	2b00      	cmp	r3, #0
 800c9fe:	d01a      	beq.n	800ca36 <USBH_HandleEnum+0x242>
      {
        /* Check that Product string is available */
        if (USBH_Get_StringDesc(phost,
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	f893 1933 	ldrb.w	r1, [r3, #2355]	; 0x933
                                phost->device.DevDesc.iProduct,
                                phost->device.Data,
 800ca06:	687b      	ldr	r3, [r7, #4]
 800ca08:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        if (USBH_Get_StringDesc(phost,
 800ca0c:	23ff      	movs	r3, #255	; 0xff
 800ca0e:	6878      	ldr	r0, [r7, #4]
 800ca10:	f000 f94f 	bl	800ccb2 <USBH_Get_StringDesc>
 800ca14:	4603      	mov	r3, r0
 800ca16:	2b00      	cmp	r3, #0
 800ca18:	d14d      	bne.n	800cab6 <USBH_HandleEnum+0x2c2>
                                0xFFU) == USBH_OK)
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800ca20:	4619      	mov	r1, r3
 800ca22:	482e      	ldr	r0, [pc, #184]	; (800cadc <USBH_HandleEnum+0x2e8>)
 800ca24:	f001 febe 	bl	800e7a4 <iprintf>
 800ca28:	200a      	movs	r0, #10
 800ca2a:	f001 fed3 	bl	800e7d4 <putchar>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800ca2e:	687b      	ldr	r3, [r7, #4]
 800ca30:	2207      	movs	r2, #7
 800ca32:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800ca34:	e03f      	b.n	800cab6 <USBH_HandleEnum+0x2c2>
        USBH_UsrLog("Product : N/A");
 800ca36:	482a      	ldr	r0, [pc, #168]	; (800cae0 <USBH_HandleEnum+0x2ec>)
 800ca38:	f001 feb4 	bl	800e7a4 <iprintf>
 800ca3c:	200a      	movs	r0, #10
 800ca3e:	f001 fec9 	bl	800e7d4 <putchar>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800ca42:	687b      	ldr	r3, [r7, #4]
 800ca44:	2207      	movs	r2, #7
 800ca46:	705a      	strb	r2, [r3, #1]
      break;
 800ca48:	e035      	b.n	800cab6 <USBH_HandleEnum+0x2c2>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800ca4a:	687b      	ldr	r3, [r7, #4]
 800ca4c:	f893 3934 	ldrb.w	r3, [r3, #2356]	; 0x934
 800ca50:	2b00      	cmp	r3, #0
 800ca52:	d019      	beq.n	800ca88 <USBH_HandleEnum+0x294>
      {
        /* Check that Serial number string is available */
        if (USBH_Get_StringDesc(phost,
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	f893 1934 	ldrb.w	r1, [r3, #2356]	; 0x934
                                phost->device.DevDesc.iSerialNumber,
                                phost->device.Data,
 800ca5a:	687b      	ldr	r3, [r7, #4]
 800ca5c:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        if (USBH_Get_StringDesc(phost,
 800ca60:	23ff      	movs	r3, #255	; 0xff
 800ca62:	6878      	ldr	r0, [r7, #4]
 800ca64:	f000 f925 	bl	800ccb2 <USBH_Get_StringDesc>
 800ca68:	4603      	mov	r3, r0
 800ca6a:	2b00      	cmp	r3, #0
 800ca6c:	d125      	bne.n	800caba <USBH_HandleEnum+0x2c6>
                                0xFFU) == USBH_OK)
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
 800ca6e:	687b      	ldr	r3, [r7, #4]
 800ca70:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800ca74:	4619      	mov	r1, r3
 800ca76:	481b      	ldr	r0, [pc, #108]	; (800cae4 <USBH_HandleEnum+0x2f0>)
 800ca78:	f001 fe94 	bl	800e7a4 <iprintf>
 800ca7c:	200a      	movs	r0, #10
 800ca7e:	f001 fea9 	bl	800e7d4 <putchar>
          Status = USBH_OK;
 800ca82:	2300      	movs	r3, #0
 800ca84:	73fb      	strb	r3, [r7, #15]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800ca86:	e018      	b.n	800caba <USBH_HandleEnum+0x2c6>
        USBH_UsrLog("Serial Number : N/A");
 800ca88:	4817      	ldr	r0, [pc, #92]	; (800cae8 <USBH_HandleEnum+0x2f4>)
 800ca8a:	f001 fe8b 	bl	800e7a4 <iprintf>
 800ca8e:	200a      	movs	r0, #10
 800ca90:	f001 fea0 	bl	800e7d4 <putchar>
        Status = USBH_OK;
 800ca94:	2300      	movs	r3, #0
 800ca96:	73fb      	strb	r3, [r7, #15]
      break;
 800ca98:	e00f      	b.n	800caba <USBH_HandleEnum+0x2c6>

    default:
      break;
 800ca9a:	bf00      	nop
 800ca9c:	e00e      	b.n	800cabc <USBH_HandleEnum+0x2c8>
      break;
 800ca9e:	bf00      	nop
 800caa0:	e00c      	b.n	800cabc <USBH_HandleEnum+0x2c8>
      break;
 800caa2:	bf00      	nop
 800caa4:	e00a      	b.n	800cabc <USBH_HandleEnum+0x2c8>
      break;
 800caa6:	bf00      	nop
 800caa8:	e008      	b.n	800cabc <USBH_HandleEnum+0x2c8>
      break;
 800caaa:	bf00      	nop
 800caac:	e006      	b.n	800cabc <USBH_HandleEnum+0x2c8>
      break;
 800caae:	bf00      	nop
 800cab0:	e004      	b.n	800cabc <USBH_HandleEnum+0x2c8>
      break;
 800cab2:	bf00      	nop
 800cab4:	e002      	b.n	800cabc <USBH_HandleEnum+0x2c8>
      break;
 800cab6:	bf00      	nop
 800cab8:	e000      	b.n	800cabc <USBH_HandleEnum+0x2c8>
      break;
 800caba:	bf00      	nop
  }
  return Status;
 800cabc:	7bfb      	ldrb	r3, [r7, #15]
}
 800cabe:	4618      	mov	r0, r3
 800cac0:	3710      	adds	r7, #16
 800cac2:	46bd      	mov	sp, r7
 800cac4:	bd80      	pop	{r7, pc}
 800cac6:	bf00      	nop
 800cac8:	0801000c 	.word	0x0801000c
 800cacc:	08010018 	.word	0x08010018
 800cad0:	08010024 	.word	0x08010024
 800cad4:	0801003c 	.word	0x0801003c
 800cad8:	08010050 	.word	0x08010050
 800cadc:	08010064 	.word	0x08010064
 800cae0:	08010074 	.word	0x08010074
 800cae4:	08010084 	.word	0x08010084
 800cae8:	08010098 	.word	0x08010098

0800caec <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800caec:	b480      	push	{r7}
 800caee:	b083      	sub	sp, #12
 800caf0:	af00      	add	r7, sp, #0
 800caf2:	6078      	str	r0, [r7, #4]
 800caf4:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800caf6:	687b      	ldr	r3, [r7, #4]
 800caf8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cafc:	461a      	mov	r2, r3
 800cafe:	683b      	ldr	r3, [r7, #0]
 800cb00:	f8c2 3164 	str.w	r3, [r2, #356]	; 0x164
}
 800cb04:	bf00      	nop
 800cb06:	370c      	adds	r7, #12
 800cb08:	46bd      	mov	sp, r7
 800cb0a:	bc80      	pop	{r7}
 800cb0c:	4770      	bx	lr

0800cb0e <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800cb0e:	b580      	push	{r7, lr}
 800cb10:	b082      	sub	sp, #8
 800cb12:	af00      	add	r7, sp, #0
 800cb14:	6078      	str	r0, [r7, #4]
  phost->Timer ++;
 800cb16:	687b      	ldr	r3, [r7, #4]
 800cb18:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cb1c:	f8d3 3164 	ldr.w	r3, [r3, #356]	; 0x164
 800cb20:	3301      	adds	r3, #1
 800cb22:	687a      	ldr	r2, [r7, #4]
 800cb24:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800cb28:	f8c2 3164 	str.w	r3, [r2, #356]	; 0x164
  USBH_HandleSof(phost);
 800cb2c:	6878      	ldr	r0, [r7, #4]
 800cb2e:	f000 f804 	bl	800cb3a <USBH_HandleSof>
}
 800cb32:	bf00      	nop
 800cb34:	3708      	adds	r7, #8
 800cb36:	46bd      	mov	sp, r7
 800cb38:	bd80      	pop	{r7, pc}

0800cb3a <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800cb3a:	b580      	push	{r7, lr}
 800cb3c:	b082      	sub	sp, #8
 800cb3e:	af00      	add	r7, sp, #0
 800cb40:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800cb42:	687b      	ldr	r3, [r7, #4]
 800cb44:	781b      	ldrb	r3, [r3, #0]
 800cb46:	b2db      	uxtb	r3, r3
 800cb48:	2b0b      	cmp	r3, #11
 800cb4a:	d10e      	bne.n	800cb6a <USBH_HandleSof+0x30>
 800cb4c:	687b      	ldr	r3, [r7, #4]
 800cb4e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cb52:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 800cb56:	2b00      	cmp	r3, #0
 800cb58:	d007      	beq.n	800cb6a <USBH_HandleSof+0x30>
  {
    phost->pActiveClass->SOFProcess(phost);
 800cb5a:	687b      	ldr	r3, [r7, #4]
 800cb5c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cb60:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 800cb64:	699b      	ldr	r3, [r3, #24]
 800cb66:	6878      	ldr	r0, [r7, #4]
 800cb68:	4798      	blx	r3
  }
}
 800cb6a:	bf00      	nop
 800cb6c:	3708      	adds	r7, #8
 800cb6e:	46bd      	mov	sp, r7
 800cb70:	bd80      	pop	{r7, pc}

0800cb72 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800cb72:	b480      	push	{r7}
 800cb74:	b083      	sub	sp, #12
 800cb76:	af00      	add	r7, sp, #0
 800cb78:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800cb7a:	687b      	ldr	r3, [r7, #4]
 800cb7c:	2201      	movs	r2, #1
 800cb7e:	f883 2921 	strb.w	r2, [r3, #2337]	; 0x921
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 800cb82:	bf00      	nop
}
 800cb84:	370c      	adds	r7, #12
 800cb86:	46bd      	mov	sp, r7
 800cb88:	bc80      	pop	{r7}
 800cb8a:	4770      	bx	lr

0800cb8c <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800cb8c:	b480      	push	{r7}
 800cb8e:	b083      	sub	sp, #12
 800cb90:	af00      	add	r7, sp, #0
 800cb92:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800cb94:	687b      	ldr	r3, [r7, #4]
 800cb96:	2200      	movs	r2, #0
 800cb98:	f883 2921 	strb.w	r2, [r3, #2337]	; 0x921

  return;
 800cb9c:	bf00      	nop
}
 800cb9e:	370c      	adds	r7, #12
 800cba0:	46bd      	mov	sp, r7
 800cba2:	bc80      	pop	{r7}
 800cba4:	4770      	bx	lr

0800cba6 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800cba6:	b480      	push	{r7}
 800cba8:	b083      	sub	sp, #12
 800cbaa:	af00      	add	r7, sp, #0
 800cbac:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800cbae:	687b      	ldr	r3, [r7, #4]
 800cbb0:	2201      	movs	r2, #1
 800cbb2:	f883 291e 	strb.w	r2, [r3, #2334]	; 0x91e
  phost->device.is_disconnected = 0U;
 800cbb6:	687b      	ldr	r3, [r7, #4]
 800cbb8:	2200      	movs	r2, #0
 800cbba:	f883 291f 	strb.w	r2, [r3, #2335]	; 0x91f
  phost->device.is_ReEnumerated = 0U;
 800cbbe:	687b      	ldr	r3, [r7, #4]
 800cbc0:	2200      	movs	r2, #0
 800cbc2:	f883 2920 	strb.w	r2, [r3, #2336]	; 0x920
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800cbc6:	2300      	movs	r3, #0
}
 800cbc8:	4618      	mov	r0, r3
 800cbca:	370c      	adds	r7, #12
 800cbcc:	46bd      	mov	sp, r7
 800cbce:	bc80      	pop	{r7}
 800cbd0:	4770      	bx	lr

0800cbd2 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800cbd2:	b580      	push	{r7, lr}
 800cbd4:	b082      	sub	sp, #8
 800cbd6:	af00      	add	r7, sp, #0
 800cbd8:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800cbda:	687b      	ldr	r3, [r7, #4]
 800cbdc:	2201      	movs	r2, #1
 800cbde:	f883 291f 	strb.w	r2, [r3, #2335]	; 0x91f
  phost->device.is_connected = 0U;
 800cbe2:	687b      	ldr	r3, [r7, #4]
 800cbe4:	2200      	movs	r2, #0
 800cbe6:	f883 291e 	strb.w	r2, [r3, #2334]	; 0x91e
  phost->device.PortEnabled = 0U;
 800cbea:	687b      	ldr	r3, [r7, #4]
 800cbec:	2200      	movs	r2, #0
 800cbee:	f883 2921 	strb.w	r2, [r3, #2337]	; 0x921

  /* Stop Host */
  USBH_LL_Stop(phost);
 800cbf2:	6878      	ldr	r0, [r7, #4]
 800cbf4:	f000 ffff 	bl	800dbf6 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	791b      	ldrb	r3, [r3, #4]
 800cbfc:	4619      	mov	r1, r3
 800cbfe:	6878      	ldr	r0, [r7, #4]
 800cc00:	f000 fe1b 	bl	800d83a <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 800cc04:	687b      	ldr	r3, [r7, #4]
 800cc06:	795b      	ldrb	r3, [r3, #5]
 800cc08:	4619      	mov	r1, r3
 800cc0a:	6878      	ldr	r0, [r7, #4]
 800cc0c:	f000 fe15 	bl	800d83a <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800cc10:	2300      	movs	r3, #0
}
 800cc12:	4618      	mov	r0, r3
 800cc14:	3708      	adds	r7, #8
 800cc16:	46bd      	mov	sp, r7
 800cc18:	bd80      	pop	{r7, pc}

0800cc1a <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800cc1a:	b580      	push	{r7, lr}
 800cc1c:	b086      	sub	sp, #24
 800cc1e:	af02      	add	r7, sp, #8
 800cc20:	6078      	str	r0, [r7, #4]
 800cc22:	460b      	mov	r3, r1
 800cc24:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 800cc26:	687b      	ldr	r3, [r7, #4]
 800cc28:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800cc2c:	78fb      	ldrb	r3, [r7, #3]
 800cc2e:	b29b      	uxth	r3, r3
 800cc30:	9300      	str	r3, [sp, #0]
 800cc32:	4613      	mov	r3, r2
 800cc34:	f44f 7280 	mov.w	r2, #256	; 0x100
 800cc38:	2100      	movs	r1, #0
 800cc3a:	6878      	ldr	r0, [r7, #4]
 800cc3c:	f000 f864 	bl	800cd08 <USBH_GetDescriptor>
 800cc40:	4603      	mov	r3, r0
 800cc42:	73fb      	strb	r3, [r7, #15]
 800cc44:	7bfb      	ldrb	r3, [r7, #15]
 800cc46:	2b00      	cmp	r3, #0
 800cc48:	d10a      	bne.n	800cc60 <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 800cc4a:	687b      	ldr	r3, [r7, #4]
 800cc4c:	f603 1024 	addw	r0, r3, #2340	; 0x924
 800cc50:	687b      	ldr	r3, [r7, #4]
 800cc52:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800cc56:	78fa      	ldrb	r2, [r7, #3]
 800cc58:	b292      	uxth	r2, r2
 800cc5a:	4619      	mov	r1, r3
 800cc5c:	f000 f93f 	bl	800cede <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800cc60:	7bfb      	ldrb	r3, [r7, #15]
}
 800cc62:	4618      	mov	r0, r3
 800cc64:	3710      	adds	r7, #16
 800cc66:	46bd      	mov	sp, r7
 800cc68:	bd80      	pop	{r7, pc}

0800cc6a <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 800cc6a:	b580      	push	{r7, lr}
 800cc6c:	b086      	sub	sp, #24
 800cc6e:	af02      	add	r7, sp, #8
 800cc70:	6078      	str	r0, [r7, #4]
 800cc72:	460b      	mov	r3, r1
 800cc74:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData;

#if (USBH_KEEP_CFG_DESCRIPTOR == 1U)
  pData = phost->device.CfgDesc_Raw;
 800cc76:	687b      	ldr	r3, [r7, #4]
 800cc78:	331c      	adds	r3, #28
 800cc7a:	60fb      	str	r3, [r7, #12]
#else
  pData = phost->device.Data;
#endif
  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800cc7c:	887b      	ldrh	r3, [r7, #2]
 800cc7e:	9300      	str	r3, [sp, #0]
 800cc80:	68fb      	ldr	r3, [r7, #12]
 800cc82:	f44f 7200 	mov.w	r2, #512	; 0x200
 800cc86:	2100      	movs	r1, #0
 800cc88:	6878      	ldr	r0, [r7, #4]
 800cc8a:	f000 f83d 	bl	800cd08 <USBH_GetDescriptor>
 800cc8e:	4603      	mov	r3, r0
 800cc90:	72fb      	strb	r3, [r7, #11]
 800cc92:	7afb      	ldrb	r3, [r7, #11]
 800cc94:	2b00      	cmp	r3, #0
 800cc96:	d107      	bne.n	800cca8 <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 800cc98:	687b      	ldr	r3, [r7, #4]
 800cc9a:	f603 1336 	addw	r3, r3, #2358	; 0x936
 800cc9e:	887a      	ldrh	r2, [r7, #2]
 800cca0:	68f9      	ldr	r1, [r7, #12]
 800cca2:	4618      	mov	r0, r3
 800cca4:	f000 f98a 	bl	800cfbc <USBH_ParseCfgDesc>
  }

  return status;
 800cca8:	7afb      	ldrb	r3, [r7, #11]
}
 800ccaa:	4618      	mov	r0, r3
 800ccac:	3710      	adds	r7, #16
 800ccae:	46bd      	mov	sp, r7
 800ccb0:	bd80      	pop	{r7, pc}

0800ccb2 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 800ccb2:	b580      	push	{r7, lr}
 800ccb4:	b088      	sub	sp, #32
 800ccb6:	af02      	add	r7, sp, #8
 800ccb8:	60f8      	str	r0, [r7, #12]
 800ccba:	607a      	str	r2, [r7, #4]
 800ccbc:	461a      	mov	r2, r3
 800ccbe:	460b      	mov	r3, r1
 800ccc0:	72fb      	strb	r3, [r7, #11]
 800ccc2:	4613      	mov	r3, r2
 800ccc4:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 800ccc6:	7afb      	ldrb	r3, [r7, #11]
 800ccc8:	b29b      	uxth	r3, r3
 800ccca:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800ccce:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 800ccd0:	68fb      	ldr	r3, [r7, #12]
 800ccd2:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800ccd6:	893b      	ldrh	r3, [r7, #8]
 800ccd8:	9300      	str	r3, [sp, #0]
 800ccda:	460b      	mov	r3, r1
 800ccdc:	2100      	movs	r1, #0
 800ccde:	68f8      	ldr	r0, [r7, #12]
 800cce0:	f000 f812 	bl	800cd08 <USBH_GetDescriptor>
 800cce4:	4603      	mov	r3, r0
 800cce6:	75fb      	strb	r3, [r7, #23]
 800cce8:	7dfb      	ldrb	r3, [r7, #23]
 800ccea:	2b00      	cmp	r3, #0
 800ccec:	d107      	bne.n	800ccfe <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800ccee:	68fb      	ldr	r3, [r7, #12]
 800ccf0:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800ccf4:	893a      	ldrh	r2, [r7, #8]
 800ccf6:	6879      	ldr	r1, [r7, #4]
 800ccf8:	4618      	mov	r0, r3
 800ccfa:	f000 fa5d 	bl	800d1b8 <USBH_ParseStringDesc>
  }

  return status;
 800ccfe:	7dfb      	ldrb	r3, [r7, #23]
}
 800cd00:	4618      	mov	r0, r3
 800cd02:	3718      	adds	r7, #24
 800cd04:	46bd      	mov	sp, r7
 800cd06:	bd80      	pop	{r7, pc}

0800cd08 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800cd08:	b580      	push	{r7, lr}
 800cd0a:	b084      	sub	sp, #16
 800cd0c:	af00      	add	r7, sp, #0
 800cd0e:	60f8      	str	r0, [r7, #12]
 800cd10:	607b      	str	r3, [r7, #4]
 800cd12:	460b      	mov	r3, r1
 800cd14:	72fb      	strb	r3, [r7, #11]
 800cd16:	4613      	mov	r3, r2
 800cd18:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800cd1a:	68fb      	ldr	r3, [r7, #12]
 800cd1c:	789b      	ldrb	r3, [r3, #2]
 800cd1e:	2b01      	cmp	r3, #1
 800cd20:	d11c      	bne.n	800cd5c <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800cd22:	7afb      	ldrb	r3, [r7, #11]
 800cd24:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800cd28:	b2da      	uxtb	r2, r3
 800cd2a:	68fb      	ldr	r3, [r7, #12]
 800cd2c:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800cd2e:	68fb      	ldr	r3, [r7, #12]
 800cd30:	2206      	movs	r2, #6
 800cd32:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800cd34:	68fb      	ldr	r3, [r7, #12]
 800cd36:	893a      	ldrh	r2, [r7, #8]
 800cd38:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800cd3a:	893b      	ldrh	r3, [r7, #8]
 800cd3c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800cd40:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800cd44:	d104      	bne.n	800cd50 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800cd46:	68fb      	ldr	r3, [r7, #12]
 800cd48:	f240 4209 	movw	r2, #1033	; 0x409
 800cd4c:	829a      	strh	r2, [r3, #20]
 800cd4e:	e002      	b.n	800cd56 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800cd50:	68fb      	ldr	r3, [r7, #12]
 800cd52:	2200      	movs	r2, #0
 800cd54:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800cd56:	68fb      	ldr	r3, [r7, #12]
 800cd58:	8b3a      	ldrh	r2, [r7, #24]
 800cd5a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800cd5c:	8b3b      	ldrh	r3, [r7, #24]
 800cd5e:	461a      	mov	r2, r3
 800cd60:	6879      	ldr	r1, [r7, #4]
 800cd62:	68f8      	ldr	r0, [r7, #12]
 800cd64:	f000 fa74 	bl	800d250 <USBH_CtlReq>
 800cd68:	4603      	mov	r3, r0
}
 800cd6a:	4618      	mov	r0, r3
 800cd6c:	3710      	adds	r7, #16
 800cd6e:	46bd      	mov	sp, r7
 800cd70:	bd80      	pop	{r7, pc}

0800cd72 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800cd72:	b580      	push	{r7, lr}
 800cd74:	b082      	sub	sp, #8
 800cd76:	af00      	add	r7, sp, #0
 800cd78:	6078      	str	r0, [r7, #4]
 800cd7a:	460b      	mov	r3, r1
 800cd7c:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800cd7e:	687b      	ldr	r3, [r7, #4]
 800cd80:	789b      	ldrb	r3, [r3, #2]
 800cd82:	2b01      	cmp	r3, #1
 800cd84:	d10f      	bne.n	800cda6 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800cd86:	687b      	ldr	r3, [r7, #4]
 800cd88:	2200      	movs	r2, #0
 800cd8a:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800cd8c:	687b      	ldr	r3, [r7, #4]
 800cd8e:	2205      	movs	r2, #5
 800cd90:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800cd92:	78fb      	ldrb	r3, [r7, #3]
 800cd94:	b29a      	uxth	r2, r3
 800cd96:	687b      	ldr	r3, [r7, #4]
 800cd98:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800cd9a:	687b      	ldr	r3, [r7, #4]
 800cd9c:	2200      	movs	r2, #0
 800cd9e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800cda0:	687b      	ldr	r3, [r7, #4]
 800cda2:	2200      	movs	r2, #0
 800cda4:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800cda6:	2200      	movs	r2, #0
 800cda8:	2100      	movs	r1, #0
 800cdaa:	6878      	ldr	r0, [r7, #4]
 800cdac:	f000 fa50 	bl	800d250 <USBH_CtlReq>
 800cdb0:	4603      	mov	r3, r0
}
 800cdb2:	4618      	mov	r0, r3
 800cdb4:	3708      	adds	r7, #8
 800cdb6:	46bd      	mov	sp, r7
 800cdb8:	bd80      	pop	{r7, pc}

0800cdba <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800cdba:	b580      	push	{r7, lr}
 800cdbc:	b082      	sub	sp, #8
 800cdbe:	af00      	add	r7, sp, #0
 800cdc0:	6078      	str	r0, [r7, #4]
 800cdc2:	460b      	mov	r3, r1
 800cdc4:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800cdc6:	687b      	ldr	r3, [r7, #4]
 800cdc8:	789b      	ldrb	r3, [r3, #2]
 800cdca:	2b01      	cmp	r3, #1
 800cdcc:	d10e      	bne.n	800cdec <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800cdce:	687b      	ldr	r3, [r7, #4]
 800cdd0:	2200      	movs	r2, #0
 800cdd2:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800cdd4:	687b      	ldr	r3, [r7, #4]
 800cdd6:	2209      	movs	r2, #9
 800cdd8:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800cdda:	687b      	ldr	r3, [r7, #4]
 800cddc:	887a      	ldrh	r2, [r7, #2]
 800cdde:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800cde0:	687b      	ldr	r3, [r7, #4]
 800cde2:	2200      	movs	r2, #0
 800cde4:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800cde6:	687b      	ldr	r3, [r7, #4]
 800cde8:	2200      	movs	r2, #0
 800cdea:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800cdec:	2200      	movs	r2, #0
 800cdee:	2100      	movs	r1, #0
 800cdf0:	6878      	ldr	r0, [r7, #4]
 800cdf2:	f000 fa2d 	bl	800d250 <USBH_CtlReq>
 800cdf6:	4603      	mov	r3, r0
}
 800cdf8:	4618      	mov	r0, r3
 800cdfa:	3708      	adds	r7, #8
 800cdfc:	46bd      	mov	sp, r7
 800cdfe:	bd80      	pop	{r7, pc}

0800ce00 <USBH_SetInterface>:
  * @param  altSetting: Interface value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetInterface(USBH_HandleTypeDef *phost, uint8_t ep_num,
                                     uint8_t altSetting)
{
 800ce00:	b580      	push	{r7, lr}
 800ce02:	b082      	sub	sp, #8
 800ce04:	af00      	add	r7, sp, #0
 800ce06:	6078      	str	r0, [r7, #4]
 800ce08:	460b      	mov	r3, r1
 800ce0a:	70fb      	strb	r3, [r7, #3]
 800ce0c:	4613      	mov	r3, r2
 800ce0e:	70bb      	strb	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800ce10:	687b      	ldr	r3, [r7, #4]
 800ce12:	789b      	ldrb	r3, [r3, #2]
 800ce14:	2b01      	cmp	r3, #1
 800ce16:	d110      	bne.n	800ce3a <USBH_SetInterface+0x3a>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_INTERFACE
 800ce18:	687b      	ldr	r3, [r7, #4]
 800ce1a:	2201      	movs	r2, #1
 800ce1c:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_INTERFACE;
 800ce1e:	687b      	ldr	r3, [r7, #4]
 800ce20:	220b      	movs	r2, #11
 800ce22:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = altSetting;
 800ce24:	78bb      	ldrb	r3, [r7, #2]
 800ce26:	b29a      	uxth	r2, r3
 800ce28:	687b      	ldr	r3, [r7, #4]
 800ce2a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800ce2c:	78fb      	ldrb	r3, [r7, #3]
 800ce2e:	b29a      	uxth	r2, r3
 800ce30:	687b      	ldr	r3, [r7, #4]
 800ce32:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800ce34:	687b      	ldr	r3, [r7, #4]
 800ce36:	2200      	movs	r2, #0
 800ce38:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800ce3a:	2200      	movs	r2, #0
 800ce3c:	2100      	movs	r1, #0
 800ce3e:	6878      	ldr	r0, [r7, #4]
 800ce40:	f000 fa06 	bl	800d250 <USBH_CtlReq>
 800ce44:	4603      	mov	r3, r0
}
 800ce46:	4618      	mov	r0, r3
 800ce48:	3708      	adds	r7, #8
 800ce4a:	46bd      	mov	sp, r7
 800ce4c:	bd80      	pop	{r7, pc}

0800ce4e <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800ce4e:	b580      	push	{r7, lr}
 800ce50:	b082      	sub	sp, #8
 800ce52:	af00      	add	r7, sp, #0
 800ce54:	6078      	str	r0, [r7, #4]
 800ce56:	460b      	mov	r3, r1
 800ce58:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800ce5a:	687b      	ldr	r3, [r7, #4]
 800ce5c:	789b      	ldrb	r3, [r3, #2]
 800ce5e:	2b01      	cmp	r3, #1
 800ce60:	d10f      	bne.n	800ce82 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800ce62:	687b      	ldr	r3, [r7, #4]
 800ce64:	2200      	movs	r2, #0
 800ce66:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800ce68:	687b      	ldr	r3, [r7, #4]
 800ce6a:	2203      	movs	r2, #3
 800ce6c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800ce6e:	78fb      	ldrb	r3, [r7, #3]
 800ce70:	b29a      	uxth	r2, r3
 800ce72:	687b      	ldr	r3, [r7, #4]
 800ce74:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800ce76:	687b      	ldr	r3, [r7, #4]
 800ce78:	2200      	movs	r2, #0
 800ce7a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800ce7c:	687b      	ldr	r3, [r7, #4]
 800ce7e:	2200      	movs	r2, #0
 800ce80:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800ce82:	2200      	movs	r2, #0
 800ce84:	2100      	movs	r1, #0
 800ce86:	6878      	ldr	r0, [r7, #4]
 800ce88:	f000 f9e2 	bl	800d250 <USBH_CtlReq>
 800ce8c:	4603      	mov	r3, r0
}
 800ce8e:	4618      	mov	r0, r3
 800ce90:	3708      	adds	r7, #8
 800ce92:	46bd      	mov	sp, r7
 800ce94:	bd80      	pop	{r7, pc}

0800ce96 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800ce96:	b580      	push	{r7, lr}
 800ce98:	b082      	sub	sp, #8
 800ce9a:	af00      	add	r7, sp, #0
 800ce9c:	6078      	str	r0, [r7, #4]
 800ce9e:	460b      	mov	r3, r1
 800cea0:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800cea2:	687b      	ldr	r3, [r7, #4]
 800cea4:	789b      	ldrb	r3, [r3, #2]
 800cea6:	2b01      	cmp	r3, #1
 800cea8:	d10f      	bne.n	800ceca <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800ceaa:	687b      	ldr	r3, [r7, #4]
 800ceac:	2202      	movs	r2, #2
 800ceae:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800ceb0:	687b      	ldr	r3, [r7, #4]
 800ceb2:	2201      	movs	r2, #1
 800ceb4:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800ceb6:	687b      	ldr	r3, [r7, #4]
 800ceb8:	2200      	movs	r2, #0
 800ceba:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800cebc:	78fb      	ldrb	r3, [r7, #3]
 800cebe:	b29a      	uxth	r2, r3
 800cec0:	687b      	ldr	r3, [r7, #4]
 800cec2:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800cec4:	687b      	ldr	r3, [r7, #4]
 800cec6:	2200      	movs	r2, #0
 800cec8:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 800ceca:	2200      	movs	r2, #0
 800cecc:	2100      	movs	r1, #0
 800cece:	6878      	ldr	r0, [r7, #4]
 800ced0:	f000 f9be 	bl	800d250 <USBH_CtlReq>
 800ced4:	4603      	mov	r3, r0
}
 800ced6:	4618      	mov	r0, r3
 800ced8:	3708      	adds	r7, #8
 800ceda:	46bd      	mov	sp, r7
 800cedc:	bd80      	pop	{r7, pc}

0800cede <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800cede:	b480      	push	{r7}
 800cee0:	b085      	sub	sp, #20
 800cee2:	af00      	add	r7, sp, #0
 800cee4:	60f8      	str	r0, [r7, #12]
 800cee6:	60b9      	str	r1, [r7, #8]
 800cee8:	4613      	mov	r3, r2
 800ceea:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800ceec:	68bb      	ldr	r3, [r7, #8]
 800ceee:	781a      	ldrb	r2, [r3, #0]
 800cef0:	68fb      	ldr	r3, [r7, #12]
 800cef2:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800cef4:	68bb      	ldr	r3, [r7, #8]
 800cef6:	785a      	ldrb	r2, [r3, #1]
 800cef8:	68fb      	ldr	r3, [r7, #12]
 800cefa:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800cefc:	68bb      	ldr	r3, [r7, #8]
 800cefe:	3302      	adds	r3, #2
 800cf00:	781b      	ldrb	r3, [r3, #0]
 800cf02:	b29a      	uxth	r2, r3
 800cf04:	68bb      	ldr	r3, [r7, #8]
 800cf06:	3303      	adds	r3, #3
 800cf08:	781b      	ldrb	r3, [r3, #0]
 800cf0a:	b29b      	uxth	r3, r3
 800cf0c:	021b      	lsls	r3, r3, #8
 800cf0e:	b29b      	uxth	r3, r3
 800cf10:	4313      	orrs	r3, r2
 800cf12:	b29a      	uxth	r2, r3
 800cf14:	68fb      	ldr	r3, [r7, #12]
 800cf16:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800cf18:	68bb      	ldr	r3, [r7, #8]
 800cf1a:	791a      	ldrb	r2, [r3, #4]
 800cf1c:	68fb      	ldr	r3, [r7, #12]
 800cf1e:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 800cf20:	68bb      	ldr	r3, [r7, #8]
 800cf22:	795a      	ldrb	r2, [r3, #5]
 800cf24:	68fb      	ldr	r3, [r7, #12]
 800cf26:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800cf28:	68bb      	ldr	r3, [r7, #8]
 800cf2a:	799a      	ldrb	r2, [r3, #6]
 800cf2c:	68fb      	ldr	r3, [r7, #12]
 800cf2e:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800cf30:	68bb      	ldr	r3, [r7, #8]
 800cf32:	79da      	ldrb	r2, [r3, #7]
 800cf34:	68fb      	ldr	r3, [r7, #12]
 800cf36:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 800cf38:	88fb      	ldrh	r3, [r7, #6]
 800cf3a:	2b08      	cmp	r3, #8
 800cf3c:	d939      	bls.n	800cfb2 <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800cf3e:	68bb      	ldr	r3, [r7, #8]
 800cf40:	3308      	adds	r3, #8
 800cf42:	781b      	ldrb	r3, [r3, #0]
 800cf44:	b29a      	uxth	r2, r3
 800cf46:	68bb      	ldr	r3, [r7, #8]
 800cf48:	3309      	adds	r3, #9
 800cf4a:	781b      	ldrb	r3, [r3, #0]
 800cf4c:	b29b      	uxth	r3, r3
 800cf4e:	021b      	lsls	r3, r3, #8
 800cf50:	b29b      	uxth	r3, r3
 800cf52:	4313      	orrs	r3, r2
 800cf54:	b29a      	uxth	r2, r3
 800cf56:	68fb      	ldr	r3, [r7, #12]
 800cf58:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800cf5a:	68bb      	ldr	r3, [r7, #8]
 800cf5c:	330a      	adds	r3, #10
 800cf5e:	781b      	ldrb	r3, [r3, #0]
 800cf60:	b29a      	uxth	r2, r3
 800cf62:	68bb      	ldr	r3, [r7, #8]
 800cf64:	330b      	adds	r3, #11
 800cf66:	781b      	ldrb	r3, [r3, #0]
 800cf68:	b29b      	uxth	r3, r3
 800cf6a:	021b      	lsls	r3, r3, #8
 800cf6c:	b29b      	uxth	r3, r3
 800cf6e:	4313      	orrs	r3, r2
 800cf70:	b29a      	uxth	r2, r3
 800cf72:	68fb      	ldr	r3, [r7, #12]
 800cf74:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800cf76:	68bb      	ldr	r3, [r7, #8]
 800cf78:	330c      	adds	r3, #12
 800cf7a:	781b      	ldrb	r3, [r3, #0]
 800cf7c:	b29a      	uxth	r2, r3
 800cf7e:	68bb      	ldr	r3, [r7, #8]
 800cf80:	330d      	adds	r3, #13
 800cf82:	781b      	ldrb	r3, [r3, #0]
 800cf84:	b29b      	uxth	r3, r3
 800cf86:	021b      	lsls	r3, r3, #8
 800cf88:	b29b      	uxth	r3, r3
 800cf8a:	4313      	orrs	r3, r2
 800cf8c:	b29a      	uxth	r2, r3
 800cf8e:	68fb      	ldr	r3, [r7, #12]
 800cf90:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800cf92:	68bb      	ldr	r3, [r7, #8]
 800cf94:	7b9a      	ldrb	r2, [r3, #14]
 800cf96:	68fb      	ldr	r3, [r7, #12]
 800cf98:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800cf9a:	68bb      	ldr	r3, [r7, #8]
 800cf9c:	7bda      	ldrb	r2, [r3, #15]
 800cf9e:	68fb      	ldr	r3, [r7, #12]
 800cfa0:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800cfa2:	68bb      	ldr	r3, [r7, #8]
 800cfa4:	7c1a      	ldrb	r2, [r3, #16]
 800cfa6:	68fb      	ldr	r3, [r7, #12]
 800cfa8:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800cfaa:	68bb      	ldr	r3, [r7, #8]
 800cfac:	7c5a      	ldrb	r2, [r3, #17]
 800cfae:	68fb      	ldr	r3, [r7, #12]
 800cfb0:	745a      	strb	r2, [r3, #17]
  }
}
 800cfb2:	bf00      	nop
 800cfb4:	3714      	adds	r7, #20
 800cfb6:	46bd      	mov	sp, r7
 800cfb8:	bc80      	pop	{r7}
 800cfba:	4770      	bx	lr

0800cfbc <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 800cfbc:	b580      	push	{r7, lr}
 800cfbe:	b08a      	sub	sp, #40	; 0x28
 800cfc0:	af00      	add	r7, sp, #0
 800cfc2:	60f8      	str	r0, [r7, #12]
 800cfc4:	60b9      	str	r1, [r7, #8]
 800cfc6:	4613      	mov	r3, r2
 800cfc8:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800cfca:	68bb      	ldr	r3, [r7, #8]
 800cfcc:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800cfce:	2300      	movs	r3, #0
 800cfd0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 800cfd4:	2300      	movs	r3, #0
 800cfd6:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800cfda:	68bb      	ldr	r3, [r7, #8]
 800cfdc:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800cfde:	68bb      	ldr	r3, [r7, #8]
 800cfe0:	781a      	ldrb	r2, [r3, #0]
 800cfe2:	68fb      	ldr	r3, [r7, #12]
 800cfe4:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800cfe6:	68bb      	ldr	r3, [r7, #8]
 800cfe8:	785a      	ldrb	r2, [r3, #1]
 800cfea:	68fb      	ldr	r3, [r7, #12]
 800cfec:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 800cfee:	68bb      	ldr	r3, [r7, #8]
 800cff0:	3302      	adds	r3, #2
 800cff2:	781b      	ldrb	r3, [r3, #0]
 800cff4:	b29a      	uxth	r2, r3
 800cff6:	68bb      	ldr	r3, [r7, #8]
 800cff8:	3303      	adds	r3, #3
 800cffa:	781b      	ldrb	r3, [r3, #0]
 800cffc:	b29b      	uxth	r3, r3
 800cffe:	021b      	lsls	r3, r3, #8
 800d000:	b29b      	uxth	r3, r3
 800d002:	4313      	orrs	r3, r2
 800d004:	b29a      	uxth	r2, r3
 800d006:	68fb      	ldr	r3, [r7, #12]
 800d008:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800d00a:	68bb      	ldr	r3, [r7, #8]
 800d00c:	791a      	ldrb	r2, [r3, #4]
 800d00e:	68fb      	ldr	r3, [r7, #12]
 800d010:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800d012:	68bb      	ldr	r3, [r7, #8]
 800d014:	795a      	ldrb	r2, [r3, #5]
 800d016:	68fb      	ldr	r3, [r7, #12]
 800d018:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800d01a:	68bb      	ldr	r3, [r7, #8]
 800d01c:	799a      	ldrb	r2, [r3, #6]
 800d01e:	68fb      	ldr	r3, [r7, #12]
 800d020:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800d022:	68bb      	ldr	r3, [r7, #8]
 800d024:	79da      	ldrb	r2, [r3, #7]
 800d026:	68fb      	ldr	r3, [r7, #12]
 800d028:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800d02a:	68bb      	ldr	r3, [r7, #8]
 800d02c:	7a1a      	ldrb	r2, [r3, #8]
 800d02e:	68fb      	ldr	r3, [r7, #12]
 800d030:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800d032:	88fb      	ldrh	r3, [r7, #6]
 800d034:	2b09      	cmp	r3, #9
 800d036:	d961      	bls.n	800d0fc <USBH_ParseCfgDesc+0x140>
  {
    ptr = USB_LEN_CFG_DESC;
 800d038:	2309      	movs	r3, #9
 800d03a:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 800d03c:	2300      	movs	r3, #0
 800d03e:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800d040:	e053      	b.n	800d0ea <USBH_ParseCfgDesc+0x12e>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800d042:	f107 0316 	add.w	r3, r7, #22
 800d046:	4619      	mov	r1, r3
 800d048:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d04a:	f000 f8e7 	bl	800d21c <USBH_GetNextDesc>
 800d04e:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 800d050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d052:	785b      	ldrb	r3, [r3, #1]
 800d054:	2b04      	cmp	r3, #4
 800d056:	d148      	bne.n	800d0ea <USBH_ParseCfgDesc+0x12e>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 800d058:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800d05c:	4613      	mov	r3, r2
 800d05e:	019b      	lsls	r3, r3, #6
 800d060:	4413      	add	r3, r2
 800d062:	005b      	lsls	r3, r3, #1
 800d064:	3308      	adds	r3, #8
 800d066:	68fa      	ldr	r2, [r7, #12]
 800d068:	4413      	add	r3, r2
 800d06a:	3302      	adds	r3, #2
 800d06c:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800d06e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d070:	69f8      	ldr	r0, [r7, #28]
 800d072:	f000 f847 	bl	800d104 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800d076:	2300      	movs	r3, #0
 800d078:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 800d07c:	2300      	movs	r3, #0
 800d07e:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800d080:	e023      	b.n	800d0ca <USBH_ParseCfgDesc+0x10e>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800d082:	f107 0316 	add.w	r3, r7, #22
 800d086:	4619      	mov	r1, r3
 800d088:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d08a:	f000 f8c7 	bl	800d21c <USBH_GetNextDesc>
 800d08e:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 800d090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d092:	785b      	ldrb	r3, [r3, #1]
 800d094:	2b05      	cmp	r3, #5
 800d096:	d118      	bne.n	800d0ca <USBH_ParseCfgDesc+0x10e>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800d098:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800d09c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800d0a0:	3301      	adds	r3, #1
 800d0a2:	00d9      	lsls	r1, r3, #3
 800d0a4:	4613      	mov	r3, r2
 800d0a6:	019b      	lsls	r3, r3, #6
 800d0a8:	4413      	add	r3, r2
 800d0aa:	005b      	lsls	r3, r3, #1
 800d0ac:	440b      	add	r3, r1
 800d0ae:	3308      	adds	r3, #8
 800d0b0:	68fa      	ldr	r2, [r7, #12]
 800d0b2:	4413      	add	r3, r2
 800d0b4:	3304      	adds	r3, #4
 800d0b6:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 800d0b8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d0ba:	69b8      	ldr	r0, [r7, #24]
 800d0bc:	f000 f850 	bl	800d160 <USBH_ParseEPDesc>
            ep_ix++;
 800d0c0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800d0c4:	3301      	adds	r3, #1
 800d0c6:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800d0ca:	69fb      	ldr	r3, [r7, #28]
 800d0cc:	791b      	ldrb	r3, [r3, #4]
 800d0ce:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800d0d2:	429a      	cmp	r2, r3
 800d0d4:	d204      	bcs.n	800d0e0 <USBH_ParseCfgDesc+0x124>
 800d0d6:	68fb      	ldr	r3, [r7, #12]
 800d0d8:	885a      	ldrh	r2, [r3, #2]
 800d0da:	8afb      	ldrh	r3, [r7, #22]
 800d0dc:	429a      	cmp	r2, r3
 800d0de:	d8d0      	bhi.n	800d082 <USBH_ParseCfgDesc+0xc6>
          }
        }
        if_ix++;
 800d0e0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800d0e4:	3301      	adds	r3, #1
 800d0e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800d0ea:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800d0ee:	2b0e      	cmp	r3, #14
 800d0f0:	d804      	bhi.n	800d0fc <USBH_ParseCfgDesc+0x140>
 800d0f2:	68fb      	ldr	r3, [r7, #12]
 800d0f4:	885a      	ldrh	r2, [r3, #2]
 800d0f6:	8afb      	ldrh	r3, [r7, #22]
 800d0f8:	429a      	cmp	r2, r3
 800d0fa:	d8a2      	bhi.n	800d042 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 800d0fc:	bf00      	nop
 800d0fe:	3728      	adds	r7, #40	; 0x28
 800d100:	46bd      	mov	sp, r7
 800d102:	bd80      	pop	{r7, pc}

0800d104 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800d104:	b480      	push	{r7}
 800d106:	b083      	sub	sp, #12
 800d108:	af00      	add	r7, sp, #0
 800d10a:	6078      	str	r0, [r7, #4]
 800d10c:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800d10e:	683b      	ldr	r3, [r7, #0]
 800d110:	781a      	ldrb	r2, [r3, #0]
 800d112:	687b      	ldr	r3, [r7, #4]
 800d114:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800d116:	683b      	ldr	r3, [r7, #0]
 800d118:	785a      	ldrb	r2, [r3, #1]
 800d11a:	687b      	ldr	r3, [r7, #4]
 800d11c:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800d11e:	683b      	ldr	r3, [r7, #0]
 800d120:	789a      	ldrb	r2, [r3, #2]
 800d122:	687b      	ldr	r3, [r7, #4]
 800d124:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800d126:	683b      	ldr	r3, [r7, #0]
 800d128:	78da      	ldrb	r2, [r3, #3]
 800d12a:	687b      	ldr	r3, [r7, #4]
 800d12c:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800d12e:	683b      	ldr	r3, [r7, #0]
 800d130:	791a      	ldrb	r2, [r3, #4]
 800d132:	687b      	ldr	r3, [r7, #4]
 800d134:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800d136:	683b      	ldr	r3, [r7, #0]
 800d138:	795a      	ldrb	r2, [r3, #5]
 800d13a:	687b      	ldr	r3, [r7, #4]
 800d13c:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800d13e:	683b      	ldr	r3, [r7, #0]
 800d140:	799a      	ldrb	r2, [r3, #6]
 800d142:	687b      	ldr	r3, [r7, #4]
 800d144:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800d146:	683b      	ldr	r3, [r7, #0]
 800d148:	79da      	ldrb	r2, [r3, #7]
 800d14a:	687b      	ldr	r3, [r7, #4]
 800d14c:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800d14e:	683b      	ldr	r3, [r7, #0]
 800d150:	7a1a      	ldrb	r2, [r3, #8]
 800d152:	687b      	ldr	r3, [r7, #4]
 800d154:	721a      	strb	r2, [r3, #8]
}
 800d156:	bf00      	nop
 800d158:	370c      	adds	r7, #12
 800d15a:	46bd      	mov	sp, r7
 800d15c:	bc80      	pop	{r7}
 800d15e:	4770      	bx	lr

0800d160 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 800d160:	b480      	push	{r7}
 800d162:	b083      	sub	sp, #12
 800d164:	af00      	add	r7, sp, #0
 800d166:	6078      	str	r0, [r7, #4]
 800d168:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800d16a:	683b      	ldr	r3, [r7, #0]
 800d16c:	781a      	ldrb	r2, [r3, #0]
 800d16e:	687b      	ldr	r3, [r7, #4]
 800d170:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800d172:	683b      	ldr	r3, [r7, #0]
 800d174:	785a      	ldrb	r2, [r3, #1]
 800d176:	687b      	ldr	r3, [r7, #4]
 800d178:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800d17a:	683b      	ldr	r3, [r7, #0]
 800d17c:	789a      	ldrb	r2, [r3, #2]
 800d17e:	687b      	ldr	r3, [r7, #4]
 800d180:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800d182:	683b      	ldr	r3, [r7, #0]
 800d184:	78da      	ldrb	r2, [r3, #3]
 800d186:	687b      	ldr	r3, [r7, #4]
 800d188:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800d18a:	683b      	ldr	r3, [r7, #0]
 800d18c:	3304      	adds	r3, #4
 800d18e:	781b      	ldrb	r3, [r3, #0]
 800d190:	b29a      	uxth	r2, r3
 800d192:	683b      	ldr	r3, [r7, #0]
 800d194:	3305      	adds	r3, #5
 800d196:	781b      	ldrb	r3, [r3, #0]
 800d198:	b29b      	uxth	r3, r3
 800d19a:	021b      	lsls	r3, r3, #8
 800d19c:	b29b      	uxth	r3, r3
 800d19e:	4313      	orrs	r3, r2
 800d1a0:	b29a      	uxth	r2, r3
 800d1a2:	687b      	ldr	r3, [r7, #4]
 800d1a4:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800d1a6:	683b      	ldr	r3, [r7, #0]
 800d1a8:	799a      	ldrb	r2, [r3, #6]
 800d1aa:	687b      	ldr	r3, [r7, #4]
 800d1ac:	719a      	strb	r2, [r3, #6]
}
 800d1ae:	bf00      	nop
 800d1b0:	370c      	adds	r7, #12
 800d1b2:	46bd      	mov	sp, r7
 800d1b4:	bc80      	pop	{r7}
 800d1b6:	4770      	bx	lr

0800d1b8 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800d1b8:	b480      	push	{r7}
 800d1ba:	b087      	sub	sp, #28
 800d1bc:	af00      	add	r7, sp, #0
 800d1be:	60f8      	str	r0, [r7, #12]
 800d1c0:	60b9      	str	r1, [r7, #8]
 800d1c2:	4613      	mov	r3, r2
 800d1c4:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800d1c6:	68fb      	ldr	r3, [r7, #12]
 800d1c8:	3301      	adds	r3, #1
 800d1ca:	781b      	ldrb	r3, [r3, #0]
 800d1cc:	2b03      	cmp	r3, #3
 800d1ce:	d120      	bne.n	800d212 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800d1d0:	68fb      	ldr	r3, [r7, #12]
 800d1d2:	781b      	ldrb	r3, [r3, #0]
 800d1d4:	1e9a      	subs	r2, r3, #2
 800d1d6:	88fb      	ldrh	r3, [r7, #6]
 800d1d8:	4293      	cmp	r3, r2
 800d1da:	bf28      	it	cs
 800d1dc:	4613      	movcs	r3, r2
 800d1de:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800d1e0:	68fb      	ldr	r3, [r7, #12]
 800d1e2:	3302      	adds	r3, #2
 800d1e4:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800d1e6:	2300      	movs	r3, #0
 800d1e8:	82fb      	strh	r3, [r7, #22]
 800d1ea:	e00b      	b.n	800d204 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800d1ec:	8afb      	ldrh	r3, [r7, #22]
 800d1ee:	68fa      	ldr	r2, [r7, #12]
 800d1f0:	4413      	add	r3, r2
 800d1f2:	781a      	ldrb	r2, [r3, #0]
 800d1f4:	68bb      	ldr	r3, [r7, #8]
 800d1f6:	701a      	strb	r2, [r3, #0]
      pdest++;
 800d1f8:	68bb      	ldr	r3, [r7, #8]
 800d1fa:	3301      	adds	r3, #1
 800d1fc:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800d1fe:	8afb      	ldrh	r3, [r7, #22]
 800d200:	3302      	adds	r3, #2
 800d202:	82fb      	strh	r3, [r7, #22]
 800d204:	8afa      	ldrh	r2, [r7, #22]
 800d206:	8abb      	ldrh	r3, [r7, #20]
 800d208:	429a      	cmp	r2, r3
 800d20a:	d3ef      	bcc.n	800d1ec <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800d20c:	68bb      	ldr	r3, [r7, #8]
 800d20e:	2200      	movs	r2, #0
 800d210:	701a      	strb	r2, [r3, #0]
  }
}
 800d212:	bf00      	nop
 800d214:	371c      	adds	r7, #28
 800d216:	46bd      	mov	sp, r7
 800d218:	bc80      	pop	{r7}
 800d21a:	4770      	bx	lr

0800d21c <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800d21c:	b480      	push	{r7}
 800d21e:	b085      	sub	sp, #20
 800d220:	af00      	add	r7, sp, #0
 800d222:	6078      	str	r0, [r7, #4]
 800d224:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800d226:	683b      	ldr	r3, [r7, #0]
 800d228:	881a      	ldrh	r2, [r3, #0]
 800d22a:	687b      	ldr	r3, [r7, #4]
 800d22c:	781b      	ldrb	r3, [r3, #0]
 800d22e:	b29b      	uxth	r3, r3
 800d230:	4413      	add	r3, r2
 800d232:	b29a      	uxth	r2, r3
 800d234:	683b      	ldr	r3, [r7, #0]
 800d236:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800d238:	687b      	ldr	r3, [r7, #4]
 800d23a:	781b      	ldrb	r3, [r3, #0]
 800d23c:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800d23e:	687b      	ldr	r3, [r7, #4]
 800d240:	4413      	add	r3, r2
 800d242:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800d244:	68fb      	ldr	r3, [r7, #12]
}
 800d246:	4618      	mov	r0, r3
 800d248:	3714      	adds	r7, #20
 800d24a:	46bd      	mov	sp, r7
 800d24c:	bc80      	pop	{r7}
 800d24e:	4770      	bx	lr

0800d250 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800d250:	b580      	push	{r7, lr}
 800d252:	b086      	sub	sp, #24
 800d254:	af00      	add	r7, sp, #0
 800d256:	60f8      	str	r0, [r7, #12]
 800d258:	60b9      	str	r1, [r7, #8]
 800d25a:	4613      	mov	r3, r2
 800d25c:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800d25e:	2301      	movs	r3, #1
 800d260:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800d262:	68fb      	ldr	r3, [r7, #12]
 800d264:	789b      	ldrb	r3, [r3, #2]
 800d266:	2b01      	cmp	r3, #1
 800d268:	d002      	beq.n	800d270 <USBH_CtlReq+0x20>
 800d26a:	2b02      	cmp	r3, #2
 800d26c:	d00f      	beq.n	800d28e <USBH_CtlReq+0x3e>
        }
      }
      break;

    default:
      break;
 800d26e:	e034      	b.n	800d2da <USBH_CtlReq+0x8a>
      phost->Control.buff = buff;
 800d270:	68fb      	ldr	r3, [r7, #12]
 800d272:	68ba      	ldr	r2, [r7, #8]
 800d274:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800d276:	68fb      	ldr	r3, [r7, #12]
 800d278:	88fa      	ldrh	r2, [r7, #6]
 800d27a:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800d27c:	68fb      	ldr	r3, [r7, #12]
 800d27e:	2201      	movs	r2, #1
 800d280:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800d282:	68fb      	ldr	r3, [r7, #12]
 800d284:	2202      	movs	r2, #2
 800d286:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800d288:	2301      	movs	r3, #1
 800d28a:	75fb      	strb	r3, [r7, #23]
      break;
 800d28c:	e025      	b.n	800d2da <USBH_CtlReq+0x8a>
      status = USBH_HandleControl(phost);
 800d28e:	68f8      	ldr	r0, [r7, #12]
 800d290:	f000 f828 	bl	800d2e4 <USBH_HandleControl>
 800d294:	4603      	mov	r3, r0
 800d296:	75fb      	strb	r3, [r7, #23]
      if (status == USBH_OK)
 800d298:	7dfb      	ldrb	r3, [r7, #23]
 800d29a:	2b00      	cmp	r3, #0
 800d29c:	d108      	bne.n	800d2b0 <USBH_CtlReq+0x60>
        phost->RequestState = CMD_SEND;
 800d29e:	68fb      	ldr	r3, [r7, #12]
 800d2a0:	2201      	movs	r2, #1
 800d2a2:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800d2a4:	68fb      	ldr	r3, [r7, #12]
 800d2a6:	2200      	movs	r2, #0
 800d2a8:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800d2aa:	2300      	movs	r3, #0
 800d2ac:	75fb      	strb	r3, [r7, #23]
      break;
 800d2ae:	e013      	b.n	800d2d8 <USBH_CtlReq+0x88>
      else if (status == USBH_NOT_SUPPORTED)
 800d2b0:	7dfb      	ldrb	r3, [r7, #23]
 800d2b2:	2b03      	cmp	r3, #3
 800d2b4:	d108      	bne.n	800d2c8 <USBH_CtlReq+0x78>
        phost->RequestState = CMD_SEND;
 800d2b6:	68fb      	ldr	r3, [r7, #12]
 800d2b8:	2201      	movs	r2, #1
 800d2ba:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800d2bc:	68fb      	ldr	r3, [r7, #12]
 800d2be:	2200      	movs	r2, #0
 800d2c0:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800d2c2:	2303      	movs	r3, #3
 800d2c4:	75fb      	strb	r3, [r7, #23]
      break;
 800d2c6:	e007      	b.n	800d2d8 <USBH_CtlReq+0x88>
        if (status == USBH_FAIL)
 800d2c8:	7dfb      	ldrb	r3, [r7, #23]
 800d2ca:	2b02      	cmp	r3, #2
 800d2cc:	d104      	bne.n	800d2d8 <USBH_CtlReq+0x88>
          phost->RequestState = CMD_SEND;
 800d2ce:	68fb      	ldr	r3, [r7, #12]
 800d2d0:	2201      	movs	r2, #1
 800d2d2:	709a      	strb	r2, [r3, #2]
          status = USBH_FAIL;
 800d2d4:	2302      	movs	r3, #2
 800d2d6:	75fb      	strb	r3, [r7, #23]
      break;
 800d2d8:	bf00      	nop
  }
  return status;
 800d2da:	7dfb      	ldrb	r3, [r7, #23]
}
 800d2dc:	4618      	mov	r0, r3
 800d2de:	3718      	adds	r7, #24
 800d2e0:	46bd      	mov	sp, r7
 800d2e2:	bd80      	pop	{r7, pc}

0800d2e4 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800d2e4:	b580      	push	{r7, lr}
 800d2e6:	b086      	sub	sp, #24
 800d2e8:	af02      	add	r7, sp, #8
 800d2ea:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800d2ec:	2301      	movs	r3, #1
 800d2ee:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800d2f0:	2300      	movs	r3, #0
 800d2f2:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800d2f4:	687b      	ldr	r3, [r7, #4]
 800d2f6:	7e1b      	ldrb	r3, [r3, #24]
 800d2f8:	3b01      	subs	r3, #1
 800d2fa:	2b0a      	cmp	r3, #10
 800d2fc:	f200 815d 	bhi.w	800d5ba <USBH_HandleControl+0x2d6>
 800d300:	a201      	add	r2, pc, #4	; (adr r2, 800d308 <USBH_HandleControl+0x24>)
 800d302:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d306:	bf00      	nop
 800d308:	0800d335 	.word	0x0800d335
 800d30c:	0800d34f 	.word	0x0800d34f
 800d310:	0800d3b9 	.word	0x0800d3b9
 800d314:	0800d3e3 	.word	0x0800d3e3
 800d318:	0800d41b 	.word	0x0800d41b
 800d31c:	0800d449 	.word	0x0800d449
 800d320:	0800d49b 	.word	0x0800d49b
 800d324:	0800d4c1 	.word	0x0800d4c1
 800d328:	0800d4fd 	.word	0x0800d4fd
 800d32c:	0800d527 	.word	0x0800d527
 800d330:	0800d565 	.word	0x0800d565
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800d334:	687b      	ldr	r3, [r7, #4]
 800d336:	f103 0110 	add.w	r1, r3, #16
 800d33a:	687b      	ldr	r3, [r7, #4]
 800d33c:	795b      	ldrb	r3, [r3, #5]
 800d33e:	461a      	mov	r2, r3
 800d340:	6878      	ldr	r0, [r7, #4]
 800d342:	f000 f94f 	bl	800d5e4 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800d346:	687b      	ldr	r3, [r7, #4]
 800d348:	2202      	movs	r2, #2
 800d34a:	761a      	strb	r2, [r3, #24]
      break;
 800d34c:	e140      	b.n	800d5d0 <USBH_HandleControl+0x2ec>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800d34e:	687b      	ldr	r3, [r7, #4]
 800d350:	795b      	ldrb	r3, [r3, #5]
 800d352:	4619      	mov	r1, r3
 800d354:	6878      	ldr	r0, [r7, #4]
 800d356:	f000 fd4b 	bl	800ddf0 <USBH_LL_GetURBState>
 800d35a:	4603      	mov	r3, r0
 800d35c:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800d35e:	7bbb      	ldrb	r3, [r7, #14]
 800d360:	2b01      	cmp	r3, #1
 800d362:	d11e      	bne.n	800d3a2 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800d364:	687b      	ldr	r3, [r7, #4]
 800d366:	7c1b      	ldrb	r3, [r3, #16]
 800d368:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800d36c:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800d36e:	687b      	ldr	r3, [r7, #4]
 800d370:	8adb      	ldrh	r3, [r3, #22]
 800d372:	2b00      	cmp	r3, #0
 800d374:	d00a      	beq.n	800d38c <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800d376:	7b7b      	ldrb	r3, [r7, #13]
 800d378:	2b80      	cmp	r3, #128	; 0x80
 800d37a:	d103      	bne.n	800d384 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800d37c:	687b      	ldr	r3, [r7, #4]
 800d37e:	2203      	movs	r2, #3
 800d380:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800d382:	e11c      	b.n	800d5be <USBH_HandleControl+0x2da>
            phost->Control.state = CTRL_DATA_OUT;
 800d384:	687b      	ldr	r3, [r7, #4]
 800d386:	2205      	movs	r2, #5
 800d388:	761a      	strb	r2, [r3, #24]
      break;
 800d38a:	e118      	b.n	800d5be <USBH_HandleControl+0x2da>
          if (direction == USB_D2H)
 800d38c:	7b7b      	ldrb	r3, [r7, #13]
 800d38e:	2b80      	cmp	r3, #128	; 0x80
 800d390:	d103      	bne.n	800d39a <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800d392:	687b      	ldr	r3, [r7, #4]
 800d394:	2209      	movs	r2, #9
 800d396:	761a      	strb	r2, [r3, #24]
      break;
 800d398:	e111      	b.n	800d5be <USBH_HandleControl+0x2da>
            phost->Control.state = CTRL_STATUS_IN;
 800d39a:	687b      	ldr	r3, [r7, #4]
 800d39c:	2207      	movs	r2, #7
 800d39e:	761a      	strb	r2, [r3, #24]
      break;
 800d3a0:	e10d      	b.n	800d5be <USBH_HandleControl+0x2da>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800d3a2:	7bbb      	ldrb	r3, [r7, #14]
 800d3a4:	2b04      	cmp	r3, #4
 800d3a6:	d003      	beq.n	800d3b0 <USBH_HandleControl+0xcc>
 800d3a8:	7bbb      	ldrb	r3, [r7, #14]
 800d3aa:	2b02      	cmp	r3, #2
 800d3ac:	f040 8107 	bne.w	800d5be <USBH_HandleControl+0x2da>
          phost->Control.state = CTRL_ERROR;
 800d3b0:	687b      	ldr	r3, [r7, #4]
 800d3b2:	220b      	movs	r2, #11
 800d3b4:	761a      	strb	r2, [r3, #24]
      break;
 800d3b6:	e102      	b.n	800d5be <USBH_HandleControl+0x2da>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800d3b8:	687b      	ldr	r3, [r7, #4]
 800d3ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d3be:	f8d3 3164 	ldr.w	r3, [r3, #356]	; 0x164
 800d3c2:	b29a      	uxth	r2, r3
 800d3c4:	687b      	ldr	r3, [r7, #4]
 800d3c6:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 800d3c8:	687b      	ldr	r3, [r7, #4]
 800d3ca:	6899      	ldr	r1, [r3, #8]
 800d3cc:	687b      	ldr	r3, [r7, #4]
 800d3ce:	899a      	ldrh	r2, [r3, #12]
 800d3d0:	687b      	ldr	r3, [r7, #4]
 800d3d2:	791b      	ldrb	r3, [r3, #4]
 800d3d4:	6878      	ldr	r0, [r7, #4]
 800d3d6:	f000 f944 	bl	800d662 <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800d3da:	687b      	ldr	r3, [r7, #4]
 800d3dc:	2204      	movs	r2, #4
 800d3de:	761a      	strb	r2, [r3, #24]
      break;
 800d3e0:	e0f6      	b.n	800d5d0 <USBH_HandleControl+0x2ec>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800d3e2:	687b      	ldr	r3, [r7, #4]
 800d3e4:	791b      	ldrb	r3, [r3, #4]
 800d3e6:	4619      	mov	r1, r3
 800d3e8:	6878      	ldr	r0, [r7, #4]
 800d3ea:	f000 fd01 	bl	800ddf0 <USBH_LL_GetURBState>
 800d3ee:	4603      	mov	r3, r0
 800d3f0:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800d3f2:	7bbb      	ldrb	r3, [r7, #14]
 800d3f4:	2b01      	cmp	r3, #1
 800d3f6:	d102      	bne.n	800d3fe <USBH_HandleControl+0x11a>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800d3f8:	687b      	ldr	r3, [r7, #4]
 800d3fa:	2209      	movs	r2, #9
 800d3fc:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800d3fe:	7bbb      	ldrb	r3, [r7, #14]
 800d400:	2b05      	cmp	r3, #5
 800d402:	d102      	bne.n	800d40a <USBH_HandleControl+0x126>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800d404:	2303      	movs	r3, #3
 800d406:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800d408:	e0db      	b.n	800d5c2 <USBH_HandleControl+0x2de>
        if (URB_Status == USBH_URB_ERROR)
 800d40a:	7bbb      	ldrb	r3, [r7, #14]
 800d40c:	2b04      	cmp	r3, #4
 800d40e:	f040 80d8 	bne.w	800d5c2 <USBH_HandleControl+0x2de>
          phost->Control.state = CTRL_ERROR;
 800d412:	687b      	ldr	r3, [r7, #4]
 800d414:	220b      	movs	r2, #11
 800d416:	761a      	strb	r2, [r3, #24]
      break;
 800d418:	e0d3      	b.n	800d5c2 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800d41a:	687b      	ldr	r3, [r7, #4]
 800d41c:	6899      	ldr	r1, [r3, #8]
 800d41e:	687b      	ldr	r3, [r7, #4]
 800d420:	899a      	ldrh	r2, [r3, #12]
 800d422:	687b      	ldr	r3, [r7, #4]
 800d424:	795b      	ldrb	r3, [r3, #5]
 800d426:	2001      	movs	r0, #1
 800d428:	9000      	str	r0, [sp, #0]
 800d42a:	6878      	ldr	r0, [r7, #4]
 800d42c:	f000 f8f4 	bl	800d618 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800d430:	687b      	ldr	r3, [r7, #4]
 800d432:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d436:	f8d3 3164 	ldr.w	r3, [r3, #356]	; 0x164
 800d43a:	b29a      	uxth	r2, r3
 800d43c:	687b      	ldr	r3, [r7, #4]
 800d43e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800d440:	687b      	ldr	r3, [r7, #4]
 800d442:	2206      	movs	r2, #6
 800d444:	761a      	strb	r2, [r3, #24]
      break;
 800d446:	e0c3      	b.n	800d5d0 <USBH_HandleControl+0x2ec>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800d448:	687b      	ldr	r3, [r7, #4]
 800d44a:	795b      	ldrb	r3, [r3, #5]
 800d44c:	4619      	mov	r1, r3
 800d44e:	6878      	ldr	r0, [r7, #4]
 800d450:	f000 fcce 	bl	800ddf0 <USBH_LL_GetURBState>
 800d454:	4603      	mov	r3, r0
 800d456:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800d458:	7bbb      	ldrb	r3, [r7, #14]
 800d45a:	2b01      	cmp	r3, #1
 800d45c:	d103      	bne.n	800d466 <USBH_HandleControl+0x182>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800d45e:	687b      	ldr	r3, [r7, #4]
 800d460:	2207      	movs	r2, #7
 800d462:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800d464:	e0af      	b.n	800d5c6 <USBH_HandleControl+0x2e2>
      else if (URB_Status == USBH_URB_STALL)
 800d466:	7bbb      	ldrb	r3, [r7, #14]
 800d468:	2b05      	cmp	r3, #5
 800d46a:	d105      	bne.n	800d478 <USBH_HandleControl+0x194>
        phost->Control.state = CTRL_STALLED;
 800d46c:	687b      	ldr	r3, [r7, #4]
 800d46e:	220c      	movs	r2, #12
 800d470:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800d472:	2303      	movs	r3, #3
 800d474:	73fb      	strb	r3, [r7, #15]
      break;
 800d476:	e0a6      	b.n	800d5c6 <USBH_HandleControl+0x2e2>
      else if (URB_Status == USBH_URB_NOTREADY)
 800d478:	7bbb      	ldrb	r3, [r7, #14]
 800d47a:	2b02      	cmp	r3, #2
 800d47c:	d103      	bne.n	800d486 <USBH_HandleControl+0x1a2>
        phost->Control.state = CTRL_DATA_OUT;
 800d47e:	687b      	ldr	r3, [r7, #4]
 800d480:	2205      	movs	r2, #5
 800d482:	761a      	strb	r2, [r3, #24]
      break;
 800d484:	e09f      	b.n	800d5c6 <USBH_HandleControl+0x2e2>
        if (URB_Status == USBH_URB_ERROR)
 800d486:	7bbb      	ldrb	r3, [r7, #14]
 800d488:	2b04      	cmp	r3, #4
 800d48a:	f040 809c 	bne.w	800d5c6 <USBH_HandleControl+0x2e2>
          phost->Control.state = CTRL_ERROR;
 800d48e:	687b      	ldr	r3, [r7, #4]
 800d490:	220b      	movs	r2, #11
 800d492:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800d494:	2302      	movs	r3, #2
 800d496:	73fb      	strb	r3, [r7, #15]
      break;
 800d498:	e095      	b.n	800d5c6 <USBH_HandleControl+0x2e2>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 800d49a:	687b      	ldr	r3, [r7, #4]
 800d49c:	791b      	ldrb	r3, [r3, #4]
 800d49e:	2200      	movs	r2, #0
 800d4a0:	2100      	movs	r1, #0
 800d4a2:	6878      	ldr	r0, [r7, #4]
 800d4a4:	f000 f8dd 	bl	800d662 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800d4a8:	687b      	ldr	r3, [r7, #4]
 800d4aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d4ae:	f8d3 3164 	ldr.w	r3, [r3, #356]	; 0x164
 800d4b2:	b29a      	uxth	r2, r3
 800d4b4:	687b      	ldr	r3, [r7, #4]
 800d4b6:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800d4b8:	687b      	ldr	r3, [r7, #4]
 800d4ba:	2208      	movs	r2, #8
 800d4bc:	761a      	strb	r2, [r3, #24]

      break;
 800d4be:	e087      	b.n	800d5d0 <USBH_HandleControl+0x2ec>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800d4c0:	687b      	ldr	r3, [r7, #4]
 800d4c2:	791b      	ldrb	r3, [r3, #4]
 800d4c4:	4619      	mov	r1, r3
 800d4c6:	6878      	ldr	r0, [r7, #4]
 800d4c8:	f000 fc92 	bl	800ddf0 <USBH_LL_GetURBState>
 800d4cc:	4603      	mov	r3, r0
 800d4ce:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800d4d0:	7bbb      	ldrb	r3, [r7, #14]
 800d4d2:	2b01      	cmp	r3, #1
 800d4d4:	d105      	bne.n	800d4e2 <USBH_HandleControl+0x1fe>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800d4d6:	687b      	ldr	r3, [r7, #4]
 800d4d8:	220d      	movs	r2, #13
 800d4da:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800d4dc:	2300      	movs	r3, #0
 800d4de:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800d4e0:	e073      	b.n	800d5ca <USBH_HandleControl+0x2e6>
      else if (URB_Status == USBH_URB_ERROR)
 800d4e2:	7bbb      	ldrb	r3, [r7, #14]
 800d4e4:	2b04      	cmp	r3, #4
 800d4e6:	d103      	bne.n	800d4f0 <USBH_HandleControl+0x20c>
        phost->Control.state = CTRL_ERROR;
 800d4e8:	687b      	ldr	r3, [r7, #4]
 800d4ea:	220b      	movs	r2, #11
 800d4ec:	761a      	strb	r2, [r3, #24]
      break;
 800d4ee:	e06c      	b.n	800d5ca <USBH_HandleControl+0x2e6>
        if (URB_Status == USBH_URB_STALL)
 800d4f0:	7bbb      	ldrb	r3, [r7, #14]
 800d4f2:	2b05      	cmp	r3, #5
 800d4f4:	d169      	bne.n	800d5ca <USBH_HandleControl+0x2e6>
          status = USBH_NOT_SUPPORTED;
 800d4f6:	2303      	movs	r3, #3
 800d4f8:	73fb      	strb	r3, [r7, #15]
      break;
 800d4fa:	e066      	b.n	800d5ca <USBH_HandleControl+0x2e6>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 800d4fc:	687b      	ldr	r3, [r7, #4]
 800d4fe:	795b      	ldrb	r3, [r3, #5]
 800d500:	2201      	movs	r2, #1
 800d502:	9200      	str	r2, [sp, #0]
 800d504:	2200      	movs	r2, #0
 800d506:	2100      	movs	r1, #0
 800d508:	6878      	ldr	r0, [r7, #4]
 800d50a:	f000 f885 	bl	800d618 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800d50e:	687b      	ldr	r3, [r7, #4]
 800d510:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d514:	f8d3 3164 	ldr.w	r3, [r3, #356]	; 0x164
 800d518:	b29a      	uxth	r2, r3
 800d51a:	687b      	ldr	r3, [r7, #4]
 800d51c:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800d51e:	687b      	ldr	r3, [r7, #4]
 800d520:	220a      	movs	r2, #10
 800d522:	761a      	strb	r2, [r3, #24]
      break;
 800d524:	e054      	b.n	800d5d0 <USBH_HandleControl+0x2ec>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800d526:	687b      	ldr	r3, [r7, #4]
 800d528:	795b      	ldrb	r3, [r3, #5]
 800d52a:	4619      	mov	r1, r3
 800d52c:	6878      	ldr	r0, [r7, #4]
 800d52e:	f000 fc5f 	bl	800ddf0 <USBH_LL_GetURBState>
 800d532:	4603      	mov	r3, r0
 800d534:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800d536:	7bbb      	ldrb	r3, [r7, #14]
 800d538:	2b01      	cmp	r3, #1
 800d53a:	d105      	bne.n	800d548 <USBH_HandleControl+0x264>
      {
        status = USBH_OK;
 800d53c:	2300      	movs	r3, #0
 800d53e:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800d540:	687b      	ldr	r3, [r7, #4]
 800d542:	220d      	movs	r2, #13
 800d544:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800d546:	e042      	b.n	800d5ce <USBH_HandleControl+0x2ea>
      else if (URB_Status == USBH_URB_NOTREADY)
 800d548:	7bbb      	ldrb	r3, [r7, #14]
 800d54a:	2b02      	cmp	r3, #2
 800d54c:	d103      	bne.n	800d556 <USBH_HandleControl+0x272>
        phost->Control.state = CTRL_STATUS_OUT;
 800d54e:	687b      	ldr	r3, [r7, #4]
 800d550:	2209      	movs	r2, #9
 800d552:	761a      	strb	r2, [r3, #24]
      break;
 800d554:	e03b      	b.n	800d5ce <USBH_HandleControl+0x2ea>
        if (URB_Status == USBH_URB_ERROR)
 800d556:	7bbb      	ldrb	r3, [r7, #14]
 800d558:	2b04      	cmp	r3, #4
 800d55a:	d138      	bne.n	800d5ce <USBH_HandleControl+0x2ea>
          phost->Control.state = CTRL_ERROR;
 800d55c:	687b      	ldr	r3, [r7, #4]
 800d55e:	220b      	movs	r2, #11
 800d560:	761a      	strb	r2, [r3, #24]
      break;
 800d562:	e034      	b.n	800d5ce <USBH_HandleControl+0x2ea>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800d564:	687b      	ldr	r3, [r7, #4]
 800d566:	7e5b      	ldrb	r3, [r3, #25]
 800d568:	3301      	adds	r3, #1
 800d56a:	b2da      	uxtb	r2, r3
 800d56c:	687b      	ldr	r3, [r7, #4]
 800d56e:	765a      	strb	r2, [r3, #25]
 800d570:	687b      	ldr	r3, [r7, #4]
 800d572:	7e5b      	ldrb	r3, [r3, #25]
 800d574:	2b02      	cmp	r3, #2
 800d576:	d806      	bhi.n	800d586 <USBH_HandleControl+0x2a2>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800d578:	687b      	ldr	r3, [r7, #4]
 800d57a:	2201      	movs	r2, #1
 800d57c:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800d57e:	687b      	ldr	r3, [r7, #4]
 800d580:	2201      	movs	r2, #1
 800d582:	709a      	strb	r2, [r3, #2]
        phost->Control.errorcount = 0U;
        USBH_ErrLog("Control error: Device not responding");
        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800d584:	e024      	b.n	800d5d0 <USBH_HandleControl+0x2ec>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800d586:	687b      	ldr	r3, [r7, #4]
 800d588:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d58c:	f8d3 3170 	ldr.w	r3, [r3, #368]	; 0x170
 800d590:	2106      	movs	r1, #6
 800d592:	6878      	ldr	r0, [r7, #4]
 800d594:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800d596:	687b      	ldr	r3, [r7, #4]
 800d598:	2200      	movs	r2, #0
 800d59a:	765a      	strb	r2, [r3, #25]
        USBH_ErrLog("Control error: Device not responding");
 800d59c:	480f      	ldr	r0, [pc, #60]	; (800d5dc <USBH_HandleControl+0x2f8>)
 800d59e:	f001 f901 	bl	800e7a4 <iprintf>
 800d5a2:	480f      	ldr	r0, [pc, #60]	; (800d5e0 <USBH_HandleControl+0x2fc>)
 800d5a4:	f001 f8fe 	bl	800e7a4 <iprintf>
 800d5a8:	200a      	movs	r0, #10
 800d5aa:	f001 f913 	bl	800e7d4 <putchar>
        phost->gState = HOST_IDLE;
 800d5ae:	687b      	ldr	r3, [r7, #4]
 800d5b0:	2200      	movs	r2, #0
 800d5b2:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800d5b4:	2302      	movs	r3, #2
 800d5b6:	73fb      	strb	r3, [r7, #15]
      break;
 800d5b8:	e00a      	b.n	800d5d0 <USBH_HandleControl+0x2ec>

    default:
      break;
 800d5ba:	bf00      	nop
 800d5bc:	e008      	b.n	800d5d0 <USBH_HandleControl+0x2ec>
      break;
 800d5be:	bf00      	nop
 800d5c0:	e006      	b.n	800d5d0 <USBH_HandleControl+0x2ec>
      break;
 800d5c2:	bf00      	nop
 800d5c4:	e004      	b.n	800d5d0 <USBH_HandleControl+0x2ec>
      break;
 800d5c6:	bf00      	nop
 800d5c8:	e002      	b.n	800d5d0 <USBH_HandleControl+0x2ec>
      break;
 800d5ca:	bf00      	nop
 800d5cc:	e000      	b.n	800d5d0 <USBH_HandleControl+0x2ec>
      break;
 800d5ce:	bf00      	nop
  }

  return status;
 800d5d0:	7bfb      	ldrb	r3, [r7, #15]
}
 800d5d2:	4618      	mov	r0, r3
 800d5d4:	3710      	adds	r7, #16
 800d5d6:	46bd      	mov	sp, r7
 800d5d8:	bd80      	pop	{r7, pc}
 800d5da:	bf00      	nop
 800d5dc:	080100ac 	.word	0x080100ac
 800d5e0:	080100b4 	.word	0x080100b4

0800d5e4 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800d5e4:	b580      	push	{r7, lr}
 800d5e6:	b088      	sub	sp, #32
 800d5e8:	af04      	add	r7, sp, #16
 800d5ea:	60f8      	str	r0, [r7, #12]
 800d5ec:	60b9      	str	r1, [r7, #8]
 800d5ee:	4613      	mov	r3, r2
 800d5f0:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800d5f2:	79f9      	ldrb	r1, [r7, #7]
 800d5f4:	2300      	movs	r3, #0
 800d5f6:	9303      	str	r3, [sp, #12]
 800d5f8:	2308      	movs	r3, #8
 800d5fa:	9302      	str	r3, [sp, #8]
 800d5fc:	68bb      	ldr	r3, [r7, #8]
 800d5fe:	9301      	str	r3, [sp, #4]
 800d600:	2300      	movs	r3, #0
 800d602:	9300      	str	r3, [sp, #0]
 800d604:	2300      	movs	r3, #0
 800d606:	2200      	movs	r2, #0
 800d608:	68f8      	ldr	r0, [r7, #12]
 800d60a:	f000 fbbe 	bl	800dd8a <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 800d60e:	2300      	movs	r3, #0
}
 800d610:	4618      	mov	r0, r3
 800d612:	3710      	adds	r7, #16
 800d614:	46bd      	mov	sp, r7
 800d616:	bd80      	pop	{r7, pc}

0800d618 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800d618:	b580      	push	{r7, lr}
 800d61a:	b088      	sub	sp, #32
 800d61c:	af04      	add	r7, sp, #16
 800d61e:	60f8      	str	r0, [r7, #12]
 800d620:	60b9      	str	r1, [r7, #8]
 800d622:	4611      	mov	r1, r2
 800d624:	461a      	mov	r2, r3
 800d626:	460b      	mov	r3, r1
 800d628:	80fb      	strh	r3, [r7, #6]
 800d62a:	4613      	mov	r3, r2
 800d62c:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800d62e:	68fb      	ldr	r3, [r7, #12]
 800d630:	f893 391d 	ldrb.w	r3, [r3, #2333]	; 0x91d
 800d634:	2b00      	cmp	r3, #0
 800d636:	d001      	beq.n	800d63c <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800d638:	2300      	movs	r3, #0
 800d63a:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800d63c:	7979      	ldrb	r1, [r7, #5]
 800d63e:	7e3b      	ldrb	r3, [r7, #24]
 800d640:	9303      	str	r3, [sp, #12]
 800d642:	88fb      	ldrh	r3, [r7, #6]
 800d644:	9302      	str	r3, [sp, #8]
 800d646:	68bb      	ldr	r3, [r7, #8]
 800d648:	9301      	str	r3, [sp, #4]
 800d64a:	2301      	movs	r3, #1
 800d64c:	9300      	str	r3, [sp, #0]
 800d64e:	2300      	movs	r3, #0
 800d650:	2200      	movs	r2, #0
 800d652:	68f8      	ldr	r0, [r7, #12]
 800d654:	f000 fb99 	bl	800dd8a <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800d658:	2300      	movs	r3, #0
}
 800d65a:	4618      	mov	r0, r3
 800d65c:	3710      	adds	r7, #16
 800d65e:	46bd      	mov	sp, r7
 800d660:	bd80      	pop	{r7, pc}

0800d662 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800d662:	b580      	push	{r7, lr}
 800d664:	b088      	sub	sp, #32
 800d666:	af04      	add	r7, sp, #16
 800d668:	60f8      	str	r0, [r7, #12]
 800d66a:	60b9      	str	r1, [r7, #8]
 800d66c:	4611      	mov	r1, r2
 800d66e:	461a      	mov	r2, r3
 800d670:	460b      	mov	r3, r1
 800d672:	80fb      	strh	r3, [r7, #6]
 800d674:	4613      	mov	r3, r2
 800d676:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800d678:	7979      	ldrb	r1, [r7, #5]
 800d67a:	2300      	movs	r3, #0
 800d67c:	9303      	str	r3, [sp, #12]
 800d67e:	88fb      	ldrh	r3, [r7, #6]
 800d680:	9302      	str	r3, [sp, #8]
 800d682:	68bb      	ldr	r3, [r7, #8]
 800d684:	9301      	str	r3, [sp, #4]
 800d686:	2301      	movs	r3, #1
 800d688:	9300      	str	r3, [sp, #0]
 800d68a:	2300      	movs	r3, #0
 800d68c:	2201      	movs	r2, #1
 800d68e:	68f8      	ldr	r0, [r7, #12]
 800d690:	f000 fb7b 	bl	800dd8a <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800d694:	2300      	movs	r3, #0

}
 800d696:	4618      	mov	r0, r3
 800d698:	3710      	adds	r7, #16
 800d69a:	46bd      	mov	sp, r7
 800d69c:	bd80      	pop	{r7, pc}

0800d69e <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800d69e:	b580      	push	{r7, lr}
 800d6a0:	b088      	sub	sp, #32
 800d6a2:	af04      	add	r7, sp, #16
 800d6a4:	60f8      	str	r0, [r7, #12]
 800d6a6:	60b9      	str	r1, [r7, #8]
 800d6a8:	4611      	mov	r1, r2
 800d6aa:	461a      	mov	r2, r3
 800d6ac:	460b      	mov	r3, r1
 800d6ae:	80fb      	strh	r3, [r7, #6]
 800d6b0:	4613      	mov	r3, r2
 800d6b2:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800d6b4:	68fb      	ldr	r3, [r7, #12]
 800d6b6:	f893 391d 	ldrb.w	r3, [r3, #2333]	; 0x91d
 800d6ba:	2b00      	cmp	r3, #0
 800d6bc:	d001      	beq.n	800d6c2 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800d6be:	2300      	movs	r3, #0
 800d6c0:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800d6c2:	7979      	ldrb	r1, [r7, #5]
 800d6c4:	7e3b      	ldrb	r3, [r7, #24]
 800d6c6:	9303      	str	r3, [sp, #12]
 800d6c8:	88fb      	ldrh	r3, [r7, #6]
 800d6ca:	9302      	str	r3, [sp, #8]
 800d6cc:	68bb      	ldr	r3, [r7, #8]
 800d6ce:	9301      	str	r3, [sp, #4]
 800d6d0:	2301      	movs	r3, #1
 800d6d2:	9300      	str	r3, [sp, #0]
 800d6d4:	2302      	movs	r3, #2
 800d6d6:	2200      	movs	r2, #0
 800d6d8:	68f8      	ldr	r0, [r7, #12]
 800d6da:	f000 fb56 	bl	800dd8a <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800d6de:	2300      	movs	r3, #0
}
 800d6e0:	4618      	mov	r0, r3
 800d6e2:	3710      	adds	r7, #16
 800d6e4:	46bd      	mov	sp, r7
 800d6e6:	bd80      	pop	{r7, pc}

0800d6e8 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800d6e8:	b580      	push	{r7, lr}
 800d6ea:	b088      	sub	sp, #32
 800d6ec:	af04      	add	r7, sp, #16
 800d6ee:	60f8      	str	r0, [r7, #12]
 800d6f0:	60b9      	str	r1, [r7, #8]
 800d6f2:	4611      	mov	r1, r2
 800d6f4:	461a      	mov	r2, r3
 800d6f6:	460b      	mov	r3, r1
 800d6f8:	80fb      	strh	r3, [r7, #6]
 800d6fa:	4613      	mov	r3, r2
 800d6fc:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800d6fe:	7979      	ldrb	r1, [r7, #5]
 800d700:	2300      	movs	r3, #0
 800d702:	9303      	str	r3, [sp, #12]
 800d704:	88fb      	ldrh	r3, [r7, #6]
 800d706:	9302      	str	r3, [sp, #8]
 800d708:	68bb      	ldr	r3, [r7, #8]
 800d70a:	9301      	str	r3, [sp, #4]
 800d70c:	2301      	movs	r3, #1
 800d70e:	9300      	str	r3, [sp, #0]
 800d710:	2302      	movs	r3, #2
 800d712:	2201      	movs	r2, #1
 800d714:	68f8      	ldr	r0, [r7, #12]
 800d716:	f000 fb38 	bl	800dd8a <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800d71a:	2300      	movs	r3, #0
}
 800d71c:	4618      	mov	r0, r3
 800d71e:	3710      	adds	r7, #16
 800d720:	46bd      	mov	sp, r7
 800d722:	bd80      	pop	{r7, pc}

0800d724 <USBH_InterruptReceiveData>:
  */
USBH_StatusTypeDef USBH_InterruptReceiveData(USBH_HandleTypeDef *phost,
                                             uint8_t *buff,
                                             uint8_t length,
                                             uint8_t pipe_num)
{
 800d724:	b580      	push	{r7, lr}
 800d726:	b088      	sub	sp, #32
 800d728:	af04      	add	r7, sp, #16
 800d72a:	60f8      	str	r0, [r7, #12]
 800d72c:	60b9      	str	r1, [r7, #8]
 800d72e:	4611      	mov	r1, r2
 800d730:	461a      	mov	r2, r3
 800d732:	460b      	mov	r3, r1
 800d734:	71fb      	strb	r3, [r7, #7]
 800d736:	4613      	mov	r3, r2
 800d738:	71bb      	strb	r3, [r7, #6]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800d73a:	79fb      	ldrb	r3, [r7, #7]
 800d73c:	b29b      	uxth	r3, r3
 800d73e:	79b9      	ldrb	r1, [r7, #6]
 800d740:	2200      	movs	r2, #0
 800d742:	9203      	str	r2, [sp, #12]
 800d744:	9302      	str	r3, [sp, #8]
 800d746:	68bb      	ldr	r3, [r7, #8]
 800d748:	9301      	str	r3, [sp, #4]
 800d74a:	2301      	movs	r3, #1
 800d74c:	9300      	str	r3, [sp, #0]
 800d74e:	2303      	movs	r3, #3
 800d750:	2201      	movs	r2, #1
 800d752:	68f8      	ldr	r0, [r7, #12]
 800d754:	f000 fb19 	bl	800dd8a <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    (uint16_t)length,     /* data length      */
                    0U);

  return USBH_OK;
 800d758:	2300      	movs	r3, #0
}
 800d75a:	4618      	mov	r0, r3
 800d75c:	3710      	adds	r7, #16
 800d75e:	46bd      	mov	sp, r7
 800d760:	bd80      	pop	{r7, pc}

0800d762 <USBH_IsocSendData>:
  */
USBH_StatusTypeDef USBH_IsocSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint32_t length,
                                     uint8_t pipe_num)
{
 800d762:	b580      	push	{r7, lr}
 800d764:	b088      	sub	sp, #32
 800d766:	af04      	add	r7, sp, #16
 800d768:	60f8      	str	r0, [r7, #12]
 800d76a:	60b9      	str	r1, [r7, #8]
 800d76c:	607a      	str	r2, [r7, #4]
 800d76e:	70fb      	strb	r3, [r7, #3]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800d770:	687b      	ldr	r3, [r7, #4]
 800d772:	b29b      	uxth	r3, r3
 800d774:	78f9      	ldrb	r1, [r7, #3]
 800d776:	2200      	movs	r2, #0
 800d778:	9203      	str	r2, [sp, #12]
 800d77a:	9302      	str	r3, [sp, #8]
 800d77c:	68bb      	ldr	r3, [r7, #8]
 800d77e:	9301      	str	r3, [sp, #4]
 800d780:	2301      	movs	r3, #1
 800d782:	9300      	str	r3, [sp, #0]
 800d784:	2301      	movs	r3, #1
 800d786:	2200      	movs	r2, #0
 800d788:	68f8      	ldr	r0, [r7, #12]
 800d78a:	f000 fafe 	bl	800dd8a <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    (uint16_t)length,     /* data length      */
                    0U);

  return USBH_OK;
 800d78e:	2300      	movs	r3, #0
}
 800d790:	4618      	mov	r0, r3
 800d792:	3710      	adds	r7, #16
 800d794:	46bd      	mov	sp, r7
 800d796:	bd80      	pop	{r7, pc}

0800d798 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800d798:	b580      	push	{r7, lr}
 800d79a:	b086      	sub	sp, #24
 800d79c:	af04      	add	r7, sp, #16
 800d79e:	6078      	str	r0, [r7, #4]
 800d7a0:	4608      	mov	r0, r1
 800d7a2:	4611      	mov	r1, r2
 800d7a4:	461a      	mov	r2, r3
 800d7a6:	4603      	mov	r3, r0
 800d7a8:	70fb      	strb	r3, [r7, #3]
 800d7aa:	460b      	mov	r3, r1
 800d7ac:	70bb      	strb	r3, [r7, #2]
 800d7ae:	4613      	mov	r3, r2
 800d7b0:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800d7b2:	7878      	ldrb	r0, [r7, #1]
 800d7b4:	78ba      	ldrb	r2, [r7, #2]
 800d7b6:	78f9      	ldrb	r1, [r7, #3]
 800d7b8:	8b3b      	ldrh	r3, [r7, #24]
 800d7ba:	9302      	str	r3, [sp, #8]
 800d7bc:	7d3b      	ldrb	r3, [r7, #20]
 800d7be:	9301      	str	r3, [sp, #4]
 800d7c0:	7c3b      	ldrb	r3, [r7, #16]
 800d7c2:	9300      	str	r3, [sp, #0]
 800d7c4:	4603      	mov	r3, r0
 800d7c6:	6878      	ldr	r0, [r7, #4]
 800d7c8:	f000 fa8d 	bl	800dce6 <USBH_LL_OpenPipe>

  return USBH_OK;
 800d7cc:	2300      	movs	r3, #0
}
 800d7ce:	4618      	mov	r0, r3
 800d7d0:	3708      	adds	r7, #8
 800d7d2:	46bd      	mov	sp, r7
 800d7d4:	bd80      	pop	{r7, pc}

0800d7d6 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800d7d6:	b580      	push	{r7, lr}
 800d7d8:	b082      	sub	sp, #8
 800d7da:	af00      	add	r7, sp, #0
 800d7dc:	6078      	str	r0, [r7, #4]
 800d7de:	460b      	mov	r3, r1
 800d7e0:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 800d7e2:	78fb      	ldrb	r3, [r7, #3]
 800d7e4:	4619      	mov	r1, r3
 800d7e6:	6878      	ldr	r0, [r7, #4]
 800d7e8:	f000 faae 	bl	800dd48 <USBH_LL_ClosePipe>

  return USBH_OK;
 800d7ec:	2300      	movs	r3, #0
}
 800d7ee:	4618      	mov	r0, r3
 800d7f0:	3708      	adds	r7, #8
 800d7f2:	46bd      	mov	sp, r7
 800d7f4:	bd80      	pop	{r7, pc}

0800d7f6 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800d7f6:	b580      	push	{r7, lr}
 800d7f8:	b084      	sub	sp, #16
 800d7fa:	af00      	add	r7, sp, #0
 800d7fc:	6078      	str	r0, [r7, #4]
 800d7fe:	460b      	mov	r3, r1
 800d800:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800d802:	6878      	ldr	r0, [r7, #4]
 800d804:	f000 f838 	bl	800d878 <USBH_GetFreePipe>
 800d808:	4603      	mov	r3, r0
 800d80a:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800d80c:	89fb      	ldrh	r3, [r7, #14]
 800d80e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d812:	4293      	cmp	r3, r2
 800d814:	d00b      	beq.n	800d82e <USBH_AllocPipe+0x38>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 800d816:	78fa      	ldrb	r2, [r7, #3]
 800d818:	89fb      	ldrh	r3, [r7, #14]
 800d81a:	f003 030f 	and.w	r3, r3, #15
 800d81e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800d822:	6879      	ldr	r1, [r7, #4]
 800d824:	f503 6389 	add.w	r3, r3, #1096	; 0x448
 800d828:	009b      	lsls	r3, r3, #2
 800d82a:	440b      	add	r3, r1
 800d82c:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800d82e:	89fb      	ldrh	r3, [r7, #14]
 800d830:	b2db      	uxtb	r3, r3
}
 800d832:	4618      	mov	r0, r3
 800d834:	3710      	adds	r7, #16
 800d836:	46bd      	mov	sp, r7
 800d838:	bd80      	pop	{r7, pc}

0800d83a <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800d83a:	b480      	push	{r7}
 800d83c:	b083      	sub	sp, #12
 800d83e:	af00      	add	r7, sp, #0
 800d840:	6078      	str	r0, [r7, #4]
 800d842:	460b      	mov	r3, r1
 800d844:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 800d846:	78fb      	ldrb	r3, [r7, #3]
 800d848:	2b0a      	cmp	r3, #10
 800d84a:	d80f      	bhi.n	800d86c <USBH_FreePipe+0x32>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800d84c:	78fb      	ldrb	r3, [r7, #3]
 800d84e:	687a      	ldr	r2, [r7, #4]
 800d850:	f503 6389 	add.w	r3, r3, #1096	; 0x448
 800d854:	009b      	lsls	r3, r3, #2
 800d856:	4413      	add	r3, r2
 800d858:	685a      	ldr	r2, [r3, #4]
 800d85a:	78fb      	ldrb	r3, [r7, #3]
 800d85c:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800d860:	6879      	ldr	r1, [r7, #4]
 800d862:	f503 6389 	add.w	r3, r3, #1096	; 0x448
 800d866:	009b      	lsls	r3, r3, #2
 800d868:	440b      	add	r3, r1
 800d86a:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800d86c:	2300      	movs	r3, #0
}
 800d86e:	4618      	mov	r0, r3
 800d870:	370c      	adds	r7, #12
 800d872:	46bd      	mov	sp, r7
 800d874:	bc80      	pop	{r7}
 800d876:	4770      	bx	lr

0800d878 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800d878:	b480      	push	{r7}
 800d87a:	b085      	sub	sp, #20
 800d87c:	af00      	add	r7, sp, #0
 800d87e:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800d880:	2300      	movs	r3, #0
 800d882:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 800d884:	2300      	movs	r3, #0
 800d886:	73fb      	strb	r3, [r7, #15]
 800d888:	e010      	b.n	800d8ac <USBH_GetFreePipe+0x34>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800d88a:	7bfb      	ldrb	r3, [r7, #15]
 800d88c:	687a      	ldr	r2, [r7, #4]
 800d88e:	f503 6389 	add.w	r3, r3, #1096	; 0x448
 800d892:	009b      	lsls	r3, r3, #2
 800d894:	4413      	add	r3, r2
 800d896:	685b      	ldr	r3, [r3, #4]
 800d898:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d89c:	2b00      	cmp	r3, #0
 800d89e:	d102      	bne.n	800d8a6 <USBH_GetFreePipe+0x2e>
    {
      return (uint16_t)idx;
 800d8a0:	7bfb      	ldrb	r3, [r7, #15]
 800d8a2:	b29b      	uxth	r3, r3
 800d8a4:	e007      	b.n	800d8b6 <USBH_GetFreePipe+0x3e>
  for (idx = 0U ; idx < 11U ; idx++)
 800d8a6:	7bfb      	ldrb	r3, [r7, #15]
 800d8a8:	3301      	adds	r3, #1
 800d8aa:	73fb      	strb	r3, [r7, #15]
 800d8ac:	7bfb      	ldrb	r3, [r7, #15]
 800d8ae:	2b0a      	cmp	r3, #10
 800d8b0:	d9eb      	bls.n	800d88a <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800d8b2:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800d8b6:	4618      	mov	r0, r3
 800d8b8:	3714      	adds	r7, #20
 800d8ba:	46bd      	mov	sp, r7
 800d8bc:	bc80      	pop	{r7}
 800d8be:	4770      	bx	lr

0800d8c0 <USBH_CDC_ReceiveCallback>:



int flag = 1;
void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 800d8c0:	b580      	push	{r7, lr}
 800d8c2:	b082      	sub	sp, #8
 800d8c4:	af00      	add	r7, sp, #0
 800d8c6:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, 1);
 800d8c8:	2201      	movs	r2, #1
 800d8ca:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800d8ce:	4805      	ldr	r0, [pc, #20]	; (800d8e4 <USBH_CDC_ReceiveCallback+0x24>)
 800d8d0:	f7f3 fd78 	bl	80013c4 <HAL_GPIO_WritePin>
	flag = 1;
 800d8d4:	4b04      	ldr	r3, [pc, #16]	; (800d8e8 <USBH_CDC_ReceiveCallback+0x28>)
 800d8d6:	2201      	movs	r2, #1
 800d8d8:	601a      	str	r2, [r3, #0]
}
 800d8da:	bf00      	nop
 800d8dc:	3708      	adds	r7, #8
 800d8de:	46bd      	mov	sp, r7
 800d8e0:	bd80      	pop	{r7, pc}
 800d8e2:	bf00      	nop
 800d8e4:	40011400 	.word	0x40011400
 800d8e8:	200000ac 	.word	0x200000ac

0800d8ec <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800d8ec:	b580      	push	{r7, lr}
 800d8ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800d8f0:	2201      	movs	r2, #1
 800d8f2:	4920      	ldr	r1, [pc, #128]	; (800d974 <MX_USB_HOST_Init+0x88>)
 800d8f4:	4820      	ldr	r0, [pc, #128]	; (800d978 <MX_USB_HOST_Init+0x8c>)
 800d8f6:	f7fe fb5d 	bl	800bfb4 <USBH_Init>
 800d8fa:	4603      	mov	r3, r0
 800d8fc:	2b00      	cmp	r3, #0
 800d8fe:	d001      	beq.n	800d904 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800d900:	f7f2 ff2c 	bl	800075c <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_AUDIO_CLASS) != USBH_OK)
 800d904:	491d      	ldr	r1, [pc, #116]	; (800d97c <MX_USB_HOST_Init+0x90>)
 800d906:	481c      	ldr	r0, [pc, #112]	; (800d978 <MX_USB_HOST_Init+0x8c>)
 800d908:	f7fe fbf8 	bl	800c0fc <USBH_RegisterClass>
 800d90c:	4603      	mov	r3, r0
 800d90e:	2b00      	cmp	r3, #0
 800d910:	d001      	beq.n	800d916 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800d912:	f7f2 ff23 	bl	800075c <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800d916:	491a      	ldr	r1, [pc, #104]	; (800d980 <MX_USB_HOST_Init+0x94>)
 800d918:	4817      	ldr	r0, [pc, #92]	; (800d978 <MX_USB_HOST_Init+0x8c>)
 800d91a:	f7fe fbef 	bl	800c0fc <USBH_RegisterClass>
 800d91e:	4603      	mov	r3, r0
 800d920:	2b00      	cmp	r3, #0
 800d922:	d001      	beq.n	800d928 <MX_USB_HOST_Init+0x3c>
  {
    Error_Handler();
 800d924:	f7f2 ff1a 	bl	800075c <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_MSC_CLASS) != USBH_OK)
 800d928:	4916      	ldr	r1, [pc, #88]	; (800d984 <MX_USB_HOST_Init+0x98>)
 800d92a:	4813      	ldr	r0, [pc, #76]	; (800d978 <MX_USB_HOST_Init+0x8c>)
 800d92c:	f7fe fbe6 	bl	800c0fc <USBH_RegisterClass>
 800d930:	4603      	mov	r3, r0
 800d932:	2b00      	cmp	r3, #0
 800d934:	d001      	beq.n	800d93a <MX_USB_HOST_Init+0x4e>
  {
    Error_Handler();
 800d936:	f7f2 ff11 	bl	800075c <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_HID_CLASS) != USBH_OK)
 800d93a:	4913      	ldr	r1, [pc, #76]	; (800d988 <MX_USB_HOST_Init+0x9c>)
 800d93c:	480e      	ldr	r0, [pc, #56]	; (800d978 <MX_USB_HOST_Init+0x8c>)
 800d93e:	f7fe fbdd 	bl	800c0fc <USBH_RegisterClass>
 800d942:	4603      	mov	r3, r0
 800d944:	2b00      	cmp	r3, #0
 800d946:	d001      	beq.n	800d94c <MX_USB_HOST_Init+0x60>
  {
    Error_Handler();
 800d948:	f7f2 ff08 	bl	800075c <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_MTP_CLASS) != USBH_OK)
 800d94c:	490f      	ldr	r1, [pc, #60]	; (800d98c <MX_USB_HOST_Init+0xa0>)
 800d94e:	480a      	ldr	r0, [pc, #40]	; (800d978 <MX_USB_HOST_Init+0x8c>)
 800d950:	f7fe fbd4 	bl	800c0fc <USBH_RegisterClass>
 800d954:	4603      	mov	r3, r0
 800d956:	2b00      	cmp	r3, #0
 800d958:	d001      	beq.n	800d95e <MX_USB_HOST_Init+0x72>
  {
    Error_Handler();
 800d95a:	f7f2 feff 	bl	800075c <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800d95e:	4806      	ldr	r0, [pc, #24]	; (800d978 <MX_USB_HOST_Init+0x8c>)
 800d960:	f7fe fcf7 	bl	800c352 <USBH_Start>
 800d964:	4603      	mov	r3, r0
 800d966:	2b00      	cmp	r3, #0
 800d968:	d001      	beq.n	800d96e <MX_USB_HOST_Init+0x82>
  {
    Error_Handler();
 800d96a:	f7f2 fef7 	bl	800075c <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800d96e:	bf00      	nop
 800d970:	bd80      	pop	{r7, pc}
 800d972:	bf00      	nop
 800d974:	0800d9a5 	.word	0x0800d9a5
 800d978:	200001fc 	.word	0x200001fc
 800d97c:	2000000c 	.word	0x2000000c
 800d980:	2000002c 	.word	0x2000002c
 800d984:	2000006c 	.word	0x2000006c
 800d988:	2000004c 	.word	0x2000004c
 800d98c:	2000008c 	.word	0x2000008c

0800d990 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800d990:	b580      	push	{r7, lr}
 800d992:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800d994:	4802      	ldr	r0, [pc, #8]	; (800d9a0 <MX_USB_HOST_Process+0x10>)
 800d996:	f7fe fced 	bl	800c374 <USBH_Process>
}
 800d99a:	bf00      	nop
 800d99c:	bd80      	pop	{r7, pc}
 800d99e:	bf00      	nop
 800d9a0:	200001fc 	.word	0x200001fc

0800d9a4 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800d9a4:	b580      	push	{r7, lr}
 800d9a6:	b082      	sub	sp, #8
 800d9a8:	af00      	add	r7, sp, #0
 800d9aa:	6078      	str	r0, [r7, #4]
 800d9ac:	460b      	mov	r3, r1
 800d9ae:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
	  switch(id)
 800d9b0:	78fb      	ldrb	r3, [r7, #3]
 800d9b2:	3b01      	subs	r3, #1
 800d9b4:	2b04      	cmp	r3, #4
 800d9b6:	d837      	bhi.n	800da28 <USBH_UserProcess+0x84>
 800d9b8:	a201      	add	r2, pc, #4	; (adr r2, 800d9c0 <USBH_UserProcess+0x1c>)
 800d9ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d9be:	bf00      	nop
 800d9c0:	0800da29 	.word	0x0800da29
 800d9c4:	0800d9e3 	.word	0x0800d9e3
 800d9c8:	0800da29 	.word	0x0800da29
 800d9cc:	0800d9f1 	.word	0x0800d9f1
 800d9d0:	0800d9d5 	.word	0x0800d9d5
	    {
	    case HOST_USER_SELECT_CONFIGURATION:
	    break;

	    case HOST_USER_DISCONNECTION:
	    Appli_state = APPLICATION_DISCONNECT;
 800d9d4:	4b17      	ldr	r3, [pc, #92]	; (800da34 <USBH_UserProcess+0x90>)
 800d9d6:	2203      	movs	r2, #3
 800d9d8:	701a      	strb	r2, [r3, #0]
	    UARTPrint("APPLICATION_DISCONNECT\r\n");
 800d9da:	4817      	ldr	r0, [pc, #92]	; (800da38 <USBH_UserProcess+0x94>)
 800d9dc:	f7f2 fdf2 	bl	80005c4 <UARTPrint>

	    break;
 800d9e0:	e023      	b.n	800da2a <USBH_UserProcess+0x86>

	    case HOST_USER_CLASS_ACTIVE:
	    Appli_state = APPLICATION_READY;
 800d9e2:	4b14      	ldr	r3, [pc, #80]	; (800da34 <USBH_UserProcess+0x90>)
 800d9e4:	2202      	movs	r2, #2
 800d9e6:	701a      	strb	r2, [r3, #0]
	    UARTPrint("APPLICATION_READY\r\n");
 800d9e8:	4814      	ldr	r0, [pc, #80]	; (800da3c <USBH_UserProcess+0x98>)
 800d9ea:	f7f2 fdeb 	bl	80005c4 <UARTPrint>

	    break;
 800d9ee:	e01c      	b.n	800da2a <USBH_UserProcess+0x86>

	    case HOST_USER_CONNECTION:
	    Appli_state = APPLICATION_START;
 800d9f0:	4b10      	ldr	r3, [pc, #64]	; (800da34 <USBH_UserProcess+0x90>)
 800d9f2:	2201      	movs	r2, #1
 800d9f4:	701a      	strb	r2, [r3, #0]
	    UARTPrint("APPLICATION_START\r\n");
 800d9f6:	4812      	ldr	r0, [pc, #72]	; (800da40 <USBH_UserProcess+0x9c>)
 800d9f8:	f7f2 fde4 	bl	80005c4 <UARTPrint>
	    UARTPrint("idVendor= %d",phost->device.DevDesc.idVendor);
 800d9fc:	687b      	ldr	r3, [r7, #4]
 800d9fe:	f8b3 392c 	ldrh.w	r3, [r3, #2348]	; 0x92c
 800da02:	4619      	mov	r1, r3
 800da04:	480f      	ldr	r0, [pc, #60]	; (800da44 <USBH_UserProcess+0xa0>)
 800da06:	f7f2 fddd 	bl	80005c4 <UARTPrint>
	    UARTPrint("idProduct= %d",phost->device.DevDesc.idProduct);
 800da0a:	687b      	ldr	r3, [r7, #4]
 800da0c:	f8b3 392e 	ldrh.w	r3, [r3, #2350]	; 0x92e
 800da10:	4619      	mov	r1, r3
 800da12:	480d      	ldr	r0, [pc, #52]	; (800da48 <USBH_UserProcess+0xa4>)
 800da14:	f7f2 fdd6 	bl	80005c4 <UARTPrint>
	    UARTPrint("decs=%d",phost->device.DevDesc.bDescriptorType);
 800da18:	687b      	ldr	r3, [r7, #4]
 800da1a:	f893 3925 	ldrb.w	r3, [r3, #2341]	; 0x925
 800da1e:	4619      	mov	r1, r3
 800da20:	480a      	ldr	r0, [pc, #40]	; (800da4c <USBH_UserProcess+0xa8>)
 800da22:	f7f2 fdcf 	bl	80005c4 <UARTPrint>

	    break;
 800da26:	e000      	b.n	800da2a <USBH_UserProcess+0x86>

	    default:
	    break;
 800da28:	bf00      	nop
	    }
  /* USER CODE END CALL_BACK_1 */
}
 800da2a:	bf00      	nop
 800da2c:	3708      	adds	r7, #8
 800da2e:	46bd      	mov	sp, r7
 800da30:	bd80      	pop	{r7, pc}
 800da32:	bf00      	nop
 800da34:	20001370 	.word	0x20001370
 800da38:	080100dc 	.word	0x080100dc
 800da3c:	080100f8 	.word	0x080100f8
 800da40:	0801010c 	.word	0x0801010c
 800da44:	08010120 	.word	0x08010120
 800da48:	08010130 	.word	0x08010130
 800da4c:	08010140 	.word	0x08010140

0800da50 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800da50:	b580      	push	{r7, lr}
 800da52:	b084      	sub	sp, #16
 800da54:	af00      	add	r7, sp, #0
 800da56:	6078      	str	r0, [r7, #4]
  if(hcdHandle->Instance==USB_OTG_FS)
 800da58:	687b      	ldr	r3, [r7, #4]
 800da5a:	681b      	ldr	r3, [r3, #0]
 800da5c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800da60:	d113      	bne.n	800da8a <HAL_HCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800da62:	4b0c      	ldr	r3, [pc, #48]	; (800da94 <HAL_HCD_MspInit+0x44>)
 800da64:	695b      	ldr	r3, [r3, #20]
 800da66:	4a0b      	ldr	r2, [pc, #44]	; (800da94 <HAL_HCD_MspInit+0x44>)
 800da68:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800da6c:	6153      	str	r3, [r2, #20]
 800da6e:	4b09      	ldr	r3, [pc, #36]	; (800da94 <HAL_HCD_MspInit+0x44>)
 800da70:	695b      	ldr	r3, [r3, #20]
 800da72:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800da76:	60fb      	str	r3, [r7, #12]
 800da78:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800da7a:	2200      	movs	r2, #0
 800da7c:	2100      	movs	r1, #0
 800da7e:	2043      	movs	r0, #67	; 0x43
 800da80:	f7f3 f9af 	bl	8000de2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800da84:	2043      	movs	r0, #67	; 0x43
 800da86:	f7f3 f9c8 	bl	8000e1a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800da8a:	bf00      	nop
 800da8c:	3710      	adds	r7, #16
 800da8e:	46bd      	mov	sp, r7
 800da90:	bd80      	pop	{r7, pc}
 800da92:	bf00      	nop
 800da94:	40021000 	.word	0x40021000

0800da98 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800da98:	b580      	push	{r7, lr}
 800da9a:	b082      	sub	sp, #8
 800da9c:	af00      	add	r7, sp, #0
 800da9e:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800daa0:	687b      	ldr	r3, [r7, #4]
 800daa2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800daa6:	4618      	mov	r0, r3
 800daa8:	f7ff f831 	bl	800cb0e <USBH_LL_IncTimer>
}
 800daac:	bf00      	nop
 800daae:	3708      	adds	r7, #8
 800dab0:	46bd      	mov	sp, r7
 800dab2:	bd80      	pop	{r7, pc}

0800dab4 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800dab4:	b580      	push	{r7, lr}
 800dab6:	b082      	sub	sp, #8
 800dab8:	af00      	add	r7, sp, #0
 800daba:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800dabc:	687b      	ldr	r3, [r7, #4]
 800dabe:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800dac2:	4618      	mov	r0, r3
 800dac4:	f7ff f86f 	bl	800cba6 <USBH_LL_Connect>
}
 800dac8:	bf00      	nop
 800daca:	3708      	adds	r7, #8
 800dacc:	46bd      	mov	sp, r7
 800dace:	bd80      	pop	{r7, pc}

0800dad0 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800dad0:	b580      	push	{r7, lr}
 800dad2:	b082      	sub	sp, #8
 800dad4:	af00      	add	r7, sp, #0
 800dad6:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800dad8:	687b      	ldr	r3, [r7, #4]
 800dada:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800dade:	4618      	mov	r0, r3
 800dae0:	f7ff f877 	bl	800cbd2 <USBH_LL_Disconnect>
}
 800dae4:	bf00      	nop
 800dae6:	3708      	adds	r7, #8
 800dae8:	46bd      	mov	sp, r7
 800daea:	bd80      	pop	{r7, pc}

0800daec <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800daec:	b480      	push	{r7}
 800daee:	b083      	sub	sp, #12
 800daf0:	af00      	add	r7, sp, #0
 800daf2:	6078      	str	r0, [r7, #4]
 800daf4:	460b      	mov	r3, r1
 800daf6:	70fb      	strb	r3, [r7, #3]
 800daf8:	4613      	mov	r3, r2
 800dafa:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800dafc:	bf00      	nop
 800dafe:	370c      	adds	r7, #12
 800db00:	46bd      	mov	sp, r7
 800db02:	bc80      	pop	{r7}
 800db04:	4770      	bx	lr

0800db06 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800db06:	b580      	push	{r7, lr}
 800db08:	b082      	sub	sp, #8
 800db0a:	af00      	add	r7, sp, #0
 800db0c:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800db0e:	687b      	ldr	r3, [r7, #4]
 800db10:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800db14:	4618      	mov	r0, r3
 800db16:	f7ff f82c 	bl	800cb72 <USBH_LL_PortEnabled>
}
 800db1a:	bf00      	nop
 800db1c:	3708      	adds	r7, #8
 800db1e:	46bd      	mov	sp, r7
 800db20:	bd80      	pop	{r7, pc}

0800db22 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800db22:	b580      	push	{r7, lr}
 800db24:	b082      	sub	sp, #8
 800db26:	af00      	add	r7, sp, #0
 800db28:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800db2a:	687b      	ldr	r3, [r7, #4]
 800db2c:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800db30:	4618      	mov	r0, r3
 800db32:	f7ff f82b 	bl	800cb8c <USBH_LL_PortDisabled>
}
 800db36:	bf00      	nop
 800db38:	3708      	adds	r7, #8
 800db3a:	46bd      	mov	sp, r7
 800db3c:	bd80      	pop	{r7, pc}
	...

0800db40 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800db40:	b580      	push	{r7, lr}
 800db42:	b082      	sub	sp, #8
 800db44:	af00      	add	r7, sp, #0
 800db46:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800db48:	687b      	ldr	r3, [r7, #4]
 800db4a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800db4e:	f893 3168 	ldrb.w	r3, [r3, #360]	; 0x168
 800db52:	2b01      	cmp	r3, #1
 800db54:	d12a      	bne.n	800dbac <USBH_LL_Init+0x6c>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800db56:	4a18      	ldr	r2, [pc, #96]	; (800dbb8 <USBH_LL_Init+0x78>)
 800db58:	687b      	ldr	r3, [r7, #4]
 800db5a:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 800db5e:	687b      	ldr	r3, [r7, #4]
 800db60:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800db64:	461a      	mov	r2, r3
 800db66:	4b14      	ldr	r3, [pc, #80]	; (800dbb8 <USBH_LL_Init+0x78>)
 800db68:	f8c2 316c 	str.w	r3, [r2, #364]	; 0x16c

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800db6c:	4b12      	ldr	r3, [pc, #72]	; (800dbb8 <USBH_LL_Init+0x78>)
 800db6e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800db72:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800db74:	4b10      	ldr	r3, [pc, #64]	; (800dbb8 <USBH_LL_Init+0x78>)
 800db76:	2208      	movs	r2, #8
 800db78:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_LOW;
 800db7a:	4b0f      	ldr	r3, [pc, #60]	; (800dbb8 <USBH_LL_Init+0x78>)
 800db7c:	2201      	movs	r2, #1
 800db7e:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800db80:	4b0d      	ldr	r3, [pc, #52]	; (800dbb8 <USBH_LL_Init+0x78>)
 800db82:	2202      	movs	r2, #2
 800db84:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800db86:	4b0c      	ldr	r3, [pc, #48]	; (800dbb8 <USBH_LL_Init+0x78>)
 800db88:	2200      	movs	r2, #0
 800db8a:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800db8c:	480a      	ldr	r0, [pc, #40]	; (800dbb8 <USBH_LL_Init+0x78>)
 800db8e:	f7f3 fc31 	bl	80013f4 <HAL_HCD_Init>
 800db92:	4603      	mov	r3, r0
 800db94:	2b00      	cmp	r3, #0
 800db96:	d001      	beq.n	800db9c <USBH_LL_Init+0x5c>
  {
    Error_Handler( );
 800db98:	f7f2 fde0 	bl	800075c <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800db9c:	4806      	ldr	r0, [pc, #24]	; (800dbb8 <USBH_LL_Init+0x78>)
 800db9e:	f7f4 f807 	bl	8001bb0 <HAL_HCD_GetCurrentFrame>
 800dba2:	4603      	mov	r3, r0
 800dba4:	4619      	mov	r1, r3
 800dba6:	6878      	ldr	r0, [r7, #4]
 800dba8:	f7fe ffa0 	bl	800caec <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800dbac:	2300      	movs	r3, #0
}
 800dbae:	4618      	mov	r0, r3
 800dbb0:	3708      	adds	r7, #8
 800dbb2:	46bd      	mov	sp, r7
 800dbb4:	bd80      	pop	{r7, pc}
 800dbb6:	bf00      	nop
 800dbb8:	20001374 	.word	0x20001374

0800dbbc <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800dbbc:	b580      	push	{r7, lr}
 800dbbe:	b084      	sub	sp, #16
 800dbc0:	af00      	add	r7, sp, #0
 800dbc2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dbc4:	2300      	movs	r3, #0
 800dbc6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800dbc8:	2300      	movs	r3, #0
 800dbca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800dbcc:	687b      	ldr	r3, [r7, #4]
 800dbce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dbd2:	f8d3 316c 	ldr.w	r3, [r3, #364]	; 0x16c
 800dbd6:	4618      	mov	r0, r3
 800dbd8:	f7f3 ff76 	bl	8001ac8 <HAL_HCD_Start>
 800dbdc:	4603      	mov	r3, r0
 800dbde:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800dbe0:	7bfb      	ldrb	r3, [r7, #15]
 800dbe2:	4618      	mov	r0, r3
 800dbe4:	f000 f994 	bl	800df10 <USBH_Get_USB_Status>
 800dbe8:	4603      	mov	r3, r0
 800dbea:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800dbec:	7bbb      	ldrb	r3, [r7, #14]
}
 800dbee:	4618      	mov	r0, r3
 800dbf0:	3710      	adds	r7, #16
 800dbf2:	46bd      	mov	sp, r7
 800dbf4:	bd80      	pop	{r7, pc}

0800dbf6 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800dbf6:	b580      	push	{r7, lr}
 800dbf8:	b084      	sub	sp, #16
 800dbfa:	af00      	add	r7, sp, #0
 800dbfc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dbfe:	2300      	movs	r3, #0
 800dc00:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800dc02:	2300      	movs	r3, #0
 800dc04:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800dc06:	687b      	ldr	r3, [r7, #4]
 800dc08:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dc0c:	f8d3 316c 	ldr.w	r3, [r3, #364]	; 0x16c
 800dc10:	4618      	mov	r0, r3
 800dc12:	f7f3 ff7c 	bl	8001b0e <HAL_HCD_Stop>
 800dc16:	4603      	mov	r3, r0
 800dc18:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800dc1a:	7bfb      	ldrb	r3, [r7, #15]
 800dc1c:	4618      	mov	r0, r3
 800dc1e:	f000 f977 	bl	800df10 <USBH_Get_USB_Status>
 800dc22:	4603      	mov	r3, r0
 800dc24:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800dc26:	7bbb      	ldrb	r3, [r7, #14]
}
 800dc28:	4618      	mov	r0, r3
 800dc2a:	3710      	adds	r7, #16
 800dc2c:	46bd      	mov	sp, r7
 800dc2e:	bd80      	pop	{r7, pc}

0800dc30 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800dc30:	b580      	push	{r7, lr}
 800dc32:	b084      	sub	sp, #16
 800dc34:	af00      	add	r7, sp, #0
 800dc36:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800dc38:	2301      	movs	r3, #1
 800dc3a:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800dc3c:	687b      	ldr	r3, [r7, #4]
 800dc3e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dc42:	f8d3 316c 	ldr.w	r3, [r3, #364]	; 0x16c
 800dc46:	4618      	mov	r0, r3
 800dc48:	f7f3 ffc0 	bl	8001bcc <HAL_HCD_GetCurrentSpeed>
 800dc4c:	4603      	mov	r3, r0
 800dc4e:	2b02      	cmp	r3, #2
 800dc50:	d00c      	beq.n	800dc6c <USBH_LL_GetSpeed+0x3c>
 800dc52:	2b02      	cmp	r3, #2
 800dc54:	d80d      	bhi.n	800dc72 <USBH_LL_GetSpeed+0x42>
 800dc56:	2b00      	cmp	r3, #0
 800dc58:	d002      	beq.n	800dc60 <USBH_LL_GetSpeed+0x30>
 800dc5a:	2b01      	cmp	r3, #1
 800dc5c:	d003      	beq.n	800dc66 <USBH_LL_GetSpeed+0x36>
 800dc5e:	e008      	b.n	800dc72 <USBH_LL_GetSpeed+0x42>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800dc60:	2300      	movs	r3, #0
 800dc62:	73fb      	strb	r3, [r7, #15]
    break;
 800dc64:	e008      	b.n	800dc78 <USBH_LL_GetSpeed+0x48>

  case 1 :
    speed = USBH_SPEED_FULL;
 800dc66:	2301      	movs	r3, #1
 800dc68:	73fb      	strb	r3, [r7, #15]
    break;
 800dc6a:	e005      	b.n	800dc78 <USBH_LL_GetSpeed+0x48>

  case 2 :
    speed = USBH_SPEED_LOW;
 800dc6c:	2302      	movs	r3, #2
 800dc6e:	73fb      	strb	r3, [r7, #15]
    break;
 800dc70:	e002      	b.n	800dc78 <USBH_LL_GetSpeed+0x48>

  default:
   speed = USBH_SPEED_FULL;
 800dc72:	2301      	movs	r3, #1
 800dc74:	73fb      	strb	r3, [r7, #15]
    break;
 800dc76:	bf00      	nop
  }
  return  speed;
 800dc78:	7bfb      	ldrb	r3, [r7, #15]
}
 800dc7a:	4618      	mov	r0, r3
 800dc7c:	3710      	adds	r7, #16
 800dc7e:	46bd      	mov	sp, r7
 800dc80:	bd80      	pop	{r7, pc}

0800dc82 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800dc82:	b580      	push	{r7, lr}
 800dc84:	b084      	sub	sp, #16
 800dc86:	af00      	add	r7, sp, #0
 800dc88:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dc8a:	2300      	movs	r3, #0
 800dc8c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800dc8e:	2300      	movs	r3, #0
 800dc90:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800dc92:	687b      	ldr	r3, [r7, #4]
 800dc94:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dc98:	f8d3 316c 	ldr.w	r3, [r3, #364]	; 0x16c
 800dc9c:	4618      	mov	r0, r3
 800dc9e:	f7f3 ff53 	bl	8001b48 <HAL_HCD_ResetPort>
 800dca2:	4603      	mov	r3, r0
 800dca4:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800dca6:	7bfb      	ldrb	r3, [r7, #15]
 800dca8:	4618      	mov	r0, r3
 800dcaa:	f000 f931 	bl	800df10 <USBH_Get_USB_Status>
 800dcae:	4603      	mov	r3, r0
 800dcb0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800dcb2:	7bbb      	ldrb	r3, [r7, #14]
}
 800dcb4:	4618      	mov	r0, r3
 800dcb6:	3710      	adds	r7, #16
 800dcb8:	46bd      	mov	sp, r7
 800dcba:	bd80      	pop	{r7, pc}

0800dcbc <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800dcbc:	b580      	push	{r7, lr}
 800dcbe:	b082      	sub	sp, #8
 800dcc0:	af00      	add	r7, sp, #0
 800dcc2:	6078      	str	r0, [r7, #4]
 800dcc4:	460b      	mov	r3, r1
 800dcc6:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800dcc8:	687b      	ldr	r3, [r7, #4]
 800dcca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dcce:	f8d3 316c 	ldr.w	r3, [r3, #364]	; 0x16c
 800dcd2:	78fa      	ldrb	r2, [r7, #3]
 800dcd4:	4611      	mov	r1, r2
 800dcd6:	4618      	mov	r0, r3
 800dcd8:	f7f3 ff57 	bl	8001b8a <HAL_HCD_HC_GetXferCount>
 800dcdc:	4603      	mov	r3, r0
}
 800dcde:	4618      	mov	r0, r3
 800dce0:	3708      	adds	r7, #8
 800dce2:	46bd      	mov	sp, r7
 800dce4:	bd80      	pop	{r7, pc}

0800dce6 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800dce6:	b590      	push	{r4, r7, lr}
 800dce8:	b089      	sub	sp, #36	; 0x24
 800dcea:	af04      	add	r7, sp, #16
 800dcec:	6078      	str	r0, [r7, #4]
 800dcee:	4608      	mov	r0, r1
 800dcf0:	4611      	mov	r1, r2
 800dcf2:	461a      	mov	r2, r3
 800dcf4:	4603      	mov	r3, r0
 800dcf6:	70fb      	strb	r3, [r7, #3]
 800dcf8:	460b      	mov	r3, r1
 800dcfa:	70bb      	strb	r3, [r7, #2]
 800dcfc:	4613      	mov	r3, r2
 800dcfe:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dd00:	2300      	movs	r3, #0
 800dd02:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800dd04:	2300      	movs	r3, #0
 800dd06:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800dd08:	687b      	ldr	r3, [r7, #4]
 800dd0a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dd0e:	f8d3 016c 	ldr.w	r0, [r3, #364]	; 0x16c
 800dd12:	787c      	ldrb	r4, [r7, #1]
 800dd14:	78ba      	ldrb	r2, [r7, #2]
 800dd16:	78f9      	ldrb	r1, [r7, #3]
 800dd18:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800dd1a:	9302      	str	r3, [sp, #8]
 800dd1c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800dd20:	9301      	str	r3, [sp, #4]
 800dd22:	f897 3020 	ldrb.w	r3, [r7, #32]
 800dd26:	9300      	str	r3, [sp, #0]
 800dd28:	4623      	mov	r3, r4
 800dd2a:	f7f3 fbc5 	bl	80014b8 <HAL_HCD_HC_Init>
 800dd2e:	4603      	mov	r3, r0
 800dd30:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800dd32:	7bfb      	ldrb	r3, [r7, #15]
 800dd34:	4618      	mov	r0, r3
 800dd36:	f000 f8eb 	bl	800df10 <USBH_Get_USB_Status>
 800dd3a:	4603      	mov	r3, r0
 800dd3c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800dd3e:	7bbb      	ldrb	r3, [r7, #14]
}
 800dd40:	4618      	mov	r0, r3
 800dd42:	3714      	adds	r7, #20
 800dd44:	46bd      	mov	sp, r7
 800dd46:	bd90      	pop	{r4, r7, pc}

0800dd48 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800dd48:	b580      	push	{r7, lr}
 800dd4a:	b084      	sub	sp, #16
 800dd4c:	af00      	add	r7, sp, #0
 800dd4e:	6078      	str	r0, [r7, #4]
 800dd50:	460b      	mov	r3, r1
 800dd52:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dd54:	2300      	movs	r3, #0
 800dd56:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800dd58:	2300      	movs	r3, #0
 800dd5a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800dd5c:	687b      	ldr	r3, [r7, #4]
 800dd5e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dd62:	f8d3 316c 	ldr.w	r3, [r3, #364]	; 0x16c
 800dd66:	78fa      	ldrb	r2, [r7, #3]
 800dd68:	4611      	mov	r1, r2
 800dd6a:	4618      	mov	r0, r3
 800dd6c:	f7f3 fc33 	bl	80015d6 <HAL_HCD_HC_Halt>
 800dd70:	4603      	mov	r3, r0
 800dd72:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800dd74:	7bfb      	ldrb	r3, [r7, #15]
 800dd76:	4618      	mov	r0, r3
 800dd78:	f000 f8ca 	bl	800df10 <USBH_Get_USB_Status>
 800dd7c:	4603      	mov	r3, r0
 800dd7e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800dd80:	7bbb      	ldrb	r3, [r7, #14]
}
 800dd82:	4618      	mov	r0, r3
 800dd84:	3710      	adds	r7, #16
 800dd86:	46bd      	mov	sp, r7
 800dd88:	bd80      	pop	{r7, pc}

0800dd8a <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800dd8a:	b590      	push	{r4, r7, lr}
 800dd8c:	b089      	sub	sp, #36	; 0x24
 800dd8e:	af04      	add	r7, sp, #16
 800dd90:	6078      	str	r0, [r7, #4]
 800dd92:	4608      	mov	r0, r1
 800dd94:	4611      	mov	r1, r2
 800dd96:	461a      	mov	r2, r3
 800dd98:	4603      	mov	r3, r0
 800dd9a:	70fb      	strb	r3, [r7, #3]
 800dd9c:	460b      	mov	r3, r1
 800dd9e:	70bb      	strb	r3, [r7, #2]
 800dda0:	4613      	mov	r3, r2
 800dda2:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dda4:	2300      	movs	r3, #0
 800dda6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800dda8:	2300      	movs	r3, #0
 800ddaa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800ddac:	687b      	ldr	r3, [r7, #4]
 800ddae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ddb2:	f8d3 016c 	ldr.w	r0, [r3, #364]	; 0x16c
 800ddb6:	787c      	ldrb	r4, [r7, #1]
 800ddb8:	78ba      	ldrb	r2, [r7, #2]
 800ddba:	78f9      	ldrb	r1, [r7, #3]
 800ddbc:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800ddc0:	9303      	str	r3, [sp, #12]
 800ddc2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800ddc4:	9302      	str	r3, [sp, #8]
 800ddc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ddc8:	9301      	str	r3, [sp, #4]
 800ddca:	f897 3020 	ldrb.w	r3, [r7, #32]
 800ddce:	9300      	str	r3, [sp, #0]
 800ddd0:	4623      	mov	r3, r4
 800ddd2:	f7f3 fc23 	bl	800161c <HAL_HCD_HC_SubmitRequest>
 800ddd6:	4603      	mov	r3, r0
 800ddd8:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800ddda:	7bfb      	ldrb	r3, [r7, #15]
 800dddc:	4618      	mov	r0, r3
 800ddde:	f000 f897 	bl	800df10 <USBH_Get_USB_Status>
 800dde2:	4603      	mov	r3, r0
 800dde4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800dde6:	7bbb      	ldrb	r3, [r7, #14]
}
 800dde8:	4618      	mov	r0, r3
 800ddea:	3714      	adds	r7, #20
 800ddec:	46bd      	mov	sp, r7
 800ddee:	bd90      	pop	{r4, r7, pc}

0800ddf0 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800ddf0:	b580      	push	{r7, lr}
 800ddf2:	b082      	sub	sp, #8
 800ddf4:	af00      	add	r7, sp, #0
 800ddf6:	6078      	str	r0, [r7, #4]
 800ddf8:	460b      	mov	r3, r1
 800ddfa:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800ddfc:	687b      	ldr	r3, [r7, #4]
 800ddfe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800de02:	f8d3 316c 	ldr.w	r3, [r3, #364]	; 0x16c
 800de06:	78fa      	ldrb	r2, [r7, #3]
 800de08:	4611      	mov	r1, r2
 800de0a:	4618      	mov	r0, r3
 800de0c:	f7f3 feaa 	bl	8001b64 <HAL_HCD_HC_GetURBState>
 800de10:	4603      	mov	r3, r0
}
 800de12:	4618      	mov	r0, r3
 800de14:	3708      	adds	r7, #8
 800de16:	46bd      	mov	sp, r7
 800de18:	bd80      	pop	{r7, pc}

0800de1a <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800de1a:	b580      	push	{r7, lr}
 800de1c:	b082      	sub	sp, #8
 800de1e:	af00      	add	r7, sp, #0
 800de20:	6078      	str	r0, [r7, #4]
 800de22:	460b      	mov	r3, r1
 800de24:	70fb      	strb	r3, [r7, #3]
      /* USER CODE BEGIN DRIVE_LOW_CHARGE_FOR_FS */

      /* USER CODE END DRIVE_LOW_CHARGE_FOR_FS */
    }
  }
  HAL_Delay(200);
 800de26:	20c8      	movs	r0, #200	; 0xc8
 800de28:	f7f2 ff02 	bl	8000c30 <HAL_Delay>
  return USBH_OK;
 800de2c:	2300      	movs	r3, #0
}
 800de2e:	4618      	mov	r0, r3
 800de30:	3708      	adds	r7, #8
 800de32:	46bd      	mov	sp, r7
 800de34:	bd80      	pop	{r7, pc}

0800de36 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800de36:	b480      	push	{r7}
 800de38:	b085      	sub	sp, #20
 800de3a:	af00      	add	r7, sp, #0
 800de3c:	6078      	str	r0, [r7, #4]
 800de3e:	460b      	mov	r3, r1
 800de40:	70fb      	strb	r3, [r7, #3]
 800de42:	4613      	mov	r3, r2
 800de44:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800de46:	687b      	ldr	r3, [r7, #4]
 800de48:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800de4c:	f8d3 316c 	ldr.w	r3, [r3, #364]	; 0x16c
 800de50:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800de52:	78fb      	ldrb	r3, [r7, #3]
 800de54:	68fa      	ldr	r2, [r7, #12]
 800de56:	212c      	movs	r1, #44	; 0x2c
 800de58:	fb01 f303 	mul.w	r3, r1, r3
 800de5c:	4413      	add	r3, r2
 800de5e:	333b      	adds	r3, #59	; 0x3b
 800de60:	781b      	ldrb	r3, [r3, #0]
 800de62:	2b00      	cmp	r3, #0
 800de64:	d009      	beq.n	800de7a <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800de66:	78fb      	ldrb	r3, [r7, #3]
 800de68:	68fa      	ldr	r2, [r7, #12]
 800de6a:	212c      	movs	r1, #44	; 0x2c
 800de6c:	fb01 f303 	mul.w	r3, r1, r3
 800de70:	4413      	add	r3, r2
 800de72:	3354      	adds	r3, #84	; 0x54
 800de74:	78ba      	ldrb	r2, [r7, #2]
 800de76:	701a      	strb	r2, [r3, #0]
 800de78:	e008      	b.n	800de8c <USBH_LL_SetToggle+0x56>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800de7a:	78fb      	ldrb	r3, [r7, #3]
 800de7c:	68fa      	ldr	r2, [r7, #12]
 800de7e:	212c      	movs	r1, #44	; 0x2c
 800de80:	fb01 f303 	mul.w	r3, r1, r3
 800de84:	4413      	add	r3, r2
 800de86:	3355      	adds	r3, #85	; 0x55
 800de88:	78ba      	ldrb	r2, [r7, #2]
 800de8a:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800de8c:	2300      	movs	r3, #0
}
 800de8e:	4618      	mov	r0, r3
 800de90:	3714      	adds	r7, #20
 800de92:	46bd      	mov	sp, r7
 800de94:	bc80      	pop	{r7}
 800de96:	4770      	bx	lr

0800de98 <USBH_LL_GetToggle>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval toggle (0/1)
  */
uint8_t USBH_LL_GetToggle(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800de98:	b480      	push	{r7}
 800de9a:	b085      	sub	sp, #20
 800de9c:	af00      	add	r7, sp, #0
 800de9e:	6078      	str	r0, [r7, #4]
 800dea0:	460b      	mov	r3, r1
 800dea2:	70fb      	strb	r3, [r7, #3]
  uint8_t toggle = 0;
 800dea4:	2300      	movs	r3, #0
 800dea6:	73fb      	strb	r3, [r7, #15]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800dea8:	687b      	ldr	r3, [r7, #4]
 800deaa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800deae:	f8d3 316c 	ldr.w	r3, [r3, #364]	; 0x16c
 800deb2:	60bb      	str	r3, [r7, #8]

  if(pHandle->hc[pipe].ep_is_in)
 800deb4:	78fb      	ldrb	r3, [r7, #3]
 800deb6:	68ba      	ldr	r2, [r7, #8]
 800deb8:	212c      	movs	r1, #44	; 0x2c
 800deba:	fb01 f303 	mul.w	r3, r1, r3
 800debe:	4413      	add	r3, r2
 800dec0:	333b      	adds	r3, #59	; 0x3b
 800dec2:	781b      	ldrb	r3, [r3, #0]
 800dec4:	2b00      	cmp	r3, #0
 800dec6:	d009      	beq.n	800dedc <USBH_LL_GetToggle+0x44>
  {
    toggle = pHandle->hc[pipe].toggle_in;
 800dec8:	78fb      	ldrb	r3, [r7, #3]
 800deca:	68ba      	ldr	r2, [r7, #8]
 800decc:	212c      	movs	r1, #44	; 0x2c
 800dece:	fb01 f303 	mul.w	r3, r1, r3
 800ded2:	4413      	add	r3, r2
 800ded4:	3354      	adds	r3, #84	; 0x54
 800ded6:	781b      	ldrb	r3, [r3, #0]
 800ded8:	73fb      	strb	r3, [r7, #15]
 800deda:	e008      	b.n	800deee <USBH_LL_GetToggle+0x56>
  }
  else
  {
    toggle = pHandle->hc[pipe].toggle_out;
 800dedc:	78fb      	ldrb	r3, [r7, #3]
 800dede:	68ba      	ldr	r2, [r7, #8]
 800dee0:	212c      	movs	r1, #44	; 0x2c
 800dee2:	fb01 f303 	mul.w	r3, r1, r3
 800dee6:	4413      	add	r3, r2
 800dee8:	3355      	adds	r3, #85	; 0x55
 800deea:	781b      	ldrb	r3, [r3, #0]
 800deec:	73fb      	strb	r3, [r7, #15]
  }
  return toggle;
 800deee:	7bfb      	ldrb	r3, [r7, #15]
}
 800def0:	4618      	mov	r0, r3
 800def2:	3714      	adds	r7, #20
 800def4:	46bd      	mov	sp, r7
 800def6:	bc80      	pop	{r7}
 800def8:	4770      	bx	lr

0800defa <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800defa:	b580      	push	{r7, lr}
 800defc:	b082      	sub	sp, #8
 800defe:	af00      	add	r7, sp, #0
 800df00:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800df02:	6878      	ldr	r0, [r7, #4]
 800df04:	f7f2 fe94 	bl	8000c30 <HAL_Delay>
}
 800df08:	bf00      	nop
 800df0a:	3708      	adds	r7, #8
 800df0c:	46bd      	mov	sp, r7
 800df0e:	bd80      	pop	{r7, pc}

0800df10 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800df10:	b480      	push	{r7}
 800df12:	b085      	sub	sp, #20
 800df14:	af00      	add	r7, sp, #0
 800df16:	4603      	mov	r3, r0
 800df18:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800df1a:	2300      	movs	r3, #0
 800df1c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800df1e:	79fb      	ldrb	r3, [r7, #7]
 800df20:	2b03      	cmp	r3, #3
 800df22:	d817      	bhi.n	800df54 <USBH_Get_USB_Status+0x44>
 800df24:	a201      	add	r2, pc, #4	; (adr r2, 800df2c <USBH_Get_USB_Status+0x1c>)
 800df26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800df2a:	bf00      	nop
 800df2c:	0800df3d 	.word	0x0800df3d
 800df30:	0800df43 	.word	0x0800df43
 800df34:	0800df49 	.word	0x0800df49
 800df38:	0800df4f 	.word	0x0800df4f
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800df3c:	2300      	movs	r3, #0
 800df3e:	73fb      	strb	r3, [r7, #15]
    break;
 800df40:	e00b      	b.n	800df5a <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800df42:	2302      	movs	r3, #2
 800df44:	73fb      	strb	r3, [r7, #15]
    break;
 800df46:	e008      	b.n	800df5a <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800df48:	2301      	movs	r3, #1
 800df4a:	73fb      	strb	r3, [r7, #15]
    break;
 800df4c:	e005      	b.n	800df5a <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800df4e:	2302      	movs	r3, #2
 800df50:	73fb      	strb	r3, [r7, #15]
    break;
 800df52:	e002      	b.n	800df5a <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800df54:	2302      	movs	r3, #2
 800df56:	73fb      	strb	r3, [r7, #15]
    break;
 800df58:	bf00      	nop
  }
  return usb_status;
 800df5a:	7bfb      	ldrb	r3, [r7, #15]
}
 800df5c:	4618      	mov	r0, r3
 800df5e:	3714      	adds	r7, #20
 800df60:	46bd      	mov	sp, r7
 800df62:	bc80      	pop	{r7}
 800df64:	4770      	bx	lr
 800df66:	bf00      	nop

0800df68 <__errno>:
 800df68:	4b01      	ldr	r3, [pc, #4]	; (800df70 <__errno+0x8>)
 800df6a:	6818      	ldr	r0, [r3, #0]
 800df6c:	4770      	bx	lr
 800df6e:	bf00      	nop
 800df70:	200000b0 	.word	0x200000b0

0800df74 <__libc_init_array>:
 800df74:	b570      	push	{r4, r5, r6, lr}
 800df76:	2600      	movs	r6, #0
 800df78:	4d0c      	ldr	r5, [pc, #48]	; (800dfac <__libc_init_array+0x38>)
 800df7a:	4c0d      	ldr	r4, [pc, #52]	; (800dfb0 <__libc_init_array+0x3c>)
 800df7c:	1b64      	subs	r4, r4, r5
 800df7e:	10a4      	asrs	r4, r4, #2
 800df80:	42a6      	cmp	r6, r4
 800df82:	d109      	bne.n	800df98 <__libc_init_array+0x24>
 800df84:	f001 fa16 	bl	800f3b4 <_init>
 800df88:	2600      	movs	r6, #0
 800df8a:	4d0a      	ldr	r5, [pc, #40]	; (800dfb4 <__libc_init_array+0x40>)
 800df8c:	4c0a      	ldr	r4, [pc, #40]	; (800dfb8 <__libc_init_array+0x44>)
 800df8e:	1b64      	subs	r4, r4, r5
 800df90:	10a4      	asrs	r4, r4, #2
 800df92:	42a6      	cmp	r6, r4
 800df94:	d105      	bne.n	800dfa2 <__libc_init_array+0x2e>
 800df96:	bd70      	pop	{r4, r5, r6, pc}
 800df98:	f855 3b04 	ldr.w	r3, [r5], #4
 800df9c:	4798      	blx	r3
 800df9e:	3601      	adds	r6, #1
 800dfa0:	e7ee      	b.n	800df80 <__libc_init_array+0xc>
 800dfa2:	f855 3b04 	ldr.w	r3, [r5], #4
 800dfa6:	4798      	blx	r3
 800dfa8:	3601      	adds	r6, #1
 800dfaa:	e7f2      	b.n	800df92 <__libc_init_array+0x1e>
 800dfac:	08010200 	.word	0x08010200
 800dfb0:	08010200 	.word	0x08010200
 800dfb4:	08010200 	.word	0x08010200
 800dfb8:	08010204 	.word	0x08010204

0800dfbc <__retarget_lock_init_recursive>:
 800dfbc:	4770      	bx	lr

0800dfbe <__retarget_lock_acquire_recursive>:
 800dfbe:	4770      	bx	lr

0800dfc0 <__retarget_lock_release_recursive>:
 800dfc0:	4770      	bx	lr
	...

0800dfc4 <malloc>:
 800dfc4:	4b02      	ldr	r3, [pc, #8]	; (800dfd0 <malloc+0xc>)
 800dfc6:	4601      	mov	r1, r0
 800dfc8:	6818      	ldr	r0, [r3, #0]
 800dfca:	f000 b889 	b.w	800e0e0 <_malloc_r>
 800dfce:	bf00      	nop
 800dfd0:	200000b0 	.word	0x200000b0

0800dfd4 <free>:
 800dfd4:	4b02      	ldr	r3, [pc, #8]	; (800dfe0 <free+0xc>)
 800dfd6:	4601      	mov	r1, r0
 800dfd8:	6818      	ldr	r0, [r3, #0]
 800dfda:	f000 b819 	b.w	800e010 <_free_r>
 800dfde:	bf00      	nop
 800dfe0:	200000b0 	.word	0x200000b0

0800dfe4 <memcpy>:
 800dfe4:	440a      	add	r2, r1
 800dfe6:	4291      	cmp	r1, r2
 800dfe8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800dfec:	d100      	bne.n	800dff0 <memcpy+0xc>
 800dfee:	4770      	bx	lr
 800dff0:	b510      	push	{r4, lr}
 800dff2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800dff6:	4291      	cmp	r1, r2
 800dff8:	f803 4f01 	strb.w	r4, [r3, #1]!
 800dffc:	d1f9      	bne.n	800dff2 <memcpy+0xe>
 800dffe:	bd10      	pop	{r4, pc}

0800e000 <memset>:
 800e000:	4603      	mov	r3, r0
 800e002:	4402      	add	r2, r0
 800e004:	4293      	cmp	r3, r2
 800e006:	d100      	bne.n	800e00a <memset+0xa>
 800e008:	4770      	bx	lr
 800e00a:	f803 1b01 	strb.w	r1, [r3], #1
 800e00e:	e7f9      	b.n	800e004 <memset+0x4>

0800e010 <_free_r>:
 800e010:	b538      	push	{r3, r4, r5, lr}
 800e012:	4605      	mov	r5, r0
 800e014:	2900      	cmp	r1, #0
 800e016:	d040      	beq.n	800e09a <_free_r+0x8a>
 800e018:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e01c:	1f0c      	subs	r4, r1, #4
 800e01e:	2b00      	cmp	r3, #0
 800e020:	bfb8      	it	lt
 800e022:	18e4      	addlt	r4, r4, r3
 800e024:	f000 ff34 	bl	800ee90 <__malloc_lock>
 800e028:	4a1c      	ldr	r2, [pc, #112]	; (800e09c <_free_r+0x8c>)
 800e02a:	6813      	ldr	r3, [r2, #0]
 800e02c:	b933      	cbnz	r3, 800e03c <_free_r+0x2c>
 800e02e:	6063      	str	r3, [r4, #4]
 800e030:	6014      	str	r4, [r2, #0]
 800e032:	4628      	mov	r0, r5
 800e034:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e038:	f000 bf30 	b.w	800ee9c <__malloc_unlock>
 800e03c:	42a3      	cmp	r3, r4
 800e03e:	d908      	bls.n	800e052 <_free_r+0x42>
 800e040:	6820      	ldr	r0, [r4, #0]
 800e042:	1821      	adds	r1, r4, r0
 800e044:	428b      	cmp	r3, r1
 800e046:	bf01      	itttt	eq
 800e048:	6819      	ldreq	r1, [r3, #0]
 800e04a:	685b      	ldreq	r3, [r3, #4]
 800e04c:	1809      	addeq	r1, r1, r0
 800e04e:	6021      	streq	r1, [r4, #0]
 800e050:	e7ed      	b.n	800e02e <_free_r+0x1e>
 800e052:	461a      	mov	r2, r3
 800e054:	685b      	ldr	r3, [r3, #4]
 800e056:	b10b      	cbz	r3, 800e05c <_free_r+0x4c>
 800e058:	42a3      	cmp	r3, r4
 800e05a:	d9fa      	bls.n	800e052 <_free_r+0x42>
 800e05c:	6811      	ldr	r1, [r2, #0]
 800e05e:	1850      	adds	r0, r2, r1
 800e060:	42a0      	cmp	r0, r4
 800e062:	d10b      	bne.n	800e07c <_free_r+0x6c>
 800e064:	6820      	ldr	r0, [r4, #0]
 800e066:	4401      	add	r1, r0
 800e068:	1850      	adds	r0, r2, r1
 800e06a:	4283      	cmp	r3, r0
 800e06c:	6011      	str	r1, [r2, #0]
 800e06e:	d1e0      	bne.n	800e032 <_free_r+0x22>
 800e070:	6818      	ldr	r0, [r3, #0]
 800e072:	685b      	ldr	r3, [r3, #4]
 800e074:	4401      	add	r1, r0
 800e076:	6011      	str	r1, [r2, #0]
 800e078:	6053      	str	r3, [r2, #4]
 800e07a:	e7da      	b.n	800e032 <_free_r+0x22>
 800e07c:	d902      	bls.n	800e084 <_free_r+0x74>
 800e07e:	230c      	movs	r3, #12
 800e080:	602b      	str	r3, [r5, #0]
 800e082:	e7d6      	b.n	800e032 <_free_r+0x22>
 800e084:	6820      	ldr	r0, [r4, #0]
 800e086:	1821      	adds	r1, r4, r0
 800e088:	428b      	cmp	r3, r1
 800e08a:	bf01      	itttt	eq
 800e08c:	6819      	ldreq	r1, [r3, #0]
 800e08e:	685b      	ldreq	r3, [r3, #4]
 800e090:	1809      	addeq	r1, r1, r0
 800e092:	6021      	streq	r1, [r4, #0]
 800e094:	6063      	str	r3, [r4, #4]
 800e096:	6054      	str	r4, [r2, #4]
 800e098:	e7cb      	b.n	800e032 <_free_r+0x22>
 800e09a:	bd38      	pop	{r3, r4, r5, pc}
 800e09c:	2000167c 	.word	0x2000167c

0800e0a0 <sbrk_aligned>:
 800e0a0:	b570      	push	{r4, r5, r6, lr}
 800e0a2:	4e0e      	ldr	r6, [pc, #56]	; (800e0dc <sbrk_aligned+0x3c>)
 800e0a4:	460c      	mov	r4, r1
 800e0a6:	6831      	ldr	r1, [r6, #0]
 800e0a8:	4605      	mov	r5, r0
 800e0aa:	b911      	cbnz	r1, 800e0b2 <sbrk_aligned+0x12>
 800e0ac:	f000 fba6 	bl	800e7fc <_sbrk_r>
 800e0b0:	6030      	str	r0, [r6, #0]
 800e0b2:	4621      	mov	r1, r4
 800e0b4:	4628      	mov	r0, r5
 800e0b6:	f000 fba1 	bl	800e7fc <_sbrk_r>
 800e0ba:	1c43      	adds	r3, r0, #1
 800e0bc:	d00a      	beq.n	800e0d4 <sbrk_aligned+0x34>
 800e0be:	1cc4      	adds	r4, r0, #3
 800e0c0:	f024 0403 	bic.w	r4, r4, #3
 800e0c4:	42a0      	cmp	r0, r4
 800e0c6:	d007      	beq.n	800e0d8 <sbrk_aligned+0x38>
 800e0c8:	1a21      	subs	r1, r4, r0
 800e0ca:	4628      	mov	r0, r5
 800e0cc:	f000 fb96 	bl	800e7fc <_sbrk_r>
 800e0d0:	3001      	adds	r0, #1
 800e0d2:	d101      	bne.n	800e0d8 <sbrk_aligned+0x38>
 800e0d4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800e0d8:	4620      	mov	r0, r4
 800e0da:	bd70      	pop	{r4, r5, r6, pc}
 800e0dc:	20001680 	.word	0x20001680

0800e0e0 <_malloc_r>:
 800e0e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e0e4:	1ccd      	adds	r5, r1, #3
 800e0e6:	f025 0503 	bic.w	r5, r5, #3
 800e0ea:	3508      	adds	r5, #8
 800e0ec:	2d0c      	cmp	r5, #12
 800e0ee:	bf38      	it	cc
 800e0f0:	250c      	movcc	r5, #12
 800e0f2:	2d00      	cmp	r5, #0
 800e0f4:	4607      	mov	r7, r0
 800e0f6:	db01      	blt.n	800e0fc <_malloc_r+0x1c>
 800e0f8:	42a9      	cmp	r1, r5
 800e0fa:	d905      	bls.n	800e108 <_malloc_r+0x28>
 800e0fc:	230c      	movs	r3, #12
 800e0fe:	2600      	movs	r6, #0
 800e100:	603b      	str	r3, [r7, #0]
 800e102:	4630      	mov	r0, r6
 800e104:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e108:	4e2e      	ldr	r6, [pc, #184]	; (800e1c4 <_malloc_r+0xe4>)
 800e10a:	f000 fec1 	bl	800ee90 <__malloc_lock>
 800e10e:	6833      	ldr	r3, [r6, #0]
 800e110:	461c      	mov	r4, r3
 800e112:	bb34      	cbnz	r4, 800e162 <_malloc_r+0x82>
 800e114:	4629      	mov	r1, r5
 800e116:	4638      	mov	r0, r7
 800e118:	f7ff ffc2 	bl	800e0a0 <sbrk_aligned>
 800e11c:	1c43      	adds	r3, r0, #1
 800e11e:	4604      	mov	r4, r0
 800e120:	d14d      	bne.n	800e1be <_malloc_r+0xde>
 800e122:	6834      	ldr	r4, [r6, #0]
 800e124:	4626      	mov	r6, r4
 800e126:	2e00      	cmp	r6, #0
 800e128:	d140      	bne.n	800e1ac <_malloc_r+0xcc>
 800e12a:	6823      	ldr	r3, [r4, #0]
 800e12c:	4631      	mov	r1, r6
 800e12e:	4638      	mov	r0, r7
 800e130:	eb04 0803 	add.w	r8, r4, r3
 800e134:	f000 fb62 	bl	800e7fc <_sbrk_r>
 800e138:	4580      	cmp	r8, r0
 800e13a:	d13a      	bne.n	800e1b2 <_malloc_r+0xd2>
 800e13c:	6821      	ldr	r1, [r4, #0]
 800e13e:	3503      	adds	r5, #3
 800e140:	1a6d      	subs	r5, r5, r1
 800e142:	f025 0503 	bic.w	r5, r5, #3
 800e146:	3508      	adds	r5, #8
 800e148:	2d0c      	cmp	r5, #12
 800e14a:	bf38      	it	cc
 800e14c:	250c      	movcc	r5, #12
 800e14e:	4638      	mov	r0, r7
 800e150:	4629      	mov	r1, r5
 800e152:	f7ff ffa5 	bl	800e0a0 <sbrk_aligned>
 800e156:	3001      	adds	r0, #1
 800e158:	d02b      	beq.n	800e1b2 <_malloc_r+0xd2>
 800e15a:	6823      	ldr	r3, [r4, #0]
 800e15c:	442b      	add	r3, r5
 800e15e:	6023      	str	r3, [r4, #0]
 800e160:	e00e      	b.n	800e180 <_malloc_r+0xa0>
 800e162:	6822      	ldr	r2, [r4, #0]
 800e164:	1b52      	subs	r2, r2, r5
 800e166:	d41e      	bmi.n	800e1a6 <_malloc_r+0xc6>
 800e168:	2a0b      	cmp	r2, #11
 800e16a:	d916      	bls.n	800e19a <_malloc_r+0xba>
 800e16c:	1961      	adds	r1, r4, r5
 800e16e:	42a3      	cmp	r3, r4
 800e170:	6025      	str	r5, [r4, #0]
 800e172:	bf18      	it	ne
 800e174:	6059      	strne	r1, [r3, #4]
 800e176:	6863      	ldr	r3, [r4, #4]
 800e178:	bf08      	it	eq
 800e17a:	6031      	streq	r1, [r6, #0]
 800e17c:	5162      	str	r2, [r4, r5]
 800e17e:	604b      	str	r3, [r1, #4]
 800e180:	4638      	mov	r0, r7
 800e182:	f104 060b 	add.w	r6, r4, #11
 800e186:	f000 fe89 	bl	800ee9c <__malloc_unlock>
 800e18a:	f026 0607 	bic.w	r6, r6, #7
 800e18e:	1d23      	adds	r3, r4, #4
 800e190:	1af2      	subs	r2, r6, r3
 800e192:	d0b6      	beq.n	800e102 <_malloc_r+0x22>
 800e194:	1b9b      	subs	r3, r3, r6
 800e196:	50a3      	str	r3, [r4, r2]
 800e198:	e7b3      	b.n	800e102 <_malloc_r+0x22>
 800e19a:	6862      	ldr	r2, [r4, #4]
 800e19c:	42a3      	cmp	r3, r4
 800e19e:	bf0c      	ite	eq
 800e1a0:	6032      	streq	r2, [r6, #0]
 800e1a2:	605a      	strne	r2, [r3, #4]
 800e1a4:	e7ec      	b.n	800e180 <_malloc_r+0xa0>
 800e1a6:	4623      	mov	r3, r4
 800e1a8:	6864      	ldr	r4, [r4, #4]
 800e1aa:	e7b2      	b.n	800e112 <_malloc_r+0x32>
 800e1ac:	4634      	mov	r4, r6
 800e1ae:	6876      	ldr	r6, [r6, #4]
 800e1b0:	e7b9      	b.n	800e126 <_malloc_r+0x46>
 800e1b2:	230c      	movs	r3, #12
 800e1b4:	4638      	mov	r0, r7
 800e1b6:	603b      	str	r3, [r7, #0]
 800e1b8:	f000 fe70 	bl	800ee9c <__malloc_unlock>
 800e1bc:	e7a1      	b.n	800e102 <_malloc_r+0x22>
 800e1be:	6025      	str	r5, [r4, #0]
 800e1c0:	e7de      	b.n	800e180 <_malloc_r+0xa0>
 800e1c2:	bf00      	nop
 800e1c4:	2000167c 	.word	0x2000167c

0800e1c8 <__sfputc_r>:
 800e1c8:	6893      	ldr	r3, [r2, #8]
 800e1ca:	b410      	push	{r4}
 800e1cc:	3b01      	subs	r3, #1
 800e1ce:	2b00      	cmp	r3, #0
 800e1d0:	6093      	str	r3, [r2, #8]
 800e1d2:	da07      	bge.n	800e1e4 <__sfputc_r+0x1c>
 800e1d4:	6994      	ldr	r4, [r2, #24]
 800e1d6:	42a3      	cmp	r3, r4
 800e1d8:	db01      	blt.n	800e1de <__sfputc_r+0x16>
 800e1da:	290a      	cmp	r1, #10
 800e1dc:	d102      	bne.n	800e1e4 <__sfputc_r+0x1c>
 800e1de:	bc10      	pop	{r4}
 800e1e0:	f000 bb56 	b.w	800e890 <__swbuf_r>
 800e1e4:	6813      	ldr	r3, [r2, #0]
 800e1e6:	1c58      	adds	r0, r3, #1
 800e1e8:	6010      	str	r0, [r2, #0]
 800e1ea:	7019      	strb	r1, [r3, #0]
 800e1ec:	4608      	mov	r0, r1
 800e1ee:	bc10      	pop	{r4}
 800e1f0:	4770      	bx	lr

0800e1f2 <__sfputs_r>:
 800e1f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e1f4:	4606      	mov	r6, r0
 800e1f6:	460f      	mov	r7, r1
 800e1f8:	4614      	mov	r4, r2
 800e1fa:	18d5      	adds	r5, r2, r3
 800e1fc:	42ac      	cmp	r4, r5
 800e1fe:	d101      	bne.n	800e204 <__sfputs_r+0x12>
 800e200:	2000      	movs	r0, #0
 800e202:	e007      	b.n	800e214 <__sfputs_r+0x22>
 800e204:	463a      	mov	r2, r7
 800e206:	4630      	mov	r0, r6
 800e208:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e20c:	f7ff ffdc 	bl	800e1c8 <__sfputc_r>
 800e210:	1c43      	adds	r3, r0, #1
 800e212:	d1f3      	bne.n	800e1fc <__sfputs_r+0xa>
 800e214:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800e218 <_vfiprintf_r>:
 800e218:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e21c:	460d      	mov	r5, r1
 800e21e:	4614      	mov	r4, r2
 800e220:	4698      	mov	r8, r3
 800e222:	4606      	mov	r6, r0
 800e224:	b09d      	sub	sp, #116	; 0x74
 800e226:	b118      	cbz	r0, 800e230 <_vfiprintf_r+0x18>
 800e228:	6983      	ldr	r3, [r0, #24]
 800e22a:	b90b      	cbnz	r3, 800e230 <_vfiprintf_r+0x18>
 800e22c:	f000 fd06 	bl	800ec3c <__sinit>
 800e230:	4b89      	ldr	r3, [pc, #548]	; (800e458 <_vfiprintf_r+0x240>)
 800e232:	429d      	cmp	r5, r3
 800e234:	d11b      	bne.n	800e26e <_vfiprintf_r+0x56>
 800e236:	6875      	ldr	r5, [r6, #4]
 800e238:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e23a:	07d9      	lsls	r1, r3, #31
 800e23c:	d405      	bmi.n	800e24a <_vfiprintf_r+0x32>
 800e23e:	89ab      	ldrh	r3, [r5, #12]
 800e240:	059a      	lsls	r2, r3, #22
 800e242:	d402      	bmi.n	800e24a <_vfiprintf_r+0x32>
 800e244:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e246:	f7ff feba 	bl	800dfbe <__retarget_lock_acquire_recursive>
 800e24a:	89ab      	ldrh	r3, [r5, #12]
 800e24c:	071b      	lsls	r3, r3, #28
 800e24e:	d501      	bpl.n	800e254 <_vfiprintf_r+0x3c>
 800e250:	692b      	ldr	r3, [r5, #16]
 800e252:	b9eb      	cbnz	r3, 800e290 <_vfiprintf_r+0x78>
 800e254:	4629      	mov	r1, r5
 800e256:	4630      	mov	r0, r6
 800e258:	f000 fb6c 	bl	800e934 <__swsetup_r>
 800e25c:	b1c0      	cbz	r0, 800e290 <_vfiprintf_r+0x78>
 800e25e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e260:	07dc      	lsls	r4, r3, #31
 800e262:	d50e      	bpl.n	800e282 <_vfiprintf_r+0x6a>
 800e264:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e268:	b01d      	add	sp, #116	; 0x74
 800e26a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e26e:	4b7b      	ldr	r3, [pc, #492]	; (800e45c <_vfiprintf_r+0x244>)
 800e270:	429d      	cmp	r5, r3
 800e272:	d101      	bne.n	800e278 <_vfiprintf_r+0x60>
 800e274:	68b5      	ldr	r5, [r6, #8]
 800e276:	e7df      	b.n	800e238 <_vfiprintf_r+0x20>
 800e278:	4b79      	ldr	r3, [pc, #484]	; (800e460 <_vfiprintf_r+0x248>)
 800e27a:	429d      	cmp	r5, r3
 800e27c:	bf08      	it	eq
 800e27e:	68f5      	ldreq	r5, [r6, #12]
 800e280:	e7da      	b.n	800e238 <_vfiprintf_r+0x20>
 800e282:	89ab      	ldrh	r3, [r5, #12]
 800e284:	0598      	lsls	r0, r3, #22
 800e286:	d4ed      	bmi.n	800e264 <_vfiprintf_r+0x4c>
 800e288:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e28a:	f7ff fe99 	bl	800dfc0 <__retarget_lock_release_recursive>
 800e28e:	e7e9      	b.n	800e264 <_vfiprintf_r+0x4c>
 800e290:	2300      	movs	r3, #0
 800e292:	9309      	str	r3, [sp, #36]	; 0x24
 800e294:	2320      	movs	r3, #32
 800e296:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e29a:	2330      	movs	r3, #48	; 0x30
 800e29c:	f04f 0901 	mov.w	r9, #1
 800e2a0:	f8cd 800c 	str.w	r8, [sp, #12]
 800e2a4:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800e464 <_vfiprintf_r+0x24c>
 800e2a8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e2ac:	4623      	mov	r3, r4
 800e2ae:	469a      	mov	sl, r3
 800e2b0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e2b4:	b10a      	cbz	r2, 800e2ba <_vfiprintf_r+0xa2>
 800e2b6:	2a25      	cmp	r2, #37	; 0x25
 800e2b8:	d1f9      	bne.n	800e2ae <_vfiprintf_r+0x96>
 800e2ba:	ebba 0b04 	subs.w	fp, sl, r4
 800e2be:	d00b      	beq.n	800e2d8 <_vfiprintf_r+0xc0>
 800e2c0:	465b      	mov	r3, fp
 800e2c2:	4622      	mov	r2, r4
 800e2c4:	4629      	mov	r1, r5
 800e2c6:	4630      	mov	r0, r6
 800e2c8:	f7ff ff93 	bl	800e1f2 <__sfputs_r>
 800e2cc:	3001      	adds	r0, #1
 800e2ce:	f000 80aa 	beq.w	800e426 <_vfiprintf_r+0x20e>
 800e2d2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e2d4:	445a      	add	r2, fp
 800e2d6:	9209      	str	r2, [sp, #36]	; 0x24
 800e2d8:	f89a 3000 	ldrb.w	r3, [sl]
 800e2dc:	2b00      	cmp	r3, #0
 800e2de:	f000 80a2 	beq.w	800e426 <_vfiprintf_r+0x20e>
 800e2e2:	2300      	movs	r3, #0
 800e2e4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e2e8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e2ec:	f10a 0a01 	add.w	sl, sl, #1
 800e2f0:	9304      	str	r3, [sp, #16]
 800e2f2:	9307      	str	r3, [sp, #28]
 800e2f4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e2f8:	931a      	str	r3, [sp, #104]	; 0x68
 800e2fa:	4654      	mov	r4, sl
 800e2fc:	2205      	movs	r2, #5
 800e2fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e302:	4858      	ldr	r0, [pc, #352]	; (800e464 <_vfiprintf_r+0x24c>)
 800e304:	f000 fd9c 	bl	800ee40 <memchr>
 800e308:	9a04      	ldr	r2, [sp, #16]
 800e30a:	b9d8      	cbnz	r0, 800e344 <_vfiprintf_r+0x12c>
 800e30c:	06d1      	lsls	r1, r2, #27
 800e30e:	bf44      	itt	mi
 800e310:	2320      	movmi	r3, #32
 800e312:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e316:	0713      	lsls	r3, r2, #28
 800e318:	bf44      	itt	mi
 800e31a:	232b      	movmi	r3, #43	; 0x2b
 800e31c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e320:	f89a 3000 	ldrb.w	r3, [sl]
 800e324:	2b2a      	cmp	r3, #42	; 0x2a
 800e326:	d015      	beq.n	800e354 <_vfiprintf_r+0x13c>
 800e328:	4654      	mov	r4, sl
 800e32a:	2000      	movs	r0, #0
 800e32c:	f04f 0c0a 	mov.w	ip, #10
 800e330:	9a07      	ldr	r2, [sp, #28]
 800e332:	4621      	mov	r1, r4
 800e334:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e338:	3b30      	subs	r3, #48	; 0x30
 800e33a:	2b09      	cmp	r3, #9
 800e33c:	d94e      	bls.n	800e3dc <_vfiprintf_r+0x1c4>
 800e33e:	b1b0      	cbz	r0, 800e36e <_vfiprintf_r+0x156>
 800e340:	9207      	str	r2, [sp, #28]
 800e342:	e014      	b.n	800e36e <_vfiprintf_r+0x156>
 800e344:	eba0 0308 	sub.w	r3, r0, r8
 800e348:	fa09 f303 	lsl.w	r3, r9, r3
 800e34c:	4313      	orrs	r3, r2
 800e34e:	46a2      	mov	sl, r4
 800e350:	9304      	str	r3, [sp, #16]
 800e352:	e7d2      	b.n	800e2fa <_vfiprintf_r+0xe2>
 800e354:	9b03      	ldr	r3, [sp, #12]
 800e356:	1d19      	adds	r1, r3, #4
 800e358:	681b      	ldr	r3, [r3, #0]
 800e35a:	9103      	str	r1, [sp, #12]
 800e35c:	2b00      	cmp	r3, #0
 800e35e:	bfbb      	ittet	lt
 800e360:	425b      	neglt	r3, r3
 800e362:	f042 0202 	orrlt.w	r2, r2, #2
 800e366:	9307      	strge	r3, [sp, #28]
 800e368:	9307      	strlt	r3, [sp, #28]
 800e36a:	bfb8      	it	lt
 800e36c:	9204      	strlt	r2, [sp, #16]
 800e36e:	7823      	ldrb	r3, [r4, #0]
 800e370:	2b2e      	cmp	r3, #46	; 0x2e
 800e372:	d10c      	bne.n	800e38e <_vfiprintf_r+0x176>
 800e374:	7863      	ldrb	r3, [r4, #1]
 800e376:	2b2a      	cmp	r3, #42	; 0x2a
 800e378:	d135      	bne.n	800e3e6 <_vfiprintf_r+0x1ce>
 800e37a:	9b03      	ldr	r3, [sp, #12]
 800e37c:	3402      	adds	r4, #2
 800e37e:	1d1a      	adds	r2, r3, #4
 800e380:	681b      	ldr	r3, [r3, #0]
 800e382:	9203      	str	r2, [sp, #12]
 800e384:	2b00      	cmp	r3, #0
 800e386:	bfb8      	it	lt
 800e388:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800e38c:	9305      	str	r3, [sp, #20]
 800e38e:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 800e468 <_vfiprintf_r+0x250>
 800e392:	2203      	movs	r2, #3
 800e394:	4650      	mov	r0, sl
 800e396:	7821      	ldrb	r1, [r4, #0]
 800e398:	f000 fd52 	bl	800ee40 <memchr>
 800e39c:	b140      	cbz	r0, 800e3b0 <_vfiprintf_r+0x198>
 800e39e:	2340      	movs	r3, #64	; 0x40
 800e3a0:	eba0 000a 	sub.w	r0, r0, sl
 800e3a4:	fa03 f000 	lsl.w	r0, r3, r0
 800e3a8:	9b04      	ldr	r3, [sp, #16]
 800e3aa:	3401      	adds	r4, #1
 800e3ac:	4303      	orrs	r3, r0
 800e3ae:	9304      	str	r3, [sp, #16]
 800e3b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e3b4:	2206      	movs	r2, #6
 800e3b6:	482d      	ldr	r0, [pc, #180]	; (800e46c <_vfiprintf_r+0x254>)
 800e3b8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e3bc:	f000 fd40 	bl	800ee40 <memchr>
 800e3c0:	2800      	cmp	r0, #0
 800e3c2:	d03f      	beq.n	800e444 <_vfiprintf_r+0x22c>
 800e3c4:	4b2a      	ldr	r3, [pc, #168]	; (800e470 <_vfiprintf_r+0x258>)
 800e3c6:	bb1b      	cbnz	r3, 800e410 <_vfiprintf_r+0x1f8>
 800e3c8:	9b03      	ldr	r3, [sp, #12]
 800e3ca:	3307      	adds	r3, #7
 800e3cc:	f023 0307 	bic.w	r3, r3, #7
 800e3d0:	3308      	adds	r3, #8
 800e3d2:	9303      	str	r3, [sp, #12]
 800e3d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e3d6:	443b      	add	r3, r7
 800e3d8:	9309      	str	r3, [sp, #36]	; 0x24
 800e3da:	e767      	b.n	800e2ac <_vfiprintf_r+0x94>
 800e3dc:	460c      	mov	r4, r1
 800e3de:	2001      	movs	r0, #1
 800e3e0:	fb0c 3202 	mla	r2, ip, r2, r3
 800e3e4:	e7a5      	b.n	800e332 <_vfiprintf_r+0x11a>
 800e3e6:	2300      	movs	r3, #0
 800e3e8:	f04f 0c0a 	mov.w	ip, #10
 800e3ec:	4619      	mov	r1, r3
 800e3ee:	3401      	adds	r4, #1
 800e3f0:	9305      	str	r3, [sp, #20]
 800e3f2:	4620      	mov	r0, r4
 800e3f4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e3f8:	3a30      	subs	r2, #48	; 0x30
 800e3fa:	2a09      	cmp	r2, #9
 800e3fc:	d903      	bls.n	800e406 <_vfiprintf_r+0x1ee>
 800e3fe:	2b00      	cmp	r3, #0
 800e400:	d0c5      	beq.n	800e38e <_vfiprintf_r+0x176>
 800e402:	9105      	str	r1, [sp, #20]
 800e404:	e7c3      	b.n	800e38e <_vfiprintf_r+0x176>
 800e406:	4604      	mov	r4, r0
 800e408:	2301      	movs	r3, #1
 800e40a:	fb0c 2101 	mla	r1, ip, r1, r2
 800e40e:	e7f0      	b.n	800e3f2 <_vfiprintf_r+0x1da>
 800e410:	ab03      	add	r3, sp, #12
 800e412:	9300      	str	r3, [sp, #0]
 800e414:	462a      	mov	r2, r5
 800e416:	4630      	mov	r0, r6
 800e418:	4b16      	ldr	r3, [pc, #88]	; (800e474 <_vfiprintf_r+0x25c>)
 800e41a:	a904      	add	r1, sp, #16
 800e41c:	f3af 8000 	nop.w
 800e420:	4607      	mov	r7, r0
 800e422:	1c78      	adds	r0, r7, #1
 800e424:	d1d6      	bne.n	800e3d4 <_vfiprintf_r+0x1bc>
 800e426:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e428:	07d9      	lsls	r1, r3, #31
 800e42a:	d405      	bmi.n	800e438 <_vfiprintf_r+0x220>
 800e42c:	89ab      	ldrh	r3, [r5, #12]
 800e42e:	059a      	lsls	r2, r3, #22
 800e430:	d402      	bmi.n	800e438 <_vfiprintf_r+0x220>
 800e432:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e434:	f7ff fdc4 	bl	800dfc0 <__retarget_lock_release_recursive>
 800e438:	89ab      	ldrh	r3, [r5, #12]
 800e43a:	065b      	lsls	r3, r3, #25
 800e43c:	f53f af12 	bmi.w	800e264 <_vfiprintf_r+0x4c>
 800e440:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e442:	e711      	b.n	800e268 <_vfiprintf_r+0x50>
 800e444:	ab03      	add	r3, sp, #12
 800e446:	9300      	str	r3, [sp, #0]
 800e448:	462a      	mov	r2, r5
 800e44a:	4630      	mov	r0, r6
 800e44c:	4b09      	ldr	r3, [pc, #36]	; (800e474 <_vfiprintf_r+0x25c>)
 800e44e:	a904      	add	r1, sp, #16
 800e450:	f000 f882 	bl	800e558 <_printf_i>
 800e454:	e7e4      	b.n	800e420 <_vfiprintf_r+0x208>
 800e456:	bf00      	nop
 800e458:	080101b8 	.word	0x080101b8
 800e45c:	080101d8 	.word	0x080101d8
 800e460:	08010198 	.word	0x08010198
 800e464:	08010164 	.word	0x08010164
 800e468:	0801016a 	.word	0x0801016a
 800e46c:	0801016e 	.word	0x0801016e
 800e470:	00000000 	.word	0x00000000
 800e474:	0800e1f3 	.word	0x0800e1f3

0800e478 <_printf_common>:
 800e478:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e47c:	4616      	mov	r6, r2
 800e47e:	4699      	mov	r9, r3
 800e480:	688a      	ldr	r2, [r1, #8]
 800e482:	690b      	ldr	r3, [r1, #16]
 800e484:	4607      	mov	r7, r0
 800e486:	4293      	cmp	r3, r2
 800e488:	bfb8      	it	lt
 800e48a:	4613      	movlt	r3, r2
 800e48c:	6033      	str	r3, [r6, #0]
 800e48e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800e492:	460c      	mov	r4, r1
 800e494:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800e498:	b10a      	cbz	r2, 800e49e <_printf_common+0x26>
 800e49a:	3301      	adds	r3, #1
 800e49c:	6033      	str	r3, [r6, #0]
 800e49e:	6823      	ldr	r3, [r4, #0]
 800e4a0:	0699      	lsls	r1, r3, #26
 800e4a2:	bf42      	ittt	mi
 800e4a4:	6833      	ldrmi	r3, [r6, #0]
 800e4a6:	3302      	addmi	r3, #2
 800e4a8:	6033      	strmi	r3, [r6, #0]
 800e4aa:	6825      	ldr	r5, [r4, #0]
 800e4ac:	f015 0506 	ands.w	r5, r5, #6
 800e4b0:	d106      	bne.n	800e4c0 <_printf_common+0x48>
 800e4b2:	f104 0a19 	add.w	sl, r4, #25
 800e4b6:	68e3      	ldr	r3, [r4, #12]
 800e4b8:	6832      	ldr	r2, [r6, #0]
 800e4ba:	1a9b      	subs	r3, r3, r2
 800e4bc:	42ab      	cmp	r3, r5
 800e4be:	dc28      	bgt.n	800e512 <_printf_common+0x9a>
 800e4c0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800e4c4:	1e13      	subs	r3, r2, #0
 800e4c6:	6822      	ldr	r2, [r4, #0]
 800e4c8:	bf18      	it	ne
 800e4ca:	2301      	movne	r3, #1
 800e4cc:	0692      	lsls	r2, r2, #26
 800e4ce:	d42d      	bmi.n	800e52c <_printf_common+0xb4>
 800e4d0:	4649      	mov	r1, r9
 800e4d2:	4638      	mov	r0, r7
 800e4d4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e4d8:	47c0      	blx	r8
 800e4da:	3001      	adds	r0, #1
 800e4dc:	d020      	beq.n	800e520 <_printf_common+0xa8>
 800e4de:	6823      	ldr	r3, [r4, #0]
 800e4e0:	68e5      	ldr	r5, [r4, #12]
 800e4e2:	f003 0306 	and.w	r3, r3, #6
 800e4e6:	2b04      	cmp	r3, #4
 800e4e8:	bf18      	it	ne
 800e4ea:	2500      	movne	r5, #0
 800e4ec:	6832      	ldr	r2, [r6, #0]
 800e4ee:	f04f 0600 	mov.w	r6, #0
 800e4f2:	68a3      	ldr	r3, [r4, #8]
 800e4f4:	bf08      	it	eq
 800e4f6:	1aad      	subeq	r5, r5, r2
 800e4f8:	6922      	ldr	r2, [r4, #16]
 800e4fa:	bf08      	it	eq
 800e4fc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e500:	4293      	cmp	r3, r2
 800e502:	bfc4      	itt	gt
 800e504:	1a9b      	subgt	r3, r3, r2
 800e506:	18ed      	addgt	r5, r5, r3
 800e508:	341a      	adds	r4, #26
 800e50a:	42b5      	cmp	r5, r6
 800e50c:	d11a      	bne.n	800e544 <_printf_common+0xcc>
 800e50e:	2000      	movs	r0, #0
 800e510:	e008      	b.n	800e524 <_printf_common+0xac>
 800e512:	2301      	movs	r3, #1
 800e514:	4652      	mov	r2, sl
 800e516:	4649      	mov	r1, r9
 800e518:	4638      	mov	r0, r7
 800e51a:	47c0      	blx	r8
 800e51c:	3001      	adds	r0, #1
 800e51e:	d103      	bne.n	800e528 <_printf_common+0xb0>
 800e520:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e524:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e528:	3501      	adds	r5, #1
 800e52a:	e7c4      	b.n	800e4b6 <_printf_common+0x3e>
 800e52c:	2030      	movs	r0, #48	; 0x30
 800e52e:	18e1      	adds	r1, r4, r3
 800e530:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800e534:	1c5a      	adds	r2, r3, #1
 800e536:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800e53a:	4422      	add	r2, r4
 800e53c:	3302      	adds	r3, #2
 800e53e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800e542:	e7c5      	b.n	800e4d0 <_printf_common+0x58>
 800e544:	2301      	movs	r3, #1
 800e546:	4622      	mov	r2, r4
 800e548:	4649      	mov	r1, r9
 800e54a:	4638      	mov	r0, r7
 800e54c:	47c0      	blx	r8
 800e54e:	3001      	adds	r0, #1
 800e550:	d0e6      	beq.n	800e520 <_printf_common+0xa8>
 800e552:	3601      	adds	r6, #1
 800e554:	e7d9      	b.n	800e50a <_printf_common+0x92>
	...

0800e558 <_printf_i>:
 800e558:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e55c:	7e0f      	ldrb	r7, [r1, #24]
 800e55e:	4691      	mov	r9, r2
 800e560:	2f78      	cmp	r7, #120	; 0x78
 800e562:	4680      	mov	r8, r0
 800e564:	460c      	mov	r4, r1
 800e566:	469a      	mov	sl, r3
 800e568:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800e56a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800e56e:	d807      	bhi.n	800e580 <_printf_i+0x28>
 800e570:	2f62      	cmp	r7, #98	; 0x62
 800e572:	d80a      	bhi.n	800e58a <_printf_i+0x32>
 800e574:	2f00      	cmp	r7, #0
 800e576:	f000 80d9 	beq.w	800e72c <_printf_i+0x1d4>
 800e57a:	2f58      	cmp	r7, #88	; 0x58
 800e57c:	f000 80a4 	beq.w	800e6c8 <_printf_i+0x170>
 800e580:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e584:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800e588:	e03a      	b.n	800e600 <_printf_i+0xa8>
 800e58a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800e58e:	2b15      	cmp	r3, #21
 800e590:	d8f6      	bhi.n	800e580 <_printf_i+0x28>
 800e592:	a101      	add	r1, pc, #4	; (adr r1, 800e598 <_printf_i+0x40>)
 800e594:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e598:	0800e5f1 	.word	0x0800e5f1
 800e59c:	0800e605 	.word	0x0800e605
 800e5a0:	0800e581 	.word	0x0800e581
 800e5a4:	0800e581 	.word	0x0800e581
 800e5a8:	0800e581 	.word	0x0800e581
 800e5ac:	0800e581 	.word	0x0800e581
 800e5b0:	0800e605 	.word	0x0800e605
 800e5b4:	0800e581 	.word	0x0800e581
 800e5b8:	0800e581 	.word	0x0800e581
 800e5bc:	0800e581 	.word	0x0800e581
 800e5c0:	0800e581 	.word	0x0800e581
 800e5c4:	0800e713 	.word	0x0800e713
 800e5c8:	0800e635 	.word	0x0800e635
 800e5cc:	0800e6f5 	.word	0x0800e6f5
 800e5d0:	0800e581 	.word	0x0800e581
 800e5d4:	0800e581 	.word	0x0800e581
 800e5d8:	0800e735 	.word	0x0800e735
 800e5dc:	0800e581 	.word	0x0800e581
 800e5e0:	0800e635 	.word	0x0800e635
 800e5e4:	0800e581 	.word	0x0800e581
 800e5e8:	0800e581 	.word	0x0800e581
 800e5ec:	0800e6fd 	.word	0x0800e6fd
 800e5f0:	682b      	ldr	r3, [r5, #0]
 800e5f2:	1d1a      	adds	r2, r3, #4
 800e5f4:	681b      	ldr	r3, [r3, #0]
 800e5f6:	602a      	str	r2, [r5, #0]
 800e5f8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e5fc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800e600:	2301      	movs	r3, #1
 800e602:	e0a4      	b.n	800e74e <_printf_i+0x1f6>
 800e604:	6820      	ldr	r0, [r4, #0]
 800e606:	6829      	ldr	r1, [r5, #0]
 800e608:	0606      	lsls	r6, r0, #24
 800e60a:	f101 0304 	add.w	r3, r1, #4
 800e60e:	d50a      	bpl.n	800e626 <_printf_i+0xce>
 800e610:	680e      	ldr	r6, [r1, #0]
 800e612:	602b      	str	r3, [r5, #0]
 800e614:	2e00      	cmp	r6, #0
 800e616:	da03      	bge.n	800e620 <_printf_i+0xc8>
 800e618:	232d      	movs	r3, #45	; 0x2d
 800e61a:	4276      	negs	r6, r6
 800e61c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e620:	230a      	movs	r3, #10
 800e622:	485e      	ldr	r0, [pc, #376]	; (800e79c <_printf_i+0x244>)
 800e624:	e019      	b.n	800e65a <_printf_i+0x102>
 800e626:	680e      	ldr	r6, [r1, #0]
 800e628:	f010 0f40 	tst.w	r0, #64	; 0x40
 800e62c:	602b      	str	r3, [r5, #0]
 800e62e:	bf18      	it	ne
 800e630:	b236      	sxthne	r6, r6
 800e632:	e7ef      	b.n	800e614 <_printf_i+0xbc>
 800e634:	682b      	ldr	r3, [r5, #0]
 800e636:	6820      	ldr	r0, [r4, #0]
 800e638:	1d19      	adds	r1, r3, #4
 800e63a:	6029      	str	r1, [r5, #0]
 800e63c:	0601      	lsls	r1, r0, #24
 800e63e:	d501      	bpl.n	800e644 <_printf_i+0xec>
 800e640:	681e      	ldr	r6, [r3, #0]
 800e642:	e002      	b.n	800e64a <_printf_i+0xf2>
 800e644:	0646      	lsls	r6, r0, #25
 800e646:	d5fb      	bpl.n	800e640 <_printf_i+0xe8>
 800e648:	881e      	ldrh	r6, [r3, #0]
 800e64a:	2f6f      	cmp	r7, #111	; 0x6f
 800e64c:	bf0c      	ite	eq
 800e64e:	2308      	moveq	r3, #8
 800e650:	230a      	movne	r3, #10
 800e652:	4852      	ldr	r0, [pc, #328]	; (800e79c <_printf_i+0x244>)
 800e654:	2100      	movs	r1, #0
 800e656:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800e65a:	6865      	ldr	r5, [r4, #4]
 800e65c:	2d00      	cmp	r5, #0
 800e65e:	bfa8      	it	ge
 800e660:	6821      	ldrge	r1, [r4, #0]
 800e662:	60a5      	str	r5, [r4, #8]
 800e664:	bfa4      	itt	ge
 800e666:	f021 0104 	bicge.w	r1, r1, #4
 800e66a:	6021      	strge	r1, [r4, #0]
 800e66c:	b90e      	cbnz	r6, 800e672 <_printf_i+0x11a>
 800e66e:	2d00      	cmp	r5, #0
 800e670:	d04d      	beq.n	800e70e <_printf_i+0x1b6>
 800e672:	4615      	mov	r5, r2
 800e674:	fbb6 f1f3 	udiv	r1, r6, r3
 800e678:	fb03 6711 	mls	r7, r3, r1, r6
 800e67c:	5dc7      	ldrb	r7, [r0, r7]
 800e67e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800e682:	4637      	mov	r7, r6
 800e684:	42bb      	cmp	r3, r7
 800e686:	460e      	mov	r6, r1
 800e688:	d9f4      	bls.n	800e674 <_printf_i+0x11c>
 800e68a:	2b08      	cmp	r3, #8
 800e68c:	d10b      	bne.n	800e6a6 <_printf_i+0x14e>
 800e68e:	6823      	ldr	r3, [r4, #0]
 800e690:	07de      	lsls	r6, r3, #31
 800e692:	d508      	bpl.n	800e6a6 <_printf_i+0x14e>
 800e694:	6923      	ldr	r3, [r4, #16]
 800e696:	6861      	ldr	r1, [r4, #4]
 800e698:	4299      	cmp	r1, r3
 800e69a:	bfde      	ittt	le
 800e69c:	2330      	movle	r3, #48	; 0x30
 800e69e:	f805 3c01 	strble.w	r3, [r5, #-1]
 800e6a2:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800e6a6:	1b52      	subs	r2, r2, r5
 800e6a8:	6122      	str	r2, [r4, #16]
 800e6aa:	464b      	mov	r3, r9
 800e6ac:	4621      	mov	r1, r4
 800e6ae:	4640      	mov	r0, r8
 800e6b0:	f8cd a000 	str.w	sl, [sp]
 800e6b4:	aa03      	add	r2, sp, #12
 800e6b6:	f7ff fedf 	bl	800e478 <_printf_common>
 800e6ba:	3001      	adds	r0, #1
 800e6bc:	d14c      	bne.n	800e758 <_printf_i+0x200>
 800e6be:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e6c2:	b004      	add	sp, #16
 800e6c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e6c8:	4834      	ldr	r0, [pc, #208]	; (800e79c <_printf_i+0x244>)
 800e6ca:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800e6ce:	6829      	ldr	r1, [r5, #0]
 800e6d0:	6823      	ldr	r3, [r4, #0]
 800e6d2:	f851 6b04 	ldr.w	r6, [r1], #4
 800e6d6:	6029      	str	r1, [r5, #0]
 800e6d8:	061d      	lsls	r5, r3, #24
 800e6da:	d514      	bpl.n	800e706 <_printf_i+0x1ae>
 800e6dc:	07df      	lsls	r7, r3, #31
 800e6de:	bf44      	itt	mi
 800e6e0:	f043 0320 	orrmi.w	r3, r3, #32
 800e6e4:	6023      	strmi	r3, [r4, #0]
 800e6e6:	b91e      	cbnz	r6, 800e6f0 <_printf_i+0x198>
 800e6e8:	6823      	ldr	r3, [r4, #0]
 800e6ea:	f023 0320 	bic.w	r3, r3, #32
 800e6ee:	6023      	str	r3, [r4, #0]
 800e6f0:	2310      	movs	r3, #16
 800e6f2:	e7af      	b.n	800e654 <_printf_i+0xfc>
 800e6f4:	6823      	ldr	r3, [r4, #0]
 800e6f6:	f043 0320 	orr.w	r3, r3, #32
 800e6fa:	6023      	str	r3, [r4, #0]
 800e6fc:	2378      	movs	r3, #120	; 0x78
 800e6fe:	4828      	ldr	r0, [pc, #160]	; (800e7a0 <_printf_i+0x248>)
 800e700:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800e704:	e7e3      	b.n	800e6ce <_printf_i+0x176>
 800e706:	0659      	lsls	r1, r3, #25
 800e708:	bf48      	it	mi
 800e70a:	b2b6      	uxthmi	r6, r6
 800e70c:	e7e6      	b.n	800e6dc <_printf_i+0x184>
 800e70e:	4615      	mov	r5, r2
 800e710:	e7bb      	b.n	800e68a <_printf_i+0x132>
 800e712:	682b      	ldr	r3, [r5, #0]
 800e714:	6826      	ldr	r6, [r4, #0]
 800e716:	1d18      	adds	r0, r3, #4
 800e718:	6961      	ldr	r1, [r4, #20]
 800e71a:	6028      	str	r0, [r5, #0]
 800e71c:	0635      	lsls	r5, r6, #24
 800e71e:	681b      	ldr	r3, [r3, #0]
 800e720:	d501      	bpl.n	800e726 <_printf_i+0x1ce>
 800e722:	6019      	str	r1, [r3, #0]
 800e724:	e002      	b.n	800e72c <_printf_i+0x1d4>
 800e726:	0670      	lsls	r0, r6, #25
 800e728:	d5fb      	bpl.n	800e722 <_printf_i+0x1ca>
 800e72a:	8019      	strh	r1, [r3, #0]
 800e72c:	2300      	movs	r3, #0
 800e72e:	4615      	mov	r5, r2
 800e730:	6123      	str	r3, [r4, #16]
 800e732:	e7ba      	b.n	800e6aa <_printf_i+0x152>
 800e734:	682b      	ldr	r3, [r5, #0]
 800e736:	2100      	movs	r1, #0
 800e738:	1d1a      	adds	r2, r3, #4
 800e73a:	602a      	str	r2, [r5, #0]
 800e73c:	681d      	ldr	r5, [r3, #0]
 800e73e:	6862      	ldr	r2, [r4, #4]
 800e740:	4628      	mov	r0, r5
 800e742:	f000 fb7d 	bl	800ee40 <memchr>
 800e746:	b108      	cbz	r0, 800e74c <_printf_i+0x1f4>
 800e748:	1b40      	subs	r0, r0, r5
 800e74a:	6060      	str	r0, [r4, #4]
 800e74c:	6863      	ldr	r3, [r4, #4]
 800e74e:	6123      	str	r3, [r4, #16]
 800e750:	2300      	movs	r3, #0
 800e752:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e756:	e7a8      	b.n	800e6aa <_printf_i+0x152>
 800e758:	462a      	mov	r2, r5
 800e75a:	4649      	mov	r1, r9
 800e75c:	4640      	mov	r0, r8
 800e75e:	6923      	ldr	r3, [r4, #16]
 800e760:	47d0      	blx	sl
 800e762:	3001      	adds	r0, #1
 800e764:	d0ab      	beq.n	800e6be <_printf_i+0x166>
 800e766:	6823      	ldr	r3, [r4, #0]
 800e768:	079b      	lsls	r3, r3, #30
 800e76a:	d413      	bmi.n	800e794 <_printf_i+0x23c>
 800e76c:	68e0      	ldr	r0, [r4, #12]
 800e76e:	9b03      	ldr	r3, [sp, #12]
 800e770:	4298      	cmp	r0, r3
 800e772:	bfb8      	it	lt
 800e774:	4618      	movlt	r0, r3
 800e776:	e7a4      	b.n	800e6c2 <_printf_i+0x16a>
 800e778:	2301      	movs	r3, #1
 800e77a:	4632      	mov	r2, r6
 800e77c:	4649      	mov	r1, r9
 800e77e:	4640      	mov	r0, r8
 800e780:	47d0      	blx	sl
 800e782:	3001      	adds	r0, #1
 800e784:	d09b      	beq.n	800e6be <_printf_i+0x166>
 800e786:	3501      	adds	r5, #1
 800e788:	68e3      	ldr	r3, [r4, #12]
 800e78a:	9903      	ldr	r1, [sp, #12]
 800e78c:	1a5b      	subs	r3, r3, r1
 800e78e:	42ab      	cmp	r3, r5
 800e790:	dcf2      	bgt.n	800e778 <_printf_i+0x220>
 800e792:	e7eb      	b.n	800e76c <_printf_i+0x214>
 800e794:	2500      	movs	r5, #0
 800e796:	f104 0619 	add.w	r6, r4, #25
 800e79a:	e7f5      	b.n	800e788 <_printf_i+0x230>
 800e79c:	08010175 	.word	0x08010175
 800e7a0:	08010186 	.word	0x08010186

0800e7a4 <iprintf>:
 800e7a4:	b40f      	push	{r0, r1, r2, r3}
 800e7a6:	4b0a      	ldr	r3, [pc, #40]	; (800e7d0 <iprintf+0x2c>)
 800e7a8:	b513      	push	{r0, r1, r4, lr}
 800e7aa:	681c      	ldr	r4, [r3, #0]
 800e7ac:	b124      	cbz	r4, 800e7b8 <iprintf+0x14>
 800e7ae:	69a3      	ldr	r3, [r4, #24]
 800e7b0:	b913      	cbnz	r3, 800e7b8 <iprintf+0x14>
 800e7b2:	4620      	mov	r0, r4
 800e7b4:	f000 fa42 	bl	800ec3c <__sinit>
 800e7b8:	ab05      	add	r3, sp, #20
 800e7ba:	4620      	mov	r0, r4
 800e7bc:	9a04      	ldr	r2, [sp, #16]
 800e7be:	68a1      	ldr	r1, [r4, #8]
 800e7c0:	9301      	str	r3, [sp, #4]
 800e7c2:	f7ff fd29 	bl	800e218 <_vfiprintf_r>
 800e7c6:	b002      	add	sp, #8
 800e7c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e7cc:	b004      	add	sp, #16
 800e7ce:	4770      	bx	lr
 800e7d0:	200000b0 	.word	0x200000b0

0800e7d4 <putchar>:
 800e7d4:	b538      	push	{r3, r4, r5, lr}
 800e7d6:	4b08      	ldr	r3, [pc, #32]	; (800e7f8 <putchar+0x24>)
 800e7d8:	4605      	mov	r5, r0
 800e7da:	681c      	ldr	r4, [r3, #0]
 800e7dc:	b124      	cbz	r4, 800e7e8 <putchar+0x14>
 800e7de:	69a3      	ldr	r3, [r4, #24]
 800e7e0:	b913      	cbnz	r3, 800e7e8 <putchar+0x14>
 800e7e2:	4620      	mov	r0, r4
 800e7e4:	f000 fa2a 	bl	800ec3c <__sinit>
 800e7e8:	4629      	mov	r1, r5
 800e7ea:	4620      	mov	r0, r4
 800e7ec:	68a2      	ldr	r2, [r4, #8]
 800e7ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e7f2:	f000 bce3 	b.w	800f1bc <_putc_r>
 800e7f6:	bf00      	nop
 800e7f8:	200000b0 	.word	0x200000b0

0800e7fc <_sbrk_r>:
 800e7fc:	b538      	push	{r3, r4, r5, lr}
 800e7fe:	2300      	movs	r3, #0
 800e800:	4d05      	ldr	r5, [pc, #20]	; (800e818 <_sbrk_r+0x1c>)
 800e802:	4604      	mov	r4, r0
 800e804:	4608      	mov	r0, r1
 800e806:	602b      	str	r3, [r5, #0]
 800e808:	f7f2 f8f2 	bl	80009f0 <_sbrk>
 800e80c:	1c43      	adds	r3, r0, #1
 800e80e:	d102      	bne.n	800e816 <_sbrk_r+0x1a>
 800e810:	682b      	ldr	r3, [r5, #0]
 800e812:	b103      	cbz	r3, 800e816 <_sbrk_r+0x1a>
 800e814:	6023      	str	r3, [r4, #0]
 800e816:	bd38      	pop	{r3, r4, r5, pc}
 800e818:	20001684 	.word	0x20001684

0800e81c <_vsniprintf_r>:
 800e81c:	b530      	push	{r4, r5, lr}
 800e81e:	4614      	mov	r4, r2
 800e820:	2c00      	cmp	r4, #0
 800e822:	4605      	mov	r5, r0
 800e824:	461a      	mov	r2, r3
 800e826:	b09b      	sub	sp, #108	; 0x6c
 800e828:	da05      	bge.n	800e836 <_vsniprintf_r+0x1a>
 800e82a:	238b      	movs	r3, #139	; 0x8b
 800e82c:	6003      	str	r3, [r0, #0]
 800e82e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e832:	b01b      	add	sp, #108	; 0x6c
 800e834:	bd30      	pop	{r4, r5, pc}
 800e836:	f44f 7302 	mov.w	r3, #520	; 0x208
 800e83a:	f8ad 300c 	strh.w	r3, [sp, #12]
 800e83e:	bf0c      	ite	eq
 800e840:	4623      	moveq	r3, r4
 800e842:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 800e846:	9302      	str	r3, [sp, #8]
 800e848:	9305      	str	r3, [sp, #20]
 800e84a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e84e:	9100      	str	r1, [sp, #0]
 800e850:	9104      	str	r1, [sp, #16]
 800e852:	f8ad 300e 	strh.w	r3, [sp, #14]
 800e856:	4669      	mov	r1, sp
 800e858:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800e85a:	f000 fbaf 	bl	800efbc <_svfiprintf_r>
 800e85e:	1c43      	adds	r3, r0, #1
 800e860:	bfbc      	itt	lt
 800e862:	238b      	movlt	r3, #139	; 0x8b
 800e864:	602b      	strlt	r3, [r5, #0]
 800e866:	2c00      	cmp	r4, #0
 800e868:	d0e3      	beq.n	800e832 <_vsniprintf_r+0x16>
 800e86a:	2200      	movs	r2, #0
 800e86c:	9b00      	ldr	r3, [sp, #0]
 800e86e:	701a      	strb	r2, [r3, #0]
 800e870:	e7df      	b.n	800e832 <_vsniprintf_r+0x16>
	...

0800e874 <vsniprintf>:
 800e874:	b507      	push	{r0, r1, r2, lr}
 800e876:	9300      	str	r3, [sp, #0]
 800e878:	4613      	mov	r3, r2
 800e87a:	460a      	mov	r2, r1
 800e87c:	4601      	mov	r1, r0
 800e87e:	4803      	ldr	r0, [pc, #12]	; (800e88c <vsniprintf+0x18>)
 800e880:	6800      	ldr	r0, [r0, #0]
 800e882:	f7ff ffcb 	bl	800e81c <_vsniprintf_r>
 800e886:	b003      	add	sp, #12
 800e888:	f85d fb04 	ldr.w	pc, [sp], #4
 800e88c:	200000b0 	.word	0x200000b0

0800e890 <__swbuf_r>:
 800e890:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e892:	460e      	mov	r6, r1
 800e894:	4614      	mov	r4, r2
 800e896:	4605      	mov	r5, r0
 800e898:	b118      	cbz	r0, 800e8a2 <__swbuf_r+0x12>
 800e89a:	6983      	ldr	r3, [r0, #24]
 800e89c:	b90b      	cbnz	r3, 800e8a2 <__swbuf_r+0x12>
 800e89e:	f000 f9cd 	bl	800ec3c <__sinit>
 800e8a2:	4b21      	ldr	r3, [pc, #132]	; (800e928 <__swbuf_r+0x98>)
 800e8a4:	429c      	cmp	r4, r3
 800e8a6:	d12b      	bne.n	800e900 <__swbuf_r+0x70>
 800e8a8:	686c      	ldr	r4, [r5, #4]
 800e8aa:	69a3      	ldr	r3, [r4, #24]
 800e8ac:	60a3      	str	r3, [r4, #8]
 800e8ae:	89a3      	ldrh	r3, [r4, #12]
 800e8b0:	071a      	lsls	r2, r3, #28
 800e8b2:	d52f      	bpl.n	800e914 <__swbuf_r+0x84>
 800e8b4:	6923      	ldr	r3, [r4, #16]
 800e8b6:	b36b      	cbz	r3, 800e914 <__swbuf_r+0x84>
 800e8b8:	6923      	ldr	r3, [r4, #16]
 800e8ba:	6820      	ldr	r0, [r4, #0]
 800e8bc:	b2f6      	uxtb	r6, r6
 800e8be:	1ac0      	subs	r0, r0, r3
 800e8c0:	6963      	ldr	r3, [r4, #20]
 800e8c2:	4637      	mov	r7, r6
 800e8c4:	4283      	cmp	r3, r0
 800e8c6:	dc04      	bgt.n	800e8d2 <__swbuf_r+0x42>
 800e8c8:	4621      	mov	r1, r4
 800e8ca:	4628      	mov	r0, r5
 800e8cc:	f000 f922 	bl	800eb14 <_fflush_r>
 800e8d0:	bb30      	cbnz	r0, 800e920 <__swbuf_r+0x90>
 800e8d2:	68a3      	ldr	r3, [r4, #8]
 800e8d4:	3001      	adds	r0, #1
 800e8d6:	3b01      	subs	r3, #1
 800e8d8:	60a3      	str	r3, [r4, #8]
 800e8da:	6823      	ldr	r3, [r4, #0]
 800e8dc:	1c5a      	adds	r2, r3, #1
 800e8de:	6022      	str	r2, [r4, #0]
 800e8e0:	701e      	strb	r6, [r3, #0]
 800e8e2:	6963      	ldr	r3, [r4, #20]
 800e8e4:	4283      	cmp	r3, r0
 800e8e6:	d004      	beq.n	800e8f2 <__swbuf_r+0x62>
 800e8e8:	89a3      	ldrh	r3, [r4, #12]
 800e8ea:	07db      	lsls	r3, r3, #31
 800e8ec:	d506      	bpl.n	800e8fc <__swbuf_r+0x6c>
 800e8ee:	2e0a      	cmp	r6, #10
 800e8f0:	d104      	bne.n	800e8fc <__swbuf_r+0x6c>
 800e8f2:	4621      	mov	r1, r4
 800e8f4:	4628      	mov	r0, r5
 800e8f6:	f000 f90d 	bl	800eb14 <_fflush_r>
 800e8fa:	b988      	cbnz	r0, 800e920 <__swbuf_r+0x90>
 800e8fc:	4638      	mov	r0, r7
 800e8fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e900:	4b0a      	ldr	r3, [pc, #40]	; (800e92c <__swbuf_r+0x9c>)
 800e902:	429c      	cmp	r4, r3
 800e904:	d101      	bne.n	800e90a <__swbuf_r+0x7a>
 800e906:	68ac      	ldr	r4, [r5, #8]
 800e908:	e7cf      	b.n	800e8aa <__swbuf_r+0x1a>
 800e90a:	4b09      	ldr	r3, [pc, #36]	; (800e930 <__swbuf_r+0xa0>)
 800e90c:	429c      	cmp	r4, r3
 800e90e:	bf08      	it	eq
 800e910:	68ec      	ldreq	r4, [r5, #12]
 800e912:	e7ca      	b.n	800e8aa <__swbuf_r+0x1a>
 800e914:	4621      	mov	r1, r4
 800e916:	4628      	mov	r0, r5
 800e918:	f000 f80c 	bl	800e934 <__swsetup_r>
 800e91c:	2800      	cmp	r0, #0
 800e91e:	d0cb      	beq.n	800e8b8 <__swbuf_r+0x28>
 800e920:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800e924:	e7ea      	b.n	800e8fc <__swbuf_r+0x6c>
 800e926:	bf00      	nop
 800e928:	080101b8 	.word	0x080101b8
 800e92c:	080101d8 	.word	0x080101d8
 800e930:	08010198 	.word	0x08010198

0800e934 <__swsetup_r>:
 800e934:	4b32      	ldr	r3, [pc, #200]	; (800ea00 <__swsetup_r+0xcc>)
 800e936:	b570      	push	{r4, r5, r6, lr}
 800e938:	681d      	ldr	r5, [r3, #0]
 800e93a:	4606      	mov	r6, r0
 800e93c:	460c      	mov	r4, r1
 800e93e:	b125      	cbz	r5, 800e94a <__swsetup_r+0x16>
 800e940:	69ab      	ldr	r3, [r5, #24]
 800e942:	b913      	cbnz	r3, 800e94a <__swsetup_r+0x16>
 800e944:	4628      	mov	r0, r5
 800e946:	f000 f979 	bl	800ec3c <__sinit>
 800e94a:	4b2e      	ldr	r3, [pc, #184]	; (800ea04 <__swsetup_r+0xd0>)
 800e94c:	429c      	cmp	r4, r3
 800e94e:	d10f      	bne.n	800e970 <__swsetup_r+0x3c>
 800e950:	686c      	ldr	r4, [r5, #4]
 800e952:	89a3      	ldrh	r3, [r4, #12]
 800e954:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e958:	0719      	lsls	r1, r3, #28
 800e95a:	d42c      	bmi.n	800e9b6 <__swsetup_r+0x82>
 800e95c:	06dd      	lsls	r5, r3, #27
 800e95e:	d411      	bmi.n	800e984 <__swsetup_r+0x50>
 800e960:	2309      	movs	r3, #9
 800e962:	6033      	str	r3, [r6, #0]
 800e964:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800e968:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e96c:	81a3      	strh	r3, [r4, #12]
 800e96e:	e03e      	b.n	800e9ee <__swsetup_r+0xba>
 800e970:	4b25      	ldr	r3, [pc, #148]	; (800ea08 <__swsetup_r+0xd4>)
 800e972:	429c      	cmp	r4, r3
 800e974:	d101      	bne.n	800e97a <__swsetup_r+0x46>
 800e976:	68ac      	ldr	r4, [r5, #8]
 800e978:	e7eb      	b.n	800e952 <__swsetup_r+0x1e>
 800e97a:	4b24      	ldr	r3, [pc, #144]	; (800ea0c <__swsetup_r+0xd8>)
 800e97c:	429c      	cmp	r4, r3
 800e97e:	bf08      	it	eq
 800e980:	68ec      	ldreq	r4, [r5, #12]
 800e982:	e7e6      	b.n	800e952 <__swsetup_r+0x1e>
 800e984:	0758      	lsls	r0, r3, #29
 800e986:	d512      	bpl.n	800e9ae <__swsetup_r+0x7a>
 800e988:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e98a:	b141      	cbz	r1, 800e99e <__swsetup_r+0x6a>
 800e98c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e990:	4299      	cmp	r1, r3
 800e992:	d002      	beq.n	800e99a <__swsetup_r+0x66>
 800e994:	4630      	mov	r0, r6
 800e996:	f7ff fb3b 	bl	800e010 <_free_r>
 800e99a:	2300      	movs	r3, #0
 800e99c:	6363      	str	r3, [r4, #52]	; 0x34
 800e99e:	89a3      	ldrh	r3, [r4, #12]
 800e9a0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800e9a4:	81a3      	strh	r3, [r4, #12]
 800e9a6:	2300      	movs	r3, #0
 800e9a8:	6063      	str	r3, [r4, #4]
 800e9aa:	6923      	ldr	r3, [r4, #16]
 800e9ac:	6023      	str	r3, [r4, #0]
 800e9ae:	89a3      	ldrh	r3, [r4, #12]
 800e9b0:	f043 0308 	orr.w	r3, r3, #8
 800e9b4:	81a3      	strh	r3, [r4, #12]
 800e9b6:	6923      	ldr	r3, [r4, #16]
 800e9b8:	b94b      	cbnz	r3, 800e9ce <__swsetup_r+0x9a>
 800e9ba:	89a3      	ldrh	r3, [r4, #12]
 800e9bc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800e9c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e9c4:	d003      	beq.n	800e9ce <__swsetup_r+0x9a>
 800e9c6:	4621      	mov	r1, r4
 800e9c8:	4630      	mov	r0, r6
 800e9ca:	f000 f9f9 	bl	800edc0 <__smakebuf_r>
 800e9ce:	89a0      	ldrh	r0, [r4, #12]
 800e9d0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e9d4:	f010 0301 	ands.w	r3, r0, #1
 800e9d8:	d00a      	beq.n	800e9f0 <__swsetup_r+0xbc>
 800e9da:	2300      	movs	r3, #0
 800e9dc:	60a3      	str	r3, [r4, #8]
 800e9de:	6963      	ldr	r3, [r4, #20]
 800e9e0:	425b      	negs	r3, r3
 800e9e2:	61a3      	str	r3, [r4, #24]
 800e9e4:	6923      	ldr	r3, [r4, #16]
 800e9e6:	b943      	cbnz	r3, 800e9fa <__swsetup_r+0xc6>
 800e9e8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800e9ec:	d1ba      	bne.n	800e964 <__swsetup_r+0x30>
 800e9ee:	bd70      	pop	{r4, r5, r6, pc}
 800e9f0:	0781      	lsls	r1, r0, #30
 800e9f2:	bf58      	it	pl
 800e9f4:	6963      	ldrpl	r3, [r4, #20]
 800e9f6:	60a3      	str	r3, [r4, #8]
 800e9f8:	e7f4      	b.n	800e9e4 <__swsetup_r+0xb0>
 800e9fa:	2000      	movs	r0, #0
 800e9fc:	e7f7      	b.n	800e9ee <__swsetup_r+0xba>
 800e9fe:	bf00      	nop
 800ea00:	200000b0 	.word	0x200000b0
 800ea04:	080101b8 	.word	0x080101b8
 800ea08:	080101d8 	.word	0x080101d8
 800ea0c:	08010198 	.word	0x08010198

0800ea10 <__sflush_r>:
 800ea10:	898a      	ldrh	r2, [r1, #12]
 800ea12:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ea14:	4605      	mov	r5, r0
 800ea16:	0710      	lsls	r0, r2, #28
 800ea18:	460c      	mov	r4, r1
 800ea1a:	d457      	bmi.n	800eacc <__sflush_r+0xbc>
 800ea1c:	684b      	ldr	r3, [r1, #4]
 800ea1e:	2b00      	cmp	r3, #0
 800ea20:	dc04      	bgt.n	800ea2c <__sflush_r+0x1c>
 800ea22:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ea24:	2b00      	cmp	r3, #0
 800ea26:	dc01      	bgt.n	800ea2c <__sflush_r+0x1c>
 800ea28:	2000      	movs	r0, #0
 800ea2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ea2c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ea2e:	2e00      	cmp	r6, #0
 800ea30:	d0fa      	beq.n	800ea28 <__sflush_r+0x18>
 800ea32:	2300      	movs	r3, #0
 800ea34:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ea38:	682f      	ldr	r7, [r5, #0]
 800ea3a:	602b      	str	r3, [r5, #0]
 800ea3c:	d032      	beq.n	800eaa4 <__sflush_r+0x94>
 800ea3e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ea40:	89a3      	ldrh	r3, [r4, #12]
 800ea42:	075a      	lsls	r2, r3, #29
 800ea44:	d505      	bpl.n	800ea52 <__sflush_r+0x42>
 800ea46:	6863      	ldr	r3, [r4, #4]
 800ea48:	1ac0      	subs	r0, r0, r3
 800ea4a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ea4c:	b10b      	cbz	r3, 800ea52 <__sflush_r+0x42>
 800ea4e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ea50:	1ac0      	subs	r0, r0, r3
 800ea52:	2300      	movs	r3, #0
 800ea54:	4602      	mov	r2, r0
 800ea56:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ea58:	4628      	mov	r0, r5
 800ea5a:	6a21      	ldr	r1, [r4, #32]
 800ea5c:	47b0      	blx	r6
 800ea5e:	1c43      	adds	r3, r0, #1
 800ea60:	89a3      	ldrh	r3, [r4, #12]
 800ea62:	d106      	bne.n	800ea72 <__sflush_r+0x62>
 800ea64:	6829      	ldr	r1, [r5, #0]
 800ea66:	291d      	cmp	r1, #29
 800ea68:	d82c      	bhi.n	800eac4 <__sflush_r+0xb4>
 800ea6a:	4a29      	ldr	r2, [pc, #164]	; (800eb10 <__sflush_r+0x100>)
 800ea6c:	40ca      	lsrs	r2, r1
 800ea6e:	07d6      	lsls	r6, r2, #31
 800ea70:	d528      	bpl.n	800eac4 <__sflush_r+0xb4>
 800ea72:	2200      	movs	r2, #0
 800ea74:	6062      	str	r2, [r4, #4]
 800ea76:	6922      	ldr	r2, [r4, #16]
 800ea78:	04d9      	lsls	r1, r3, #19
 800ea7a:	6022      	str	r2, [r4, #0]
 800ea7c:	d504      	bpl.n	800ea88 <__sflush_r+0x78>
 800ea7e:	1c42      	adds	r2, r0, #1
 800ea80:	d101      	bne.n	800ea86 <__sflush_r+0x76>
 800ea82:	682b      	ldr	r3, [r5, #0]
 800ea84:	b903      	cbnz	r3, 800ea88 <__sflush_r+0x78>
 800ea86:	6560      	str	r0, [r4, #84]	; 0x54
 800ea88:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ea8a:	602f      	str	r7, [r5, #0]
 800ea8c:	2900      	cmp	r1, #0
 800ea8e:	d0cb      	beq.n	800ea28 <__sflush_r+0x18>
 800ea90:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ea94:	4299      	cmp	r1, r3
 800ea96:	d002      	beq.n	800ea9e <__sflush_r+0x8e>
 800ea98:	4628      	mov	r0, r5
 800ea9a:	f7ff fab9 	bl	800e010 <_free_r>
 800ea9e:	2000      	movs	r0, #0
 800eaa0:	6360      	str	r0, [r4, #52]	; 0x34
 800eaa2:	e7c2      	b.n	800ea2a <__sflush_r+0x1a>
 800eaa4:	6a21      	ldr	r1, [r4, #32]
 800eaa6:	2301      	movs	r3, #1
 800eaa8:	4628      	mov	r0, r5
 800eaaa:	47b0      	blx	r6
 800eaac:	1c41      	adds	r1, r0, #1
 800eaae:	d1c7      	bne.n	800ea40 <__sflush_r+0x30>
 800eab0:	682b      	ldr	r3, [r5, #0]
 800eab2:	2b00      	cmp	r3, #0
 800eab4:	d0c4      	beq.n	800ea40 <__sflush_r+0x30>
 800eab6:	2b1d      	cmp	r3, #29
 800eab8:	d001      	beq.n	800eabe <__sflush_r+0xae>
 800eaba:	2b16      	cmp	r3, #22
 800eabc:	d101      	bne.n	800eac2 <__sflush_r+0xb2>
 800eabe:	602f      	str	r7, [r5, #0]
 800eac0:	e7b2      	b.n	800ea28 <__sflush_r+0x18>
 800eac2:	89a3      	ldrh	r3, [r4, #12]
 800eac4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800eac8:	81a3      	strh	r3, [r4, #12]
 800eaca:	e7ae      	b.n	800ea2a <__sflush_r+0x1a>
 800eacc:	690f      	ldr	r7, [r1, #16]
 800eace:	2f00      	cmp	r7, #0
 800ead0:	d0aa      	beq.n	800ea28 <__sflush_r+0x18>
 800ead2:	0793      	lsls	r3, r2, #30
 800ead4:	bf18      	it	ne
 800ead6:	2300      	movne	r3, #0
 800ead8:	680e      	ldr	r6, [r1, #0]
 800eada:	bf08      	it	eq
 800eadc:	694b      	ldreq	r3, [r1, #20]
 800eade:	1bf6      	subs	r6, r6, r7
 800eae0:	600f      	str	r7, [r1, #0]
 800eae2:	608b      	str	r3, [r1, #8]
 800eae4:	2e00      	cmp	r6, #0
 800eae6:	dd9f      	ble.n	800ea28 <__sflush_r+0x18>
 800eae8:	4633      	mov	r3, r6
 800eaea:	463a      	mov	r2, r7
 800eaec:	4628      	mov	r0, r5
 800eaee:	6a21      	ldr	r1, [r4, #32]
 800eaf0:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800eaf4:	47e0      	blx	ip
 800eaf6:	2800      	cmp	r0, #0
 800eaf8:	dc06      	bgt.n	800eb08 <__sflush_r+0xf8>
 800eafa:	89a3      	ldrh	r3, [r4, #12]
 800eafc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800eb00:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800eb04:	81a3      	strh	r3, [r4, #12]
 800eb06:	e790      	b.n	800ea2a <__sflush_r+0x1a>
 800eb08:	4407      	add	r7, r0
 800eb0a:	1a36      	subs	r6, r6, r0
 800eb0c:	e7ea      	b.n	800eae4 <__sflush_r+0xd4>
 800eb0e:	bf00      	nop
 800eb10:	20400001 	.word	0x20400001

0800eb14 <_fflush_r>:
 800eb14:	b538      	push	{r3, r4, r5, lr}
 800eb16:	690b      	ldr	r3, [r1, #16]
 800eb18:	4605      	mov	r5, r0
 800eb1a:	460c      	mov	r4, r1
 800eb1c:	b913      	cbnz	r3, 800eb24 <_fflush_r+0x10>
 800eb1e:	2500      	movs	r5, #0
 800eb20:	4628      	mov	r0, r5
 800eb22:	bd38      	pop	{r3, r4, r5, pc}
 800eb24:	b118      	cbz	r0, 800eb2e <_fflush_r+0x1a>
 800eb26:	6983      	ldr	r3, [r0, #24]
 800eb28:	b90b      	cbnz	r3, 800eb2e <_fflush_r+0x1a>
 800eb2a:	f000 f887 	bl	800ec3c <__sinit>
 800eb2e:	4b14      	ldr	r3, [pc, #80]	; (800eb80 <_fflush_r+0x6c>)
 800eb30:	429c      	cmp	r4, r3
 800eb32:	d11b      	bne.n	800eb6c <_fflush_r+0x58>
 800eb34:	686c      	ldr	r4, [r5, #4]
 800eb36:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800eb3a:	2b00      	cmp	r3, #0
 800eb3c:	d0ef      	beq.n	800eb1e <_fflush_r+0xa>
 800eb3e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800eb40:	07d0      	lsls	r0, r2, #31
 800eb42:	d404      	bmi.n	800eb4e <_fflush_r+0x3a>
 800eb44:	0599      	lsls	r1, r3, #22
 800eb46:	d402      	bmi.n	800eb4e <_fflush_r+0x3a>
 800eb48:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800eb4a:	f7ff fa38 	bl	800dfbe <__retarget_lock_acquire_recursive>
 800eb4e:	4628      	mov	r0, r5
 800eb50:	4621      	mov	r1, r4
 800eb52:	f7ff ff5d 	bl	800ea10 <__sflush_r>
 800eb56:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800eb58:	4605      	mov	r5, r0
 800eb5a:	07da      	lsls	r2, r3, #31
 800eb5c:	d4e0      	bmi.n	800eb20 <_fflush_r+0xc>
 800eb5e:	89a3      	ldrh	r3, [r4, #12]
 800eb60:	059b      	lsls	r3, r3, #22
 800eb62:	d4dd      	bmi.n	800eb20 <_fflush_r+0xc>
 800eb64:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800eb66:	f7ff fa2b 	bl	800dfc0 <__retarget_lock_release_recursive>
 800eb6a:	e7d9      	b.n	800eb20 <_fflush_r+0xc>
 800eb6c:	4b05      	ldr	r3, [pc, #20]	; (800eb84 <_fflush_r+0x70>)
 800eb6e:	429c      	cmp	r4, r3
 800eb70:	d101      	bne.n	800eb76 <_fflush_r+0x62>
 800eb72:	68ac      	ldr	r4, [r5, #8]
 800eb74:	e7df      	b.n	800eb36 <_fflush_r+0x22>
 800eb76:	4b04      	ldr	r3, [pc, #16]	; (800eb88 <_fflush_r+0x74>)
 800eb78:	429c      	cmp	r4, r3
 800eb7a:	bf08      	it	eq
 800eb7c:	68ec      	ldreq	r4, [r5, #12]
 800eb7e:	e7da      	b.n	800eb36 <_fflush_r+0x22>
 800eb80:	080101b8 	.word	0x080101b8
 800eb84:	080101d8 	.word	0x080101d8
 800eb88:	08010198 	.word	0x08010198

0800eb8c <std>:
 800eb8c:	2300      	movs	r3, #0
 800eb8e:	b510      	push	{r4, lr}
 800eb90:	4604      	mov	r4, r0
 800eb92:	e9c0 3300 	strd	r3, r3, [r0]
 800eb96:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800eb9a:	6083      	str	r3, [r0, #8]
 800eb9c:	8181      	strh	r1, [r0, #12]
 800eb9e:	6643      	str	r3, [r0, #100]	; 0x64
 800eba0:	81c2      	strh	r2, [r0, #14]
 800eba2:	6183      	str	r3, [r0, #24]
 800eba4:	4619      	mov	r1, r3
 800eba6:	2208      	movs	r2, #8
 800eba8:	305c      	adds	r0, #92	; 0x5c
 800ebaa:	f7ff fa29 	bl	800e000 <memset>
 800ebae:	4b05      	ldr	r3, [pc, #20]	; (800ebc4 <std+0x38>)
 800ebb0:	6224      	str	r4, [r4, #32]
 800ebb2:	6263      	str	r3, [r4, #36]	; 0x24
 800ebb4:	4b04      	ldr	r3, [pc, #16]	; (800ebc8 <std+0x3c>)
 800ebb6:	62a3      	str	r3, [r4, #40]	; 0x28
 800ebb8:	4b04      	ldr	r3, [pc, #16]	; (800ebcc <std+0x40>)
 800ebba:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ebbc:	4b04      	ldr	r3, [pc, #16]	; (800ebd0 <std+0x44>)
 800ebbe:	6323      	str	r3, [r4, #48]	; 0x30
 800ebc0:	bd10      	pop	{r4, pc}
 800ebc2:	bf00      	nop
 800ebc4:	0800f24d 	.word	0x0800f24d
 800ebc8:	0800f26f 	.word	0x0800f26f
 800ebcc:	0800f2a7 	.word	0x0800f2a7
 800ebd0:	0800f2cb 	.word	0x0800f2cb

0800ebd4 <_cleanup_r>:
 800ebd4:	4901      	ldr	r1, [pc, #4]	; (800ebdc <_cleanup_r+0x8>)
 800ebd6:	f000 b8af 	b.w	800ed38 <_fwalk_reent>
 800ebda:	bf00      	nop
 800ebdc:	0800eb15 	.word	0x0800eb15

0800ebe0 <__sfmoreglue>:
 800ebe0:	2268      	movs	r2, #104	; 0x68
 800ebe2:	b570      	push	{r4, r5, r6, lr}
 800ebe4:	1e4d      	subs	r5, r1, #1
 800ebe6:	4355      	muls	r5, r2
 800ebe8:	460e      	mov	r6, r1
 800ebea:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800ebee:	f7ff fa77 	bl	800e0e0 <_malloc_r>
 800ebf2:	4604      	mov	r4, r0
 800ebf4:	b140      	cbz	r0, 800ec08 <__sfmoreglue+0x28>
 800ebf6:	2100      	movs	r1, #0
 800ebf8:	e9c0 1600 	strd	r1, r6, [r0]
 800ebfc:	300c      	adds	r0, #12
 800ebfe:	60a0      	str	r0, [r4, #8]
 800ec00:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800ec04:	f7ff f9fc 	bl	800e000 <memset>
 800ec08:	4620      	mov	r0, r4
 800ec0a:	bd70      	pop	{r4, r5, r6, pc}

0800ec0c <__sfp_lock_acquire>:
 800ec0c:	4801      	ldr	r0, [pc, #4]	; (800ec14 <__sfp_lock_acquire+0x8>)
 800ec0e:	f7ff b9d6 	b.w	800dfbe <__retarget_lock_acquire_recursive>
 800ec12:	bf00      	nop
 800ec14:	20001679 	.word	0x20001679

0800ec18 <__sfp_lock_release>:
 800ec18:	4801      	ldr	r0, [pc, #4]	; (800ec20 <__sfp_lock_release+0x8>)
 800ec1a:	f7ff b9d1 	b.w	800dfc0 <__retarget_lock_release_recursive>
 800ec1e:	bf00      	nop
 800ec20:	20001679 	.word	0x20001679

0800ec24 <__sinit_lock_acquire>:
 800ec24:	4801      	ldr	r0, [pc, #4]	; (800ec2c <__sinit_lock_acquire+0x8>)
 800ec26:	f7ff b9ca 	b.w	800dfbe <__retarget_lock_acquire_recursive>
 800ec2a:	bf00      	nop
 800ec2c:	2000167a 	.word	0x2000167a

0800ec30 <__sinit_lock_release>:
 800ec30:	4801      	ldr	r0, [pc, #4]	; (800ec38 <__sinit_lock_release+0x8>)
 800ec32:	f7ff b9c5 	b.w	800dfc0 <__retarget_lock_release_recursive>
 800ec36:	bf00      	nop
 800ec38:	2000167a 	.word	0x2000167a

0800ec3c <__sinit>:
 800ec3c:	b510      	push	{r4, lr}
 800ec3e:	4604      	mov	r4, r0
 800ec40:	f7ff fff0 	bl	800ec24 <__sinit_lock_acquire>
 800ec44:	69a3      	ldr	r3, [r4, #24]
 800ec46:	b11b      	cbz	r3, 800ec50 <__sinit+0x14>
 800ec48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ec4c:	f7ff bff0 	b.w	800ec30 <__sinit_lock_release>
 800ec50:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800ec54:	6523      	str	r3, [r4, #80]	; 0x50
 800ec56:	4b13      	ldr	r3, [pc, #76]	; (800eca4 <__sinit+0x68>)
 800ec58:	4a13      	ldr	r2, [pc, #76]	; (800eca8 <__sinit+0x6c>)
 800ec5a:	681b      	ldr	r3, [r3, #0]
 800ec5c:	62a2      	str	r2, [r4, #40]	; 0x28
 800ec5e:	42a3      	cmp	r3, r4
 800ec60:	bf08      	it	eq
 800ec62:	2301      	moveq	r3, #1
 800ec64:	4620      	mov	r0, r4
 800ec66:	bf08      	it	eq
 800ec68:	61a3      	streq	r3, [r4, #24]
 800ec6a:	f000 f81f 	bl	800ecac <__sfp>
 800ec6e:	6060      	str	r0, [r4, #4]
 800ec70:	4620      	mov	r0, r4
 800ec72:	f000 f81b 	bl	800ecac <__sfp>
 800ec76:	60a0      	str	r0, [r4, #8]
 800ec78:	4620      	mov	r0, r4
 800ec7a:	f000 f817 	bl	800ecac <__sfp>
 800ec7e:	2200      	movs	r2, #0
 800ec80:	2104      	movs	r1, #4
 800ec82:	60e0      	str	r0, [r4, #12]
 800ec84:	6860      	ldr	r0, [r4, #4]
 800ec86:	f7ff ff81 	bl	800eb8c <std>
 800ec8a:	2201      	movs	r2, #1
 800ec8c:	2109      	movs	r1, #9
 800ec8e:	68a0      	ldr	r0, [r4, #8]
 800ec90:	f7ff ff7c 	bl	800eb8c <std>
 800ec94:	2202      	movs	r2, #2
 800ec96:	2112      	movs	r1, #18
 800ec98:	68e0      	ldr	r0, [r4, #12]
 800ec9a:	f7ff ff77 	bl	800eb8c <std>
 800ec9e:	2301      	movs	r3, #1
 800eca0:	61a3      	str	r3, [r4, #24]
 800eca2:	e7d1      	b.n	800ec48 <__sinit+0xc>
 800eca4:	08010160 	.word	0x08010160
 800eca8:	0800ebd5 	.word	0x0800ebd5

0800ecac <__sfp>:
 800ecac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ecae:	4607      	mov	r7, r0
 800ecb0:	f7ff ffac 	bl	800ec0c <__sfp_lock_acquire>
 800ecb4:	4b1e      	ldr	r3, [pc, #120]	; (800ed30 <__sfp+0x84>)
 800ecb6:	681e      	ldr	r6, [r3, #0]
 800ecb8:	69b3      	ldr	r3, [r6, #24]
 800ecba:	b913      	cbnz	r3, 800ecc2 <__sfp+0x16>
 800ecbc:	4630      	mov	r0, r6
 800ecbe:	f7ff ffbd 	bl	800ec3c <__sinit>
 800ecc2:	3648      	adds	r6, #72	; 0x48
 800ecc4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800ecc8:	3b01      	subs	r3, #1
 800ecca:	d503      	bpl.n	800ecd4 <__sfp+0x28>
 800eccc:	6833      	ldr	r3, [r6, #0]
 800ecce:	b30b      	cbz	r3, 800ed14 <__sfp+0x68>
 800ecd0:	6836      	ldr	r6, [r6, #0]
 800ecd2:	e7f7      	b.n	800ecc4 <__sfp+0x18>
 800ecd4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800ecd8:	b9d5      	cbnz	r5, 800ed10 <__sfp+0x64>
 800ecda:	4b16      	ldr	r3, [pc, #88]	; (800ed34 <__sfp+0x88>)
 800ecdc:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800ece0:	60e3      	str	r3, [r4, #12]
 800ece2:	6665      	str	r5, [r4, #100]	; 0x64
 800ece4:	f7ff f96a 	bl	800dfbc <__retarget_lock_init_recursive>
 800ece8:	f7ff ff96 	bl	800ec18 <__sfp_lock_release>
 800ecec:	2208      	movs	r2, #8
 800ecee:	4629      	mov	r1, r5
 800ecf0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800ecf4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800ecf8:	6025      	str	r5, [r4, #0]
 800ecfa:	61a5      	str	r5, [r4, #24]
 800ecfc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800ed00:	f7ff f97e 	bl	800e000 <memset>
 800ed04:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800ed08:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800ed0c:	4620      	mov	r0, r4
 800ed0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ed10:	3468      	adds	r4, #104	; 0x68
 800ed12:	e7d9      	b.n	800ecc8 <__sfp+0x1c>
 800ed14:	2104      	movs	r1, #4
 800ed16:	4638      	mov	r0, r7
 800ed18:	f7ff ff62 	bl	800ebe0 <__sfmoreglue>
 800ed1c:	4604      	mov	r4, r0
 800ed1e:	6030      	str	r0, [r6, #0]
 800ed20:	2800      	cmp	r0, #0
 800ed22:	d1d5      	bne.n	800ecd0 <__sfp+0x24>
 800ed24:	f7ff ff78 	bl	800ec18 <__sfp_lock_release>
 800ed28:	230c      	movs	r3, #12
 800ed2a:	603b      	str	r3, [r7, #0]
 800ed2c:	e7ee      	b.n	800ed0c <__sfp+0x60>
 800ed2e:	bf00      	nop
 800ed30:	08010160 	.word	0x08010160
 800ed34:	ffff0001 	.word	0xffff0001

0800ed38 <_fwalk_reent>:
 800ed38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ed3c:	4606      	mov	r6, r0
 800ed3e:	4688      	mov	r8, r1
 800ed40:	2700      	movs	r7, #0
 800ed42:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800ed46:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ed4a:	f1b9 0901 	subs.w	r9, r9, #1
 800ed4e:	d505      	bpl.n	800ed5c <_fwalk_reent+0x24>
 800ed50:	6824      	ldr	r4, [r4, #0]
 800ed52:	2c00      	cmp	r4, #0
 800ed54:	d1f7      	bne.n	800ed46 <_fwalk_reent+0xe>
 800ed56:	4638      	mov	r0, r7
 800ed58:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ed5c:	89ab      	ldrh	r3, [r5, #12]
 800ed5e:	2b01      	cmp	r3, #1
 800ed60:	d907      	bls.n	800ed72 <_fwalk_reent+0x3a>
 800ed62:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ed66:	3301      	adds	r3, #1
 800ed68:	d003      	beq.n	800ed72 <_fwalk_reent+0x3a>
 800ed6a:	4629      	mov	r1, r5
 800ed6c:	4630      	mov	r0, r6
 800ed6e:	47c0      	blx	r8
 800ed70:	4307      	orrs	r7, r0
 800ed72:	3568      	adds	r5, #104	; 0x68
 800ed74:	e7e9      	b.n	800ed4a <_fwalk_reent+0x12>

0800ed76 <__swhatbuf_r>:
 800ed76:	b570      	push	{r4, r5, r6, lr}
 800ed78:	460e      	mov	r6, r1
 800ed7a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ed7e:	4614      	mov	r4, r2
 800ed80:	2900      	cmp	r1, #0
 800ed82:	461d      	mov	r5, r3
 800ed84:	b096      	sub	sp, #88	; 0x58
 800ed86:	da08      	bge.n	800ed9a <__swhatbuf_r+0x24>
 800ed88:	2200      	movs	r2, #0
 800ed8a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800ed8e:	602a      	str	r2, [r5, #0]
 800ed90:	061a      	lsls	r2, r3, #24
 800ed92:	d410      	bmi.n	800edb6 <__swhatbuf_r+0x40>
 800ed94:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ed98:	e00e      	b.n	800edb8 <__swhatbuf_r+0x42>
 800ed9a:	466a      	mov	r2, sp
 800ed9c:	f000 fabc 	bl	800f318 <_fstat_r>
 800eda0:	2800      	cmp	r0, #0
 800eda2:	dbf1      	blt.n	800ed88 <__swhatbuf_r+0x12>
 800eda4:	9a01      	ldr	r2, [sp, #4]
 800eda6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800edaa:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800edae:	425a      	negs	r2, r3
 800edb0:	415a      	adcs	r2, r3
 800edb2:	602a      	str	r2, [r5, #0]
 800edb4:	e7ee      	b.n	800ed94 <__swhatbuf_r+0x1e>
 800edb6:	2340      	movs	r3, #64	; 0x40
 800edb8:	2000      	movs	r0, #0
 800edba:	6023      	str	r3, [r4, #0]
 800edbc:	b016      	add	sp, #88	; 0x58
 800edbe:	bd70      	pop	{r4, r5, r6, pc}

0800edc0 <__smakebuf_r>:
 800edc0:	898b      	ldrh	r3, [r1, #12]
 800edc2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800edc4:	079d      	lsls	r5, r3, #30
 800edc6:	4606      	mov	r6, r0
 800edc8:	460c      	mov	r4, r1
 800edca:	d507      	bpl.n	800eddc <__smakebuf_r+0x1c>
 800edcc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800edd0:	6023      	str	r3, [r4, #0]
 800edd2:	6123      	str	r3, [r4, #16]
 800edd4:	2301      	movs	r3, #1
 800edd6:	6163      	str	r3, [r4, #20]
 800edd8:	b002      	add	sp, #8
 800edda:	bd70      	pop	{r4, r5, r6, pc}
 800eddc:	466a      	mov	r2, sp
 800edde:	ab01      	add	r3, sp, #4
 800ede0:	f7ff ffc9 	bl	800ed76 <__swhatbuf_r>
 800ede4:	9900      	ldr	r1, [sp, #0]
 800ede6:	4605      	mov	r5, r0
 800ede8:	4630      	mov	r0, r6
 800edea:	f7ff f979 	bl	800e0e0 <_malloc_r>
 800edee:	b948      	cbnz	r0, 800ee04 <__smakebuf_r+0x44>
 800edf0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800edf4:	059a      	lsls	r2, r3, #22
 800edf6:	d4ef      	bmi.n	800edd8 <__smakebuf_r+0x18>
 800edf8:	f023 0303 	bic.w	r3, r3, #3
 800edfc:	f043 0302 	orr.w	r3, r3, #2
 800ee00:	81a3      	strh	r3, [r4, #12]
 800ee02:	e7e3      	b.n	800edcc <__smakebuf_r+0xc>
 800ee04:	4b0d      	ldr	r3, [pc, #52]	; (800ee3c <__smakebuf_r+0x7c>)
 800ee06:	62b3      	str	r3, [r6, #40]	; 0x28
 800ee08:	89a3      	ldrh	r3, [r4, #12]
 800ee0a:	6020      	str	r0, [r4, #0]
 800ee0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ee10:	81a3      	strh	r3, [r4, #12]
 800ee12:	9b00      	ldr	r3, [sp, #0]
 800ee14:	6120      	str	r0, [r4, #16]
 800ee16:	6163      	str	r3, [r4, #20]
 800ee18:	9b01      	ldr	r3, [sp, #4]
 800ee1a:	b15b      	cbz	r3, 800ee34 <__smakebuf_r+0x74>
 800ee1c:	4630      	mov	r0, r6
 800ee1e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ee22:	f000 fa8b 	bl	800f33c <_isatty_r>
 800ee26:	b128      	cbz	r0, 800ee34 <__smakebuf_r+0x74>
 800ee28:	89a3      	ldrh	r3, [r4, #12]
 800ee2a:	f023 0303 	bic.w	r3, r3, #3
 800ee2e:	f043 0301 	orr.w	r3, r3, #1
 800ee32:	81a3      	strh	r3, [r4, #12]
 800ee34:	89a0      	ldrh	r0, [r4, #12]
 800ee36:	4305      	orrs	r5, r0
 800ee38:	81a5      	strh	r5, [r4, #12]
 800ee3a:	e7cd      	b.n	800edd8 <__smakebuf_r+0x18>
 800ee3c:	0800ebd5 	.word	0x0800ebd5

0800ee40 <memchr>:
 800ee40:	4603      	mov	r3, r0
 800ee42:	b510      	push	{r4, lr}
 800ee44:	b2c9      	uxtb	r1, r1
 800ee46:	4402      	add	r2, r0
 800ee48:	4293      	cmp	r3, r2
 800ee4a:	4618      	mov	r0, r3
 800ee4c:	d101      	bne.n	800ee52 <memchr+0x12>
 800ee4e:	2000      	movs	r0, #0
 800ee50:	e003      	b.n	800ee5a <memchr+0x1a>
 800ee52:	7804      	ldrb	r4, [r0, #0]
 800ee54:	3301      	adds	r3, #1
 800ee56:	428c      	cmp	r4, r1
 800ee58:	d1f6      	bne.n	800ee48 <memchr+0x8>
 800ee5a:	bd10      	pop	{r4, pc}

0800ee5c <memmove>:
 800ee5c:	4288      	cmp	r0, r1
 800ee5e:	b510      	push	{r4, lr}
 800ee60:	eb01 0402 	add.w	r4, r1, r2
 800ee64:	d902      	bls.n	800ee6c <memmove+0x10>
 800ee66:	4284      	cmp	r4, r0
 800ee68:	4623      	mov	r3, r4
 800ee6a:	d807      	bhi.n	800ee7c <memmove+0x20>
 800ee6c:	1e43      	subs	r3, r0, #1
 800ee6e:	42a1      	cmp	r1, r4
 800ee70:	d008      	beq.n	800ee84 <memmove+0x28>
 800ee72:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ee76:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ee7a:	e7f8      	b.n	800ee6e <memmove+0x12>
 800ee7c:	4601      	mov	r1, r0
 800ee7e:	4402      	add	r2, r0
 800ee80:	428a      	cmp	r2, r1
 800ee82:	d100      	bne.n	800ee86 <memmove+0x2a>
 800ee84:	bd10      	pop	{r4, pc}
 800ee86:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ee8a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ee8e:	e7f7      	b.n	800ee80 <memmove+0x24>

0800ee90 <__malloc_lock>:
 800ee90:	4801      	ldr	r0, [pc, #4]	; (800ee98 <__malloc_lock+0x8>)
 800ee92:	f7ff b894 	b.w	800dfbe <__retarget_lock_acquire_recursive>
 800ee96:	bf00      	nop
 800ee98:	20001678 	.word	0x20001678

0800ee9c <__malloc_unlock>:
 800ee9c:	4801      	ldr	r0, [pc, #4]	; (800eea4 <__malloc_unlock+0x8>)
 800ee9e:	f7ff b88f 	b.w	800dfc0 <__retarget_lock_release_recursive>
 800eea2:	bf00      	nop
 800eea4:	20001678 	.word	0x20001678

0800eea8 <_realloc_r>:
 800eea8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eeac:	4680      	mov	r8, r0
 800eeae:	4614      	mov	r4, r2
 800eeb0:	460e      	mov	r6, r1
 800eeb2:	b921      	cbnz	r1, 800eebe <_realloc_r+0x16>
 800eeb4:	4611      	mov	r1, r2
 800eeb6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800eeba:	f7ff b911 	b.w	800e0e0 <_malloc_r>
 800eebe:	b92a      	cbnz	r2, 800eecc <_realloc_r+0x24>
 800eec0:	f7ff f8a6 	bl	800e010 <_free_r>
 800eec4:	4625      	mov	r5, r4
 800eec6:	4628      	mov	r0, r5
 800eec8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eecc:	f000 fa58 	bl	800f380 <_malloc_usable_size_r>
 800eed0:	4284      	cmp	r4, r0
 800eed2:	4607      	mov	r7, r0
 800eed4:	d802      	bhi.n	800eedc <_realloc_r+0x34>
 800eed6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800eeda:	d812      	bhi.n	800ef02 <_realloc_r+0x5a>
 800eedc:	4621      	mov	r1, r4
 800eede:	4640      	mov	r0, r8
 800eee0:	f7ff f8fe 	bl	800e0e0 <_malloc_r>
 800eee4:	4605      	mov	r5, r0
 800eee6:	2800      	cmp	r0, #0
 800eee8:	d0ed      	beq.n	800eec6 <_realloc_r+0x1e>
 800eeea:	42bc      	cmp	r4, r7
 800eeec:	4622      	mov	r2, r4
 800eeee:	4631      	mov	r1, r6
 800eef0:	bf28      	it	cs
 800eef2:	463a      	movcs	r2, r7
 800eef4:	f7ff f876 	bl	800dfe4 <memcpy>
 800eef8:	4631      	mov	r1, r6
 800eefa:	4640      	mov	r0, r8
 800eefc:	f7ff f888 	bl	800e010 <_free_r>
 800ef00:	e7e1      	b.n	800eec6 <_realloc_r+0x1e>
 800ef02:	4635      	mov	r5, r6
 800ef04:	e7df      	b.n	800eec6 <_realloc_r+0x1e>

0800ef06 <__ssputs_r>:
 800ef06:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ef0a:	688e      	ldr	r6, [r1, #8]
 800ef0c:	4682      	mov	sl, r0
 800ef0e:	429e      	cmp	r6, r3
 800ef10:	460c      	mov	r4, r1
 800ef12:	4690      	mov	r8, r2
 800ef14:	461f      	mov	r7, r3
 800ef16:	d838      	bhi.n	800ef8a <__ssputs_r+0x84>
 800ef18:	898a      	ldrh	r2, [r1, #12]
 800ef1a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ef1e:	d032      	beq.n	800ef86 <__ssputs_r+0x80>
 800ef20:	6825      	ldr	r5, [r4, #0]
 800ef22:	6909      	ldr	r1, [r1, #16]
 800ef24:	3301      	adds	r3, #1
 800ef26:	eba5 0901 	sub.w	r9, r5, r1
 800ef2a:	6965      	ldr	r5, [r4, #20]
 800ef2c:	444b      	add	r3, r9
 800ef2e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ef32:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ef36:	106d      	asrs	r5, r5, #1
 800ef38:	429d      	cmp	r5, r3
 800ef3a:	bf38      	it	cc
 800ef3c:	461d      	movcc	r5, r3
 800ef3e:	0553      	lsls	r3, r2, #21
 800ef40:	d531      	bpl.n	800efa6 <__ssputs_r+0xa0>
 800ef42:	4629      	mov	r1, r5
 800ef44:	f7ff f8cc 	bl	800e0e0 <_malloc_r>
 800ef48:	4606      	mov	r6, r0
 800ef4a:	b950      	cbnz	r0, 800ef62 <__ssputs_r+0x5c>
 800ef4c:	230c      	movs	r3, #12
 800ef4e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ef52:	f8ca 3000 	str.w	r3, [sl]
 800ef56:	89a3      	ldrh	r3, [r4, #12]
 800ef58:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ef5c:	81a3      	strh	r3, [r4, #12]
 800ef5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ef62:	464a      	mov	r2, r9
 800ef64:	6921      	ldr	r1, [r4, #16]
 800ef66:	f7ff f83d 	bl	800dfe4 <memcpy>
 800ef6a:	89a3      	ldrh	r3, [r4, #12]
 800ef6c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ef70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ef74:	81a3      	strh	r3, [r4, #12]
 800ef76:	6126      	str	r6, [r4, #16]
 800ef78:	444e      	add	r6, r9
 800ef7a:	6026      	str	r6, [r4, #0]
 800ef7c:	463e      	mov	r6, r7
 800ef7e:	6165      	str	r5, [r4, #20]
 800ef80:	eba5 0509 	sub.w	r5, r5, r9
 800ef84:	60a5      	str	r5, [r4, #8]
 800ef86:	42be      	cmp	r6, r7
 800ef88:	d900      	bls.n	800ef8c <__ssputs_r+0x86>
 800ef8a:	463e      	mov	r6, r7
 800ef8c:	4632      	mov	r2, r6
 800ef8e:	4641      	mov	r1, r8
 800ef90:	6820      	ldr	r0, [r4, #0]
 800ef92:	f7ff ff63 	bl	800ee5c <memmove>
 800ef96:	68a3      	ldr	r3, [r4, #8]
 800ef98:	2000      	movs	r0, #0
 800ef9a:	1b9b      	subs	r3, r3, r6
 800ef9c:	60a3      	str	r3, [r4, #8]
 800ef9e:	6823      	ldr	r3, [r4, #0]
 800efa0:	4433      	add	r3, r6
 800efa2:	6023      	str	r3, [r4, #0]
 800efa4:	e7db      	b.n	800ef5e <__ssputs_r+0x58>
 800efa6:	462a      	mov	r2, r5
 800efa8:	f7ff ff7e 	bl	800eea8 <_realloc_r>
 800efac:	4606      	mov	r6, r0
 800efae:	2800      	cmp	r0, #0
 800efb0:	d1e1      	bne.n	800ef76 <__ssputs_r+0x70>
 800efb2:	4650      	mov	r0, sl
 800efb4:	6921      	ldr	r1, [r4, #16]
 800efb6:	f7ff f82b 	bl	800e010 <_free_r>
 800efba:	e7c7      	b.n	800ef4c <__ssputs_r+0x46>

0800efbc <_svfiprintf_r>:
 800efbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800efc0:	4698      	mov	r8, r3
 800efc2:	898b      	ldrh	r3, [r1, #12]
 800efc4:	4607      	mov	r7, r0
 800efc6:	061b      	lsls	r3, r3, #24
 800efc8:	460d      	mov	r5, r1
 800efca:	4614      	mov	r4, r2
 800efcc:	b09d      	sub	sp, #116	; 0x74
 800efce:	d50e      	bpl.n	800efee <_svfiprintf_r+0x32>
 800efd0:	690b      	ldr	r3, [r1, #16]
 800efd2:	b963      	cbnz	r3, 800efee <_svfiprintf_r+0x32>
 800efd4:	2140      	movs	r1, #64	; 0x40
 800efd6:	f7ff f883 	bl	800e0e0 <_malloc_r>
 800efda:	6028      	str	r0, [r5, #0]
 800efdc:	6128      	str	r0, [r5, #16]
 800efde:	b920      	cbnz	r0, 800efea <_svfiprintf_r+0x2e>
 800efe0:	230c      	movs	r3, #12
 800efe2:	603b      	str	r3, [r7, #0]
 800efe4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800efe8:	e0d1      	b.n	800f18e <_svfiprintf_r+0x1d2>
 800efea:	2340      	movs	r3, #64	; 0x40
 800efec:	616b      	str	r3, [r5, #20]
 800efee:	2300      	movs	r3, #0
 800eff0:	9309      	str	r3, [sp, #36]	; 0x24
 800eff2:	2320      	movs	r3, #32
 800eff4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800eff8:	2330      	movs	r3, #48	; 0x30
 800effa:	f04f 0901 	mov.w	r9, #1
 800effe:	f8cd 800c 	str.w	r8, [sp, #12]
 800f002:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800f1a8 <_svfiprintf_r+0x1ec>
 800f006:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f00a:	4623      	mov	r3, r4
 800f00c:	469a      	mov	sl, r3
 800f00e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f012:	b10a      	cbz	r2, 800f018 <_svfiprintf_r+0x5c>
 800f014:	2a25      	cmp	r2, #37	; 0x25
 800f016:	d1f9      	bne.n	800f00c <_svfiprintf_r+0x50>
 800f018:	ebba 0b04 	subs.w	fp, sl, r4
 800f01c:	d00b      	beq.n	800f036 <_svfiprintf_r+0x7a>
 800f01e:	465b      	mov	r3, fp
 800f020:	4622      	mov	r2, r4
 800f022:	4629      	mov	r1, r5
 800f024:	4638      	mov	r0, r7
 800f026:	f7ff ff6e 	bl	800ef06 <__ssputs_r>
 800f02a:	3001      	adds	r0, #1
 800f02c:	f000 80aa 	beq.w	800f184 <_svfiprintf_r+0x1c8>
 800f030:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f032:	445a      	add	r2, fp
 800f034:	9209      	str	r2, [sp, #36]	; 0x24
 800f036:	f89a 3000 	ldrb.w	r3, [sl]
 800f03a:	2b00      	cmp	r3, #0
 800f03c:	f000 80a2 	beq.w	800f184 <_svfiprintf_r+0x1c8>
 800f040:	2300      	movs	r3, #0
 800f042:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f046:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f04a:	f10a 0a01 	add.w	sl, sl, #1
 800f04e:	9304      	str	r3, [sp, #16]
 800f050:	9307      	str	r3, [sp, #28]
 800f052:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f056:	931a      	str	r3, [sp, #104]	; 0x68
 800f058:	4654      	mov	r4, sl
 800f05a:	2205      	movs	r2, #5
 800f05c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f060:	4851      	ldr	r0, [pc, #324]	; (800f1a8 <_svfiprintf_r+0x1ec>)
 800f062:	f7ff feed 	bl	800ee40 <memchr>
 800f066:	9a04      	ldr	r2, [sp, #16]
 800f068:	b9d8      	cbnz	r0, 800f0a2 <_svfiprintf_r+0xe6>
 800f06a:	06d0      	lsls	r0, r2, #27
 800f06c:	bf44      	itt	mi
 800f06e:	2320      	movmi	r3, #32
 800f070:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f074:	0711      	lsls	r1, r2, #28
 800f076:	bf44      	itt	mi
 800f078:	232b      	movmi	r3, #43	; 0x2b
 800f07a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f07e:	f89a 3000 	ldrb.w	r3, [sl]
 800f082:	2b2a      	cmp	r3, #42	; 0x2a
 800f084:	d015      	beq.n	800f0b2 <_svfiprintf_r+0xf6>
 800f086:	4654      	mov	r4, sl
 800f088:	2000      	movs	r0, #0
 800f08a:	f04f 0c0a 	mov.w	ip, #10
 800f08e:	9a07      	ldr	r2, [sp, #28]
 800f090:	4621      	mov	r1, r4
 800f092:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f096:	3b30      	subs	r3, #48	; 0x30
 800f098:	2b09      	cmp	r3, #9
 800f09a:	d94e      	bls.n	800f13a <_svfiprintf_r+0x17e>
 800f09c:	b1b0      	cbz	r0, 800f0cc <_svfiprintf_r+0x110>
 800f09e:	9207      	str	r2, [sp, #28]
 800f0a0:	e014      	b.n	800f0cc <_svfiprintf_r+0x110>
 800f0a2:	eba0 0308 	sub.w	r3, r0, r8
 800f0a6:	fa09 f303 	lsl.w	r3, r9, r3
 800f0aa:	4313      	orrs	r3, r2
 800f0ac:	46a2      	mov	sl, r4
 800f0ae:	9304      	str	r3, [sp, #16]
 800f0b0:	e7d2      	b.n	800f058 <_svfiprintf_r+0x9c>
 800f0b2:	9b03      	ldr	r3, [sp, #12]
 800f0b4:	1d19      	adds	r1, r3, #4
 800f0b6:	681b      	ldr	r3, [r3, #0]
 800f0b8:	9103      	str	r1, [sp, #12]
 800f0ba:	2b00      	cmp	r3, #0
 800f0bc:	bfbb      	ittet	lt
 800f0be:	425b      	neglt	r3, r3
 800f0c0:	f042 0202 	orrlt.w	r2, r2, #2
 800f0c4:	9307      	strge	r3, [sp, #28]
 800f0c6:	9307      	strlt	r3, [sp, #28]
 800f0c8:	bfb8      	it	lt
 800f0ca:	9204      	strlt	r2, [sp, #16]
 800f0cc:	7823      	ldrb	r3, [r4, #0]
 800f0ce:	2b2e      	cmp	r3, #46	; 0x2e
 800f0d0:	d10c      	bne.n	800f0ec <_svfiprintf_r+0x130>
 800f0d2:	7863      	ldrb	r3, [r4, #1]
 800f0d4:	2b2a      	cmp	r3, #42	; 0x2a
 800f0d6:	d135      	bne.n	800f144 <_svfiprintf_r+0x188>
 800f0d8:	9b03      	ldr	r3, [sp, #12]
 800f0da:	3402      	adds	r4, #2
 800f0dc:	1d1a      	adds	r2, r3, #4
 800f0de:	681b      	ldr	r3, [r3, #0]
 800f0e0:	9203      	str	r2, [sp, #12]
 800f0e2:	2b00      	cmp	r3, #0
 800f0e4:	bfb8      	it	lt
 800f0e6:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800f0ea:	9305      	str	r3, [sp, #20]
 800f0ec:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800f1ac <_svfiprintf_r+0x1f0>
 800f0f0:	2203      	movs	r2, #3
 800f0f2:	4650      	mov	r0, sl
 800f0f4:	7821      	ldrb	r1, [r4, #0]
 800f0f6:	f7ff fea3 	bl	800ee40 <memchr>
 800f0fa:	b140      	cbz	r0, 800f10e <_svfiprintf_r+0x152>
 800f0fc:	2340      	movs	r3, #64	; 0x40
 800f0fe:	eba0 000a 	sub.w	r0, r0, sl
 800f102:	fa03 f000 	lsl.w	r0, r3, r0
 800f106:	9b04      	ldr	r3, [sp, #16]
 800f108:	3401      	adds	r4, #1
 800f10a:	4303      	orrs	r3, r0
 800f10c:	9304      	str	r3, [sp, #16]
 800f10e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f112:	2206      	movs	r2, #6
 800f114:	4826      	ldr	r0, [pc, #152]	; (800f1b0 <_svfiprintf_r+0x1f4>)
 800f116:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f11a:	f7ff fe91 	bl	800ee40 <memchr>
 800f11e:	2800      	cmp	r0, #0
 800f120:	d038      	beq.n	800f194 <_svfiprintf_r+0x1d8>
 800f122:	4b24      	ldr	r3, [pc, #144]	; (800f1b4 <_svfiprintf_r+0x1f8>)
 800f124:	bb1b      	cbnz	r3, 800f16e <_svfiprintf_r+0x1b2>
 800f126:	9b03      	ldr	r3, [sp, #12]
 800f128:	3307      	adds	r3, #7
 800f12a:	f023 0307 	bic.w	r3, r3, #7
 800f12e:	3308      	adds	r3, #8
 800f130:	9303      	str	r3, [sp, #12]
 800f132:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f134:	4433      	add	r3, r6
 800f136:	9309      	str	r3, [sp, #36]	; 0x24
 800f138:	e767      	b.n	800f00a <_svfiprintf_r+0x4e>
 800f13a:	460c      	mov	r4, r1
 800f13c:	2001      	movs	r0, #1
 800f13e:	fb0c 3202 	mla	r2, ip, r2, r3
 800f142:	e7a5      	b.n	800f090 <_svfiprintf_r+0xd4>
 800f144:	2300      	movs	r3, #0
 800f146:	f04f 0c0a 	mov.w	ip, #10
 800f14a:	4619      	mov	r1, r3
 800f14c:	3401      	adds	r4, #1
 800f14e:	9305      	str	r3, [sp, #20]
 800f150:	4620      	mov	r0, r4
 800f152:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f156:	3a30      	subs	r2, #48	; 0x30
 800f158:	2a09      	cmp	r2, #9
 800f15a:	d903      	bls.n	800f164 <_svfiprintf_r+0x1a8>
 800f15c:	2b00      	cmp	r3, #0
 800f15e:	d0c5      	beq.n	800f0ec <_svfiprintf_r+0x130>
 800f160:	9105      	str	r1, [sp, #20]
 800f162:	e7c3      	b.n	800f0ec <_svfiprintf_r+0x130>
 800f164:	4604      	mov	r4, r0
 800f166:	2301      	movs	r3, #1
 800f168:	fb0c 2101 	mla	r1, ip, r1, r2
 800f16c:	e7f0      	b.n	800f150 <_svfiprintf_r+0x194>
 800f16e:	ab03      	add	r3, sp, #12
 800f170:	9300      	str	r3, [sp, #0]
 800f172:	462a      	mov	r2, r5
 800f174:	4638      	mov	r0, r7
 800f176:	4b10      	ldr	r3, [pc, #64]	; (800f1b8 <_svfiprintf_r+0x1fc>)
 800f178:	a904      	add	r1, sp, #16
 800f17a:	f3af 8000 	nop.w
 800f17e:	1c42      	adds	r2, r0, #1
 800f180:	4606      	mov	r6, r0
 800f182:	d1d6      	bne.n	800f132 <_svfiprintf_r+0x176>
 800f184:	89ab      	ldrh	r3, [r5, #12]
 800f186:	065b      	lsls	r3, r3, #25
 800f188:	f53f af2c 	bmi.w	800efe4 <_svfiprintf_r+0x28>
 800f18c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f18e:	b01d      	add	sp, #116	; 0x74
 800f190:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f194:	ab03      	add	r3, sp, #12
 800f196:	9300      	str	r3, [sp, #0]
 800f198:	462a      	mov	r2, r5
 800f19a:	4638      	mov	r0, r7
 800f19c:	4b06      	ldr	r3, [pc, #24]	; (800f1b8 <_svfiprintf_r+0x1fc>)
 800f19e:	a904      	add	r1, sp, #16
 800f1a0:	f7ff f9da 	bl	800e558 <_printf_i>
 800f1a4:	e7eb      	b.n	800f17e <_svfiprintf_r+0x1c2>
 800f1a6:	bf00      	nop
 800f1a8:	08010164 	.word	0x08010164
 800f1ac:	0801016a 	.word	0x0801016a
 800f1b0:	0801016e 	.word	0x0801016e
 800f1b4:	00000000 	.word	0x00000000
 800f1b8:	0800ef07 	.word	0x0800ef07

0800f1bc <_putc_r>:
 800f1bc:	b570      	push	{r4, r5, r6, lr}
 800f1be:	460d      	mov	r5, r1
 800f1c0:	4614      	mov	r4, r2
 800f1c2:	4606      	mov	r6, r0
 800f1c4:	b118      	cbz	r0, 800f1ce <_putc_r+0x12>
 800f1c6:	6983      	ldr	r3, [r0, #24]
 800f1c8:	b90b      	cbnz	r3, 800f1ce <_putc_r+0x12>
 800f1ca:	f7ff fd37 	bl	800ec3c <__sinit>
 800f1ce:	4b1c      	ldr	r3, [pc, #112]	; (800f240 <_putc_r+0x84>)
 800f1d0:	429c      	cmp	r4, r3
 800f1d2:	d124      	bne.n	800f21e <_putc_r+0x62>
 800f1d4:	6874      	ldr	r4, [r6, #4]
 800f1d6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f1d8:	07d8      	lsls	r0, r3, #31
 800f1da:	d405      	bmi.n	800f1e8 <_putc_r+0x2c>
 800f1dc:	89a3      	ldrh	r3, [r4, #12]
 800f1de:	0599      	lsls	r1, r3, #22
 800f1e0:	d402      	bmi.n	800f1e8 <_putc_r+0x2c>
 800f1e2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f1e4:	f7fe feeb 	bl	800dfbe <__retarget_lock_acquire_recursive>
 800f1e8:	68a3      	ldr	r3, [r4, #8]
 800f1ea:	3b01      	subs	r3, #1
 800f1ec:	2b00      	cmp	r3, #0
 800f1ee:	60a3      	str	r3, [r4, #8]
 800f1f0:	da05      	bge.n	800f1fe <_putc_r+0x42>
 800f1f2:	69a2      	ldr	r2, [r4, #24]
 800f1f4:	4293      	cmp	r3, r2
 800f1f6:	db1c      	blt.n	800f232 <_putc_r+0x76>
 800f1f8:	b2eb      	uxtb	r3, r5
 800f1fa:	2b0a      	cmp	r3, #10
 800f1fc:	d019      	beq.n	800f232 <_putc_r+0x76>
 800f1fe:	6823      	ldr	r3, [r4, #0]
 800f200:	1c5a      	adds	r2, r3, #1
 800f202:	6022      	str	r2, [r4, #0]
 800f204:	701d      	strb	r5, [r3, #0]
 800f206:	b2ed      	uxtb	r5, r5
 800f208:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f20a:	07da      	lsls	r2, r3, #31
 800f20c:	d405      	bmi.n	800f21a <_putc_r+0x5e>
 800f20e:	89a3      	ldrh	r3, [r4, #12]
 800f210:	059b      	lsls	r3, r3, #22
 800f212:	d402      	bmi.n	800f21a <_putc_r+0x5e>
 800f214:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f216:	f7fe fed3 	bl	800dfc0 <__retarget_lock_release_recursive>
 800f21a:	4628      	mov	r0, r5
 800f21c:	bd70      	pop	{r4, r5, r6, pc}
 800f21e:	4b09      	ldr	r3, [pc, #36]	; (800f244 <_putc_r+0x88>)
 800f220:	429c      	cmp	r4, r3
 800f222:	d101      	bne.n	800f228 <_putc_r+0x6c>
 800f224:	68b4      	ldr	r4, [r6, #8]
 800f226:	e7d6      	b.n	800f1d6 <_putc_r+0x1a>
 800f228:	4b07      	ldr	r3, [pc, #28]	; (800f248 <_putc_r+0x8c>)
 800f22a:	429c      	cmp	r4, r3
 800f22c:	bf08      	it	eq
 800f22e:	68f4      	ldreq	r4, [r6, #12]
 800f230:	e7d1      	b.n	800f1d6 <_putc_r+0x1a>
 800f232:	4629      	mov	r1, r5
 800f234:	4622      	mov	r2, r4
 800f236:	4630      	mov	r0, r6
 800f238:	f7ff fb2a 	bl	800e890 <__swbuf_r>
 800f23c:	4605      	mov	r5, r0
 800f23e:	e7e3      	b.n	800f208 <_putc_r+0x4c>
 800f240:	080101b8 	.word	0x080101b8
 800f244:	080101d8 	.word	0x080101d8
 800f248:	08010198 	.word	0x08010198

0800f24c <__sread>:
 800f24c:	b510      	push	{r4, lr}
 800f24e:	460c      	mov	r4, r1
 800f250:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f254:	f000 f89c 	bl	800f390 <_read_r>
 800f258:	2800      	cmp	r0, #0
 800f25a:	bfab      	itete	ge
 800f25c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800f25e:	89a3      	ldrhlt	r3, [r4, #12]
 800f260:	181b      	addge	r3, r3, r0
 800f262:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800f266:	bfac      	ite	ge
 800f268:	6563      	strge	r3, [r4, #84]	; 0x54
 800f26a:	81a3      	strhlt	r3, [r4, #12]
 800f26c:	bd10      	pop	{r4, pc}

0800f26e <__swrite>:
 800f26e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f272:	461f      	mov	r7, r3
 800f274:	898b      	ldrh	r3, [r1, #12]
 800f276:	4605      	mov	r5, r0
 800f278:	05db      	lsls	r3, r3, #23
 800f27a:	460c      	mov	r4, r1
 800f27c:	4616      	mov	r6, r2
 800f27e:	d505      	bpl.n	800f28c <__swrite+0x1e>
 800f280:	2302      	movs	r3, #2
 800f282:	2200      	movs	r2, #0
 800f284:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f288:	f000 f868 	bl	800f35c <_lseek_r>
 800f28c:	89a3      	ldrh	r3, [r4, #12]
 800f28e:	4632      	mov	r2, r6
 800f290:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f294:	81a3      	strh	r3, [r4, #12]
 800f296:	4628      	mov	r0, r5
 800f298:	463b      	mov	r3, r7
 800f29a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f29e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f2a2:	f000 b817 	b.w	800f2d4 <_write_r>

0800f2a6 <__sseek>:
 800f2a6:	b510      	push	{r4, lr}
 800f2a8:	460c      	mov	r4, r1
 800f2aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f2ae:	f000 f855 	bl	800f35c <_lseek_r>
 800f2b2:	1c43      	adds	r3, r0, #1
 800f2b4:	89a3      	ldrh	r3, [r4, #12]
 800f2b6:	bf15      	itete	ne
 800f2b8:	6560      	strne	r0, [r4, #84]	; 0x54
 800f2ba:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800f2be:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800f2c2:	81a3      	strheq	r3, [r4, #12]
 800f2c4:	bf18      	it	ne
 800f2c6:	81a3      	strhne	r3, [r4, #12]
 800f2c8:	bd10      	pop	{r4, pc}

0800f2ca <__sclose>:
 800f2ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f2ce:	f000 b813 	b.w	800f2f8 <_close_r>
	...

0800f2d4 <_write_r>:
 800f2d4:	b538      	push	{r3, r4, r5, lr}
 800f2d6:	4604      	mov	r4, r0
 800f2d8:	4608      	mov	r0, r1
 800f2da:	4611      	mov	r1, r2
 800f2dc:	2200      	movs	r2, #0
 800f2de:	4d05      	ldr	r5, [pc, #20]	; (800f2f4 <_write_r+0x20>)
 800f2e0:	602a      	str	r2, [r5, #0]
 800f2e2:	461a      	mov	r2, r3
 800f2e4:	f7f1 fb37 	bl	8000956 <_write>
 800f2e8:	1c43      	adds	r3, r0, #1
 800f2ea:	d102      	bne.n	800f2f2 <_write_r+0x1e>
 800f2ec:	682b      	ldr	r3, [r5, #0]
 800f2ee:	b103      	cbz	r3, 800f2f2 <_write_r+0x1e>
 800f2f0:	6023      	str	r3, [r4, #0]
 800f2f2:	bd38      	pop	{r3, r4, r5, pc}
 800f2f4:	20001684 	.word	0x20001684

0800f2f8 <_close_r>:
 800f2f8:	b538      	push	{r3, r4, r5, lr}
 800f2fa:	2300      	movs	r3, #0
 800f2fc:	4d05      	ldr	r5, [pc, #20]	; (800f314 <_close_r+0x1c>)
 800f2fe:	4604      	mov	r4, r0
 800f300:	4608      	mov	r0, r1
 800f302:	602b      	str	r3, [r5, #0]
 800f304:	f7f1 fb43 	bl	800098e <_close>
 800f308:	1c43      	adds	r3, r0, #1
 800f30a:	d102      	bne.n	800f312 <_close_r+0x1a>
 800f30c:	682b      	ldr	r3, [r5, #0]
 800f30e:	b103      	cbz	r3, 800f312 <_close_r+0x1a>
 800f310:	6023      	str	r3, [r4, #0]
 800f312:	bd38      	pop	{r3, r4, r5, pc}
 800f314:	20001684 	.word	0x20001684

0800f318 <_fstat_r>:
 800f318:	b538      	push	{r3, r4, r5, lr}
 800f31a:	2300      	movs	r3, #0
 800f31c:	4d06      	ldr	r5, [pc, #24]	; (800f338 <_fstat_r+0x20>)
 800f31e:	4604      	mov	r4, r0
 800f320:	4608      	mov	r0, r1
 800f322:	4611      	mov	r1, r2
 800f324:	602b      	str	r3, [r5, #0]
 800f326:	f7f1 fb3d 	bl	80009a4 <_fstat>
 800f32a:	1c43      	adds	r3, r0, #1
 800f32c:	d102      	bne.n	800f334 <_fstat_r+0x1c>
 800f32e:	682b      	ldr	r3, [r5, #0]
 800f330:	b103      	cbz	r3, 800f334 <_fstat_r+0x1c>
 800f332:	6023      	str	r3, [r4, #0]
 800f334:	bd38      	pop	{r3, r4, r5, pc}
 800f336:	bf00      	nop
 800f338:	20001684 	.word	0x20001684

0800f33c <_isatty_r>:
 800f33c:	b538      	push	{r3, r4, r5, lr}
 800f33e:	2300      	movs	r3, #0
 800f340:	4d05      	ldr	r5, [pc, #20]	; (800f358 <_isatty_r+0x1c>)
 800f342:	4604      	mov	r4, r0
 800f344:	4608      	mov	r0, r1
 800f346:	602b      	str	r3, [r5, #0]
 800f348:	f7f1 fb3b 	bl	80009c2 <_isatty>
 800f34c:	1c43      	adds	r3, r0, #1
 800f34e:	d102      	bne.n	800f356 <_isatty_r+0x1a>
 800f350:	682b      	ldr	r3, [r5, #0]
 800f352:	b103      	cbz	r3, 800f356 <_isatty_r+0x1a>
 800f354:	6023      	str	r3, [r4, #0]
 800f356:	bd38      	pop	{r3, r4, r5, pc}
 800f358:	20001684 	.word	0x20001684

0800f35c <_lseek_r>:
 800f35c:	b538      	push	{r3, r4, r5, lr}
 800f35e:	4604      	mov	r4, r0
 800f360:	4608      	mov	r0, r1
 800f362:	4611      	mov	r1, r2
 800f364:	2200      	movs	r2, #0
 800f366:	4d05      	ldr	r5, [pc, #20]	; (800f37c <_lseek_r+0x20>)
 800f368:	602a      	str	r2, [r5, #0]
 800f36a:	461a      	mov	r2, r3
 800f36c:	f7f1 fb33 	bl	80009d6 <_lseek>
 800f370:	1c43      	adds	r3, r0, #1
 800f372:	d102      	bne.n	800f37a <_lseek_r+0x1e>
 800f374:	682b      	ldr	r3, [r5, #0]
 800f376:	b103      	cbz	r3, 800f37a <_lseek_r+0x1e>
 800f378:	6023      	str	r3, [r4, #0]
 800f37a:	bd38      	pop	{r3, r4, r5, pc}
 800f37c:	20001684 	.word	0x20001684

0800f380 <_malloc_usable_size_r>:
 800f380:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f384:	1f18      	subs	r0, r3, #4
 800f386:	2b00      	cmp	r3, #0
 800f388:	bfbc      	itt	lt
 800f38a:	580b      	ldrlt	r3, [r1, r0]
 800f38c:	18c0      	addlt	r0, r0, r3
 800f38e:	4770      	bx	lr

0800f390 <_read_r>:
 800f390:	b538      	push	{r3, r4, r5, lr}
 800f392:	4604      	mov	r4, r0
 800f394:	4608      	mov	r0, r1
 800f396:	4611      	mov	r1, r2
 800f398:	2200      	movs	r2, #0
 800f39a:	4d05      	ldr	r5, [pc, #20]	; (800f3b0 <_read_r+0x20>)
 800f39c:	602a      	str	r2, [r5, #0]
 800f39e:	461a      	mov	r2, r3
 800f3a0:	f7f1 fabc 	bl	800091c <_read>
 800f3a4:	1c43      	adds	r3, r0, #1
 800f3a6:	d102      	bne.n	800f3ae <_read_r+0x1e>
 800f3a8:	682b      	ldr	r3, [r5, #0]
 800f3aa:	b103      	cbz	r3, 800f3ae <_read_r+0x1e>
 800f3ac:	6023      	str	r3, [r4, #0]
 800f3ae:	bd38      	pop	{r3, r4, r5, pc}
 800f3b0:	20001684 	.word	0x20001684

0800f3b4 <_init>:
 800f3b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f3b6:	bf00      	nop
 800f3b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f3ba:	bc08      	pop	{r3}
 800f3bc:	469e      	mov	lr, r3
 800f3be:	4770      	bx	lr

0800f3c0 <_fini>:
 800f3c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f3c2:	bf00      	nop
 800f3c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f3c6:	bc08      	pop	{r3}
 800f3c8:	469e      	mov	lr, r3
 800f3ca:	4770      	bx	lr
